var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Fastis-Meetup Manager - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"By: `Team W15-B3`      Since: `February 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"image:FASTIS.png[ align\u003d\"center\"] +"},{"lineNumber":21,"author":{"gitID":"-"},"content":"Fastis is a desktop Event Manager application. It has a GUI but most of the user interactions happen + using a CLI (Command Line Interface). This application is for students with group projects to keep track of their teammates\u0027 + timetable, in order to schedule the most suitable meetup time. Users can store person\u0027s timetables, arrange persons in groups and  + generate a suitable meetup time."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":28,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":33,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":43,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"* Some commands have an alias, which you can also use to execute the command e.g. to add a person to the address book, you can type either `add n/John Doe` or `a n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"Alias: `a` +"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS l/TIMETABLE_LINK d/DETAIL [t/TAG]...`"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"A person can have any number of groups (including 0)"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 l/http://modsn.us/MYwiD d/Likes tennis`"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 l/http://modsn.us/56Dn9 d/Likes tennis t/criminal`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"Alias: `l` +"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"Alias: `e` +"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [l/TIMETABLE_LINK] [d/DETAIL] [t/TAG]...`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"* When editing groups, the existing groups of the person will be removed i.e adding of groups is not cumulative."},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"* You can remove all the person\u0027s groups by typing `t/` without specifying any groups after it."},{"lineNumber":97,"author":{"gitID":"-"},"content":"****"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing groups."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"Alias: `f` +"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"****"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":118,"author":{"gitID":"-"},"content":"****"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":123,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":124,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"Alias: `d` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"****"},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":137,"author":{"gitID":"-"},"content":"****"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":145,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"Alias: `s` +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"****"},{"lineNumber":155,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":156,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"Alias: `h` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":178,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Change a group\u0027s color: `changeTagColor`"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"Change a specific group color to one of the supported colors. +"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `color` +"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"Format `changeTagColor TAG COLOR`"},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"* The TAG specified must belong to one of the people in the address book"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"* Available COLORS are: teal, red, yellow, blue, orange, brown, green, pink, black, grey"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"// group::undoredo[]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":195,"author":{"gitID":"nhatquang3112"},"content":"Alias: `u` +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":200,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"Alias: `r` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":239,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a to-do: `addToDo` `v1.2`"},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Adds a to-do to the address book +"},{"lineNumber":246,"author":{"gitID":"jas5469"},"content":"Alias: `aTD` +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"Format: `addToDo CONTENT`"},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":250,"author":{"gitID":"-"},"content":"A to-do should not have an empty content"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `addToDo Do homework before next Wednesday`"},{"lineNumber":255,"author":{"gitID":"-"},"content":"* `aTD Swim like a fish`"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"image:AddToDoCommandExample.png[width\u003d\"500\"] +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Figure 2. Example of to-dos"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Check a to-do as done: `check` `v1.3`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"Checks a to-do in the address book as done +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"Format: `check INDEX`"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"INDEX should not be 0 or larger then the size of the to-do list"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"* `check 1`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Uncheck a to-do as undone: `uncheck` `v1.3`"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Unchecks a to-do in the address book as undone +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"Format: `uncheck INDEX`"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":278,"author":{"gitID":"-"},"content":"INDEX should not be 0 or larger then the size of the to-do list"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"* `uncheck 1`"},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":284,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Group Members: `ListGroupMembers`"},{"lineNumber":285,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":"List out all persons with the given keywords(group tags). +"},{"lineNumber":287,"author":{"gitID":"jas5469"},"content":"Alias: `lgm` +"},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":"Format: `ListGroupMembers INPUT`"},{"lineNumber":289,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":290,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":291,"author":{"gitID":"jas5469"},"content":"* The search is case insensitive. e.g `cs1010` will match `CS1010`"},{"lineNumber":292,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":294,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":295,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":296,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":297,"author":{"gitID":"jas5469"},"content":"* `ListGroupMembers CS3230 CS1010` +"},{"lineNumber":298,"author":{"gitID":"jas5469"},"content":"Returns any person having group tags `CS3230`, `CS1010`"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Refer to Figure 2 for example."},{"lineNumber":300,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":301,"author":{"gitID":"jas5469"},"content":"image:lgmExample.png[width\u003d\"500\"] +"},{"lineNumber":302,"author":{"gitID":"jas5469"},"content":"Figure 2. Example of ListGroupMembers"},{"lineNumber":303,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":304,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Group: `AddGroup`"},{"lineNumber":305,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":306,"author":{"gitID":"jas5469"},"content":"Creates a group named `KEYWORD` +"},{"lineNumber":307,"author":{"gitID":"jas5469"},"content":"Alias: `aG` +"},{"lineNumber":308,"author":{"gitID":"jas5469"},"content":"Format: `aG KEYWORD[KEYWORDS]`"},{"lineNumber":309,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":310,"author":{"gitID":"jas5469"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":312,"author":{"gitID":"jas5469"},"content":"Keyword cannot be an empty input."},{"lineNumber":313,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":314,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":315,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":316,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"* `addGroups CS2101 Oral Presentation` +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"New Group `CS2101 Oral Presentation` added, refer to Figure 3. +"},{"lineNumber":319,"author":{"gitID":"jas5469"},"content":"image:addGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"Figure 3. Example of add Group"},{"lineNumber":321,"author":{"gitID":"jas5469"},"content":"// end:AddGroup[]"},{"lineNumber":322,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":323,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Display Calendar : `display` `[coming in v2.0]`"},{"lineNumber":325,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":326,"author":{"gitID":"jas5469"},"content":"Show all the group meeting in list in Calendar in time order. +"},{"lineNumber":327,"author":{"gitID":"jas5469"},"content":"Alias: `d` +"},{"lineNumber":328,"author":{"gitID":"jas5469"},"content":"Format: `display`"},{"lineNumber":329,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Schedule suitable time : `schedule` `[coming in v2.0]`"},{"lineNumber":331,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":332,"author":{"gitID":"jas5469"},"content":"Compute a time suitable for all group members to meet. +"},{"lineNumber":333,"author":{"gitID":"jas5469"},"content":"Alias: `s` +"},{"lineNumber":334,"author":{"gitID":"jas5469"},"content":"Format: `schedule GROUP`"},{"lineNumber":335,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":336,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":337,"author":{"gitID":"jas5469"},"content":"* GROUP refers the name of group which you want to work with."},{"lineNumber":338,"author":{"gitID":"jas5469"},"content":"* The name of the group entered must already exist in FASTIS or saved by your previously."},{"lineNumber":339,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":340,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Edit a person\u0027s group : `modify` `[coming in v2.0]`"},{"lineNumber":342,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":343,"author":{"gitID":"jas5469"},"content":"Modify the group that the person belongs to. +"},{"lineNumber":344,"author":{"gitID":"jas5469"},"content":"Alias: `m` +"},{"lineNumber":345,"author":{"gitID":"jas5469"},"content":"Format: `modify INDEX`"},{"lineNumber":346,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":347,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":348,"author":{"gitID":"jas5469"},"content":"* INDEX refers to the index of the person you are trying to update his group."},{"lineNumber":349,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":350,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":351,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":355,"author":{"gitID":"nhatquang3112"},"content":"Alias: `c` +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":361,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":366,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"jas5469"},"content":"// group::dataencryption[]"},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"jas5469"},"content":"Personal log in page that requires saved password. +"},{"lineNumber":372,"author":{"gitID":"jas5469"},"content":"Sign up with `username` and `password`. +"},{"lineNumber":373,"author":{"gitID":"jas5469"},"content":"Creation of password should use at least 1 lower case ,1 upper case and 1 number. +"},{"lineNumber":374,"author":{"gitID":"jas5469"},"content":"Sign in with saved username and password to be able to use the secured application. +"},{"lineNumber":375,"author":{"gitID":"jas5469"},"content":"Data files created by FASTIS will be encrypted using the `password` you have provided. +"},{"lineNumber":376,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":381,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d Appendix"},{"lineNumber":384,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":385,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Timetable Links"},{"lineNumber":386,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":387,"author":{"gitID":"Isaaaca"},"content":"Timetable links can be retrieved from the NUSmods website. To retrieve it simply go the the NUSMods website and click the *share* button."},{"lineNumber":388,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"* *AddToDo* `CONTENT` +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"e.g. `addToDo Do home work`"},{"lineNumber":395,"author":{"gitID":"-"},"content":"* *CheckToDo* : `check INDEX` +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"e.g. `check 3`"},{"lineNumber":397,"author":{"gitID":"-"},"content":"* *UnCheckToDo* : `uncheck INDEX` +"},{"lineNumber":398,"author":{"gitID":"-"},"content":"e.g. `uncheck 3`"},{"lineNumber":399,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":400,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":401,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":403,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":405,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":406,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":407,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":408,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":410,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":411,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"nhatquang3112":15,"Isaaaca":6,"jas5469":77,"LeonidAgarth":9,"-":305}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":197}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":98}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        /*getBrowserPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertHelpWindowNotOpen();*/"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":1,"LeonidAgarth":3,"-":89}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_LINK_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TIMETABLE_LINK_DESC_AMY + \" \" + DETAIL_DESC_AMY"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"                + \" \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":114,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":122,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"        except Timetable link -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_BOB).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"        except Detail -\u003e added */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_BOB)"},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":209,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":215,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":"                + INVALID_ADDRESS_DESC + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"Isaaaca"},"content":"        /* Case: invalid timetable link -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + INVALID_TIMETABLE_LINK_DESC + DETAIL_DESC_AMY;"},{"lineNumber":226,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(command, TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":228,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid detail -\u003e rejected */"},{"lineNumber":229,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + INVALID_DETAIL_DESC;"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":234,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":32,"Isaaaca":25,"jas5469":3,"-":251}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    /*public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"    }*/"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"        //getBrowserPanel().rememberUrl();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"        statusBarFooterHandle.rememberTotalPersonsStatus();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /*try {"},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":"            expectedUrl \u003d new URL(BrowserPanel.GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \","},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"                    \"%20\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }*/"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"jas5469"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and the total person"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"     * list remains the same."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"},{"lineNumber":282,"author":{"gitID":"jas5469"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"jas5469"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":290,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":291,"author":{"gitID":"jas5469"},"content":"        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"},{"lineNumber":292,"author":{"gitID":"jas5469"},"content":"        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":307,"author":{"gitID":"jas5469"},"content":"            assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"},{"lineNumber":308,"author":{"gitID":"jas5469"},"content":"                    getStatusBarFooter().getTotalPersonsStatus());"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":34,"LeonidAgarth":8,"-":278}},{"path":"src/test/java/systemtests/AddToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_E;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_E;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoUtil;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public void addToDo() throws Exception {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        /* ------------------------ Perform addToDo operations on the shown unfiltered list ---------------------- */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: add a to-do to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e added"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toAdd \u003d TODO_E;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \"   \" + AddToDoCommand.COMMAND_WORD + \"  \" + CONTENT_E + \" \";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d \"addsToDo \" + ToDoUtil.getToDoDetails(toAdd);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: add a duplicate to-do -\u003e rejected */"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d ToDoUtil.getAddToDoCommand(TODO_E);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"     * Executes the {@code AddToDoCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Result display box displays the success message of executing {@code AddToDoCommand} with the details of"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(ToDo toAdd) {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(ToDoUtil.getAddToDoCommand(toAdd), toAdd);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ToDo)}. Executes {@code command}"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"     * instead."},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddToDoCommandSystemTest#assertCommandSuccess(ToDo)"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, ToDo toAdd) {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.addToDo(toAdd);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dpt) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d String.format(AddToDoCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ToDo)} except asserts that"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * 2. {@code Model}, {@code Storage} and {@code ToDoListPanel} equal to the corresponding components in"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddToDoCommandSystemTest#assertCommandSuccess(String, ToDo)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":55,"jas5469":3,"-":50}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).name;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":169,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":2,"LeonidAgarth":1,"-":192}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"\u003d Fastis-Meetup Manager - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B3/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W15-B3`      Since: `February 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":"image:FASTIS.png[width\u003d\"500\"] +"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"Fastis is a desktop Event Manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). This application is for students with group projects to keep track of their teammates\u0027 timetable, in order to schedule the most suitable meetup time. Users can store person\u0027s timetables, arrange persons in groups and generate a suitable meetup time."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":22,"author":{"gitID":"-"},"content":"The following steps will guide you on the set up of FASTIS."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":45,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":52,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":57,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W15-B3/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W15-B3/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":97,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":105,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":137,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":189,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":192,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":193,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":194,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":205,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":220,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":"// tag::undoredo[]"},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":240,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":251,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":252,"author":{"gitID":"-"},"content":"----"},{"lineNumber":253,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"},{"lineNumber":259,"author":{"gitID":"-"},"content":"----"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":262,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"----"},{"lineNumber":264,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":301,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":310,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":331,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":340,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":350,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":353,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":364,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"nhatquang3112"},"content":"// tag::addToDo[]"},{"lineNumber":367,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d\u003d Add ToDo feature"},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"nhatquang3112"},"content":"The add todos mechanism is facilitated by `AddToDoCommand`, which resides inside `Logic` component. It supports adding ToDo objects to the address book. AddToDoCommand inherits from `UndoableCommand`."},{"lineNumber":371,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":372,"author":{"gitID":"nhatquang3112"},"content":"Hence, AddToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":373,"author":{"gitID":"nhatquang3112"},"content":"With the extra layer, the AddToDoCommand that is undoable is implemented this way:"},{"lineNumber":374,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":375,"author":{"gitID":"-"},"content":"----"},{"lineNumber":376,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":377,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"-"},"content":"}"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommand extends UndoableCommand {"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":389,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"-"},"content":"}"},{"lineNumber":391,"author":{"gitID":"-"},"content":"----"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"nhatquang3112"},"content":"The to-dos in the to-do list are facilitated by `ToDo` class. Each `ToDo` object have a `Content` object, representing the content of the to-do."},{"lineNumber":394,"author":{"gitID":"nhatquang3112"},"content":"Address book stores all to-dos in `UniqueToDoList`."},{"lineNumber":395,"author":{"gitID":"nhatquang3112"},"content":"`ToDo`,`Content` and `UniqueToDoList` class reside inside `Model` component. The following is the class diagram showing the relationship between `ToDo` and `Content`:"},{"lineNumber":396,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":397,"author":{"gitID":"nhatquang3112"},"content":"image::ToDoContentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":398,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":399,"author":{"gitID":"nhatquang3112"},"content":"Suppose that the user has just launched the application. The `UniqueToDoList` in the address book will be empty if no to-dos have been added previously."},{"lineNumber":400,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":401,"author":{"gitID":"nhatquang3112"},"content":"The user executes a new `AddToDoCommand` with `Content`, to add a new to-do to the address book."},{"lineNumber":402,"author":{"gitID":"nhatquang3112"},"content":"The new to-do is added to the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":403,"author":{"gitID":"nhatquang3112"},"content":"The following sequence diagram shows how the addToDo operation works:"},{"lineNumber":404,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":405,"author":{"gitID":"nhatquang3112"},"content":"image::AddToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddToDoCommand`"},{"lineNumber":410,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":411,"author":{"gitID":"nhatquang3112"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeAddToDoCommand()`"},{"lineNumber":412,"author":{"gitID":"nhatquang3112"},"content":"** Pros: We will not lose any addToDo functionality as it is now part of the default behaviour. Classes that deal with `AddToDoCommand` do not have to know that `executeAddToDoCommand()` exist."},{"lineNumber":413,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":414,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":415,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":416,"author":{"gitID":"nhatquang3112"},"content":"** Cons: Classes that inherit from `AddToDoCommand` must remember to call `super.execute()`, or lose the ability to addToDo."},{"lineNumber":417,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":418,"author":{"gitID":"nhatquang3112"},"content":"// end::addToDo[]"},{"lineNumber":419,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"// tag::checkToDo[]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Check/UnCheck ToDo feature"},{"lineNumber":422,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"The check/uncheck todos mechanism is facilitated by `CheckToDoCommand` and `UnCheckToDoCommand`, which resides inside `Logic` component. It supports modifying Status objects within ToDo objects. CheckToDoCommand and UnCheckToDoCommand inherit from `UndoableCommand`."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"Hence, CheckToDoCommand and UnCheckToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":427,"author":{"gitID":"-"},"content":"With the extra layer, the CheckToDoCommand and UnCheckToDoCommand that are undoable are implemented this way:"},{"lineNumber":428,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":429,"author":{"gitID":"-"},"content":"----"},{"lineNumber":430,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":431,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":433,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":437,"author":{"gitID":"-"},"content":"}"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"public class CheckToDoCommand extends UndoableCommand {"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":441,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":442,"author":{"gitID":"-"},"content":"        // ... check to-do logic ..."},{"lineNumber":443,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":444,"author":{"gitID":"-"},"content":"}"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"public class UnCheckToDoCommand extends UndoableCommand {"},{"lineNumber":447,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":448,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":449,"author":{"gitID":"-"},"content":"        // ... uncheck to-do logic ..."},{"lineNumber":450,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":451,"author":{"gitID":"-"},"content":"}"},{"lineNumber":452,"author":{"gitID":"-"},"content":"----"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"Similar to `Content` object, each `ToDo` object have a `Status` object, representing the status of the to-do."},{"lineNumber":455,"author":{"gitID":"-"},"content":"The status of a to-do can be either `done` or `undone`."},{"lineNumber":456,"author":{"gitID":"-"},"content":"`Status` class resides inside `Model` component. The following is the class diagram showing the relationship between `ToDo` and `Status`:"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"image::ToDoStatusClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"When user check/uncheck an existing to-do if specific `Index`, a new `ToDo` is created, with the existing `ToDo`\u0027s `Content` and appropriate new `Status`."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"The existing to-do is replaced by the new to-do in the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddToDoCommand`"},{"lineNumber":467,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new method `setStatus(Status newStatus)` in `ToDo`"},{"lineNumber":469,"author":{"gitID":"-"},"content":"** Pros: We do not need to create a new `ToDo` object to replace the existing to-do."},{"lineNumber":470,"author":{"gitID":"-"},"content":"** Cons: The implementation does not follow the Single Responsibility Principle."},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"// end::checkToDo[]"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":480,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":486,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":488,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d NUSmods Integration"},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"Isaaaca"},"content":"Fastis uses the available `NUSmods API` to retrieve module information from the API server."},{"lineNumber":499,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":500,"author":{"gitID":"Isaaaca"},"content":"On startup, the network component makes a connection to the API server and checks the `lastmodified` field of the `JSON` file on the server. If the `lastmodified` date is more recent that the `JSON` file held in storage, the network component will download and overwrite the existing file on disk."},{"lineNumber":501,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":502,"author":{"gitID":"Isaaaca"},"content":"The `Storage` component then converts the JSON file into a hashMap of modules to be held in the `Model`"},{"lineNumber":503,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":504,"author":{"gitID":"Isaaaca"},"content":"When a the schedule of a `Person` is needed, the `Model` component will pass the person\u0027s `TimeTableLink` to the `Network` component. The `Network` component will make a `URLConnection` to the short URL in the `TimeTableLink` to retrieve the query of the full URL."},{"lineNumber":505,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":506,"author":{"gitID":"Isaaaca"},"content":"`QueryParser` then takes the query and parses them into modules and lessons, which get passed back to the `Model` component. `ModelManager` then searches for these modules and lessons and returns a list of `Events`"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storage of Module information"},{"lineNumber":511,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":512,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 1 (current choice):** Store a complete dataset of all modules"},{"lineNumber":513,"author":{"gitID":"Isaaaca"},"content":"** Pros: Information still available offline"},{"lineNumber":514,"author":{"gitID":"Isaaaca"},"content":"** Cons: Requires more memory space"},{"lineNumber":515,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 2:** Store nothing, retrieve only module information of single module each time."},{"lineNumber":516,"author":{"gitID":"Isaaaca"},"content":"** Pros: No storage and small memory needed"},{"lineNumber":517,"author":{"gitID":"Isaaaca"},"content":"** Cons: Reliant on good internet connection"},{"lineNumber":518,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":519,"author":{"gitID":"jas5469"},"content":"//tag::ListGroupMembers[]"},{"lineNumber":520,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Group Members Feature"},{"lineNumber":521,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":522,"author":{"gitID":"jas5469"},"content":"Fastis lists all persons in Fastis that have tags similar to input."},{"lineNumber":523,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":525,"author":{"gitID":"jas5469"},"content":"Fastis uses `ListGroupMembersCommand` ,which resides under `Logic` to facilitate the listing of members under the same"},{"lineNumber":526,"author":{"gitID":"jas5469"},"content":"tag."},{"lineNumber":527,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"image:listGroupMemberSequenceDiagram.png[width\u003d\"800\"] +"},{"lineNumber":529,"author":{"gitID":"jas5469"},"content":"When user types in command line `ListGroupMembers` or `lgm` , Fastis will use the keyword provided to search for the"},{"lineNumber":530,"author":{"gitID":"jas5469"},"content":"group tag and list out all members under the same group tag."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":533,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Use a command to list out the group members."},{"lineNumber":534,"author":{"gitID":"jas5469"},"content":"** Pros: Easy to change the methods called by command."},{"lineNumber":535,"author":{"gitID":"jas5469"},"content":"** Cons: Unable to link to group class."},{"lineNumber":536,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `ListGroupMembersCommand(`"},{"lineNumber":537,"author":{"gitID":"jas5469"},"content":"** Pros: Edit `ListGroupMembersCommand()` easily to suit our needs"},{"lineNumber":538,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":539,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"//tag::Calendar[]"},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Feature"},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"Fastis uses a stand-alone `Calendar` class, adapted from `javafx-calendar` by SirGoose3432 (https://github.com/SirGoose3432/javafx-calendar)."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"Two instances of calendar are implemented:"},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"* A monthly calendar to keep track of upcoming events and deadlines."},{"lineNumber":549,"author":{"gitID":"-"},"content":"* A weekly timetable to facilitate scheduling a suitable meet-up."},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"The current time is retrieved upon startup, and both calendars base on that point in time to display the appropriate time frame."},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"Both calendars utilize the `Event` class to determine which slots in the schedule are occupied."},{"lineNumber":554,"author":{"gitID":"-"},"content":"Users can associate each event to a `Person` or a `Group`, and can modify these events through commands."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"The details of these event, e.g. time, location, people involved, are saved locally in `.xml` file format."},{"lineNumber":557,"author":{"gitID":"-"},"content":"It is also retrieved upon start up by the `Storage` component and saved within the `Model` for the whole process."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"The weekly component of the `Calendar` is dependent on the `NUSMods` component for importing the timetable."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the Calendar"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Implement a stand-alone `Calendar` class"},{"lineNumber":566,"author":{"gitID":"-"},"content":"** Pros:"},{"lineNumber":567,"author":{"gitID":"-"},"content":"*** Easy to manipulate data."},{"lineNumber":568,"author":{"gitID":"-"},"content":"*** Easy to customize apperance."},{"lineNumber":569,"author":{"gitID":"-"},"content":"** Cons:"},{"lineNumber":570,"author":{"gitID":"-"},"content":"*** Implementation is likely not optimized."},{"lineNumber":571,"author":{"gitID":"-"},"content":"*** Might not be aesthetically pleasing."},{"lineNumber":572,"author":{"gitID":"-"},"content":"* **Alternative 2:** Import external libraries/API"},{"lineNumber":573,"author":{"gitID":"-"},"content":"** Choices:"},{"lineNumber":574,"author":{"gitID":"-"},"content":"*** https://developers.google.com/calendar/[Google Calendar API]"},{"lineNumber":575,"author":{"gitID":"-"},"content":"*** https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":576,"author":{"gitID":"-"},"content":"** Pros:"},{"lineNumber":577,"author":{"gitID":"-"},"content":"*** Likely optimized algorithms."},{"lineNumber":578,"author":{"gitID":"-"},"content":"*** Aesthetically pleasing."},{"lineNumber":579,"author":{"gitID":"-"},"content":"** Cons:"},{"lineNumber":580,"author":{"gitID":"-"},"content":"*** Restricted to what the libraries/API offer."},{"lineNumber":581,"author":{"gitID":"-"},"content":"*** Need a firm understanding of the whole API to implement well."},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Event` class"},{"lineNumber":584,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** One `Event` class for both monthly and weekly calendars."},{"lineNumber":585,"author":{"gitID":"-"},"content":"** Pros: The codes are concise and can be used interchangeably."},{"lineNumber":586,"author":{"gitID":"-"},"content":"** Cons: Prone to flawed and buggy implementations where methods are used where they are not supposed to."},{"lineNumber":587,"author":{"gitID":"-"},"content":"* **Alternative 2:** One `Event` interface with 2 classes implementing it accordingly."},{"lineNumber":588,"author":{"gitID":"-"},"content":"** Pros: The codes are modularized and safe from buggy behaviours."},{"lineNumber":589,"author":{"gitID":"-"},"content":"** Cons: There is likely a lot of code to write."},{"lineNumber":590,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":591,"author":{"gitID":"jas5469"},"content":"// tag::addGroup[]"},{"lineNumber":592,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Group feature"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"Fastis adds a group named by the user from input."},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"jas5469"},"content":"The add groups mechanism is facilitated by `AddGroupCommand`, which resides inside `Logic` component. It supports adding Group objects to the address book. AddGroupCommand inherits from `UndoableCommand`."},{"lineNumber":599,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":600,"author":{"gitID":"jas5469"},"content":"Hence, AddGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":601,"author":{"gitID":"jas5469"},"content":"With the extra layer, the AddGroupCommand that is undoable is implemented this way:"},{"lineNumber":602,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":603,"author":{"gitID":"-"},"content":"----"},{"lineNumber":604,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":605,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":606,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":607,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":610,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":611,"author":{"gitID":"-"},"content":"}"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommand extends UndoableCommand {"},{"lineNumber":614,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":615,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":616,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":617,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":618,"author":{"gitID":"-"},"content":"}"},{"lineNumber":619,"author":{"gitID":"-"},"content":"----"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"jas5469"},"content":"The groups in the group list are facilitated by `Group` class. Each `Group` object have a `Information` object, representing the information of the group."},{"lineNumber":622,"author":{"gitID":"jas5469"},"content":"Address book stores all groups in `UniqueGroupList`."},{"lineNumber":623,"author":{"gitID":"jas5469"},"content":"`Group`,`Information` and `UniqueGroupList` class reside inside `Model` component. The following is the class diagram showing the relationship between `Group` and `Information`:"},{"lineNumber":624,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":625,"author":{"gitID":"jas5469"},"content":"image:GroupInformationClassDiagram.png[width \u003d\"800\"]"},{"lineNumber":626,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":627,"author":{"gitID":"jas5469"},"content":"Suppose that the user has just launched the application. The `UniqueGroupList` in the address book will be empty if no groups have been added before."},{"lineNumber":628,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":629,"author":{"gitID":"jas5469"},"content":"The user executes a new `AddGroupCommand` with `Information`, to add a new group to the address book."},{"lineNumber":630,"author":{"gitID":"jas5469"},"content":"The new group is added to the `UniqueGroupList` and the current state of the address book is saved."},{"lineNumber":631,"author":{"gitID":"jas5469"},"content":"The following sequence diagram shows how the addGroup operation works:"},{"lineNumber":632,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":633,"author":{"gitID":"jas5469"},"content":"image:AddGroupSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddGroupCommand`"},{"lineNumber":638,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new command method `AddGroupCommand()`"},{"lineNumber":639,"author":{"gitID":"-"},"content":"** Pros: It is easy for developers to modify method to suit what they want"},{"lineNumber":640,"author":{"gitID":"-"},"content":"* **Alternative 2:** Add a new abstract method `executeAddGroupCommand()`"},{"lineNumber":641,"author":{"gitID":"-"},"content":"** Pros: It is not able to lose any addGroup functionality as it is now part of the default behaviour. Classes that deal with `AddGroupCommand` do not have to know that `executeAddGroupCommand()` exist."},{"lineNumber":642,"author":{"gitID":"-"},"content":"** Cons: It is hard for new developers to understand the template pattern."},{"lineNumber":643,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":644,"author":{"gitID":"jas5469"},"content":"// end::addGroup[]"},{"lineNumber":645,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":646,"author":{"gitID":"jas5469"},"content":"// tag::dataencryption[]"},{"lineNumber":647,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":658,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":663,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":676,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":677,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":678,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":681,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":691,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":696,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":703,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":716,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":717,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":718,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":719,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":720,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":721,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":722,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":723,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":724,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":728,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":731,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":748,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":755,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":756,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":757,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":762,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":786,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":790,"author":{"gitID":"-"},"content":"****"},{"lineNumber":791,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":792,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":793,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":794,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":799,"author":{"gitID":"-"},"content":"****"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"jas5469"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":807,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"jas5469"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":810,"author":{"gitID":"-"},"content":"+"},{"lineNumber":811,"author":{"gitID":"-"},"content":"****"},{"lineNumber":812,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":813,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":814,"author":{"gitID":"jas5469"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":815,"author":{"gitID":"jas5469"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":816,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":817,"author":{"gitID":"jas5469"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":818,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":819,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":820,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":821,"author":{"gitID":"jas5469"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":822,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":823,"author":{"gitID":"-"},"content":"****"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"jas5469"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":831,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"jas5469"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":834,"author":{"gitID":"-"},"content":"+"},{"lineNumber":835,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":836,"author":{"gitID":"-"},"content":"+"},{"lineNumber":837,"author":{"gitID":"jas5469"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":838,"author":{"gitID":"-"},"content":"+"},{"lineNumber":839,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":840,"author":{"gitID":"-"},"content":"+"},{"lineNumber":841,"author":{"gitID":"jas5469"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":842,"author":{"gitID":"-"},"content":"+"},{"lineNumber":843,"author":{"gitID":"-"},"content":"****"},{"lineNumber":844,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":845,"author":{"gitID":"jas5469"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.name)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":846,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":847,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":848,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":849,"author":{"gitID":"jas5469"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":850,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":851,"author":{"gitID":"jas5469"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":852,"author":{"gitID":"-"},"content":"****"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":856,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":857,"author":{"gitID":"-"},"content":"+"},{"lineNumber":858,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":859,"author":{"gitID":"-"},"content":"+"},{"lineNumber":860,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":861,"author":{"gitID":"-"},"content":"+"},{"lineNumber":862,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":863,"author":{"gitID":"-"},"content":"+"},{"lineNumber":864,"author":{"gitID":"-"},"content":"****"},{"lineNumber":865,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":866,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":867,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":868,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":869,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":870,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":871,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":872,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":873,"author":{"gitID":"jas5469"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxAndResultDisplayShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxAndResultDisplayShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":874,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":875,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":876,"author":{"gitID":"-"},"content":"****"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":879,"author":{"gitID":"-"},"content":"+"},{"lineNumber":880,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":881,"author":{"gitID":"-"},"content":"+"},{"lineNumber":882,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":886,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":887,"author":{"gitID":"-"},"content":"+"},{"lineNumber":888,"author":{"gitID":"-"},"content":"****"},{"lineNumber":889,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":890,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":892,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":894,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":895,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":897,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":898,"author":{"gitID":"-"},"content":"****"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":906,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":909,"author":{"gitID":"-"},"content":"+"},{"lineNumber":910,"author":{"gitID":"-"},"content":"****"},{"lineNumber":911,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":912,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":913,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":914,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":915,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":916,"author":{"gitID":"-"},"content":"****"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"jas5469"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":926,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":927,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":932,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":933,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":934,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":939,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":944,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":949,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":952,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":957,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":958,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":963,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":964,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":965,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":968,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":973,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":980,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":985,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":992,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":997,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":998,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1012,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1017,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"Isaaaca"},"content":"*Target user profile*: Computing Students"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"Isaaaca"},"content":"* Have a number of events to keep track of:"},{"lineNumber":1051,"author":{"gitID":"Isaaaca"},"content":"** Talks"},{"lineNumber":1052,"author":{"gitID":"Isaaaca"},"content":"** Career Fairs"},{"lineNumber":1053,"author":{"gitID":"jas5469"},"content":"** Interviewws"},{"lineNumber":1054,"author":{"gitID":"Isaaaca"},"content":"** Consultations"},{"lineNumber":1055,"author":{"gitID":"Isaaaca"},"content":"** etc."},{"lineNumber":1056,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1057,"author":{"gitID":"Isaaaca"},"content":"* Prefer desktop apps over other types"},{"lineNumber":1058,"author":{"gitID":"Isaaaca"},"content":"* Can type fast"},{"lineNumber":1059,"author":{"gitID":"Isaaaca"},"content":"* (Many) prefers typing over mouse input"},{"lineNumber":1060,"author":{"gitID":"Isaaaca"},"content":"* Are reasonably comfortable using CLI apps"},{"lineNumber":1061,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1062,"author":{"gitID":"Isaaaca"},"content":"*Value proposition*: Help students manage the humongous amount of events that they might have"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"jas5469"},"content":"*Feature contribution*"},{"lineNumber":1065,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1066,"author":{"gitID":"jas5469"},"content":"* Detail field for person (minor):"},{"lineNumber":1067,"author":{"gitID":"jas5469"},"content":"** Detail for person is additional information such as remark, hobbies, comments, etc"},{"lineNumber":1068,"author":{"gitID":"jas5469"},"content":"** Detail allows user to add information that does not fall unser categories such as phone, email, etc"},{"lineNumber":1069,"author":{"gitID":"jas5469"},"content":"** Detail allows storing person information to become more flexible"},{"lineNumber":1070,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1071,"author":{"gitID":"jas5469"},"content":"* Timetable link field for person (minor):"},{"lineNumber":1072,"author":{"gitID":"jas5469"},"content":"** Timetable link for person is an NUSMods website link"},{"lineNumber":1073,"author":{"gitID":"jas5469"},"content":"** Timetable link displays the actual link of NUSMods website shown when person is selected"},{"lineNumber":1074,"author":{"gitID":"jas5469"},"content":"** Timetable link allows user to manage NUSMods link of person"},{"lineNumber":1075,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1076,"author":{"gitID":"jas5469"},"content":"* Customizable tags color (minor):"},{"lineNumber":1077,"author":{"gitID":"jas5469"},"content":"** User can set color of specific tags"},{"lineNumber":1078,"author":{"gitID":"jas5469"},"content":"** Customizable tags color allows user to better personalise the application"},{"lineNumber":1079,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1080,"author":{"gitID":"jas5469"},"content":"* Dark color theme for application bar and background (minor):"},{"lineNumber":1081,"author":{"gitID":"jas5469"},"content":"** Application bar and background are changed to dark grey color"},{"lineNumber":1082,"author":{"gitID":"jas5469"},"content":"** Dark color theme makes the application comfortable to use in different light conditions"},{"lineNumber":1083,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1084,"author":{"gitID":"jas5469"},"content":"* Personal To-do list (major):"},{"lineNumber":1085,"author":{"gitID":"jas5469"},"content":"** User can add to-dos, notes, upcomming tasks and organize them in the todo-list"},{"lineNumber":1086,"author":{"gitID":"jas5469"},"content":"** To-do list serves to remind user of important tasks, events in group projects"},{"lineNumber":1087,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1088,"author":{"gitID":"jas5469"},"content":"* Meetup Time Generator (major):"},{"lineNumber":1089,"author":{"gitID":"jas5469"},"content":"** Generator parses information from persons\u0027 NUSMods timetables and generate a suitable project meetup time"},{"lineNumber":1090,"author":{"gitID":"jas5469"},"content":"** Meetup Time Generator allows user to quickly decide meetup time without manually checcking timetables"},{"lineNumber":1091,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1092,"author":{"gitID":"jas5469"},"content":"* Meetup Calendar (major):"},{"lineNumber":1093,"author":{"gitID":"jas5469"},"content":"** User can add meetups with specific start, end time and display meetups on the calendar"},{"lineNumber":1094,"author":{"gitID":"jas5469"},"content":"** Meetup Calendar allows user to visualise and remember upcomming group events/meetups"},{"lineNumber":1095,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1096,"author":{"gitID":"jas5469"},"content":"* Organize persons in groups (major):"},{"lineNumber":1097,"author":{"gitID":"jas5469"},"content":"** User can store specific persons in project groups"},{"lineNumber":1098,"author":{"gitID":"jas5469"},"content":"** User can have a group list and display persons in each group"},{"lineNumber":1099,"author":{"gitID":"jas5469"},"content":"** Groups allows user to manage persons based on the project groups they belongs to"},{"lineNumber":1100,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1110,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student with group project |Add person with project group tag |I know which person belongs to which project groups"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student that is finished with a group project |Delete the group tag of a finished group project| I will not see the group in the application anymore"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who forget teammates’ information |Find a person by name|I can find out more details of the person such as location, contact number"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who made a mistake in recording a group tag |Edit a person’s group tag|I can change the group tag accordingly"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who recorded the wrong personal information |Edit a person|I can correct the details of the person"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who wants to know which teammates are in the project group |Print out the list of teammates under the same group tag |I know which teammates I am meeting"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student with arranged meet-ups  |Add meet-ups with title, time, venue to the calendar |Have the summary of upcoming meet-ups in a quick glance"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student using CLI |Press up button to copy the previous command|I do not need to retype duplicate commands"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student that is involved with multiple groups |search events by its title|I can get details of a particular meet-up"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who wants to arrange meet-ups |Search meet-ups by its title|I can get details such as time and place of a particular meet-up"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"jas5469"},"content":"|`* *` |Student who wants to know the location of teammates |Find the location of teammates’ address via google maps |Decide on a appropriate meeting location for all teammates considering their home address"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student adding teammates’ information |Add the link to teammates’ timetable |I can see teammates’ timetables to arrange meet-ups"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student working with new teammates |Add their contact information |I can contact them if the need arises"},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"LeonidAgarth"},"content":"|`* * *` |user |add info of the members involved in events|So that I know who I would need to talk to"},{"lineNumber":1137,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1138,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student first time using the application |See the usage instructions |Learn how to use the application"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"jas5469"},"content":"|`* *` |Student that does not leave applications open |See an overview of the week’s meetup right away when the application opens |Do not have to type in any commands when I first open the application"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who have unused contacts |Delete a teammate from the application |I can free up storage for my application"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"jas5469"},"content":"|`* * *` |Busy student with busy schedule |Have a reminder of the upcoming project meeting |I can be reminded of impending project with the details of group members printed on it"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"jas5469"},"content":"|`* *` |Student who would like different colours tag for different projects |Have customizable coloured tags for different groups |Easily differentiate the groups via colour tags"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"jas5469"},"content":"|`*` |Student who is too lazy to eyeball through the timetables |Have an appropriate meet-up time generated for a group |I do not have to manually come up with time for meetup"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who created a group |Show teammates from a group |I can see the information of the teammates from the group"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who has multiple group projects |Retrieve a list of all my groups |I can see all my groups at once"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who is finished with a project |Delete everyone in a group in one go |I do not have to delete contacts one by one"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who is too lazy to type |Use a shorter version of a command |Use the app faster"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"jas5469"},"content":"|`*` |Student who uses NUSMODS |Use my nusmods link to add my schedule into Fastis |I don’t have to manually input my timetable"},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"jas5469"},"content":"|`* *` |User with accessibility problems |Increase the font size of the application |I can read and see more easily"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"jas5469"},"content":"|`*` |Students who likes other colours on the interface |Change color scheme |Personalise the app"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"jas5469"},"content":"|`*` |Student who wants to call an absent teammate |Open teammates’ WHATSAPP page within the application e |I can alert teammates of the meeting"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"jas5469"},"content":"|`*` |Student who do not how to reach the destination of the meet-up |Have the venue of the meet-up shown on google map |I can know the direction to the meetup"},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"LeonidAgarth"},"content":"|`*` |user |find the road that travels the shortest distance to the location of event|So that I can rely on the, map while driving"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"|`*` |user |link an event with another |So that events that are related can be linked together so that i know which events are related"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"-"},"content":"|`*` |user |play music fromn address book |So that I can listen to music i want"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"|`*` |user |play videos from youtube |So that I can watch videos i want"},{"lineNumber":1175,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"Isaaaca"},"content":"(For all use cases below, the *System* is the `Fastis` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1185,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Add Meet up"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"Isaaaca"},"content":"1.  User requests to add a meet up by entering information"},{"lineNumber":1190,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis adds the meet up to the calendar"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1197,"author":{"gitID":"Isaaaca"},"content":"* 2a. Meet up clashes with an existing event."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1200,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user and asks for confirmation."},{"lineNumber":1201,"author":{"gitID":"-"},"content":"** 2a2. User enters confirmation."},{"lineNumber":1202,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"Use case resumes from 2."},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1206,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Delete Meet up"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"Isaaaca"},"content":"1.  User requests to lists all meet ups."},{"lineNumber":1211,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis shows all event, listed with indexes."},{"lineNumber":1212,"author":{"gitID":"Isaaaca"},"content":"3.  User requests to delete a specific meet up in the list."},{"lineNumber":1213,"author":{"gitID":"Isaaaca"},"content":"4.  Fastis deletes the meet up."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1220,"author":{"gitID":"Isaaaca"},"content":"* 2a. Calendar is empty."},{"lineNumber":1221,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1223,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that the calendar is empty."},{"lineNumber":1224,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"* 3a. Index given is invalid."},{"lineNumber":1228,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1230,"author":{"gitID":"Isaaaca"},"content":"** 3a1. Fastis notifies user that the index was invalid."},{"lineNumber":1231,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"Use case resumes from 3."},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1235,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Group multiple persons into a group"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"Isaaaca"},"content":"1. User requests to list all persons."},{"lineNumber":1240,"author":{"gitID":"Isaaaca"},"content":"2. Fastis shows all persons, listed with an index."},{"lineNumber":1241,"author":{"gitID":"jas5469"},"content":"3. User requests to add a group tag to a few specified persons on the list."},{"lineNumber":1242,"author":{"gitID":"Isaaaca"},"content":"4. Fastis adds the new group to the group list."},{"lineNumber":1243,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1247,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":1248,"author":{"gitID":"Isaaaca"},"content":"* 2.a Index given is invalid."},{"lineNumber":1249,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":1250,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that the index given was invalid."},{"lineNumber":1251,"author":{"gitID":"Isaaaca"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"Isaaaca"},"content":"Use case resumes from 1."},{"lineNumber":1253,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1254,"author":{"gitID":"Isaaaca"},"content":"[discrete]"},{"lineNumber":1255,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: List all persons/groups"},{"lineNumber":1256,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1257,"author":{"gitID":"Isaaaca"},"content":"*MSS*"},{"lineNumber":1258,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1259,"author":{"gitID":"Isaaaca"},"content":"1.  User requests to list all persons or all groups in Fastis."},{"lineNumber":1260,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis lists all persons or all groups."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1267,"author":{"gitID":"Isaaaca"},"content":"* 2a. The persons list is empty."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1270,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that the persons list is empty."},{"lineNumber":1271,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"jas5469"},"content":"* 2b. No group tags were found."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1277,"author":{"gitID":"Isaaaca"},"content":"** 2b1. Fastis notifies user that no groups were found."},{"lineNumber":1278,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1279,"author":{"gitID":"Isaaaca"},"content":"Use case ends."},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1282,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Delete all persons in a group"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"Isaaaca"},"content":"1.  User requests list all groups."},{"lineNumber":1287,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis shows a list of all groups."},{"lineNumber":1288,"author":{"gitID":"Isaaaca"},"content":"3. User requests to delete all persons in a specific group in the list"},{"lineNumber":1289,"author":{"gitID":"jas5469"},"content":"4. Fastis deletes all persons in the group, and deletes the group tag"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1296,"author":{"gitID":"Isaaaca"},"content":"* 2a. The list is empty."},{"lineNumber":1297,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1299,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that no groups were found."},{"lineNumber":1300,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"Isaaaca"},"content":"* 3a. The given index is invalid."},{"lineNumber":1304,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1306,"author":{"gitID":"Isaaaca"},"content":"** 3a1. Fastis shows an error message."},{"lineNumber":1307,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1308,"author":{"gitID":"Isaaaca"},"content":"Use case resumes from 2."},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1311,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Show a person\u0027s timetable"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"Isaaaca"},"content":"1.  User requests to show the timetable of the specified person."},{"lineNumber":1316,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis show the timetable for the person."},{"lineNumber":1317,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1323,"author":{"gitID":"Isaaaca"},"content":"* 2a. The specified person has no timetable"},{"lineNumber":1324,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":1325,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies the user that the person has no timetable"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1327,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1330,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Print out all teammates under the same group"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"Isaaaca"},"content":"1.  User requests to list the teammates for a particular group"},{"lineNumber":1335,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis shows the table with group heading and lists all members in it."},{"lineNumber":1336,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1342,"author":{"gitID":"Isaaaca"},"content":"* 2a. There is no such group in Fastis."},{"lineNumber":1343,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1345,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that no group was found."},{"lineNumber":1346,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1347,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Help"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":"1.  User requests to see all commands"},{"lineNumber":1355,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis shows all commands, sorted by name"},{"lineNumber":1356,"author":{"gitID":"-"},"content":"3.  User types in which command they want to view"},{"lineNumber":1357,"author":{"gitID":"Isaaaca"},"content":"4.  Fastis shows the manual of that command"},{"lineNumber":1358,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"* 2a. Command name given is invalid."},{"lineNumber":1365,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1367,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that the command was invalid."},{"lineNumber":1368,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"Use case resumes from 3."},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Copy Previous Command"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"1.  User enters keystroke to navigate to previously entered command"},{"lineNumber":1377,"author":{"gitID":"Isaaaca"},"content":"2.  Fastis copies the previous command into the input field"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"LeonidAgarth"},"content":"[discrete]"},{"lineNumber":1382,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Use case: Change Tag Color"},{"lineNumber":1383,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1384,"author":{"gitID":"LeonidAgarth"},"content":"*MSS*"},{"lineNumber":1385,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1386,"author":{"gitID":"jas5469"},"content":"1. User enter command to change a specific tag color"},{"lineNumber":1387,"author":{"gitID":"LeonidAgarth"},"content":"2. Fastis changes the color accordingly and display it"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1394,"author":{"gitID":"jas5469"},"content":"* 2a. The tag specified doesn\u0027t exist within the address book"},{"lineNumber":1395,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis notifies the user."},{"lineNumber":1396,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1397,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends"},{"lineNumber":1398,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1399,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":1400,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. The color specified is not supported by Fastis"},{"lineNumber":1401,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis notifies the user."},{"lineNumber":1402,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1403,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends"},{"lineNumber":1404,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1405,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1406,"author":{"gitID":"-"},"content":""},{"lineNumber":1407,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1408,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1409,"author":{"gitID":"-"},"content":""},{"lineNumber":1410,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1411,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1412,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1413,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should usable without the need of a mouse."},{"lineNumber":1414,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be usable solely via a command line interface."},{"lineNumber":1415,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should respond within 2 seconds."},{"lineNumber":1416,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should have an easy to follow user guide."},{"lineNumber":1417,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should open the help page when user enters an invalid entry."},{"lineNumber":1418,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be possible to fixed and debugged in the event of malfunction."},{"lineNumber":1419,"author":{"gitID":"-"},"content":""},{"lineNumber":1420,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"LeonidAgarth"},"content":"[[event]] Event::"},{"lineNumber":1432,"author":{"gitID":"LeonidAgarth"},"content":"a set of scheduled activity that user needs to attend at a specific time"},{"lineNumber":1433,"author":{"gitID":"LeonidAgarth"},"content":"E.g.: Interviews, parties, CCAs, talks, coding challenges, assignments, etc"},{"lineNumber":1434,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1435,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1436,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1437,"author":{"gitID":"-"},"content":""},{"lineNumber":1438,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1439,"author":{"gitID":"-"},"content":""},{"lineNumber":1440,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1441,"author":{"gitID":"-"},"content":""},{"lineNumber":1442,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1443,"author":{"gitID":"-"},"content":""},{"lineNumber":1444,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1445,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1450,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1451,"author":{"gitID":"-"},"content":""},{"lineNumber":1452,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1458,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1459,"author":{"gitID":"-"},"content":""},{"lineNumber":1460,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1461,"author":{"gitID":"-"},"content":""},{"lineNumber":1462,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1465,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1466,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1471,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1472,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1481,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1483,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1485,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1486,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"nhatquang3112":31,"Isaaaca":92,"jas5469":132,"LeonidAgarth":31,"-":1210}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":2,"-":151}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"            new NewResultAvailableEvent(\"success\", true);"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"            new NewResultAvailableEvent(\"failure\", false);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        // receiving new results"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"     * Posts the {@code event} to the {@code EventsCenter}, then verifies that \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     *        {@code errorStyleOfResultDisplay} otherwise."},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        postNow(event);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful ? defaultStyleOfResultDisplay : errorStyleOfResultDisplay;"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":32,"-":37}},{"path":"src/test/java/seedu/address/ui/CalendarTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"public class CalendarTest extends GuiUnitTest {"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"        //Current time"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"        Calendar calendar \u003d new Calendar();"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(calendar, new Calendar());"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":12,"-":3}},{"path":"src/test/java/systemtests/CheckToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public void checkToDo() throws Exception {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        Model model \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing check operation while an unfiltered list is being shown --------------------- */"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: check the first to-do in the address book, command with leading space and trailing space and multiple"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        spaces between each field"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e checked"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        Index index \u003d INDEX_FIRST_TODO;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \" \" + CheckToDoCommand.COMMAND_WORD + \" \" + \" \" + index.getOneBased() + \" \";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, checkedToDo);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo checking the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo checking the last to-do in the list -\u003e last to-do checked again */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        model.updateToDo("},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased()), checkedToDo);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid checkToDo operation --------------------------------- */"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" 0\","},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" -1\","},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        int invalidIndex \u003d getModel().getFilteredToDoList().size() + 1;"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD,"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ToDo, Index)} except that"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     * @param toCheck the index of the current model\u0027s filtered list"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Index, ToDo, Index)"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toCheck, ToDo checkedToDo) {"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toCheck, checkedToDo, null);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code CheckToDoCommand}.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the model related components are updated to reflect the to-do at index {@code toCheck} being"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"     * updated to values specified {@code checkedToDo}.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     * @param toCheck the index of the current model\u0027s filtered list."},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toCheck, ToDo checkedToDo,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateToDo("},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"                    expectedModel.getFilteredToDoList().get(toCheck.getZeroBased()), checkedToDo);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException | ToDoNotFoundException e) {"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException("},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"                    \"checkedToDo is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                String.format(CheckToDoCommand.MESSAGE_CHECK_TODO_SUCCESS, checkedToDo), expectedSelectedCardIndex);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":77,"Isaaaca":4,"jas5469":2,"-":83}},{"path":"src/test/java/systemtests/AddGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INFORMATION_A;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupUtil;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public void addGroup() throws Exception {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        /* ------------------------ Perform addGroup operations on the shown unfiltered list ---------------------- */"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        /* Case: add a group to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"         * -\u003e added"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        Group addGroup \u003d GROUP_A;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        String command \u003d \"   \" + AddGroupCommand.COMMAND_WORD + \"  \" + INFORMATION_A + \" \";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, addGroup);"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        command \u003d \"addsGroup \" + GroupUtil.getGroupDetails(addGroup);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        /* Case: add a duplicate group -\u003e rejected */"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        command \u003d GroupUtil.getAddGroupCommand(GROUP_A);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command, AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     * Executes the {@code AddGroupCommand} that adds {@code addGroup} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"     * 3. Result display box displays the success message of executing {@code AddGroupCommand} with the details of"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"     * {@code addGroup}.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"     * the current model added with {@code addGroup}.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(Group addGroup) {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(GroupUtil.getAddGroupCommand(addGroup), addGroup);"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Group)}. Executes {@code command}"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"     * instead."},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     * @see AddGroupCommandSystemTest#assertCommandSuccess(Group)"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(String command, Group addGroup) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"            expectedModel.addGroup(addGroup);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException dpt) {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"            throw new IllegalArgumentException(\"addGroup already exists in the model.\");"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        String expectedResultMessage \u003d String.format(AddGroupCommand.MESSAGE_SUCCESS, addGroup);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Group)} except asserts that"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"     * 2. {@code Model}, {@code Storage} and {@code GroupListPanel} equal to the corresponding components in"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     * @see AddGroupCommandSystemTest#assertCommandSuccess(String, Group)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":63,"-":38}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + \" \" + DETAIL_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":203,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":225,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":229,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":239,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23,"Isaaaca":9,"jas5469":2,"-":262}},{"path":"src/test/java/seedu/address/ui/ToDoListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private static final ObservableList\u003cToDo\u003e TYPICAL_TODOS \u003d"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"            FXCollections.observableList(getTypicalToDos());"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_TODO);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    private ToDoListPanelHandle toDoListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        ToDoListPanel toDoListPanel \u003d new ToDoListPanel(TYPICAL_TODOS);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        uiPartRule.setUiPart(toDoListPanel);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        toDoListPanelHandle \u003d new ToDoListPanelHandle(getChildNode(toDoListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"                ToDoListPanelHandle.TODO_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TODOS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"            toDoListPanelHandle.navigateToCard(TYPICAL_TODOS.get(i));"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"            ToDo expectedToDo \u003d TYPICAL_TODOS.get(i);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"            ToDoCardHandle actualCard \u003d toDoListPanelHandle.getToDoCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"            assertCardDisplaysToDo(expectedToDo, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCardHandle expectedCard \u003d toDoListPanelHandle.getToDoCardHandle(INDEX_SECOND_TODO.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCardHandle selectedCard \u003d toDoListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":34,"-":24}},{"path":"src/test/java/seedu/address/ui/ToDoCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard toDoCard \u003d new ToDoCard(toDo, 1);"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        uiPartRule.setUiPart(toDoCard);"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        assertCardDisplay(toDoCard, toDo, 1);"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard toDoCard \u003d new ToDoCard(toDo, 0);"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        // same to-do, same index -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard copy \u003d new ToDoCard(toDo, 0);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoCard.equals(copy));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoCard.equals(toDoCard));"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(null));"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(0));"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do, same index -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        ToDo differentToDo \u003d new ToDoBuilder().withContent(\"different content\").build();"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(new ToDoCard(differentToDo, 0)));"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        // same to-do, different index -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(new ToDoCard(toDo, 1)));"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * Asserts that {@code toDoCard} displays the details of {@code expectedToDo} correctly and matches"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedId}."},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCardDisplay(ToDoCard toDoCard, ToDo expectedToDo, int expectedId) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCardHandle toDoCardHandle \u003d new ToDoCardHandle(toDoCard.getRoot());"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        // verify id is displayed correctly"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", toDoCardHandle.getId());"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        // verify to-do details are displayed correctly"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertCardDisplaysToDo(expectedToDo, toDoCardHandle);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":60,"-":5}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * For {@code PersonCardHandle}"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * For {@code ToDoCardHandle}"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public static void assertCardEquals(ToDoCardHandle expectedCard, ToDoCardHandle actualCard) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedCard.getContent(), actualCard.getContent());"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedCard.getStatus(), actualCard.getStatus());"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedToDo}."},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    public static void assertCardDisplaysToDo(ToDo expectedToDo, ToDoCardHandle actualCard) {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedToDo.getContent().value, actualCard.getContent());"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedToDo.getStatus().value, actualCard.getStatus());"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the color style for {@code name}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        switch (tagName) {"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        case \"classmates\":"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        case \"owesMoney\":"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        case \"CS3230\":"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"            return \"teal\";"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        case \"colleagues\":"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        case \"neighbours\":"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"            return \"yellow\";"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        case \"family\":"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        case \"friend\":"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"            return \"orange\";"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        case \"friends\":"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"            return \"brown\";"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        case \"husband\":"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"            return \"grey\";"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        default:"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"            return \"\";"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"     * color."},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"                .map(tag -\u003e tag.name).collect(Collectors.toList());"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":18,"jas5469":55,"LeonidAgarth":2,"-":74}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    // check CommandBoxTest"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"jas5469":13,"-":159}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.GOOGLE_SEARCH_URL_PREFIX + ALICE.getName().fullName.replaceAll"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"                (\" \", \"%20\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":47}},{"path":"src/test/java/seedu/address/commons/util/JsonUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.SerializableTestClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File SERIALIZATION_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"serialize.json\"));"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    private static final File SERIALIZATION_ARRAY_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder("},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"            \"serializeArray.json\"));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    public void deserializeArrayFromJsonFile_noExceptionThrown() throws DataConversionException, IOException {"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"        FileUtil.writeToFile(SERIALIZATION_ARRAY_FILE, \"[\" + SerializableTestClass.JSON_STRING_REPRESENTATION"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"                + \",\" + SerializableTestClass.JSON_STRING_REPRESENTATION + \"]\");"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        List\u003cSerializableTestClass\u003e serializableTestClassList \u003d JsonUtil"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"                .readJsonArrayFromFile(SERIALIZATION_ARRAY_FILE.getPath(), SerializableTestClass.class);"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        List\u003cSerializableTestClass\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"        SerializableTestClass serializableTestClass1 \u003d new SerializableTestClass();"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        SerializableTestClass serializableTestClass2 \u003d new SerializableTestClass();"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        serializableTestClass1.setTestValues();"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        serializableTestClass2.setTestValues();"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"        expected.add(serializableTestClass1);"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"        expected.add(serializableTestClass2);"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expected.size(), serializableTestClassList.size());"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"        for (int i \u003d 0; i \u003c expected.size(); i++) {"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"            SerializableTestClass expectedObject \u003d expected.get(i);"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"            SerializableTestClass actualObject \u003d serializableTestClassList.get(i);"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getName(), actualObject.getName());"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getListOfLocalDateTimes(), actualObject.getListOfLocalDateTimes());"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getMapOfIntegerToString(), actualObject.getMapOfIntegerToString());"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":33,"-":45}},{"path":"src/test/java/seedu/address/database/DatabaseManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"public class DatabaseManagerTest {"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    private DatabaseManager test \u003d DatabaseManager.getInstance();"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    public void getQuery() {"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"        String actual \u003d test.getQuery(new TimeTableLink(\"http://modsn.us/MYwiD\"));"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(\"CS2101\u003dSEC:3\u0026CS2103T\u003dTUT:T3\u0026CS2105\u003dLEC:1,TUT:7\u0026CS3242\u003dLEC:1,TUT:3\u0026ST2334\u003dLEC:SL1,TUT:T4\","},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"                actual);"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"        actual \u003d test.getQuery(new TimeTableLink(\"http://modsn.us/MYwid\"));"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(null,"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"                actual);"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    public void parseQuery() {"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        test.parseEvents(new TimeTableLink(\"http://modsn.us/MYwiD\"));"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":28}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"        assertNotNull(AppUtil.getImage(\"/images/FASTIS.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":1,"-":46}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"            new AddressBookBuilder().withPerson(ALICE).build());"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_PERSONS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"                String.format(TOTAL_PERSONS_STATUS, INITIAL_TOTAL_PERSONS));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"                String.format(TOTAL_PERSONS_STATUS, EVENT_STUB.data.getPersonList().size()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches that of"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     * {@code expectedTotalPersonsStatus}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                                        String expectedTotalPersonsStatus) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedTotalPersonsStatus, statusBarFooterHandle.getTotalPersonsStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":17,"-":68}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    private static final String VALID_LINK \u003d \"http://modsn.us/abcdef\";"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    private static final String VALID_DETAIL \u003d \"Likes tennis\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"Isaaaca":1,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/UnCheckToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * outside of the UnCheckToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * same path through the UnCheckToDoCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private UnCheckToDoCommandParser parser \u003d new UnCheckToDoCommandParser();"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_validArgs_returnsUnCheckToDoCommand() {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, \"1\", new UnCheckToDoCommand(INDEX_FIRST_TODO));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure("},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":18,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/ChangeTagColorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_COLOR;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * Tests for the parsing of input arguments and creating a new ChangeTagColorCommand object"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTagColorCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private ChangeTagColorCommandParser parser \u003d new ChangeTagColorCommandParser();"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        // no color specified"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        // no field specified"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        // unsupported color specified"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + INVALID_TAG_COLOR,"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"                Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid tag name"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_TAG_DESC + \" \" + VALID_TAG_COLOR_RED,"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_validValue_success() {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        // unsupported color specified"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_COLOR_RED,"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"                new ChangeTagColorCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED));"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":42,"-":12}},{"path":"src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFORMATION;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        Group expectedGroup \u003d new GroupBuilder().withInformation(VALID_INFORMATION).build();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        // whitespace only preamble"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_INFORMATION,"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"                new AddGroupCommand(expectedGroup));"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        // valid content"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, VALID_INFORMATION,"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                new AddGroupCommand(expectedGroup));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        // missing content"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, PREAMBLE_WHITESPACE,"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                expectedMessage);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        // invalid content"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_INFORMATION,"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"                Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":9,"jas5469":24,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_addGroup() throws Exception {"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_WORD"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                + \" \" + group.getInformation());"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        assertEquals(new AddGroupCommand(group), command);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_addGroupAlias() throws Exception {"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_ALIAS"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"                + \" \" + group.getInformation());"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        assertEquals(new AddGroupCommand(group), command);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":120,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":169,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":180,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_listGroupMembers() throws Exception {"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"CS3230\");"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d (ListGroupMembersCommand) parser.parseCommand("},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"                ListGroupMembersCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":"        assertEquals(new ListGroupMembersCommand(new TagContainKeywordsPredicate(keywords)), command);"},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_listGroupMembersAlias() throws Exception {"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"CS3230\");"},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d (ListGroupMembersCommand) parser.parseCommand("},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"                ListGroupMembersCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"        assertEquals(new ListGroupMembersCommand(new TagContainKeywordsPredicate(keywords)), command);"},{"lineNumber":197,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":199,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":236,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":237,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":46,"jas5469":39,"-":167}},{"path":"src/test/java/systemtests/UnCheckToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public void unCheckToDo() throws Exception {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        Model model \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing uncheck operation while an unfiltered list is being shown --------------------*/"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: uncheck the first to-do in the address book, command with leading space and trailing space and multiple"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        spaces between each field"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e unchecked"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        Index index \u003d INDEX_FIRST_TODO;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \" \" + UnCheckToDoCommand.COMMAND_WORD + \" \" + \" \" + index.getOneBased() + \" \";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, unCheckedToDo);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo unchecking the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo unchecking the last to-do in the list -\u003e last to-do unchecked again */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        model.updateToDo("},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased()), unCheckedToDo);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid UnCheckToDo operation --------------------------------*/"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" 0\","},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" -1\","},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        int invalidIndex \u003d getModel().getFilteredToDoList().size() + 1;"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD,"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ToDo, Index)} except that"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     * @param toUnCheck the index of the current model\u0027s filtered list"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * @see UnCheckToDoCommandSystemTest#assertCommandSuccess(String, Index, ToDo, Index)"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toUnCheck, ToDo unCheckedToDo) {"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toUnCheck, unCheckedToDo, null);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code UnCheckToDoCommand}.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the model related components are updated to reflect the to-do at index {@code toUnCheck} being"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"     * updated to values specified {@code unCheckedToDo}.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     * @param toUnCheck the index of the current model\u0027s filtered list."},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     * @see UnCheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toUnCheck, ToDo unCheckedToDo,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateToDo("},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"                    expectedModel.getFilteredToDoList().get(toUnCheck.getZeroBased()), unCheckedToDo);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException | ToDoNotFoundException e) {"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException("},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"                    \"unCheckedToDo is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                String.format("},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                        UnCheckToDoCommand.MESSAGE_UNCHECK_TODO_SUCCESS, unCheckedToDo), expectedSelectedCardIndex);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":78,"Isaaaca":4,"jas5469":2,"-":83}},{"path":"src/test/java/seedu/address/logic/parser/CheckToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * outside of the CheckToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * same path through the CheckToDoCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private CheckToDoCommandParser parser \u003d new CheckToDoCommandParser();"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_validArgs_returnsCheckToDoCommand() {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, \"1\", new CheckToDoCommand(INDEX_FIRST_TODO));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":17,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_LINK_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"                        + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY)"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_AMY).withTags().build();"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":119,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"        // missing link prefix"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"                + VALID_TIMETABLE_LINK_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        // missing detail prefix"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + VALID_DETAIL_BOB, expectedMessage);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"                + VALID_TIMETABLE_LINK_BOB + VALID_DETAIL_BOB, expectedMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":"        // invalid link"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_TIMETABLE_LINK_DESC + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"                TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"        // invalid detail"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + INVALID_DETAIL_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":"                Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"                        + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":51,"Isaaaca":19,"-":120}},{"path":"src/test/java/seedu/address/logic/parser/AddToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommandParser parser \u003d new AddToDoCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        ToDo expectedToDo \u003d new ToDoBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        // whitespace only preamble"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_CONTENT,"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"                new AddToDoCommand(expectedToDo));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        // valid content"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, VALID_CONTENT,"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"                new AddToDoCommand(expectedToDo));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        // missing content"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, PREAMBLE_WHITESPACE,"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                expectedMessage);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        // invalid content"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, INVALID_CONTENT,"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"                Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":35,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/ListGroupMembersCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    private ListGroupMembersCommandParser parser \u003d new ListGroupMembersCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"                ListGroupMembersCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public void parse_validArgs_returnsListGroupMembersCommand() {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand expectedListGroupMembersCommand \u003d"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"                new ListGroupMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(\"friends\", \"CS3230\")));"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \"friends CS3230\", expectedListGroupMembersCommand);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t CS3230  \\t\", expectedListGroupMembersCommand);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":22,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_F1;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_NDP;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_NDP;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_F1;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_NDP;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_F1;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_NDP;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_F1;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_NDP;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_VENUE_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_NDP;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        Event expectedEvent \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).withVenue(VALID_EVENT_VENUE_NDP)"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_NDP).withStartTime(VALID_EVENT_START_TIME_NDP)"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_NDP).build();"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        // whitespace only preamble"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple names - last name accepted"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_F1 + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple venues - last venue accepted"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_F1 + EVENT_VENUE_DESC_NDP"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple dates - last date accepted"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_F1"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple start times - last time accepted"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_F1 + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple tags - all accepted"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        Event expectedEventMultipleTags \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP)"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"                .withVenue(VALID_EVENT_VENUE_NDP).withDate(VALID_EVENT_DATE_NDP)"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_NDP).withEndTime(VALID_EVENT_END_TIME_NDP).build();"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEventMultipleTags));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        // missing name prefix"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        // missing venue prefix"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + VALID_EVENT_VENUE_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        // missing date prefix"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + VALID_EVENT_DATE_NDP"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        // missing start time prefix"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"                + VALID_EVENT_START_TIME_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        // missing end time prefix"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + VALID_EVENT_END_TIME_NDP, expectedMessage);"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        // all prefixes missing"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME_NDP + VALID_EVENT_VENUE_NDP + VALID_EVENT_DATE_NDP"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"                + VALID_EVENT_START_TIME_NDP + VALID_EVENT_END_TIME_NDP, expectedMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid venue"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + INVALID_EVENT_VENUE_DESC + EVENT_DATE_DESC_NDP"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid date"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + INVALID_EVENT_DATE_DESC"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid start time"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"                        + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid link"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + INVALID_EVENT_END_TIME_DESC,"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"                + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_NDP, Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"        // non-empty preamble"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":118,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TIMETABLE_LINK_AMY \u003d \"http://modsn.us/hwWlG\";"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TIMETABLE_LINK_BOB \u003d \"http://modsn.us/d8zfG\";"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_DETAIL_AMY \u003d \"Likes boy\";"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_DETAIL_BOB \u003d \"Likes girl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_TAG_COLOR_RED \u003d \"red\";"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"UNUSED\"; //for testing only, do not use to build person"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_NAME_F1 \u003d \"F1 Race\";"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_NAME_NDP \u003d \"National Day Parade\";"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_VENUE_F1 \u003d \"Marina Bay\";"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_VENUE_NDP \u003d \"Promenade\";"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_DATE_F1 \u003d \"19/07/2018\";"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_DATE_NDP \u003d \"09/08/2018\";"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_START_TIME_F1 \u003d \"1000\";"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_START_TIME_NDP \u003d \"1700\";"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_END_TIME_F1 \u003d \"1300\";"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_END_TIME_NDP \u003d \"1900\";"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"    public static final String TIMETABLE_LINK_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE_LINK + VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"    public static final String TIMETABLE_LINK_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE_LINK + VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_DESC_AMY \u003d \" \" + PREFIX_DETAIL + VALID_DETAIL_AMY;"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_DESC_BOB \u003d \" \" + PREFIX_DETAIL + VALID_DETAIL_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_NAME_DESC_F1 \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_F1;"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_NAME_DESC_NDP \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_NDP;"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_VENUE_DESC_F1 \u003d \" \" + PREFIX_VENUE + VALID_EVENT_VENUE_F1;"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_VENUE_DESC_NDP \u003d \" \" + PREFIX_VENUE + VALID_EVENT_VENUE_NDP;"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_DATE_DESC_F1 \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_F1;"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_DATE_DESC_NDP \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_NDP;"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_START_TIME_DESC_F1 \u003d \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_F1;"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_START_TIME_DESC_NDP \u003d \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_NDP;"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_END_TIME_DESC_F1 \u003d \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_F1;"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_END_TIME_DESC_NDP \u003d \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_NDP;"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"    public static final String INVALID_TIMETABLE_LINK_DESC \u003d \" \" + PREFIX_TIMETABLE_LINK"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"            + \"https:modn.us/aoubo\"; //URL head not correct"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_DETAIL_DESC \u003d \" \" + PREFIX_DETAIL"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"            + \"Likes \u0026\"; //\u0027\u0026\u0027 not allowed in detail"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_TAG_COLOR \u003d \" rainbow\"; // doesn\u0027t support"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Something\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"where!?!\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2018-03-28\"; // not DD/MM/YYYY format"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"2369\"; // wrong minute"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"23:59\";    // not HHmm format"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_E \u003d \"ToDo E\";"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_B \u003d \"ToDo B\";"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_CONTENT \u003d \"Something to do\";"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_CONTENT \u003d \"Something to do\u0026\"; // \u0027\u0026\u0027 not allowed in contents"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_STATUS_DONE \u003d \"done\";"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_STATUS_UNDONE \u003d \"undone\";"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_STATUS \u003d \"invalid status\";"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"    public static final String INFORMATION_A \u003d \"Group A\";"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"    public static final String VALID_INFORMATION \u003d \"GROUP A\";"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"    public static final String INVALID_INFORMATION \u003d \"Group! A\"; //\u0027!\u0027 not supported in information"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":163,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":18,"Isaaaca":8,"jas5469":3,"LeonidAgarth":35,"-":155}},{"path":"src/test/java/seedu/address/logic/commands/ChangeTagColorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":" * and unit tests for ChangeTagColorCommand."},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandTest {"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private Model model;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_correctFields_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(ChangeTagColorCommand.MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        Tag oldTag \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        Tag newTag \u003d new Tag(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel.updateTag(oldTag, newTag);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_tagNameNotInList_failure() throws Exception {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d prepareCommand(VALID_TAG_HUSBAND, VALID_TAG_COLOR_RED);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, model, ChangeTagColorCommand.MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    private ChangeTagColorCommand prepareCommand(String name, String color) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d new ChangeTagColorCommand(name, color);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":36,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        new AddEventCommand(null);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        CommandResult commandResult \u003d getAddEventCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        getAddEventCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race \u003d new EventBuilder().build();"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        Event iLight \u003d new Event(\"iLight\", \"Marina Bay\", \"01/04/2018\", \"1930\", \"2359\");"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addF1Command \u003d new AddEventCommand(f1Race);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addILightCommand \u003d new AddEventCommand(iLight);"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(addF1Command.equals(addF1Command));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addF1CommandCopy \u003d new AddEventCommand(f1Race);"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(addF1Command.equals(addF1CommandCopy));"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(1));"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(null));"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        // different event -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(addILightCommand));"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"     * Generates a new AddEventCommand with the details of the given event."},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    private AddEventCommand getAddEventCommandForEvent(Event event, Model model) {"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        ) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo) throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"     * A Model stub that always throw a DuplicateEventException when trying to add a event."},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"    private class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"            requireNonNull(event);"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"            eventsAdded.add(event);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":5,"Isaaaca":4,"jas5469":4,"LeonidAgarth":103,"-":105}},{"path":"src/test/java/seedu/address/logic/commands/AddToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_nullToDo_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        new AddToDoCommand(null);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        ModelStubAcceptingToDoAdded modelStub \u003d new ModelStubAcceptingToDoAdded();"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        CommandResult commandResult \u003d getAddToDoCommandForToDo(validToDo, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(String.format(AddToDoCommand.MESSAGE_SUCCESS, validToDo), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Arrays.asList(validToDo), modelStub.todosAdded);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_duplicateToDo_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateToDoException();"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expectMessage(AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        getAddToDoCommandForToDo(validToDo, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoA \u003d new ToDoBuilder().withContent(\"ToDo A\").build();"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoB \u003d new ToDoBuilder().withContent(\"ToDo B\").build();"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoACommand \u003d new AddToDoCommand(todoA);"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoBCommand \u003d new AddToDoCommand(todoB);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(addToDoACommand.equals(addToDoACommand));"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoACommandCopy \u003d new AddToDoCommand(todoA);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(addToDoACommand.equals(addToDoACommandCopy));"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(addToDoBCommand));"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"     * Generates a new AddToDoCommand with the details of the given to-do."},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommand getAddToDoCommandForToDo(ToDo todo, Model model) {"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d new AddToDoCommand(todo);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        ) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateToDoException {"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"     * A Model stub that always throw a DuplicateToDoException when trying to add a to-do."},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"nhatquang3112"},"content":"    private class ModelStubThrowingDuplicateToDoException extends ModelStub {"},{"lineNumber":193,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":195,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"     * A Model stub that always accept the to-do being added."},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"    private class ModelStubAcceptingToDoAdded extends ModelStub {"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"        final ArrayList\u003cToDo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":212,"author":{"gitID":"nhatquang3112"},"content":"            requireNonNull(todo);"},{"lineNumber":213,"author":{"gitID":"nhatquang3112"},"content":"            todosAdded.add(todo);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":99,"Isaaaca":4,"jas5469":4,"LeonidAgarth":10,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/CheckToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":" * {@code CheckToDoCommand}."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(CheckToDoCommand.MESSAGE_CHECK_TODO_SUCCESS, toDoToCheck);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(checkToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(checkToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        // check -\u003e first to-do checked"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoCommand.execute();"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(checkToDoCommand);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do checked again"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e checkToDoCommand not pushed into undoRedoStack"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(checkToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoFirstCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoSecondCommand \u003d prepareCommand(INDEX_SECOND_TODO);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(checkToDoFirstCommand.equals(checkToDoFirstCommand));"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(checkToDoFirstCommand.equals(checkToDoFirstCommandCopy));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(checkToDoFirstCommandCopy));"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(1));"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(null));"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        // different person -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(checkToDoSecondCommand));"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a {@code CheckToDoCommand} with the parameter {@code index}."},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    private CheckToDoCommand prepareCommand(Index index) {"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d new CheckToDoCommand(index);"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        return checkToDoCommand;"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":68,"-":59}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        ) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateToDoException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":13,"Isaaaca":4,"jas5469":4,"LeonidAgarth":8,"-":192}},{"path":"src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public void constructor_nullGroup_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        new AddGroupCommand(null);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().build();"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        CommandResult commandResult \u003d getAddGroupCommandForGroup(validGroup, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    public void execute_duplicateGroup_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateGroupException();"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().build();"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        getAddGroupCommandForGroup(validGroup, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        Group groupA \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        Group groupB \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupACommand \u003d new AddGroupCommand(groupA);"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupBCommand \u003d new AddGroupCommand(groupB);"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        assertTrue(addGroupACommand.equals(addGroupACommand));"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupACommandCopy \u003d new AddGroupCommand(groupA);"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        assertTrue(addGroupACommand.equals(addGroupACommandCopy));"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        // different group -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(addGroupBCommand));"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"     * Generates a new AddGroupCommand with the details of the given group."},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    private AddGroupCommand getAddGroupCommandForGroup(Group group, Model model) {"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d new AddGroupCommand(group);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"        public void addToDo(ToDo todos) throws DuplicateToDoException {"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        ) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateToDoException {"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always throw a DuplicateGroupException when trying to add a group."},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"    private class ModelStubThrowingDuplicateGroupException extends ModelStub {"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always accept the group being added."},{"lineNumber":206,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"jas5469"},"content":"    private class ModelStubAcceptingGroupAdded extends ModelStub {"},{"lineNumber":208,"author":{"gitID":"jas5469"},"content":"        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":210,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":212,"author":{"gitID":"jas5469"},"content":"            requireNonNull(group);"},{"lineNumber":213,"author":{"gitID":"jas5469"},"content":"            groupsAdded.add(group);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":12,"Isaaaca":4,"jas5469":91,"LeonidAgarth":10,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/AddToDoCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model) for {@code AddToDoCommand}."},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_newToDo_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.addToDo(validToDo);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(prepareCommand(validToDo, model), model,"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"                String.format(AddToDoCommand.MESSAGE_SUCCESS, validToDo), expectedModel);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_duplicateToDo_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoInList \u003d model.getAddressBook().getToDoList().get(0);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(prepareCommand(toDoInList, model), model, AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"     * Generates a new {@code AddToDoCommand} which upon execution, adds {@code todo} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommand prepareCommand(ToDo todo, Model model) {"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d new AddToDoCommand(todo);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":27,"-":28}},{"path":"src/test/java/seedu/address/logic/commands/UnCheckToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":" * {@code UnCheckToDoCommand}."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(UnCheckToDoCommand.MESSAGE_UNCHECK_TODO_SUCCESS, toDoToUnCheck);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(unCheckToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(unCheckToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        // uncheck -\u003e first to-do unchecked"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoCommand.execute();"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(unCheckToDoCommand);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do unChecked again"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e unCheckToDoCommand not pushed into undoRedoStack"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(unCheckToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoFirstCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoSecondCommand \u003d prepareCommand(INDEX_SECOND_TODO);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommand));"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommandCopy));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommandCopy));"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(1));"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(null));"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        // different person -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(unCheckToDoSecondCommand));"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a {@code UnCheckToDoCommand} with the parameter {@code index}."},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    private UnCheckToDoCommand prepareCommand(Index index) {"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d new UnCheckToDoCommand(index);"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        return unCheckToDoCommand;"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":67,"-":60}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    private static final String INVALID_LINK \u003d \"example.com\";"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    private static final String INVALID_DETAIL \u003d \"R@chel\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    private static final String VALID_LINK \u003d BENSON.getTimeTableLink().toString();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private static final String VALID_DETAIL \u003d BENSON.getDetail().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidDetail_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, INVALID_DETAIL,"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Detail.MESSAGE_DETAIL_CONSTRAINTS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullDetail_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, null, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Detail.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_LINK,"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"                VALID_DETAIL, VALID_TAGS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"    public void toModelType_invalidLink_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_LINK, VALID_DETAIL,"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        String expectedMessage \u003d TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"    public void toModelType_nullLink_throwsIllegalValueException() {"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"                VALID_DETAIL, VALID_TAGS);"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeTableLink.class.getSimpleName());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"                        invalidTags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"    public void xmlAdaptedTagEqual() {"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag1 \u003d new XmlAdaptedTag(\"friends\");"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag2 \u003d new XmlAdaptedTag(\"friends\");"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"        Tag tag3 \u003d new Tag(\"friends\");"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag4 \u003d new XmlAdaptedTag(\"husband\");"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, tag2);"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, tag3);"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag2, tag4);"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":31,"Isaaaca":11,"LeonidAgarth":13,"-":116}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedGroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.storage.XmlAdaptedGroup.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"public class XmlAdaptedGroupTest {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public void toModelType_validGroupDetails_returnsGroup() throws Exception {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        assertEquals(GROUP_A, group.toModelType());"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public void toModelType_invalidInformation_throwsIllegalValueException() {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"                new XmlAdaptedGroup(INVALID_INFORMATION);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d Information.MESSAGE_INFORMATION_CONSTRAINTS;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public void toModelType_nullInformation_throwsIllegalValueException() {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup((String) null);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Information.class.getSimpleName());"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup groupA \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup groupB \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupA.equals(groupA));"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupA.equals(1));"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupA.equals(groupB));"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"jas5469":38,"-":7}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void backupAddressBook_typicalAddressBook() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        storageManager.backupAddressBook(original);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook backedUp \u003d storageManager.readAddressBookBackup().get();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(backedUp));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook_withFilePath_typicalAddressBook() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        String filePath \u003d storageManager.getAddressBookFilePath();"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        storageManager.backupAddressBook(original, filePath);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        ReadOnlyAddressBook backedUp \u003d storageManager.readAddressBookBackup(filePath).get();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(backedUp));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":5,"-":118}},{"path":"src/test/java/seedu/address/logic/commands/ListGroupMembersCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":" * Contains integration tests (interaction with the Model) for {@code ListGroupMembersCommand}."},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"                new TagContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"                new TagContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findFirstCommand \u003d new ListGroupMembersCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findSecondCommand \u003d new ListGroupMembersCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findFirstCommandCopy \u003d new ListGroupMembersCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d prepareCommand(\" \");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d prepareCommand(\"CS3230 owesMoney\");"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * Parses {@code userInput} into a {@code ListGroupMembersCommand}."},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    private ListGroupMembersCommand prepareCommand(String userInput) {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                new ListGroupMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(ListGroupMembersCommand command, String expectedMessage,"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"                                      List\u003cPerson\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":29,"-":69}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedToDoTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.storage.XmlAdaptedToDo.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_A;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class XmlAdaptedToDoTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_validToDoDetails_returnsToDo() throws Exception {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todo \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(TODO_A, todo.toModelType());"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidContent_throwsIllegalValueException() {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todo \u003d"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedToDo(INVALID_CONTENT);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Content.MESSAGE_CONTENT_CONSTRAINTS;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, todo::toModelType);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullContent_throwsIllegalValueException() {"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todo \u003d new XmlAdaptedToDo((String) null);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName());"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, todo::toModelType);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todo \u003d new XmlAdaptedToDo(VALID_CONTENT, null);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, todo::toModelType);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todo \u003d"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedToDo(VALID_CONTENT, INVALID_STATUS);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Status.MESSAGE_STATUS_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, todo::toModelType);"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todoA \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo todoB \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(todoA.equals(todoA));"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(todoA.equals(1));"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(todoA.equals(todoB));"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":60,"-":5}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_D;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_E;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void readAddressBookBackup_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        readAddressBookBackup(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBookBackup(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAddressBookBackup_missingFile_emptyResult() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBookBackup(\"NonExistentFile.xml.backup\").isPresent());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":76,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_D);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_E);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void readAndBackupAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        //Backup in new file and read back"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.backupAddressBook(original, filePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBookBackup(filePath).get();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_D);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.backupAddressBook(original, filePath);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBookBackup(filePath).get();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Back and read without specifying file path"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_E);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.backupAddressBook(original); //file path not specified"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBookBackup().get(); //file path not specified"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        backupAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Backs up {@code addressBook} at the specified {@code filePath}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).backupAddressBook(addressBook);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void backupAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        backupAddressBook(new AddressBook(), null);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":6,"-":187}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.storage.XmlAdaptedTag.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedTagTest {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_NAME \u003d \"Something?!\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_COLOR \u003d \"rainbow\";"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_NAME \u003d VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_COLOR \u003d VALID_TAG_COLOR_RED;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_validTagDetails_returnsTag() throws Exception {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(new Tag(VALID_NAME, VALID_COLOR));"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new Tag(VALID_NAME, VALID_COLOR), tag.toModelType());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(INVALID_NAME);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(null, VALID_COLOR);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\");"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidColor_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedTag(VALID_NAME, INVALID_COLOR);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Tag.MESSAGE_TAG_COLOR_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullColor_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedTag(VALID_NAME, null);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Color\");"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() {"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag1 \u003d new XmlAdaptedTag(VALID_TAG_FRIEND);"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag2 \u003d new XmlAdaptedTag(VALID_TAG_HUSBAND, VALID_COLOR);"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, tag1);"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, new XmlAdaptedTag(VALID_TAG_FRIEND));"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, 1);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, tag2);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":54,"-":14}},{"path":"src/test/java/seedu/address/model/group/InformationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"public class InformationTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Information(null));"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public void constructor_invalidInformation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        String invalidInformation \u003d \"!\";"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Information(invalidInformation));"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public void isValidInformation() {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        // null content"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Information.isValidInformation(null));"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        // invalid content"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"Something to do*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        // valid content"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"hello world\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"hello world the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"Hello World\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    public void isSameInformationHashCode() {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        Information firstInformation \u003d new Information(VALID_CONTENT);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        Information secondInformation \u003d new Information(VALID_CONTENT);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        assertTrue(firstInformation.hashCode() \u003d\u003d secondInformation.hashCode());"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"jas5469":37,"-":11}},{"path":"src/test/java/seedu/address/model/UniqueToDoListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.UniqueToDoList;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class UniqueToDoListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"        UniqueToDoList uniqueToDoList \u003d new UniqueToDoList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"        uniqueToDoList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"-":12}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_F1;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedEventTest {"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_NAME \u003d \"Something?!\";"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_VENUE \u003d \"Some\u0026where\";"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_DATE \u003d \"30/02/2000\";"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_START_TIME \u003d \"2369\";"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_END_TIME \u003d \"23:59\";"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_NAME \u003d VALID_EVENT_NAME_F1;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_VENUE \u003d VALID_EVENT_VENUE_F1;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_DATE \u003d VALID_EVENT_DATE_F1;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_START_TIME \u003d VALID_EVENT_START_TIME_F1;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_END_TIME \u003d VALID_EVENT_END_TIME_F1;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(new EventBuilder().build());"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new EventBuilder().build(), event.toModelType());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(INVALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\");"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidVenue_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, INVALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_VENUE_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullVenue_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, null, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Venue\");"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, INVALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, null, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\");"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, INVALID_START_TIME, VALID_END_TIME);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, null, VALID_END_TIME);"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"StartTime\");"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, INVALID_END_TIME);"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, null);"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EndTime\");"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() {"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event1 \u003d new XmlAdaptedEvent(new EventBuilder().build());"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event2 \u003d new XmlAdaptedEvent(new EventBuilder().withName(\"Different\").build());"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(event1, event1);"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(event1, new XmlAdaptedEvent(new EventBuilder().build()));"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(event1, 1);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(event1, event2);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":110,"-":13}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"public class GroupTest {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"        Group groupA \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"        Group groupB \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupA.equals(1));"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        // same content -\u003e returns true"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupA.hashCode() \u003d\u003d groupB.hashCode());"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":16,"-":6}},{"path":"src/test/java/seedu/address/model/module/ScheduleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"public class ScheduleTest {"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_CLASSNO \u003d \"1\";"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_LESSON_TYPE \u003d \"Lecture\";"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_WEEK_TEXT \u003d \"EVERY WEEK\";"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_DAY_TEXT \u003d \"MONDAY\";"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_START_TIME \u003d \"0000\";"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_END_TIME \u003d \"2359\";"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_VENUE \u003d \"LT17\";"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private Schedule testBlank \u003d new Schedule();"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private Schedule test \u003d new Schedule(DEFAULT_CLASSNO, DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT, DEFAULT_DAY_TEXT,"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"            DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE);"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public void getClassNo() {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getClassNo());"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"1\", test.getClassNo());"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    public void getLessonType() {"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getLessonType());"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"Lecture\", test.getLessonType());"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    public void getWeekText() {"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getWeekText());"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"EVERY WEEK\", test.getWeekText());"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    public void getDayText() {"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getDayText());"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"MONDAY\", test.getDayText());"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    public void getStartTime() {"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getStartTime());"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"0000\", test.getStartTime());"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    public void getEndTime() {"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getEndTime());"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"2359\", test.getEndTime());"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"    public void getVenue() {"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"\", testBlank.getVenue());"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"LT17\", test.getVenue());"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"    public void testToString() {"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"        String expected \u003d \"ClassNo: \" + DEFAULT_CLASSNO"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: \" + DEFAULT_LESSON_TYPE"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: \" + DEFAULT_WEEK_TEXT"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: \" + DEFAULT_DAY_TEXT"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: \" + DEFAULT_START_TIME"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: \" + DEFAULT_END_TIME"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: \" + DEFAULT_VENUE + \"\\n\";"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"        String expectedBlank \u003d \"ClassNo: \""},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: \""},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: \""},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: \""},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: \""},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: \""},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: \" + \"\\n\";"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(expected, test.toString());"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(expectedBlank, testBlank.toString());"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"    public void testEquals() {"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertTrue(test.equals(test));"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertTrue(test.equals(new Schedule(DEFAULT_CLASSNO, DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT,"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"                DEFAULT_DAY_TEXT, DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE)));"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertFalse(test.equals(DEFAULT_LESSON_TYPE));"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertFalse(test.equals(new Schedule(\"4\", DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT,"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"                DEFAULT_DAY_TEXT, DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE)));"},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":93}},{"path":"src/test/java/seedu/address/model/person/TimeTableLinkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"public class TimeTableLinkTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TimeTableLink(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"        String invalidLink \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TimeTableLink(invalidLink));"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"    public void isValidLink() {"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeTableLink.isValidLink(null));"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"MYwiD\")); // missing http://modn.us/ URL head"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modn.nus/\")); // missing trailing part"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"https://modsn.us/MYwiD\")); // https instead of http"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://mods.nus/MYwiD\")); // incorrect URL"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http:// modsn.us/MYwiD\")); // spaces in URL"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYw iD\")); // spaces in trailing part"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\" http://modsn.us/MYwiD\")); // leading space"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYwiD \")); // trailing space"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us//MYwiD\")); // double \u0027/\u0027 symbol"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYw.iD\")); // \u0027.\u0027 symbol in trailing part"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        // valid email"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(TimeTableLink.isValidLink(\"http://modsn.us/MYwiD\"));"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":33,"-":16}},{"path":"src/test/java/seedu/address/model/module/ModuleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"public class ModuleTest {"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_MODULE_CODE \u003d \"CS2013T\";"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_MODULE_TITLE \u003d \"Software Engineering\";"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private static final Module test \u003d new Module(DEFAULT_MODULE_CODE, DEFAULT_MODULE_TITLE, new ArrayList\u003c\u003e());"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public void constructor_nullArgument_throwsNullPointerException() {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        String invalidArg \u003d null;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Module(invalidArg, invalidArg, null));"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    public void getModuleCode() {"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getModuleCode(), DEFAULT_MODULE_CODE);"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    public void getModuleTitle() {"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getModuleTitle(), DEFAULT_MODULE_TITLE);"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    public void getScheduleList() {"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getScheduleList(), new ArrayList\u003c\u003e());"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    public void testToString() {"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.toString(),"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"                \"moduleCode: \" + DEFAULT_MODULE_CODE + \" moduleTitle: \" + DEFAULT_MODULE_TITLE + \"\\n\""},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"                        + new ArrayList\u003c\u003e().toString());"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    public void testEquals() {"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(test.equals(test));"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(test.equals(new Module(DEFAULT_MODULE_CODE, DEFAULT_MODULE_TITLE)));"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(test.equals(new Module(\"CS1101\", DEFAULT_MODULE_TITLE)));"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(test.equals(DEFAULT_MODULE_CODE));"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":52,"-":5}},{"path":"src/test/java/seedu/address/model/person/DetailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class DetailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Detail(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        String invalidDetail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Detail(invalidDetail));"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidDetail() {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        // null detail"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Detail.isValidDetail(null));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        // invalid detail"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"tennis*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        // valid detail"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"likes tennis\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"has 3 dogs\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"Likes tennis\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":24,"-":16}},{"path":"src/test/java/seedu/address/model/todo/ToDoTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoTest {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoA \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"undone\").build();"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoB \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"undone\").build();"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoC \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"done\").build();"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(todoA.equals(1));"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        // same content -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(todoA.hashCode() \u003d\u003d todoB.hashCode());"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        // same content, different status -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(todoA.equals(todoC));"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23,"-":3}},{"path":"src/test/java/seedu/address/model/person/TagContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class TagContainKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicate \u003d new TagContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate secondPredicate \u003d new TagContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicateCopy \u003d new TagContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    public void test_tagContainKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate predicate \u003d new TagContainKeywordsPredicate(Collections.singletonList(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        // Only one matching keyword"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"friends\", \"Carol\"));"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        // Zero keywords"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate predicate \u003d new TagContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        // Non-matching keyword"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"oweMoney\").build()));"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        // Mixed-case keywords"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"FrieNds\"));"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":31,"-":37}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalEvents.F1RACE;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_A;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    private final AddressBook amyNBobAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Collections.emptyList(), addressBook.getToDoList());"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        assertEquals(Collections.emptyList(), addressBook.getGroupList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook newData2 \u003d (AddressBook) SampleDataUtil.getSampleAddressBook();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.resetData(newData2);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(newData2, addressBook);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A);"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"    public void resetData_withDuplicateToDos_throwsAssertionError() {"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        // Repeat TODO_A twice"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A, TODO_A);"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"    public void resetData_withDuplicateGroups_throwsAssertionError() {"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"        // Repeat GROUP_A twice"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A);"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A, GROUP_A);"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    public void getToDoList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.getToDoList().remove(0);"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag_removeNonexistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"        amyNBobAddressBook.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedAddressBook, amyNBobAddressBook);"},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"        amyNBobAddressBook.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"        Person expectedAmy \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"        Person expectedBob \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"                .withPerson(expectedAmy).withPerson(expectedBob).build();"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedAddressBook, amyNBobAddressBook);"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"        private final ObservableList\u003cToDo\u003e todos \u003d FXCollections.observableArrayList();"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"                        Collection\u003cToDo\u003e todos, Collection\u003cGroup\u003e groups, Collection\u003cEvent\u003e events) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"            this.todos.setAll(todos);"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"            this.groups.setAll(groups);"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"            this.events.setAll(events);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getToDoList() {"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":"            return todos;"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":"            return groups;"},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"            return events;"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23,"Isaaaca":29,"jas5469":15,"LeonidAgarth":21,"-":106}},{"path":"src/test/java/seedu/address/model/todo/ContentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class ContentTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Content(null));"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_invalidContent_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        String invalidContent \u003d \"\u0026\";"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidContent));"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidContent() {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        // null content"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        // invalid content"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"Something to do*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        // valid content"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"hello world\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"hello world the 2nd\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"Hello World\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameContentHashCode() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        Content firstContent \u003d new Content(VALID_CONTENT);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        Content secondContent \u003d new Content(VALID_CONTENT);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstContent.hashCode() \u003d\u003d secondContent.hashCode());"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":38,"-":11}},{"path":"src/test/java/seedu/address/model/UniqueGroupListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"public class UniqueGroupListTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList.asObservableList().remove(0);"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList1 \u003d new UniqueGroupList();"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList2 \u003d new UniqueGroupList();"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        assertEquals(uniqueGroupList1.hashCode(), uniqueGroupList2.hashCode());"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":13,"LeonidAgarth":5,"-":11}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    public void deleteTag_nonExistent_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        modelManager.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        modelManager.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"        Person expectedAmy \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        Person expectedBob \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expecetedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"                .withPerson(expectedBob).withPerson(expectedAmy).build();"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"        ModelManager expectedModelManager \u003d new ModelManager(expecetedAddressBook, userPrefs);"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedModelManager, modelManager);"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":31,"-":71}},{"path":"src/test/java/seedu/address/model/todo/StatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_DONE;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_UNDONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class StatusTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Status(null));"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_invalidStatus_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        String invalidStatus \u003d \"invalid status\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Status(invalidStatus));"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidStatus() {"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        // null status"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        // invalid status"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"^\")); // only non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"Some status*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"invalid status\")); // is neither \"done\" or \"undone\""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        // valid status"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Status.isValidStatus(\"done\"));"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Status.isValidStatus(\"undone\"));"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameStatusHashCode() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        Status firstStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        Status secondStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.hashCode() \u003d\u003d secondStatus.hashCode());"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        Status thirdStatus \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        Status forthStatus \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(thirdStatus.hashCode() \u003d\u003d forthStatus.hashCode());"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        Status firstStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        Status secondStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.equals(firstStatus));"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.equals(secondStatus));"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameStatusString() {"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        Status status \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(status.toString().equals(VALID_STATUS_DONE));"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":55,"-":11}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_COLOR;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTagName_null_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTagColor() {"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Tag.isValidTagColor(VALID_TAG_COLOR_RED));"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Tag.isValidTagColor(INVALID_TAG_COLOR));"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":9,"-":27}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        descriptor.setTimeTableLink(person.getTimeTableLink());"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setDetail(person.getDetail());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"     * Sets the {@code TimeTableLink} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"    public EditPersonDescriptorBuilder withTimeTableLink(String link) {"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"        descriptor.setTimeTableLink(new TimeTableLink(link));"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Detail} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    public EditPersonDescriptorBuilder withDetail(String detail) {"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setDetail(new Detail(detail));"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":10,"Isaaaca":10,"-":87}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_sameList_true() throws Exception {"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_differentList_false() throws Exception {"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_differentList_differentResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    public void duplicateTag() throws Exception {"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(UniqueTagList.DuplicateTagException.class);"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":76,"-":18}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class to help with building Event objects."},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"public class EventBuilder {"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_NAME \u003d \"F1 Race\";"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_VENUE \u003d \"Marina Bay Street Circuit\";"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_DATE \u003d \"19/07/2018\";"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_START_TIME \u003d \"1000\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_END_TIME \u003d \"1300\";"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    private String name;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    private String venue;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String date;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private String startTime;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private String endTime;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder() {"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d DEFAULT_NAME;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d DEFAULT_VENUE;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d DEFAULT_DATE;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d DEFAULT_START_TIME;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d DEFAULT_END_TIME;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}."},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder(Event eventToCopy) {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d eventToCopy.getName();"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d eventToCopy.getVenue();"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d eventToCopy.getDate();"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d eventToCopy.getStartTime();"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d eventToCopy.getEndTime();"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String name} of the {@code Event} that we are building."},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String venue} of the {@code Event} that we are building."},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withVenue(String venue) {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String date} of the {@code Event} that we are building."},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withDate(String date) {"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String startTime} of the {@code Event} that we are building."},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withStartTime(String startTime) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String endTime} of the {@code Event} that we are building."},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withEndTime(String endTime) {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    public Event build() {"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        return new Event(name, venue, date, startTime, endTime);"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":85}},{"path":"src/test/java/seedu/address/testutil/ToDoBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_UNDONE;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" * A utility class to help with building ToDo objects."},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoBuilder {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DEFAULT_CONTENT \u003d \"Something to do\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    private Content content;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    private Status status;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder() {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d new Content(DEFAULT_CONTENT);"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * Initializes the ToDoBuilder with the data of {@code todoToCopy}."},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder(ToDo todoToCopy) {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d todoToCopy.getContent();"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d todoToCopy.getStatus();"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Content} of the {@code ToDo} that we are building."},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder withContent(String content) {"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d new Content(content);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Content} of the {@code ToDo} that we are building."},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder withStatus(String status) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo build() {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(content, status);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":53}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses {@code name} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalArgumentException(\"name is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":2,"-":51}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_FIRST_TODO \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_SECOND_TODO \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_THIRD_TODO \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalGroups.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" * A utility class containing a list of {@code Group} objects to be used in tests."},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class TypicalGroups {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_A \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_B \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_C \u003d new GroupBuilder().withInformation(\"Group C\").build();"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_D \u003d new GroupBuilder().withInformation(\"Group D\").build();"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_E \u003d new GroupBuilder().withInformation(\"Group E\").build();"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public static List\u003cGroup\u003e getTypicalGroups() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GROUP_A, GROUP_B, GROUP_C));"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"jas5469":17,"-":4}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"public class EventTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Event(null, null, null, null, null));"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidEventName_null_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        // null event name"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Event.isValidName(null));"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidName() {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidName(VALID_EVENT_NAME_F1));"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidName(VALID_EVENT_NAME_NDP));"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidName(INVALID_EVENT_NAME_DESC));"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidDate() {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidDate(VALID_EVENT_DATE_F1));"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidDate(VALID_EVENT_DATE_NDP));"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidDate(INVALID_EVENT_DATE_DESC));"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTime() {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_START_TIME_F1));"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_START_TIME_NDP));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_END_TIME_F1));"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_END_TIME_NDP));"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidTime(INVALID_EVENT_START_TIME_DESC));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidTime(INVALID_EVENT_END_TIME_DESC));"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race1 \u003d new EventBuilder().build();"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race2 \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withDate(VALID_EVENT_DATE_F1)"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_F1).withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.equals(f1Race1));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.equals(1));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.equals(f1Race2));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.equals(new Event()));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    public void toString_test() {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race1 \u003d new EventBuilder().build();"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race2 \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withDate(VALID_EVENT_DATE_F1)"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_F1).withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.toString().equals(f1Race1.toString()));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.toString().equals(f1Race2.toString()));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.toString().equals(new Event().toString()));"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":76,"-":6}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        sb.append(PREFIX_TIMETABLE_LINK + person.getTimeTableLink().value + \" \");"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        sb.append(PREFIX_DETAIL + person.getDetail().detail + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.name + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"Isaaaca":2,"LeonidAgarth":1,"-":37}},{"path":"src/test/java/seedu/address/testutil/GroupUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * A utility class for Group."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"public class GroupUtil {"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"     * Returns an addGroup command string for adding the {@code group}."},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    public static String getAddGroupCommand(Group group) {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"        return AddGroupCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"     * Returns the part of command string for the given {@code group}\u0027s details."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public static String getGroupDetails(Group group) {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        sb.append(group.getInformation().value);"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        return sb.toString();"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":26}},{"path":"src/test/java/seedu/address/model/event/WeeklyEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.module.Schedule;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"public class WeeklyEventTest {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event1 \u003d new WeeklyEvent(\"CS2101\", \"COM1\", \"1500\", \"1600\", \"WEDNESDAY\");"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event2 \u003d new WeeklyEvent(new Module(\"CS2103\", \"Software Engineer\"), new Schedule());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e new WeeklyEvent(null, null, null, null, (String[]) null));"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e new WeeklyEvent(null, null));"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidWeeklyEventName_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        // null event name"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e WeeklyEvent.isValidName(null));"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidName() {"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidName(VALID_EVENT_NAME_F1));"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidName(VALID_EVENT_NAME_NDP));"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidName(INVALID_EVENT_NAME_DESC));"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidDate() {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidDate(VALID_EVENT_DATE_F1));"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidDate(VALID_EVENT_DATE_NDP));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidDate(INVALID_EVENT_DATE_DESC));"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTime() {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_START_TIME_F1));"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_START_TIME_NDP));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_END_TIME_F1));"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_END_TIME_NDP));"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidTime(INVALID_EVENT_START_TIME_DESC));"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidTime(INVALID_EVENT_END_TIME_DESC));"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.equals(event1));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.equals(1));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.equals(event2));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    public void toString_test() {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.toString().equals(event1.toString()));"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.toString().equals(event2.toString()));"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":71,"-":6}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    public static final String DEFAULT_TIMETABLE_LINK \u003d \"http://modsn.us/MYwiD\";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DEFAULT_DETAIL \u003d \"Likes tennis\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    private TimeTableLink link;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    private Detail detail;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        link \u003d new TimeTableLink(DEFAULT_TIMETABLE_LINK);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d new Detail(DEFAULT_DETAIL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        link \u003d personToCopy.getTimeTableLink();"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d personToCopy.getDetail();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"     * Sets the {@code TimeTableLink} of the {@code Person} that we are building."},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"    public PersonBuilder withTimeTableLink(String link) {"},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d new TimeTableLink(link);"},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Detail} of the {@code Person} that we are building."},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"    public PersonBuilder withDetail(String detail) {"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d new Detail(detail);"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(name, phone, email, address, link, detail, tags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":14,"Isaaaca":13,"-":93}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"            .withPhone(\"85355255\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"            .withTags(\"friends\", \"CS3230\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withTimeTableLink(\"http://modsn.us/gka24\")"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"            .withDetail(\"Likes tennis\").withTags(\"owesMoney\", \"friends\", \"CS3230\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"heinz@example.com\").withTimeTableLink(\"http://modsn.us/gOVE5\").withDetail(\"Likes tennis\")"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"wall street\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"cornelia@example.com\").withTimeTableLink(\"http://modsn.us/NejPO\").withDetail(\"Likes tennis\")"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"10th street\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"werner@example.com\").withTimeTableLink(\"http://modsn.us/TJmxw\").withDetail(\"Likes tennis\")"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"michegan ave\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"lydia@example.com\").withTimeTableLink(\"http://modsn.us/MQcxm\").withDetail(\"Likes tennis\")"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"little tokyo\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"anna@example.com\").withTimeTableLink(\"http://modsn.us/hwWlG\").withDetail(\"Likes tennis\")"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"4th street\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"stefan@example.com\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"little india\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"hans@example.com\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"chicago ave\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"            .withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            .build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"            .withTimeTableLink(VALID_TIMETABLE_LINK_BOB).withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_HUSBAND,"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                    VALID_TAG_FRIEND)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"    private TypicalPersons() {"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"    } // prevents instantiation"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        for (ToDo todo : getTypicalToDos()) {"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"                ab.addToDo(todo);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"            } catch (DuplicateToDoException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":22,"Isaaaca":13,"jas5469":2,"-":70}},{"path":"src/test/java/seedu/address/testutil/ToDoUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * A utility class for ToDo."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoUtil {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an addToDo command string for adding the {@code todo}."},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static String getAddToDoCommand(ToDo todo) {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"        return AddToDoCommand.COMMAND_WORD + \" \" + getToDoDetails(todo);"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the part of command string for the given {@code todo}\u0027s details."},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public static String getToDoDetails(ToDo todo) {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        sb.append(todo.getContent().value);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        return sb.toString();"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":26}},{"path":"src/test/java/seedu/address/testutil/GroupBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * A utility class to help with building Group objects."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"public class GroupBuilder {"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    public static final String DEFAULT_INFORMATION \u003d \"Something to do\";"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    private Information information;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder() {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"        information \u003d new Information(DEFAULT_INFORMATION);"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     * Initializes the GroupBuilder with the data of {@code groupToCopy}."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder(Group groupToCopy) {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        information \u003d groupToCopy.getInformation();"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code Information} of the {@code Group} that we are building."},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder withInformation(String information) {"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        this.information \u003d new Information(information);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        return this;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public Group build() {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        return new Group(information);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":38}},{"path":"src/test/java/seedu/address/testutil/TypicalToDos.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" * A utility class containing a list of {@code ToDo} objects to be used in tests."},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class TypicalToDos {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_A \u003d new ToDoBuilder().withContent(\"ToDo A\").build();"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_B \u003d new ToDoBuilder().withContent(\"ToDo B\").build();"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_C \u003d new ToDoBuilder().withContent(\"ToDo C\").build();"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_D \u003d new ToDoBuilder().withContent(\"ToDo D\").build();"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_E \u003d new ToDoBuilder().withContent(\"ToDo E\").build();"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static List\u003cToDo\u003e getTypicalToDos() {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TODO_A, TODO_B, TODO_C));"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":19,"-":4}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":9,"-":22}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    /*public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }*/"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":4,"-":47}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_NDP;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.EventNotFoundException;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"public class UniqueEventListTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.asObservableList().remove(0);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_sameList_true() throws Exception {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_differentList_false() throws Exception {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_differentList_differentResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    public void duplicateEvent() throws Exception {"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(DuplicateEventException.class);"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent_editedEvent_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1 \u003d new EventBuilder().build();"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvent(ndp, f1);"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(f1);"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList, uniqueEventList2);"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"    public void removeEvent_wrongEvent_throwsEventNotFoundException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(EventNotFoundException.class);"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.removeEvent(new EventBuilder().build());"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"    public void removeEvent_correctEvent_success() throws Exception {"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().build());"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.removeEvent(new EventBuilder().build());"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList, new UniqueEventList());"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents_correctParameters_success() throws Exception {"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(uniqueEventList2);"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(uniqueEventList2);"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e events \u003d new ArrayList\u003cEvent\u003e();"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().build());"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(events);"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents_null_throwsNullPointerException() throws Exception {"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":145,"-":12}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    private static final String TOTAL_PERSONS_STATUS_ID \u003d \"#totalPersonsStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    private final StatusBar totalPersonsStatusNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private String lastRememberedTotalPersonsStatus;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        this.totalPersonsStatusNode \u003d getChildNode(TOTAL_PERSONS_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"     * Returns the text of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public String getTotalPersonsStatus() {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        return totalPersonsStatusNode.getText();"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"     * Remembers the content of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    public void rememberTotalPersonsStatus() {"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        lastRememberedTotalPersonsStatus \u003d getTotalPersonsStatus();"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by the most"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"     * recent {@code rememberTotalPersonsStatus()} call."},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    public boolean isTotalPersonsStatusChanged() {"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        return !lastRememberedTotalPersonsStatus.equals(getTotalPersonsStatus());"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":27,"-":72}},{"path":"src/test/java/seedu/address/testutil/EventUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class for Event."},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"public class EventUtil {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an add command string for adding the {@code event}."},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public static String getAddEventCommand(Event event) {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the part of command string for the given {@code event}\u0027s details."},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public static String getEventDetails(Event event) {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_NAME + event.getName() + \" \");"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_VENUE + event.getVenue() + \" \");"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_DATE + event.getDate() + \" \");"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_START_TIME + event.getStartTime() + \" \");"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_END_TIME + event.getEndTime() + \" \");"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":35,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class TypicalEvents {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event F1RACE \u003d new EventBuilder().build();"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event GSS \u003d new EventBuilder().withName(\"Great Singapore Sale\").withVenue(\"Orchard\")"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"09/06/2018\").withStartTime(\"0900\").withEndTime(\"2300\").build();"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event HARIRAYA \u003d new EventBuilder().withName(\"Hari Raya Haji\").withVenue(\"Singapore\")"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"22/08/2018\").withStartTime(\"0000\").withEndTime(\"2359\").build();"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event ILIGHT \u003d new EventBuilder().withName(\"iLight\").withVenue(\"Marina Bay\")"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"01/04/2018\").withStartTime(\"1930\").withEndTime(\"2359\").build();"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event NDP \u003d new EventBuilder().withName(\"National Day Parade\").withVenue(\"Promenade\")"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"09/08/2018\").withStartTime(\"1700\").withEndTime(\"1900\").build();"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    private TypicalEvents() {"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    } // prevents instantiation"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an {@code AddressBook} with all the typical events."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        for (Event event : getTypicalEvents()) {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"            try {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"                ab.addEvent(event);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        for (ToDo todo : getTypicalToDos()) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"                ab.addToDo(todo);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            } catch (DuplicateToDoException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(F1RACE, GSS, HARIRAYA, ILIGHT, NDP));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"LeonidAgarth":35,"-":25}},{"path":"src/test/java/guitests/guihandles/ToDoCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * Provides a handle to a to-do card in the to-do list panel."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    private static final String CONTENT_FIELD_ID \u003d \"#content\";"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    private final Label idLabel;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    private final Label contentLabel;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    private final Label statusLabel;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle(Node cardNode) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        this.contentLabel \u003d getChildNode(CONTENT_FIELD_ID);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public String getId() {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        return idLabel.getText();"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public String getContent() {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        return contentLabel.getText();"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    public String getStatus() {"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        return statusLabel.getText();"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":33,"-":5}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), false));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":2,"-":149}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":69}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/FASTIS.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":1,"-":119}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    private Calendar calendar;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    private ToDoListPanel todoListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    private StackPane todoListPanelPlaceholder;"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":101,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":107,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":111,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        calendar \u003d new Calendar();"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().add(calendar.getCalendarView());"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"        todoListPanel \u003d new ToDoListPanel(logic.getFilteredToDoList());"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"        todoListPanelPlaceholder.getChildren().add(todoListPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"                logic.getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":2,"LeonidAgarth":4,"-":193}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String TOTAL_PERSONS_STATUS \u003d \"%d person(s) total\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    private StatusBar totalPersonsStatus;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        Platform.runLater(() -\u003e this.totalPersonsStatus.setText(String.format(TOTAL_PERSONS_STATUS, totalPersons)));"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":11,"-":79}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.DatabaseManager;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"            displayed.setValue(event.message);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"            if (event.isSuccessful) {"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"                setStyleToIndicateCommandSuccess();"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"            } else {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        });"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    @Subscribe"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        Person selected \u003d event.getNewSelection().person;"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        DatabaseManager.getInstance().parseEvents(selected.getTimeTableLink());"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":9,"jas5469":23,"-":50}},{"path":"src/main/java/seedu/address/ui/ToDoCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    private static final String FXML \u003d \"ToDoListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public final ToDo todo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    private HBox cardPane;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private Label content;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    private Label status;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private Label id;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCard(ToDo todo, int displayedIndex) {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        this.todo \u003d todo;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        content.setText(todo.getContent().value);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        status.setText(todo.getStatus().value);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof ToDoCard)) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard card \u003d (ToDoCard) other;"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 todo.equals(card.todo);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":34,"-":19}},{"path":"src/main/java/seedu/address/ui/Calendar.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.YearMonth;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.text.Text;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" * The Calendar of the App."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" *"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":" * Adapted from javafx-calendar by SirGoose3432"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":" * URL: https://github.com/SirGoose3432/javafx-calendar"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"public class Calendar extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String FXML \u003d \"Calendar.fxml\";"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private ArrayList\u003cAnchorPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(42);"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private VBox calendarView;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private Text calendarHeader;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public Calendar() {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        this(YearMonth.now());"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public Calendar(YearMonth yearMonth) {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d yearMonth;"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        initCalendar();"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"     * Create the calendarView for the calendar"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    private void initCalendar() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the calendar grid pane"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane calendar \u003d new GridPane();"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        calendar.setPrefSize(600, 400);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        calendar.setGridLinesVisible(true);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        // Create rows and columns with anchor panes for the calendar"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"            for (int j \u003d 0; j \u003c 7; j++) {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"                AnchorPaneNode apn \u003d new AnchorPaneNode();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"                apn.setPrefSize(200, 200);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"                apn.getStyleClass().add(\"date\");"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                calendar.add(apn, j, i);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                allCalendarDays.add(apn);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        // Days of the week"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        Text[] dayNames \u003d new Text[]{ new Text(\"Mon\"), new Text(\"Tue\"), new Text(\"Wed\"),"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"            new Text(\"Thu\"), new Text(\"Fri\"), new Text(\"Sat\"), new Text(\"Sun\") };"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane dayLabels \u003d new GridPane();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setPrefWidth(600);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setGridLinesVisible(true);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        int col \u003d 0;"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        for (Text txt : dayNames) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"            txt.getStyleClass().add(\"dayName\");"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane ap \u003d new AnchorPane();"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"            ap.setPrefSize(200, 20);"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setLeftAnchor(txt, 5.0);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setBottomAnchor(txt, 5.0);"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            ap.getChildren().add(txt);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"            if (txt.getText().equals(\"Sun\") || txt.getText().equals(\"Sat\")) {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"                ap.getStyleClass().add(\"weekend\");"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"                ap.getStyleClass().add(\"weekday\");"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"            dayLabels.add(ap, col++, 0);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        // Create calendarHeader and navigation"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader \u003d new Text();"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader.getStyleClass().add(\"yearMonth\");"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        Button previousMonth \u003d new Button(\"\u003c\u003c\");"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        previousMonth.setOnAction(e -\u003e previousMonth());"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        Button nextMonth \u003d new Button(\"\u003e\u003e\");"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        nextMonth.setOnAction(e -\u003e nextMonth());"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        HBox titleBar \u003d new HBox(previousMonth, new Text(\"\\t\"), calendarHeader, new Text(\"\\t\"), nextMonth);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        titleBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        // Populate calendar with the appropriate day numbers"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the calendar calendarView"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        calendarView \u003d new VBox(titleBar, dayLabels, calendar);"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"     * Set the visible days on the calendar to the appropriate {@code yearMonth}"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    private void fillCalendar(YearMonth yearMonth) {"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        // Get the month and year to display"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        //Roll the day back to MONDAY in order to fill up the whole calendar"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        while (!calendarDate.getDayOfWeek().toString().equals(\"MONDAY\")) {"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"            calendarDate \u003d calendarDate.minusDays(1);"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        // Fill the calendar"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        for (AnchorPaneNode apn : allCalendarDays) {"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"            if (apn.getChildren().size() !\u003d 0) {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"                apn.getChildren().remove(0);"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"            if (calendarDate.getMonth().equals(yearMonth.getMonth())) {"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"                txt.getStyleClass().add(\"thisMonthDate\");"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"                txt.getStyleClass().add(\"notThisMonthDate\");"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"            apn.setDate(calendarDate);"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setTopAnchor(txt, 5.0);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setLeftAnchor(txt, 5.0);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"            apn.getChildren().add(txt);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"            calendarDate \u003d calendarDate.plusDays(1);"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        // Change the header of the calendar"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"     * Move back 1 month, then refill the calendar."},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"    private void previousMonth() {"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d currentYearMonth.minusMonths(1);"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"     * Move forward 1 month, then refill the calendar."},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"    private void nextMonth() {"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d currentYearMonth.plusMonths(1);"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the Calendar to view in application"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"    public VBox getCalendarView() {"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"        return calendarView;"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the header of the Calendar"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"    public Text getCalendarHeader() {"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        return calendarHeader;"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the list of all visible day in the current month"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"    public ArrayList\u003cAnchorPaneNode\u003e getAllCalendarDays() {"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"        return allCalendarDays;"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"     * Set all currently visible days to {@code allCalendarDays}"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"    public void setAllCalendarDays(ArrayList\u003cAnchorPaneNode\u003e allCalendarDays) {"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        this.allCalendarDays \u003d allCalendarDays;"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"    public Node getDateNode(LocalDate date) {"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"        LocalDate firstDay \u003d LocalDate.of(currentYearMonth.getYear(), currentYearMonth.getMonthValue(), 1);"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"        int firstDayIndex \u003d firstDay.getDayOfWeek().getValue() - 1;"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"        int gap \u003d date.getDayOfMonth() - firstDay.getDayOfMonth();"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        return allCalendarDays.get(firstDayIndex + gap);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Calendar)) {"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        // state check"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        Calendar theOther \u003d (Calendar) other;"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"        return calendarHeader.getText().equals(theOther.getCalendarHeader().getText())"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 allCalendarDays.equals(theOther.getAllCalendarDays());"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"    /*"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"    private class Controller {"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"        // The pane to display the calendar"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"        @FXML"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"        Pane calendarPane;"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"    }*/"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"     * Node to display each cell/day of the calendar"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"    private class AnchorPaneNode extends AnchorPane {"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"        private LocalDate date;"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"        /**"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"         * Create a anchor pane node containing all of the {@code children}."},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":"         * The date of the node is not set in the constructor"},{"lineNumber":214,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"        public AnchorPaneNode(Node... children) {"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":"            super(children);"},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"            // Add action handler for mouse clicked"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"            this.setOnMouseClicked(e -\u003e {"},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":"                LogsCenter.getLogger(this.getClass()).info(e.toString());"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"            });"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"         * Returns the date of the node"},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"        public LocalDate getDate() {"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"            return date;"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"        /**"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":"         * Set the date of the node to {@code date}"},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":"        public void setDate(LocalDate date) {"},{"lineNumber":234,"author":{"gitID":"LeonidAgarth"},"content":"            this.date \u003d date;"},{"lineNumber":235,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"            if (!(other instanceof AnchorPaneNode)) {"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"                return false;"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":250,"author":{"gitID":"LeonidAgarth"},"content":"            // state check"},{"lineNumber":251,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPaneNode theOther \u003d (AnchorPaneNode) other;"},{"lineNumber":252,"author":{"gitID":"LeonidAgarth"},"content":"            return date.toString().equals(theOther.date.toString());"},{"lineNumber":253,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":235,"-":20}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     * Define tag colour styles"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    private Label detail;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        detail.setText(person.getDetail().detail);"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        initTags(person);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the color style for {@code name}\u0027s label."},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        // use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    private void initTags(Person person) {"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"            Label tagLabel \u003d new Label(tag.name);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            if (tag.color.equals(\"undefined\")) {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"                tagLabel.getStyleClass().add(getTagColorStyleFor(tag.name));"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"                tagLabel.getStyleClass().add(tag.color);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        });"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"jas5469":20,"LeonidAgarth":7,"-":72}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_INVALID_TODO_DISPLAYED_INDEX \u003d \"The to-do index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":13}},{"path":"src/main/java/seedu/address/ui/ToDoListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.events.ui.ToDoPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" * Panel containing the list of todos."},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private static final String FXML \u003d \"ToDoListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ToDoListPanel.class);"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    private ListView\u003cToDoCard\u003e todoListView;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoListPanel(ObservableList\u003cToDo\u003e todoList) {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        setConnections(todoList);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    private void setConnections(ObservableList\u003cToDo\u003e todoList) {"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        ObservableList\u003cToDoCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"                todoList, (todo) -\u003e new ToDoCard(todo, todoList.indexOf(todo) + 1));"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        todoListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        todoListView.setCellFactory(listView -\u003e new ToDoListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        todoListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"                        logger.fine(\"Selection in todo list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"                        raise(new ToDoPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"     * Scrolls to the {@code ToDoCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"            todoListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"            todoListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ToDoCard}."},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    class ToDoListViewCell extends ListCell\u003cToDoCard\u003e {"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        protected void updateItem(ToDoCard todo, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"            super.updateItem(todo, empty);"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"            if (empty || todo \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"                setGraphic(todo.getRoot());"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":53,"-":35}},{"path":"src/test/java/guitests/guihandles/ToDoListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.ui.ToDoCard;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * Provides a handle for {@code ToDoListPanel} containing the list of {@code ToDoCard}."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanelHandle extends NodeHandle\u003cListView\u003cToDoCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final String TODO_LIST_VIEW_ID \u003d \"#todoListView\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    private Optional\u003cToDoCard\u003e lastRememberedSelectedToDoCard;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoListPanelHandle(ListView\u003cToDoCard\u003e toDoListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        super(toDoListPanelNode);"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a handle to the selected {@code ToDoCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e toDoList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        if (toDoList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"ToDo list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDoCardHandle(toDoList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"     * Navigates the listview to display and select the to-do."},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    public void navigateToCard(ToDo toDo) {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        Optional\u003cToDoCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.todo.equals(toDo)).findFirst();"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException(\"ToDo does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the to-do card handle of a to-do associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getToDoCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        return getToDoCardHandle(getRootNode().getItems().get(index).todo);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the {@code ToDoCardHandle} of the specified {@code toDo} in the list."},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getToDoCardHandle(ToDo toDo) {"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        Optional\u003cToDoCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"                .filter(card -\u003e card.todo.equals(toDo))"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"                .map(card -\u003e new ToDoCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"ToDo does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"     * Selects the {@code ToDoCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"     * Remembers the selected {@code ToDoCard} in the list."},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    public void rememberSelectedToDoCard() {"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"            lastRememberedSelectedToDoCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"            lastRememberedSelectedToDoCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if the selected {@code ToDoCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"     * {@code rememberSelectedToDoCard()} call."},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    public boolean isSelectedToDoCardChanged() {"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"            return lastRememberedSelectedToDoCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"            return !lastRememberedSelectedToDoCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"                    || !lastRememberedSelectedToDoCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":77,"-":57}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.JavaType;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"     * Returns the Json Array from the given file or an empty ArrayList if the file is not found."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"    public static \u003cT\u003e ArrayList\u003cT\u003e readJsonArrayFromFile("},{"lineNumber":89,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"            return new ArrayList\u003cT\u003e();"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cT\u003e jsonFile;"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"            JavaType javaType \u003d objectMapper.getTypeFactory()"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"                    .constructCollectionType(ArrayList.class, classOfObjectToDeserialize);"},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"            jsonFile \u003d objectMapper.readValue(file, javaType);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":"        return Optional.of(jsonFile).orElse(new ArrayList\u003cT\u003e());"},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":162,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":17,"-":159}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    public final boolean isSuccessful;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    public NewResultAvailableEvent(String message, boolean isSuccessful) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"        this.isSuccessful \u003d isSuccessful;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":20}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns an unmodifiable view of the filtered list of to-dos */"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getFilteredToDoList();"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"-":27}},{"path":"src/main/java/seedu/address/commons/events/ui/ToDoPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.ui.ToDoCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    private final ToDoCard newSelection;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoPanelSelectionChangedEvent(ToDoCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":8,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                        PREFIX_TIMETABLE_LINK, PREFIX_DETAIL, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                PREFIX_TIMETABLE_LINK, PREFIX_DETAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"            TimeTableLink link \u003d ParserUtil.parseTimeTableLink(argMultimap.getValue(PREFIX_TIMETABLE_LINK)).get();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            Detail detail \u003d ParserUtil.parseDetail(argMultimap.getValue(PREFIX_DETAIL)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            Person person \u003d new Person(name, phone, email, address, link, detail, tagList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":6,"Isaaaca":5,"-":62}},{"path":"src/main/java/seedu/address/logic/parser/ChangeTagColorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":" * Parses the given {@code String} of arguments in the context of the ChangeTagColorCommand"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":" * and returns an ChangeTagColorCommand object for execution."},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandParser implements Parser\u003cChangeTagColorCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public ChangeTagColorCommand parse(String userInput) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"        String[] args \u003d userInput.trim().split(\" \");"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"        if (args.length !\u003d 2) {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException("},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTagColorCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            Tag tag \u003d ParserUtil.parseTag(args[0]);"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"            String color \u003d ParserUtil.parseColor((args[1]));"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"            return new ChangeTagColorCommand(tag.name, color);"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":30,"-":2}},{"path":"src/main/java/seedu/address/database/DatabaseManager.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import java.net.URLConnection;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"import java.util.StringTokenizer;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.module.Schedule;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":" * The main DatabaseManager of the app."},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"public class DatabaseManager {"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_JSON_DATABASE_FILEPATH \u003d \"modules.json\";"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(DatabaseManager.class);"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    private static final Map\u003cString, String\u003e lessonAbbrev \u003d Collections.unmodifiableMap("},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"            new HashMap\u003cString, String\u003e() {{"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"                put(\"Design Lecture\", \"DLEC\");"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"                put(\"Laboratory\", \"LAB\");"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"                put(\"Lecture\", \"LEC\");"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"                put(\"Packaged Lecture\", \"PLEC\");"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"                put(\"Packaged Tutorial\", \"PTUT\");"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"                put(\"Recitation\", \"REC\");"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"                put(\"Sectional Teaching\", \"SEC\");"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"                put(\"Seminar-Style Module Class\", \"SEM\");"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial\", \"TUT\");"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial Type 2\", \"TUT2\");"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial Type 2\", \"TUT3\");"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"                put(\"Workshop\", \"WS\");"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"            }});"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    private static DatabaseManager databaseManager \u003d null;"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    private static HashMap\u003cString, Module\u003e moduleDatabase;"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    private DatabaseManager() {"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        moduleDatabase \u003d parseDatabase(DEFAULT_JSON_DATABASE_FILEPATH);"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    public static DatabaseManager getInstance() {"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"        if (databaseManager \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"            databaseManager \u003d new DatabaseManager();"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        return databaseManager;"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"     * Parses a string query into a list of module and schedules"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"     * @param link TimeTableLinkto be parsed"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"    public ArrayList\u003cWeeklyEvent\u003e parseEvents(TimeTableLink link) { //todo return list of events when available"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"        String query \u003d getQuery(link);"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"        StringTokenizer queryTokenizer \u003d new StringTokenizer(query, \"\u0026\");"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"        while (queryTokenizer.hasMoreTokens()) {"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"            StringTokenizer modTokenizer \u003d new StringTokenizer(queryTokenizer.nextToken(), \"\u003d\");"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"            Module module \u003d moduleDatabase.get(modTokenizer.nextToken());"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"            result.append(module.getModuleCode() + \"\\n\"); //TODO: remove after integrating with Events class"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"            String[] lessons \u003d modTokenizer.nextToken().split(\",\");"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"            List\u003cSchedule\u003e scheduleList \u003d module.getScheduleList();"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"            for (Schedule schedule : scheduleList) {"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"                for (String lesson : lessons) {"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"                    StringTokenizer lessonTokenizer \u003d new StringTokenizer(lesson, \":\");"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"                    String queryAbbrev \u003d lessonTokenizer.nextToken();"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"                    String queryLessonNum \u003d lessonTokenizer.nextToken();"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"                    if (queryAbbrev.equals(lessonAbbrev.get(schedule.getLessonType()))"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"                            \u0026\u0026 queryLessonNum.equals(schedule.getClassNo())) {"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"                        eventList.add(new WeeklyEvent(module, schedule));"},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"                        result.append(schedule.getLessonType() + \" \" + schedule.getClassNo() + \"\\n\"); //TODO: remove"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"                        result.append(\"\\t\" + schedule.getDayText() + \"\\n\");"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"                        result.append(\"\\t\" + schedule.getStartTime() + \" to \" + schedule.getEndTime() + \"\\n\");"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"                        result.append(\"\\t\" + schedule.getVenue() + \"\\n\");"},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"                    }"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"                }"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"        logger.info(result.toString());"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"        return  eventList;"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"     * Connects to the timeTableLink given and returns a list of modules"},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"     * @param timeTableLink a TimeTableLink representing an URL to a NUSmods schedule"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"Isaaaca"},"content":"    public static String getQuery(TimeTableLink timeTableLink) {"},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"            URL shortUrl \u003d new URL(timeTableLink.toString());"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"            URLConnection connection \u003d shortUrl.openConnection();"},{"lineNumber":112,"author":{"gitID":"Isaaaca"},"content":"            URL longUrl \u003d new URL(connection.getHeaderField(\"Location\"));"},{"lineNumber":113,"author":{"gitID":"Isaaaca"},"content":"            return longUrl.getQuery();"},{"lineNumber":114,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":116,"author":{"gitID":"Isaaaca"},"content":"            logger.info(\"NUSmods URL Invalid.\");"},{"lineNumber":117,"author":{"gitID":"Isaaaca"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":119,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Isaaaca"},"content":"        return null;"},{"lineNumber":121,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"Isaaaca"},"content":"     * @param filePath"},{"lineNumber":125,"author":{"gitID":"Isaaaca"},"content":"     * @return module from jsonfile"},{"lineNumber":126,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"    public Optional\u003cModule\u003e parseModule(String filePath) {"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"            return JsonUtil.readJsonFile(filePath, Module.class);"},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        return null;"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"     * @param filePath"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"     * @return hashMap of all modules from jsonfile"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"    public HashMap\u003cString, Module\u003e parseDatabase(String filePath) {"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":"        List\u003cModule\u003e moduleList;"},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"            moduleList \u003d JsonUtil.readJsonArrayFromFile(filePath, Module.class);"},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"            return new HashMap\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":"        HashMap\u003cString, Module\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"        for (Module m : moduleList) {"},{"lineNumber":153,"author":{"gitID":"Isaaaca"},"content":"            hashMap.put(m.getModuleCode(), m);"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"        return hashMap;"},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":159,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":149,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/CheckToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new CheckToDoCommand object"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandParser implements Parser\u003cCheckToDoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the CheckToDoCommand"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an CheckToDoCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public CheckToDoCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"            return new CheckToDoCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":16,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        case AddGroupCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        case AddGroupCommand.COMMAND_ALIAS:"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"            return new AddGroupCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        case AddToDoCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        case AddToDoCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"            return new AddToDoCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        case CheckToDoCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"            return new CheckToDoCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        case UnCheckToDoCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"            return new UnCheckToDoCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"        case ListGroupMembersCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        case ListGroupMembersCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"            return new ListGroupMembersCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        case ChangeTagColorCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        case ChangeTagColorCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"            return new ChangeTagColorCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        case AddEventCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23,"jas5469":10,"LeonidAgarth":10,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/AddToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new AddToDoCommand object"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandParser implements Parser\u003cAddToDoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the AddToDoCommand"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an AddToDoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public AddToDoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        if (args.trim().isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"            Content content \u003d ParserUtil.parseContent(args);"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"            ToDo todo \u003d new ToDo(content);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"            return new AddToDoCommand(todo);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":29,"LeonidAgarth":4,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/UnCheckToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new UnCheckToDoCommand object"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandParser implements Parser\u003cUnCheckToDoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the UnCheckToDoCommand"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an UnCheckToDoCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public UnCheckToDoCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"            return new UnCheckToDoCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":16,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    public static final Prefix PREFIX_TIMETABLE_LINK \u003d new Prefix(\"l/\");"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final Prefix PREFIX_DETAIL \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"Isaaaca":1,"LeonidAgarth":4,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new AddGroupCommand object"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"     * and returns an AddGroupCommand object for execution."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public AddGroupCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        if (args.trim().isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(args);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"            return new AddGroupCommand(group);"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"jas5469":26,"LeonidAgarth":9,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code String content} into a {@code Content}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if the given {@code content} is invalid."},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    public static Content parseContent(String content) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(content);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        String trimmedContent \u003d content.trim();"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        if (!Content.isValidContent(trimmedContent)) {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        return new Content(trimmedContent);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"Isaaaca"},"content":"     * Parses a {@code String link} into an {@code TimeTableLink}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"Isaaaca"},"content":"     * @throws IllegalValueException if the given {@code link} is invalid."},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"    public static TimeTableLink parseTimeTableLink(String link) throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":170,"author":{"gitID":"Isaaaca"},"content":"        String trimmedLink \u003d link.trim();"},{"lineNumber":171,"author":{"gitID":"Isaaaca"},"content":"        if (!TimeTableLink.isValidLink(trimmedLink)) {"},{"lineNumber":172,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"Isaaaca"},"content":"        return new TimeTableLink(trimmedLink);"},{"lineNumber":175,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"Isaaaca"},"content":"     * Parses a {@code Optional\u003cString\u003e link} into an {@code Optional\u003cTimeTableLink\u003e} if {@code link} is present."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"    public static Optional\u003cTimeTableLink\u003e parseTimeTableLink(Optional\u003cString\u003e link) throws IllegalValueException {"},{"lineNumber":182,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":183,"author":{"gitID":"Isaaaca"},"content":"        return  link.isPresent() ? Optional.of(parseTimeTableLink(link.get())) : Optional.empty();"},{"lineNumber":184,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code String detail} into a {@code Detail}."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if the given {@code detail} is invalid."},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"nhatquang3112"},"content":"    public static Detail parseDetail(String detail) throws IllegalValueException {"},{"lineNumber":193,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":194,"author":{"gitID":"nhatquang3112"},"content":"        String trimmedDetail \u003d detail.trim();"},{"lineNumber":195,"author":{"gitID":"nhatquang3112"},"content":"        if (!Detail.isValidDetail(trimmedDetail)) {"},{"lineNumber":196,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"nhatquang3112"},"content":"        return new Detail(trimmedDetail);"},{"lineNumber":199,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":201,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code Optional\u003cString\u003e detail} into an {@code Optional\u003cDetail\u003e} if {@code detail} is present."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"    public static Optional\u003cDetail\u003e parseDetail(Optional\u003cString\u003e detail) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"        return detail.isPresent() ? Optional.of(parseDetail(detail.get())) : Optional.empty();"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseColor(String color) throws IllegalValueException {"},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(color);"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"        if (Tag.isValidTagColor(color)) {"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"            return color;"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code String content} into a {@code Content}."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":257,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if the given {@code content} is invalid."},{"lineNumber":258,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"    public static Information parseInformation(String information) throws IllegalValueException {"},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"        requireNonNull(information);"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"        String trimmedInformation \u003d information.trim();"},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"        if (!Content.isValidContent(trimmedInformation)) {"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":"        return new Information(trimmedInformation);"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":268,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String name} into a {@code String}."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseEventName(String name) throws IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":277,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(trimmedName)) {"},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":279,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedName;"},{"lineNumber":281,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String venue} into a {@code String}."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":287,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code venue} is invalid."},{"lineNumber":288,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseVenue(String venue) throws IllegalValueException {"},{"lineNumber":290,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(venue);"},{"lineNumber":291,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedVenue \u003d venue.trim();"},{"lineNumber":292,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(trimmedVenue)) {"},{"lineNumber":293,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedVenue;"},{"lineNumber":296,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":298,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String date} into a {@code String}."},{"lineNumber":300,"author":{"gitID":"LeonidAgarth"},"content":"     * Date must follow DD/MM/YYYY format"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":302,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":303,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseDate(String date) throws IllegalValueException {"},{"lineNumber":306,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(date);"},{"lineNumber":307,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":308,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidDate(trimmedDate)) {"},{"lineNumber":309,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":310,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedDate;"},{"lineNumber":312,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String time} into a {@code String}."},{"lineNumber":316,"author":{"gitID":"LeonidAgarth"},"content":"     * Time must follow HHmm format"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":318,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":319,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":320,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":321,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseTime(String time) throws IllegalValueException {"},{"lineNumber":322,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(time);"},{"lineNumber":323,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":324,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(trimmedTime)) {"},{"lineNumber":325,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":326,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedTime;"},{"lineNumber":328,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":39,"Isaaaca":22,"jas5469":9,"LeonidAgarth":59,"-":200}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                        PREFIX_TIMETABLE_LINK, PREFIX_DETAIL, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"            ParserUtil.parseTimeTableLink(argMultimap.getValue(PREFIX_TIMETABLE_LINK))"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"                    .ifPresent(editPersonDescriptor::setTimeTableLink);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            ParserUtil.parseDetail(argMultimap.getValue(PREFIX_DETAIL)).ifPresent(editPersonDescriptor::setDetail);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"Isaaaca":4,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/parser/ListGroupMembersCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new ListGroupMembersCommand object"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandParser implements Parser\u003cListGroupMembersCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the ListGroupMembersCommand"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"     * and returns an ListGroupMembersCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public ListGroupMembersCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListGroupMembersCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        return new ListGroupMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":21,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"            + PREFIX_TIMETABLE_LINK + \"TIMETABLE_LINK \""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_DETAIL + \"DETAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"            + PREFIX_TIMETABLE_LINK + \"http://modsn.us/MYwiD \""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_DETAIL + \"Likes tennis \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"Isaaaca":3,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListGroupMembersCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":" * Finds and lists all persons in address book whose tag name is of the argument keywords."},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"ListGroupMembers\";"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"lgm\";"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose groups contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" CS1010\";"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    private final TagContainKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    public ListGroupMembersCommand(TagContainKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"                || (other instanceof ListGroupMembersCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.predicate.equals(((ListGroupMembersCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":28,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_VENUE, PREFIX_DATE,"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"                        PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_VENUE, PREFIX_DATE,"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"                PREFIX_START_TIME, PREFIX_END_TIME)"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"            String name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"            String venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"            String date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"            String startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"            String endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"            Event event \u003d new Event(name, venue, date, startTime, endTime);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddEventCommand(event);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":37,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" * Adds an event to the address book."},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"ae\";"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_VENUE + \"VENUE \""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_START_TIME + \"STARTTIME \""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_END_TIME + \"ENDTIME \\n\""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_NAME + \"F1 Race \""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_VENUE + \"Marina Bay Street Circuit \""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_DATE + \"19/07/2017 \""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_START_TIME + \"1000 \""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_END_TIME + \"1300\\n\""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Note: DATE must be in the format of DD/MM/YYYY\\n\""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"            + \"      TIME must be in the format of HHmm\\n\";"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    private final Event toAdd;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public AddEventCommand(Event event) {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(event);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d event;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"            model.addEvent(toAdd);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":51,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"            + \"[\" + PREFIX_TIMETABLE_LINK + \"TIMETABLE_LINK] \""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            + \"[\" + PREFIX_DETAIL + \"DETAIL] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":116,"author":{"gitID":"Isaaaca"},"content":"        TimeTableLink updatedLink \u003d editPersonDescriptor.getTimeTableLink().orElse(personToEdit.getTimeTableLink());"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        Detail updatedDetail \u003d editPersonDescriptor.getDetail().orElse(personToEdit.getDetail());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedLink, updatedDetail,"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"                updatedTags);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"        private TimeTableLink link;"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"        private Detail detail;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":"            setTimeTableLink(toCopy.link);"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"            setDetail(toCopy.detail);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"nhatquang3112"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.link, this.detail,"},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"                    this.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Isaaaca"},"content":"        public void setTimeTableLink(TimeTableLink link) {"},{"lineNumber":213,"author":{"gitID":"Isaaaca"},"content":"            this.link \u003d link;"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":"        public Optional\u003cTimeTableLink\u003e getTimeTableLink() {"},{"lineNumber":217,"author":{"gitID":"Isaaaca"},"content":"            return Optional.ofNullable(link);"},{"lineNumber":218,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":"        public void setDetail(Detail detail) {"},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"            this.detail \u003d detail;"},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":"        public Optional\u003cDetail\u003e getDetail() {"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":"            return Optional.ofNullable(detail);"},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":228,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":229,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":232,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":233,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":241,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":242,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":266,"author":{"gitID":"Isaaaca"},"content":"                    \u0026\u0026 getTimeTableLink().equals(e.getTimeTableLink())"},{"lineNumber":267,"author":{"gitID":"nhatquang3112"},"content":"                    \u0026\u0026 getDetail().equals(e.getDetail())"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":19,"Isaaaca":18,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/CheckToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.AddToDoCommand.MESSAGE_DUPLICATE_TODO;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" * Check an existing ToDo in the address book as done."},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"check\";"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks the ToDo identified as done\""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"            + \"by the index number used in the last ToDo listing. \""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"            + \"Status of the ToDo will be overwritten as done.\\n\""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_CHECK_TODO_SUCCESS \u003d \"Checked ToDo: %1$s\";"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_NOT_CHECKED \u003d \"Checked ToDo failed.\";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    private final Index index;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToCheck;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo checkedToDo;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * @param index of the ToDo in the filtered ToDo list to check"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public CheckToDoCommand(Index index) {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(index);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        this.index \u003d index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            model.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target ToDo cannot be missing\");"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dte) {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        model.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_CHECK_TODO_SUCCESS, checkedToDo));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        toDoToCheck \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        checkedToDo \u003d createCheckedToDo(toDoToCheck);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * Creates and returns a {@code ToDo} with the content of {@code toDoToCheck}"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * checked as done."},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    private static ToDo createCheckedToDo(ToDo toDoToCheck) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        assert toDoToCheck !\u003d null;"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        Content updatedContent \u003d toDoToCheck.getContent();"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Status updatedStatus \u003d new Status(\"done\");"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(updatedContent, updatedStatus);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof CheckToDoCommand)) {"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand e \u003d (CheckToDoCommand) other;"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        return index.equals(e.index)"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(toDoToCheck, e.toDoToCheck);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":76,"-":28}},{"path":"src/main/java/seedu/address/logic/commands/AddToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" * Adds a to-do to the address book."},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"addToDo\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"aTD\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a to-do to the address book. \""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"            + \"TO-DO DESCRIPTION \""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"            + \"Organize a meeting\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New to-do added: %1$s\";"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This to-do already exists in the address book\";"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    private final ToDo toAdd;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * Creates an AddToDoCommand to add the specified {@code ToDo}"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public AddToDoCommand(ToDo todo) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(todo);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        toAdd \u003d todo;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"            model.addToDo(toAdd);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof AddToDoCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 toAdd.equals(((AddToDoCommand) other).toAdd));"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":38,"-":16}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        return model.getFilteredToDoList();"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":6,"-":57}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tag\u0027s %s field is missing!\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    private String name;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String color;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code name} and color undefined."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedTag(String name) {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d \"undefined\";"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code name} and {@code color}."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedTag(String name, String color) {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d color;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d source.name;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        color \u003d source.color;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Tag.isValidTagName(name)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.color \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Color\"));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Tag.isValidTagColor(color)) {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        return new Tag(name, color);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        return name.equals(((XmlAdaptedTag) other).name) \u0026\u0026 color.equals(((XmlAdaptedTag) other).color);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":33,"-":52}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup() throws DataConversionException, IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath + \".backup\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws DataConversionException,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                                                                                       IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new NullPointerException();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return readAddressBook(filePath + \".backup\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new NullPointerException();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new NullPointerException();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":1,"-":114}},{"path":"src/main/java/seedu/address/logic/commands/ChangeTagColorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"changeTagColor\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"color\";"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the current color of the tag specified by name\""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"            + \"\\nParameters: TAGNAME (must be an existing tag) COLOR\\n\""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends red\\n\""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Available colors are: teal, red, yellow, blue, orange, brown, green, pink, black, grey\";"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Tag %1$s\u0027s color changed to %2$s\";"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TAG_NOT_IN_LIST \u003d \"The tag specified is not associated with any person\";"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private final String tagName;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private final String tagColor;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private Tag tagToEdit;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    private Tag editedTag;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * @param name of the tag to edit"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * @param color to change the tag into"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public ChangeTagColorCommand(String name, String color) {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(color);"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        this.tagName \u003d name;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        this.tagColor \u003d color;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"            model.updateTag(tagToEdit, editedTag);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"            throw new CommandException(MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, tagName, tagColor));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        editedTag \u003d new Tag(tagName, tagColor);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cTag\u003e allTags \u003d model.getAddressBook().getTagList();"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        for (Tag tag: allTags) {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"            if (tag.name.equals(tagName)) {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"                tagToEdit \u003d tag;"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"                return;"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        throw new CommandException(MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof ChangeTagColorCommand)) {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        // state check"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand e \u003d (ChangeTagColorCommand) other;"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        return tagName.equals(e.tagName)"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 tagColor.equals(e.tagColor);"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":69,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/AddGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" * Adds a group to the address book."},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"addGroup\";"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"aG\";"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a group to the address book. \""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"            + \"GROUP NAME \""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"            + \"CS1010 project\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the address book\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private final Group addGroup;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"     * Creates an AddGroupCommand to add the specified {@code Group}"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    public AddGroupCommand(Group group) {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        requireNonNull(group);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        addGroup \u003d group;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            model.addGroup(addGroup);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, addGroup));"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"                || (other instanceof AddGroupCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 addGroup.equals(((AddGroupCommand) other).addGroup));"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"jas5469":38,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/UnCheckToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.AddToDoCommand.MESSAGE_DUPLICATE_TODO;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" * Uncheck an existing ToDo in the address book as done."},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"uncheck\";"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unchecks the ToDo identified as done\""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"            + \"by the index number used in the last ToDo listing. \""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"            + \"Status of the ToDo will be overwritten as done.\\n\""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_UNCHECK_TODO_SUCCESS \u003d \"Unchecked ToDo: %1$s\";"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_NOT_UNCHECKED \u003d \"Unchecked ToDo failed.\";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    private final Index index;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToUnCheck;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo unCheckedToDo;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * @param index of the ToDo in the filtered ToDo list to uncheck"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public UnCheckToDoCommand(Index index) {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(index);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        this.index \u003d index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            model.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target ToDo cannot be missing\");"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dte) {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        model.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_UNCHECK_TODO_SUCCESS, unCheckedToDo));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        toDoToUnCheck \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        unCheckedToDo \u003d createUnCheckedToDo(toDoToUnCheck);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * Creates and returns a {@code ToDo} with the content of {@code toDoToUnCheck}"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * unchecked as done."},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    private static ToDo createUnCheckedToDo(ToDo toDoToUnCheck) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        assert toDoToUnCheck !\u003d null;"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        Content updatedContent \u003d toDoToUnCheck.getContent();"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Status updatedStatus \u003d new Status(\"undone\");"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(updatedContent, updatedStatus);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof UnCheckToDoCommand)) {"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand e \u003d (UnCheckToDoCommand) other;"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        return index.equals(e.index)"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(toDoToUnCheck, e.toDoToUnCheck);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":77,"-":27}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    private String link;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    private String detail;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"                            String link, String detail, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d link;"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"        link \u003d source.getTimeTableLink().value;"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d source.getDetail().detail;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"        if (this.link \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"                    TimeTableLink.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"        if (!TimeTableLink.isValidLink(this.link)) {"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"        final TimeTableLink link \u003d new TimeTableLink(this.link);"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        if (this.detail \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"                    Detail.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        if (!Detail.isValidDetail(this.detail)) {"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"        final Detail detail \u003d new Detail(this.detail);"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(name, phone, email, address, link, detail, tags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 Objects.equals(link, otherPerson.link)"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(detail, otherPerson.detail)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":15,"Isaaaca":16,"-":137}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private List\u003cXmlAdaptedToDo\u003e todos;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    private List\u003cXmlAdaptedGroup\u003e groups;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        todos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        todos.addAll(src.getToDoList().stream().map(XmlAdaptedToDo::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        for (XmlAdaptedToDo todo : todos) {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            addressBook.addToDo(todo.toModelType());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        for (XmlAdaptedGroup group : groups) {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"            addressBook.addGroup(group.toModelType());"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        for (XmlAdaptedEvent event : events) {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            addressBook.addEvent(event.toModelType());"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 todos.equals(otherAb.todos)"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 groups.equals(otherAb.groups) \u0026\u0026 events.equals(otherAb.events);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":8,"LeonidAgarth":8,"-":72}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedToDo.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" * JAXB-friendly version of the To-do."},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"public class XmlAdaptedToDo {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"ToDo\u0027s %s field is missing!\";"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    private String content;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    private String status;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an XmlAdaptedToDo."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo() {}"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code XmlAdaptedToDo} with the given details."},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(String content, String status) {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d status;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code XmlAdaptedToDo} with the given details."},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * Status is \"undone\" by default"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(String content) {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d \"undone\";"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"     * Converts a given To-do into this class for JAXB use."},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedToDo"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(ToDo source) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d source.getContent().value;"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"     * Converts this jaxb-friendly adapted to-do object into the model\u0027s To-do object."},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted to-do"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        if (this.content \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        if (!Content.isValidContent(this.content)) {"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        final Content content \u003d new Content(this.content);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        if (!Status.isValidStatus(this.status)) {"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(content, status);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof XmlAdaptedToDo)) {"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo otherToDo \u003d (XmlAdaptedToDo) other;"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.equals(content, otherToDo.content);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":83,"-":14}},{"path":"src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":" * Signals that the operation will result in duplicate Group objects."},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"public class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"    public DuplicateGroupException() {"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"        super(\"Operation would result in duplicate groups\");"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":12}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" * JAXB-friendly version of the Group."},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class XmlAdaptedGroup {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    private String information;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     * Constructs an XmlAdaptedGroup."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup() {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"     * Constructs an {@code XmlAdaptedGroup} with the given group details."},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup(String information) {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        this.information \u003d information;"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"     * Converts a given Group into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedGroup"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup(Group source) {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        information \u003d source.getInformation().value;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"     * Converts this jaxb-friendly adapted group object into the model\u0027s Group object."},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        if (this.information \u003d\u003d null) {"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                    Information.class.getSimpleName()));"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        if (!Information.isValidInformation(this.information)) {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        final Information information \u003d new Information(this.information);"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        return new Group(information);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        if (!(other instanceof XmlAdaptedGroup)) {"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup otherGroup \u003d (XmlAdaptedGroup) other;"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        return Objects.equals(information, otherGroup.information);"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"jas5469":58,"-":14}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new TimeTableLink(\"http://modsn.us/MYwiD\"),"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"friends\")),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new TimeTableLink(\"http://modsn.us/gka24\"),"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new TimeTableLink(\"http://modsn.us/gOVE5\"),"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"neighbours\")),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new TimeTableLink(\"http://modsn.us/NejPO\"),"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"family\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new TimeTableLink(\"http://modsn.us/TJmxw\"),"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"classmates\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new TimeTableLink(\"http://modsn.us/MQcxm\"),"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"colleagues\"))"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    public static ToDo[] getSampleToDos() {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo[] {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo A\")),"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo B\")),"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo C\")),"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo D\"))"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        };"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"            for (ToDo sampleToDo : getSampleToDos()) {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                sampleAb.addToDo(sampleToDo);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate todos\", e);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":30,"Isaaaca":1,"-":55}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":" * JAXB-friendly version of the Event."},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedEvent {"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private String venue;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private String date;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    private String startTime;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private String endTime;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs an XmlAdaptedEvent."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent() {}"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs an {@code XmlAdaptedEvent} with the given event details."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent(String name, String venue, String date, String startTime, String endTime) {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     * Converts a given Event into this class for JAXB use."},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEvent"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent(Event source) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d source.getName();"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d source.getVenue();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d source.getDate();"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d source.getStartTime();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d source.getEndTime();"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(this.name)) {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.venue \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Venue\"));"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(this.venue)) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidDate(this.date)) {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"StartTime\"));"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(this.startTime)) {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EndTime\"));"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(this.endTime)) {"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        return new Event(name, venue, date, startTime, endTime);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof XmlAdaptedEvent)) {"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        return Objects.equals(name, otherEvent.name)"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(venue, otherEvent.venue)"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(date, otherEvent.date)"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(startTime, otherEvent.startTime)"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(endTime, otherEvent.endTime);"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"Isaaaca":2,"LeonidAgarth":92,"-":18}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    private final TimeTableLink link;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    private final Detail detail;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public Person(Name name, Phone phone, Email email, Address address, TimeTableLink link, Detail detail,"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                  Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(name, phone, email, address, link, detail, tags);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d link;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public  TimeTableLink getTimeTableLink() {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        return link;"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public  Detail getDetail() {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        return detail;"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 otherPerson.getTimeTableLink().equals(this.getTimeTableLink())"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 otherPerson.getDetail().equals(this.getDetail());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.hash(name, phone, email, address, link, detail, tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"                .append(\" Timetable link: \")"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"                .append(getTimeTableLink())"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"                .append(\" Detail: \")"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"                .append(getDetail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":14,"Isaaaca":6,"LeonidAgarth":3,"-":96}},{"path":"src/main/java/seedu/address/model/person/TimeTableLink.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":" * Represents the link to a Person\u0027s TimeTable."},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLink(String)}"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"public class TimeTableLink {"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    public static final String MESSAGE_TIMETABLE_LINK_CONSTRAINTS \u003d \"Timetable Links should \""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"            + \"adhere to the following constraints:\\n\""},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"            + \"1. Begin with \\\"http://modsn.us/\\\". \\n\""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"            + \"2. This is followed by a string of alphanumeric characters. \";"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    // alphanumeric and special characters"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private static final String SHORT_URL_FROINT_REGEX \u003d \"http://modsn\\\\.us/\";"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private static final String SHORT_URL_TRAIL_REGEX \u003d \"[a-zA-Z0-9\\\\-]+\"; // alphanumeric and hyphen"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"    public static final String SHORT_URL_VALIDATION_REGEX \u003d SHORT_URL_FROINT_REGEX + SHORT_URL_TRAIL_REGEX;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"     * Constructs an {@code TimeTableLink}."},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"     * @param link A valid email address."},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    public TimeTableLink(String link) {"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        checkArgument(isValidLink(link), MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"        this.value \u003d link;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    public static boolean isValidLink(String test) {"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"        return test.matches(SHORT_URL_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"                || (other instanceof TimeTableLink // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 this.value.equals(((TimeTableLink) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":29,"-":29}},{"path":"src/main/java/seedu/address/model/group/Information.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * Represents a Group\u0027s information in the address book."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidInformation(String)}"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"public class Information {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_INFORMATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"            \"Group information should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"     * The first character of the information must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public static final String INFORMATION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     * Constructs a {@code Information}."},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     * @param information A valid information."},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public Information(String information) {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        requireNonNull(information);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        checkArgument(isValidInformation(information), MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        this.value \u003d information;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"     * Returns true if a given string is a valid to-do information."},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    public static boolean isValidInformation(String test) {"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        return test.matches(INFORMATION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"                || (other instanceof Information // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.value.equals(((Information) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"jas5469":35,"-":22}},{"path":"src/main/java/seedu/address/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" * Represents a Group in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"public class Group {"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    private final Information information;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"     * Every field must be present and not null."},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public Group(Information information) {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(information);"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        this.information \u003d information;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public Information getInformation() {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        return information;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        if (!(other instanceof Group)) {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        Group otherGroup \u003d (Group) other;"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        return otherGroup.getInformation().equals(this.getInformation());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        return Objects.hash(information);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        builder.append(getInformation());"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        return builder.toString();"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""}],"authorContributionMap":{"nhatquang3112":4,"jas5469":29,"-":22}},{"path":"src/main/java/seedu/address/model/person/TagContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class TagContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public TagContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        for (Tag t : tags) {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"            for (String key : keywords) {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"                if (t.name.equals(key)) {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"                    return true;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        return false;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"                || (other instanceof TagContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":24,"LeonidAgarth":3,"-":11}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an unmodifiable view of the todos list."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * This list will not contain any duplicate todos."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getToDoList();"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an unmodifiable view of the todos list."},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * This list will not contain any duplicate todos."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    ObservableList\u003cGroup\u003e getGroupList();"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an unmodifiable view of the events list."},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"     * This list will not contain any duplicate events."},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":11,"jas5469":3,"LeonidAgarth":6,"-":24}},{"path":"src/main/java/seedu/address/model/module/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.PropertyNamingStrategy;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.annotation.JsonNaming;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":" * Represents a schedule for a class in a module"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"public class Schedule {"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"    private String classNo;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    private String lessonType;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    private String weekText;"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    private String dayText;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private String startTime;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private String endTime;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private String venue;"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public Schedule() {"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"        this.classNo \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        this.lessonType \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        this.weekText \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        this.dayText \u003d \"\";"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        this.startTime \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        this.endTime \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"        this.venue \u003d \"\";"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    public Schedule(String classNo, String lessonType, String weekText, String dayText,"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"             String startTime, String endTime, String venue) {"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        this.classNo \u003d classNo;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        this.lessonType \u003d lessonType;"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        this.weekText \u003d weekText;"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        this.dayText \u003d dayText;"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"        this.venue \u003d venue;"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"    public String getClassNo() {"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        return classNo;"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    public String getLessonType() {"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        return lessonType;"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    public String getWeekText() {"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"        return weekText;"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    public String getDayText() {"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        return dayText;"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"    public String getStartTime() {"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        return startTime;"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"    public String getEndTime() {"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        return endTime;"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    public String getVenue() {"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"        return venue;"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Schedule)) {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        Schedule otherSchedule \u003d (Schedule) other;"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        return otherSchedule.getClassNo().equals(this.getClassNo())"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getLessonType().equals(this.getLessonType())"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getWeekText().equals(this.getWeekText())"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getDayText().equals(this.getDayText())"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getStartTime().equals(this.getStartTime())"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getEndTime().equals(this.getEndTime())"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherSchedule.getVenue().equals(this.getVenue());"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"        return \"ClassNo: \" + classNo"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: \" + lessonType"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: \" + weekText"},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: \" + dayText"},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: \" + startTime"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: \" + endTime"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: \" + venue + \"\\n\";"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":76,"LeonidAgarth":17,"-":6}},{"path":"src/main/java/seedu/address/model/module/Module.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.model.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.PropertyNamingStrategy;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.annotation.JsonNaming;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":" * Represents a Module from NUSmods"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"public class Module {"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private String moduleCode \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private String moduleTitle \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private ArrayList\u003cSchedule\u003e timetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    public Module(){}"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    public Module(String moduleCode, String moduleTitle, ArrayList\u003cSchedule\u003e timetable) {"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        requireAllNonNull(moduleCode, moduleTitle);"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    public Module(String moduleCode, String moduleTitle) {"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        requireAllNonNull(moduleCode, moduleTitle);"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"    public String getModuleCode() {"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        return moduleCode;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    public String getModuleTitle() {"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        return moduleTitle;"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    public ArrayList\u003cSchedule\u003e getScheduleList() {"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        return timetable;"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Module)) {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        Module otherModule \u003d (Module) other;"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        return otherModule.getModuleCode().equals(this.getModuleCode())"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherModule.getModuleTitle().equals(this.getModuleTitle());"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"        return \"moduleCode: \" + moduleCode + \" moduleTitle: \" + moduleTitle + \"\\n\" + timetable.toString();"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":52,"LeonidAgarth":8,"-":6}},{"path":"src/main/java/seedu/address/model/person/Detail.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * Represents a Person\u0027s detail in the address book."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDetail(String)}"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class Detail {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DETAIL_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"            \"Person detail should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the detail must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public final String detail;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Detail}."},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * @param detail A valid detail."},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public Detail(String detail) {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidDetail(detail), MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid person detail."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidDetail(String test) {"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        return test.matches(DETAIL_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        return detail;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Detail // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.detail.equals(((Detail) other).detail)); // state check"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        return detail.hashCode();"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":48,"-":11}},{"path":"src/main/java/seedu/address/model/todo/exceptions/ToDoNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo.exceptions;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":" * Signals that the operation is unable to find the specified ToDo."},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoNotFoundException extends Exception {}"}],"authorContributionMap":{"nhatquang3112":6}},{"path":"src/main/java/seedu/address/model/todo/exceptions/DuplicateToDoException.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo.exceptions;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":" * Signals that the operation will result in duplicate ToDo objects."},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"public class DuplicateToDoException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"    public DuplicateToDoException() {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"        super(\"Operation would result in duplicate to-dos\");"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":11,"-":1}},{"path":"src/main/java/seedu/address/model/todo/Content.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo\u0027s content in the address book."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class Content {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_CONTENT_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"            \"To-do content should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the content must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Content}."},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * @param content A valid content."},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public Content(String content) {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(content);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidContent(content), MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        this.value \u003d content;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid to-do content."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidContent(String test) {"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        return test.matches(CONTENT_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Content // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.value.equals(((Content) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":38,"-":21}},{"path":"src/main/java/seedu/address/model/todo/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo\u0027s status in the address book."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class Status {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"            \"To-do status should have only two cases: done, undone.It should not be blank\";"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the status must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public static final String STATUS_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Status}."},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * @param status A valid status."},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public Status(String status) {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(status);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidStatus(status), MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        this.value \u003d status;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid to-do status."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        if (test.matches(STATUS_VALIDATION_REGEX) \u0026\u0026 ("},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                test.equals(\"done\") || test.equals(\"undone\"))) {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.value.equals(((Status) other).value)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":42,"-":22}},{"path":"src/main/java/seedu/address/model/todo/ToDo.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class ToDo {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private final Content content;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    private Status status;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * Every field must be present and not null."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code ToDo} with the given details."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * Status is \"undone\" by default"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo(Content content) {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(content);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d new Status(\"undone\");"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code ToDo} with the given details."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo(Content content, Status status) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(content);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(status);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d status;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public Content getContent() {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        return content;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    public Status getStatus() {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        return status;"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof ToDo)) {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        ToDo otherToDo \u003d (ToDo) other;"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        return otherToDo.getContent().equals(this.getContent());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.hash(content);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        builder.append(getContent());"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        return builder.toString();"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":52,"-":20}},{"path":"src/main/java/seedu/address/model/group/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * A list of to-dos that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" * @see Group#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if the list contains an equivalent to-do as the given argument."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * Adds a to-do to the list."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicateGroupException if the to-do to add is a duplicate of an existing to-do in the list."},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    public void add(Group toAdd) throws DuplicateGroupException {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    public void setGroups(UniqueGroupList replacement) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    public void setGroups(List\u003cGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(groups);"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        final UniqueGroupList replacement \u003d new UniqueGroupList();"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        for (final Group group : groups) {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"            replacement.add(group);"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        setGroups(replacement);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e asObservableList() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":12,"jas5469":29,"-":42}},{"path":"src/main/java/seedu/address/model/event/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"public class EventNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":7}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.UniqueToDoList;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    private final UniqueToDoList todos;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    private final UniqueGroupList groups;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    private final UniqueEventList events;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        todos \u003d new UniqueToDoList();"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        groups \u003d new UniqueGroupList();"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"    public AddressBook() {"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(List\u003cToDo\u003e todos) throws DuplicateToDoException {"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        this.todos.setToDos(todos);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"    public void setGroups(List\u003cGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        this.groups.setGroups(groups);"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e syncedToDoList \u003d newData.getToDoList();"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e syncedGroupList \u003d newData.getGroupList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"            setToDos(syncedToDoList);"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"            setGroups(syncedGroupList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate todos\");"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"            throw new AssertionError(\"AddressBooks Should not have duplicate groups\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the given ToDo {@code target} in the list with {@code editedToDo}."},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if updating the ToDo\u0027s details causes the ToDo to be equivalent to"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     *                                  another existing ToDo in the list."},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"    public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(editedToDo);"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        todos.setToDo(target, editedToDo);"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getTimeTableLink(),"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"                person.getDetail(), correctTagReferences);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":188,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"nhatquang3112"},"content":"    //// to-do-level operations"},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":201,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"nhatquang3112"},"content":"     * Adds a to-do to the address book."},{"lineNumber":203,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":204,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if an equivalent to-do already exists."},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"    public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"        todos.add(todo);"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":"    ////Group operation"},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":"    public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":"        groups.add(group);"},{"lineNumber":219,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"    ////Event operations"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"     * Adds an event to the address book."},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if an equivalent event already exists."},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"    public void addEvent(Event e) throws DuplicateEventException {"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(e);"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getToDoList() {"},{"lineNumber":250,"author":{"gitID":"nhatquang3112"},"content":"        return todos.asObservableList();"},{"lineNumber":251,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":"        return groups.asObservableList();"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":258,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":260,"author":{"gitID":"LeonidAgarth"},"content":"        return events.asObservableList();"},{"lineNumber":261,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":263,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":277,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from all {@code persons} in the {@code AddressBook} and from the {@code AddressBook}."},{"lineNumber":279,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":281,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":282,"author":{"gitID":"Isaaaca"},"content":"            for (Person person : persons) {"},{"lineNumber":283,"author":{"gitID":"Isaaaca"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":284,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":285,"author":{"gitID":"Isaaaca"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":286,"author":{"gitID":"Isaaaca"},"content":"            throw new AssertionError(\"Impossible: original person is not found from the address book.\");"},{"lineNumber":287,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":289,"author":{"gitID":"Isaaaca"},"content":"        removeTagFromAddressBook(tag);"},{"lineNumber":290,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":291,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":293,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from the {@code AddressBook}."},{"lineNumber":295,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"Isaaaca"},"content":"    private void removeTagFromAddressBook(Tag tag) {"},{"lineNumber":297,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e editedTagList \u003d tags.toSet();"},{"lineNumber":298,"author":{"gitID":"Isaaaca"},"content":"        if (editedTagList.contains(tag)) {"},{"lineNumber":299,"author":{"gitID":"Isaaaca"},"content":"            editedTagList.remove(tag);"},{"lineNumber":300,"author":{"gitID":"Isaaaca"},"content":"            tags.setTags(editedTagList);"},{"lineNumber":301,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the old {@code target} tag with the new {@code editedTag}"},{"lineNumber":306,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"LeonidAgarth"},"content":"    public void editTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":308,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e editedTagList \u003d tags.toSet();"},{"lineNumber":309,"author":{"gitID":"LeonidAgarth"},"content":"        if (editedTagList.contains(target)) {"},{"lineNumber":310,"author":{"gitID":"LeonidAgarth"},"content":"            editedTagList.remove(target);"},{"lineNumber":311,"author":{"gitID":"LeonidAgarth"},"content":"            editedTagList.add(editedTag);"},{"lineNumber":312,"author":{"gitID":"Isaaaca"},"content":"            tags.setTags(editedTagList);"},{"lineNumber":313,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"            throw new TagNotFoundException();"},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":316,"author":{"gitID":"LeonidAgarth"},"content":"        for (Person p : persons) {"},{"lineNumber":317,"author":{"gitID":"LeonidAgarth"},"content":"            replaceTagInPerson(target, editedTag, p);"},{"lineNumber":318,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":321,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the old {@code target} tag of a {@code person} with the new {@code editedTag}"},{"lineNumber":323,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"LeonidAgarth"},"content":"    private void replaceTagInPerson(Tag target, Tag editedTag, Person person) {"},{"lineNumber":325,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":326,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":327,"author":{"gitID":"Isaaaca"},"content":"        //Terminate if tag is not is tagList"},{"lineNumber":328,"author":{"gitID":"LeonidAgarth"},"content":"        if (!tagList.remove(target)) {"},{"lineNumber":329,"author":{"gitID":"LeonidAgarth"},"content":"            return;"},{"lineNumber":330,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"LeonidAgarth"},"content":"        tagList.add(editedTag);"},{"lineNumber":332,"author":{"gitID":"Isaaaca"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":333,"author":{"gitID":"nhatquang3112"},"content":"                person.getEmail(), person.getAddress(), person.getTimeTableLink(), person.getDetail(), tagList);"},{"lineNumber":334,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":335,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":336,"author":{"gitID":"Isaaaca"},"content":"            updatePerson(person, updatedPerson);"},{"lineNumber":337,"author":{"gitID":"Isaaaca"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":338,"author":{"gitID":"Isaaaca"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":339,"author":{"gitID":"Isaaaca"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":340,"author":{"gitID":"Isaaaca"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":341,"author":{"gitID":"LeonidAgarth"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in \""},{"lineNumber":342,"author":{"gitID":"LeonidAgarth"},"content":"                    + \"a PersonNotFoundException. See Person#equals(Object).\");"},{"lineNumber":343,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":344,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":346,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":347,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from all {@code persons} in the {@code AddressBook}."},{"lineNumber":348,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"Isaaaca"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":350,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":351,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":352,"author":{"gitID":"Isaaaca"},"content":"        //Terminate if tag is not is tagList"},{"lineNumber":353,"author":{"gitID":"Isaaaca"},"content":"        if (!tagList.remove(tag)) {"},{"lineNumber":354,"author":{"gitID":"Isaaaca"},"content":"            return;"},{"lineNumber":355,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":356,"author":{"gitID":"Isaaaca"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":357,"author":{"gitID":"nhatquang3112"},"content":"                person.getEmail(), person.getAddress(), person.getTimeTableLink(), person.getDetail(), tagList);"},{"lineNumber":358,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":359,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":360,"author":{"gitID":"Isaaaca"},"content":"            updatePerson(person, updatedPerson);"},{"lineNumber":361,"author":{"gitID":"Isaaaca"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":362,"author":{"gitID":"Isaaaca"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":363,"author":{"gitID":"Isaaaca"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":364,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":365,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":48,"Isaaaca":64,"jas5469":26,"LeonidAgarth":48,"-":180}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    private final FilteredList\u003cToDo\u003e filteredToDos;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        filteredToDos \u003d new FilteredList\u003c\u003e(this.addressBook.getToDoList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"    public synchronized void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.addToDo(todo);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.editTag(target, editedTag);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(target, editedToDo);"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.updateToDo(target, editedToDo);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"    public synchronized void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        addressBook.addGroup(group);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"    public synchronized void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.addEvent(event);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ToDo List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an unmodifiable view of the list of {@code ToDo} backed by the internal list of"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        return FXCollections.unmodifiableObservableList(filteredToDos);"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"    public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        filteredToDos.setPredicate(predicate);"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":29,"Isaaaca":6,"jas5469":5,"LeonidAgarth":13,"-":131}},{"path":"src/main/java/seedu/address/model/event/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation will result in duplicate Event objects."},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"    public DuplicateEventException() {"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"LeonidAgarth":8,"-":1}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TAG_COLOR_CONSTRAINTS \u003d \"Colors available are: \""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"            + \"teal, red, yellow, blue, orange, brown, green, pink, black, grey\";"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String TAG_COLOR_FILE_PATH \u003d \"data/tagColors.txt\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String[] AVAILABLE_COLORS \u003d new String[] {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"        \"green\", \"pink\", \"black\", \"grey\", \"undefined\"};"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public final String name;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public final String color;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     * @param name A valid tag name."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public Tag(String name) {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagName(name), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d \"undefined\";"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    public Tag(String name, String color) {"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagName(name), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagColor(color), MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d color;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns true if a given string is a available tag color"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidTagColor(String color) {"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedColor \u003d color.trim().toLowerCase();"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        for (String s : AVAILABLE_COLORS) {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"            if (s.equals(trimmedColor)) {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                return true;"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        return false;"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 this.name.equals(((Tag) other).name)); // state check"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        return name.hashCode();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        return \u0027[\u0027 + name + \u0027]\u0027;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":38,"-":45}},{"path":"src/main/java/seedu/address/model/todo/UniqueToDoList.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" * A list of to-dos that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" * @see ToDo#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"public class UniqueToDoList implements Iterable\u003cToDo\u003e {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private final ObservableList\u003cToDo\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if the list contains an equivalent to-do as the given argument."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public boolean contains(ToDo toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     * Adds a to-do to the list."},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if the to-do to add is a duplicate of an existing to-do in the list."},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    public void add(ToDo toAdd) throws DuplicateToDoException {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the to-do {@code target} in the list with {@code editedToDo}."},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if the replacement is equivalent to another existing to-do in the list."},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(editedToDo);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"            throw new ToDoNotFoundException();"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        if (!target.equals(editedToDo) \u0026\u0026 internalList.contains(editedToDo)) {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        internalList.set(index, editedToDo);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(UniqueToDoList replacement) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(List\u003cToDo\u003e todos) throws DuplicateToDoException {"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(todos);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        final UniqueToDoList replacement \u003d new UniqueToDoList();"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        for (final ToDo todo : todos) {"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"            replacement.add(todo);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        setToDos(replacement);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e asObservableList() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    public Iterator\u003cToDo\u003e iterator() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof UniqueToDoList // instanceof handles nulls"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueToDoList) other).internalList));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":64,"-":42}},{"path":"src/main/java/seedu/address/model/tag/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"public class TagNotFoundException extends Exception {}"}],"authorContributionMap":{"LeonidAgarth":6}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.DuplicateEventException;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    Predicate\u003cToDo\u003e PREDICATE_SHOW_ALL_TODOS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    /** Changes the color of a tag */"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException;"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    /** Removes the given tag from addressbook and all persons */"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    void removeTag(Tag tag);"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the given ToDo {@code target} with {@code editedToDo}."},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if updating the ToDo\u0027s details causes the ToDo to be equivalent to"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"     *      another existing ToDo in the list."},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException;"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns an unmodifiable view of the filtered to-do list */"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getFilteredToDoList();"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     * Updates the filter of the filtered to-do list to filter by the given {@code predicate}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"    void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    /** Adds the given to-do */"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"    void addToDo(ToDo todo) throws DuplicateToDoException;"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"    /** Add group */"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"    void addGroup(Group group) throws DuplicateGroupException;"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    /** Adds the given Event */"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    void addEvent(Event event) throws DuplicateEventException;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":24,"Isaaaca":4,"jas5469":5,"LeonidAgarth":8,"-":50}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":" * Represents an event related to a person"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"public class Event {"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_VENUE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"            \"Venues should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date should be in the format of DD/MM/YYYY\";"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be in the format of HHmm\";"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/\""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"            + \"|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9\""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"            + \"]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\\""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"            + \"d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-4])[0-5][0-9]\";"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    protected String name;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    protected String venue;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    protected String date;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    protected String startTime;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    protected String endTime;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"     * Default constructor, creating a blank Event."},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    public Event() {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        this(\"blank\", \"blank\", \"19/07/2017\", \"0000\", \"2359\");"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"     * Every field must be present and not null"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    public Event(String name, String venue, String date, String start, String end) {"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(name, start, end);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d start;"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d end;"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        return otherEvent.getName().equals(this.getName())"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(this.getVenue())"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDate().equals(this.getDate())"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getEndTime().equals(this.getEndTime());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        return Objects.hash(name, venue, date, startTime, endTime);"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        builder.append(getName())"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Venue: \")"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getVenue())"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Date: \")"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getDate())"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Start time: \")"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getStartTime())"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" End time: \")"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getEndTime());"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        return builder.toString();"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    public String getName() {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        return name;"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"    public String getVenue() {"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        return venue;"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    public String getDate() {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        return date;"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"    public String getStartTime() {"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        return startTime;"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"    public String getEndTime() {"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        return endTime;"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":105,"-":15}},{"path":"src/main/java/seedu/address/model/event/WeeklyEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.module.Module;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.module.Schedule;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" * Events, such as lectures, tutorial slots, to appear in timetable"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"public class WeeklyEvent extends Event {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    private String day;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String[] details;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public WeeklyEvent(String name, String venue, String start, String end, String... details) {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"        super(name, venue, \"NA\", start, end);"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        this.day \u003d details[0];          //Placeholder command"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        this.details \u003d details;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public WeeklyEvent(Module mod, Schedule schedule) {"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(mod, schedule);"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d mod.getModuleCode();"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d schedule.getClassNo();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d schedule.getStartTime();"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d schedule.getEndTime();"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        this.day \u003d schedule.getDayText();"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        this.details \u003d null;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    public String getDay() {"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        return day;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cString\u003e getDetails() {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003cString\u003e(Arrays.asList(details));"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        return FXCollections.observableArrayList(temp);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof WeeklyEvent)) {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        WeeklyEvent otherEvent \u003d (WeeklyEvent) other;"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        return otherEvent.getName().equals(this.getName())"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(this.getVenue())"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDate().equals(this.getDate())"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getEndTime().equals(this.getEndTime())"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDay().equals(this.getDay())"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDetails().equals(this.getDetails());"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":51,"-":13}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" *"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" * Supports a minimal set of list operations."},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":" *"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * @see Event#equals(Object)"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"     * Adds a event to the list."},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if the event to add is a duplicate of an existing event in the list."},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public void add(Event toAdd) throws DuplicateEventException {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(toAdd);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        if (contains(toAdd)) {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        internalList.add(toAdd);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws EventNotFoundException if {@code target} could not be found in the list."},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent(Event target, Event editedEvent)"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"            throw new EventNotFoundException();"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        internalList.set(index, editedEvent);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean removeEvent(Event toRemove) throws EventNotFoundException {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(toRemove);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            throw new EventNotFoundException();"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents(List\u003cEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(events);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        final UniqueEventList replacement \u003d new UniqueEventList();"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        for (final Event event : events) {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"            replacement.add(event);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        setEvents(replacement);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e asObservableList() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":73,"-":45}}]
