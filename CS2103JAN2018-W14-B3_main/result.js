var resultJson = [{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + EXPECTED_GRADUATION_YEAR_DESC_AMY + \" \""},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"                + TAG_DESC_FRIEND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_BOB).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":183,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":193,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":42,"-":231}},{"path":"src/test/java/systemtests/FilterCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_2019;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"    public void filter() {"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"        /* Case: filters multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"         * -\u003e 3 persons found"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        String command \u003d \"   \" + FilterCommand.COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"                + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019 + \"   \";"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, ELLE, FIONA); // their graduation year is before or equal 2019"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        /* Case: repeat previous filter command where person list is displaying the persons satisfying the filter"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter person where person list is not displaying the person we are finding -\u003e 5 person found */"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2020\";"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA);"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter no person in address book, 2017 -\u003e 0 persons found */"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2017\";"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter multiple persons in address book, 2 keywords -\u003e 3 persons found */"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2018\" + \" \""},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"                + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, ELLE, FIONA); //only last keyword effective"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"        /* Case: undo previous filter command -\u003e rejected */"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"        /* Case: redo previous filter command -\u003e rejected */"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter same persons in address book after deleting 1 of them -\u003e 2 person found */"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(CARL));"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter while a person is selected -\u003e selected card deselected */"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"        selectPerson(Index.fromOneBased(4));"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"        assertTrue(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter person in empty address book -\u003e 0 persons found */"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        deleteAllPersons();"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"        command \u003d \"fiLteR y/2020\";"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"     * These verifications are done by"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"mhq199657"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"mhq199657"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":123,"author":{"gitID":"mhq199657"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":128,"author":{"gitID":"mhq199657"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":"     * These verifications are done by"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"mhq199657"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":132,"author":{"gitID":"mhq199657"},"content":"     * error style."},{"lineNumber":133,"author":{"gitID":"mhq199657"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":134,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":138,"author":{"gitID":"mhq199657"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"mhq199657"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"mhq199657"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":144}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_EXPECTED_GRADUATION_YEAR \u003d \"2020\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":4,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearBeforeKeywordPredicate;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"    public void parse_validArg_returnsFilterCommand() {"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        FilterCommand expectedFilterCommand \u003d"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"                new FilterCommand(new ExpectedGraduationYearBeforeKeywordPredicate(\"2020\"));"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, \" y/2020\", expectedFilterCommand);"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":27,"-":1}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":133,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"mhq199657"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":179,"author":{"gitID":"mhq199657"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":192,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":223,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":34,"-":253}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearBeforeKeywordPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":62,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"                PersonUtil.getFilterCommand(person));"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        assertEquals(new FilterCommand(new ExpectedGraduationYearBeforeKeywordPredicate("},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"                person.getExpectedGraduationYear().toString())), command);"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":126,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":10,"-":145}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_GRADUATION_YEAR_DESC;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.CommandTestUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"        // multiple expectedGraduationYear - last expectedGraduationYear accepted"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"                .withTags().build();"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":135,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"                expectedMessage);"},{"lineNumber":138,"author":{"gitID":"mhq199657"},"content":"        //missing expectedGraduationYear prefix"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"mhq199657"},"content":"                + VALID_EXPECTED_GRADUATION_YEAR_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"                + VALID_EXPECTED_GRADUATION_YEAR_BOB,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":158,"author":{"gitID":"mhq199657"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"mhq199657"},"content":"        //invalid expectedGraduationYear"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"                        + INVALID_EXPECTED_GRADUATION_YEAR_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":172,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":175,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":176,"author":{"gitID":"mhq199657"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":179,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":180,"author":{"gitID":"mhq199657"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":72,"-":115}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_GRADUATION_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EXPECTED_GRADUATION_YEAR_DESC,"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS); // invalid tag"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":134,"author":{"gitID":"mhq199657"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":138,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"        // expectedGraduationYear"},{"lineNumber":172,"author":{"gitID":"mhq199657"},"content":"        userInput \u003d targetIndex.getOneBased() + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"mhq199657"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":174,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":188,"author":{"gitID":"mhq199657"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":189,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + EXPECTED_GRADUATION_YEAR_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"mhq199657"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_AMY"},{"lineNumber":192,"author":{"gitID":"mhq199657"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":196,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":197,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":214,"author":{"gitID":"mhq199657"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":215,"author":{"gitID":"mhq199657"},"content":"                + INVALID_EXPECTED_GRADUATION_YEAR_DESC + ADDRESS_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":216,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":218,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_BOB).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB).build();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":30,"-":203}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_EXPECTED_GRADUATION_YEAR_AMY \u003d \"2018\";"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_EXPECTED_GRADUATION_YEAR_BOB \u003d \"2020\";"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"    public static final String EXPECTED_GRADUATION_YEAR_DESC_AMY \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"            + VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"    public static final String EXPECTED_GRADUATION_YEAR_DESC_BOB \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"            + VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"    public static final String INVALID_EXPECTED_GRADUATION_YEAR_DESC \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"            + \"9999\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":11,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearBeforeKeywordPredicate;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandTest {"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(\"2020\");"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(\"2024\");"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand.equals(2020));"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        // different person -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"    public void execute_tooSmallGraduationYear_noPersonFound() {"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d prepareCommand(\"2017\");"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"    public void execute_moderateGraduationYear_somePersonsFound() {"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d prepareCommand(\"2020\");"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, CARL, DANIEL, ELLE, FIONA));"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"    private FilterCommand prepareCommand(String userInput) {"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"                new FilterCommand(new ExpectedGraduationYearBeforeKeywordPredicate(userInput));"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        return command;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandSuccess(FilterCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":97}},{"path":"src/test/java/seedu/address/model/person/ExpectedGraduationYearBeforeKeywordPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearBeforeKeywordPredicateTest {"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"        String firstPredicateKeyword \u003d \"2020\";"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"        String secondPredicateKeyword \u003d \"2024\";"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate firstPredicate \u003d"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(firstPredicateKeyword);"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate secondPredicate \u003d"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(secondPredicateKeyword);"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate firstPredicateCopy \u003d"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(firstPredicateKeyword);"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate.equals(2020));"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        // different person -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"    public void test_expectedGraduationYearBeforeOrEqualKeyword_returnsTrue() {"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        // Before keyword"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate predicate \u003d"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(\"2020\");"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2019\").build()));"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"        // Equals keyword"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"    public void test_expectedGraduationYearAfterKeyword_returnsFalse() {"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        // After keyword"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearBeforeKeywordPredicate predicate \u003d"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearBeforeKeywordPredicate(\"2018\");"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"        assertFalse(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":60}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_EXPECTED_GRADUATION_YEAR \u003d BENSON.getExpectedGraduationYear().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"                null,  VALID_EXPECTED_GRADUATION_YEAR, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, invalidTags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":19,"-":101}},{"path":"src/test/java/seedu/address/model/person/ExpectedGraduationYearTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpectedGraduationYear(null));"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"        String invalidExpectedGraduationYear \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidExpectedGraduationYear));"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        // null expectedGraduationYear"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.isValidExpectedGraduationYear(null));"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        // invalid expectedGraduationYear"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"91\")); // less than 4 numbers"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"year2018\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"-2018\")); // negative symbol before digits"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"201 8\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2018.5\")); // year and month"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        // valid expectedGraduationYear"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assertTrue(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2018\"));"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        assertTrue(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2025\"));"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":25,"-":15}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        sb.append(PREFIX_EXPECTED_GRADUATION_YEAR + person.getExpectedGraduationYear().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":37,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"    public static String getFilterCommand(Person person) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        sb.append(FilterCommand.COMMAND_WORD).append(\" \");"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        sb.append(PREFIX_EXPECTED_GRADUATION_YEAR).append(person.getExpectedGraduationYear().value + \" \");"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":9,"-":39}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        descriptor.setExpectedGraduationYear(person.getExpectedGraduationYear());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code ExpectedGraduationYear} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"    public EditPersonDescriptorBuilder withExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"        descriptor.setExpectedGraduationYear(new ExpectedGraduationYear(expectedGraduationYear));"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":10,"-":86}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"            .withPhone(\"85355255\").withExpectedGraduationYear(\"2020\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withExpectedGraduationYear(\"2021\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2019\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2020\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2018\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2019\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2022\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person ALICE_WITHOUT_TAG \u003d new PersonBuilder(ALICE).withTags().build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person BENSON_WITH_FRIENDS_TAG_REMOVED \u003d new PersonBuilder(BENSON)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person CARL_WITHOUT_TAG \u003d new PersonBuilder(CARL).withTags().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2019\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(\"2018\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"    public static final String KEYWORD_MATCHING_2019 \u003d \"2019\"; //A keyword that matches 2020"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":23,"-":75}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_EXPECTED_GRADUATION_YEAR \u003d \"2020\";"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"    private ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d new ExpectedGraduationYear(DEFAULT_EXPECTED_GRADUATION_YEAR);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d personToCopy.getExpectedGraduationYear();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code ExpectedGraduationYear} of the {@code Person} that we are building."},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"    public PersonBuilder withExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d new ExpectedGraduationYear(expectedGraduationYear);"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"        return new Person(name, phone, email, address, expectedGraduationYear, tags);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":19,"-":87}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                        PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        if (!arePrefixesPresent(argMultimap,"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"                PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_EXPECTED_GRADUATION_YEAR)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"            ExpectedGraduationYear expectedGraduationYear \u003d ParserUtil.parseExpectedGraduationYear(argMultimap"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"                    .getValue(PREFIX_EXPECTED_GRADUATION_YEAR)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"            Person person \u003d new Person(name, phone, email, address, expectedGraduationYear, tagList);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":14,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":4,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public static final Prefix PREFIX_EXPECTED_GRADUATION_YEAR \u003d new Prefix(\"y/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code String expectedGraduationYear} into an {@code ExpectedGraduationYear}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException if given {@code expectedGraduationYear} is invalid."},{"lineNumber":148,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"mhq199657"},"content":"    public static ExpectedGraduationYear parseExpectedGraduationYear(String expectedGraduationYear)"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"        String trimmedExpectedGraduationYear \u003d expectedGraduationYear.trim();"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"        if (!ExpectedGraduationYear.isValidExpectedGraduationYear(trimmedExpectedGraduationYear)) {"},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"        return new ExpectedGraduationYear(trimmedExpectedGraduationYear);"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code Optional\u003cString\u003e expectedGraduationYear}"},{"lineNumber":160,"author":{"gitID":"mhq199657"},"content":"     * into an {@code Optional\u003cExpectedGraduationYear\u003e} if {@code expectedGraduationYear} is present."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"    public static Optional\u003cExpectedGraduationYear\u003e parseExpectedGraduationYear(Optional\u003cString\u003e expectedGraduationYear)"},{"lineNumber":164,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":166,"author":{"gitID":"mhq199657"},"content":"        return expectedGraduationYear.isPresent() ? Optional.of(parseExpectedGraduationYear("},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"                expectedGraduationYear.get())) : Optional.empty();"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":24,"-":172}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                        PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"            ParserUtil.parseExpectedGraduationYear(argMultimap.getValue(PREFIX_EXPECTED_GRADUATION_YEAR))"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"                    .ifPresent(editPersonDescriptor::setExpectedGraduationYear);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":5,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \"2020 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":3,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":" * Filters and lists all persons in address book whose graduation year is before or equal to the specified year.."},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"public class FilterCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter according the predicates specified. \""},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"            + \"Display all persons with expected graduation year before or equal to the input keyword\\n\""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR] \""},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \"2020 \";"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"    public FilterCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":29,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYear updatedExpectedGraduationYear \u003d editPersonDescriptor.getExpectedGraduationYear()"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"                .orElse(personToEdit.getExpectedGraduationYear());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":118,"author":{"gitID":"mhq199657"},"content":"                updatedExpectedGraduationYear, updatedTags);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":149,"author":{"gitID":"mhq199657"},"content":"        private ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":156,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":157,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"            setExpectedGraduationYear(toCopy.expectedGraduationYear);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":169,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":172,"author":{"gitID":"mhq199657"},"content":"                    this.expectedGraduationYear, this.tags);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"mhq199657"},"content":"        public void setExpectedGraduationYear(ExpectedGraduationYear expectedGraduationYear) {"},{"lineNumber":208,"author":{"gitID":"mhq199657"},"content":"            this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":209,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":211,"author":{"gitID":"mhq199657"},"content":"        public Optional\u003cExpectedGraduationYear\u003e getExpectedGraduationYear() {"},{"lineNumber":212,"author":{"gitID":"mhq199657"},"content":"            return Optional.ofNullable(expectedGraduationYear);"},{"lineNumber":213,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":216,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":217,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":225,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":226,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":250,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 getExpectedGraduationYear().equals(e.getExpectedGraduationYear())"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":25,"-":229}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"    private String expectedGraduationYear;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String expectedGraduationYear,"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d source.getExpectedGraduationYear().value;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"mhq199657"},"content":"        if (this.expectedGraduationYear \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"                    ExpectedGraduationYear.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"        if (!ExpectedGraduationYear.isValidExpectedGraduationYear(this.expectedGraduationYear)) {"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":"        final ExpectedGraduationYear expectedGraduationYear \u003d new ExpectedGraduationYear(this.expectedGraduationYear);"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":132,"author":{"gitID":"mhq199657"},"content":"        return new Person(name, phone, email, address, expectedGraduationYear, tags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 Objects.equals(expectedGraduationYear, otherPerson.expectedGraduationYear)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":17,"-":136}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    private final ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"                  ExpectedGraduationYear expectedGraduationYear, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        requireAllNonNull(name, phone, email, address, expectedGraduationYear, tags);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYear getExpectedGraduationYear() {"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        return expectedGraduationYear;"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 otherPerson.getExpectedGraduationYear().equals(this.getExpectedGraduationYear());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"        return Objects.hash(name, phone, email, address, expectedGraduationYear, tags);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"                .append(\" Expected graudation year: \")"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"                .append(getExpectedGraduationYear())"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":14,"-":96}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new ExpectedGraduationYear(\"2018\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new ExpectedGraduationYear(\"2019\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new ExpectedGraduationYear(\"2020\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new ExpectedGraduationYear(\"2020\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ExpectedGraduationYear(\"2021\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new ExpectedGraduationYear(\"2019\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":7,"-":61}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearBeforeKeywordPredicate;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EXPECTED_GRADUATION_YEAR); //PREFIX_TAG temporarily removed"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EXPECTED_GRADUATION_YEAR)"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"            ExpectedGraduationYear expectedGraduationYear \u003d ParserUtil.parseExpectedGraduationYear(argMultimap"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                    .getValue(PREFIX_EXPECTED_GRADUATION_YEAR)).get();"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"            /*"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"            //Implement later"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"            */"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"            List\u003cPredicate\u003cPerson\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"            predicateList.add(new ExpectedGraduationYearBeforeKeywordPredicate(expectedGraduationYear.toString()));"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"            Predicate\u003cPerson\u003e allPredicates \u003d combineAllPredicates(predicateList);"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"            return new FilterCommand(allPredicates);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"     * Combines all the predicates in the predicateList into a single Predicate"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"     * @param predicateList a list of non-empty predicates"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"     * @return a single Predicate combinging all the predicates in the predicateList"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"    private Predicate\u003cPerson\u003e combineAllPredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        assert(predicateList.size() \u003e\u003d 1);"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"        Predicate\u003cPerson\u003e allPredicates \u003d predicateList.get(0);"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"        for (int i \u003d 1; i \u003c predicateList.size(); i++) {"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"            allPredicates.and(predicateList.get(i));"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"        return allPredicates;"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":48,"-":25}},{"path":"src/main/java/seedu/address/model/person/ExpectedGraduationYearBeforeKeywordPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":" * Tests that a {@code Person}\u0027s {@code ExpectedGraduationYear} is before the keyword given, inclusive of keyword."},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearBeforeKeywordPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYearBeforeKeywordPredicate(String keyword) {"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public boolean test(Person person) {"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"        return person.getExpectedGraduationYear().toString().compareTo(keyword) \u003c\u003d 0;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof ExpectedGraduationYearBeforeKeywordPredicate // instanceof handles nulls"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.keyword.equals(((ExpectedGraduationYearBeforeKeywordPredicate) other).keyword)); // state check"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":21,"-":5}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"                person.getExpectedGraduationYear(), correctTagReferences);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from this {@code AddressBook}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @throws TagNotFoundException if the {@code tag} is not in this {@code AddressBook}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (tags.contains(tag)) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            for (Person person: persons) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                removeTagFromEachPerson(person, tag);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            removeUnusedTags();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new TagNotFoundException();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from this {@code person} if the person has that tag."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void removeTagFromEachPerson(Person person, Tag tag) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e editedTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        if (editedTags.remove(tag)) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            Person editedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                    person.getAddress(), person.getExpectedGraduationYear(), editedTags);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                updatePerson(person, editedPerson);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Deleting a tag should not result in duplicate persons.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"The target person cannot be missing.\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Removes unreferenced tags from {@code tags}."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void removeUnusedTags() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e referencedTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        for (Person person: persons) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            person.getTags().forEach(tag -\u003e referencedTags.add(tag));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        tags.setTags(referencedTags);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":2,"-":231}},{"path":"src/main/java/seedu/address/model/person/ExpectedGraduationYear.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":" * Represents a Person\u0027s expectedGraduationYear in the address book."},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidExpectedGraduationYear(String)}"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYear {"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"    public static final String MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"            \"Expected graduation year can only contain numbers, and should be between 2017 to 2025.\";"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"    private static final String EXPECTED_GRADUATION_YEAR_VALIDATION_REGEX \u003d \"\\\\d{4}\";"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    private static final int YEAR_LOWER_BOUND \u003d 2017;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    private static final int YEAR_UPPER_BOUND \u003d 2025;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"     * Constructs a {@code expectedGraduationYear}."},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"     * @param expectedGraduationYear A valid expectedGraduationYear."},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        checkArgument(isValidExpectedGraduationYear(expectedGraduationYear),"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"                MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"        this.value \u003d expectedGraduationYear;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"     * Returns true if a given string is a valid expectedGraduationYear."},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"    public static boolean isValidExpectedGraduationYear(String test) {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        return test.matches(EXPECTED_GRADUATION_YEAR_VALIDATION_REGEX) \u0026\u0026 isInValidRange(test);"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"     * @param test An expected graduation year matching regex"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"     * @return whether the graduation year is in valid range"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"    private static boolean isInValidRange(String test) {"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        int year \u003d Integer.parseInt(test);"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        return year \u003e\u003d YEAR_LOWER_BOUND \u0026\u0026 year \u003c\u003d YEAR_UPPER_BOUND;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof ExpectedGraduationYear // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.value.equals(((ExpectedGraduationYear) other).value)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":42,"-":20}}]
