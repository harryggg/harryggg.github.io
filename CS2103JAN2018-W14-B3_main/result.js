var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-W14-B3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"* *Email us* : You can also reach us at `e0032596 [at] u.nus.edu`"}],"authorContributionMap":{"mhq199657":2,"-":4}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"tanhengyeow"},"content":"HR+ was developed by Team https://github.com/CS2103JAN2018-W14-B3[W14-B3]. +"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"\u003d\u003d\u003d Tan Heng Yeow"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":"image::tanhengyeow.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"{empty}[https://github.com/tanhengyeow[github]] [\u003c\u003c#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"Role: Team Lead, Testing +"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"Responsibilites: Logic, Model"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"\u003d\u003d\u003d Ang Yee Chin"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"image::ANG-YC.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"{empty}[http://github.com/ANG-YC[github]] [\u003c\u003c#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"tanhengyeow"},"content":"Role: Team Lead, Integration +"},{"lineNumber":26,"author":{"gitID":"tanhengyeow"},"content":"Responsibilities: Ui, Storage"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Ma Hongqiang"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"image::mhq199657.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"tanhengyeow"},"content":"{empty}[http://github.com/mhq199657[github]] [\u003c\u003c#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"Role: Code quality, Testing +"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"Responsibilities: Logic, Model"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Ke Xiaowen"},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"image::kexiaowen.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"tanhengyeow"},"content":"{empty}[http://github.com/kexiaowen[github]] [\u003c\u003c#, portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"tanhengyeow"},"content":"Role: Code quality, Documentation +"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"Responsibilities: Code quality, Documentation"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"kexiaowen":2,"-":25,"tanhengyeow":20}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"tanhengyeow"},"content":"\u003d HR+"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W14-B3/main[image:https://travis-ci.org/CS2103JAN2018-W14-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/tanhengyeow/main[image:https://ci.appveyor.com/api/projects/status/eakk9eghorankpv3?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W14-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W14-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"https://app.codacy.com/app/mhq199657/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-W14-B3/main\u0026utm_campaign\u003dbadger[image:https://api.codacy.com/project/badge/Grade/56d8bd8640684659aa1b55f8e96518cf[codacy]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B3/main[image:https://img.shields.io/badge/team-W14%20B3-blue.svg[Team W14-B3]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W14-B3/main[image:https://img.shields.io/badge/members-HQ%20YC%20HY%20XW-2196F3.svg[Members]]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"HR+ offers an open source solution to the recruiting process. Our software allows campus recruiters to identify the best-fitting candidates easily. At the same time, HR+ allows campus recruiters to manage student contacts faster than a typical mouse/GUI driven app."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":31,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":"* The project is built upon source code based on SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"mhq199657":1,"-":31,"tanhengyeow":3}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"tanhengyeow"},"content":"\u003d HR+ - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"AddressBook Level 4 (AB4) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB4 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Address Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS y/EXPECTED_GRADUATION_YEAR m/MAJOR [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 y/2020 m/Computer Science`"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 y/2018 m/Information Security t/criminal`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":84,"author":{"gitID":"tanhengyeow"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [y/EXPECTED_GRADUATION_YEAR] [m/MAJOR] [t/TAG]...`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"****"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":89,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":92,"author":{"gitID":"-"},"content":"****"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"\u003d\u003d\u003d Schedule interview for a person : `interview`"},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"Schedule interview of an existing person in the address book. +"},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"Format: `interview INDEX DATETIME`"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"****"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"* Schedule interview for the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"* `DATETIME` is the English representation of the date and time"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"****"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"Examples:"},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"* `interview 1 next Friday at 3pm` +"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"Schedule the interview of the 1st person to be next Friday at 3pm."},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"* `interview 2 Mar 14 2pm` +"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"Schedule the interview of the 2nd person to be 14 March at 2pm."},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":118,"author":{"gitID":"tanhengyeow"},"content":"\u003d\u003d\u003d Locating persons by field: `find`"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"tanhengyeow"},"content":"Finds persons whose fields contain any of the given keywords. +"},{"lineNumber":121,"author":{"gitID":"tanhengyeow"},"content":"Format:"},{"lineNumber":122,"author":{"gitID":"tanhengyeow"},"content":"Option 1: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":123,"author":{"gitID":"tanhengyeow"},"content":"Option 2: `find prefix/KEYWORD [MORE KEYWORDS] prefix/...`"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"****"},{"lineNumber":126,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":128,"author":{"gitID":"tanhengyeow"},"content":"* All fields are searched if no prefix is supplied."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":139,"author":{"gitID":"tanhengyeow"},"content":"* `find p/999 555` +"},{"lineNumber":140,"author":{"gitID":"tanhengyeow"},"content":"Returns any person having phone number `999` or `555`"},{"lineNumber":141,"author":{"gitID":"tanhengyeow"},"content":"* `find p/999 e/test@example.com`"},{"lineNumber":142,"author":{"gitID":"tanhengyeow"},"content":"Returns any person having phone number `999` and email `test@example.com`"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"\u003d\u003d\u003d Filter persons by expected graduation year: `filter`"},{"lineNumber":145,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":146,"author":{"gitID":"mhq199657"},"content":"Filters persons whose expected graduation year is before or equal to the given keywords. +"},{"lineNumber":147,"author":{"gitID":"mhq199657"},"content":"Format: `filter y/KEYWORD`"},{"lineNumber":148,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":149,"author":{"gitID":"mhq199657"},"content":"****"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"* The keyword must be a valid year."},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":"****"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"Examples:"},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"* `filter y/2020` +"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"Returns all persons whose graudation year is before or equal to 2020"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":161,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"****"},{"lineNumber":164,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":165,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":167,"author":{"gitID":"-"},"content":"****"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":172,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":175,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":181,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"****"},{"lineNumber":184,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":185,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":187,"author":{"gitID":"-"},"content":"****"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":194,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Rating a student : `rate`"},{"lineNumber":199,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":200,"author":{"gitID":"kexiaowen"},"content":"Rates the student identified by the index number used in the last person listing. +"},{"lineNumber":201,"author":{"gitID":"kexiaowen"},"content":"Format: `rate INDEX t/TECHNICAL_SKILLS_SCORE c/COMMUNICATION_SKILLS_SCORE p/PROBLEM_SOLVING_SKILLS_SCORE e/EXPERIENCE_SKILLS_SCORE`"},{"lineNumber":202,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":203,"author":{"gitID":"kexiaowen"},"content":"****"},{"lineNumber":204,"author":{"gitID":"kexiaowen"},"content":"* Rates the student at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":205,"author":{"gitID":"kexiaowen"},"content":"* The scores should be a number in the range of 1 to 5 (inclusive). Scores are rounded to two decimal places."},{"lineNumber":206,"author":{"gitID":"kexiaowen"},"content":"****"},{"lineNumber":207,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":208,"author":{"gitID":"kexiaowen"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":210,"author":{"gitID":"kexiaowen"},"content":"* `rate 1 t/4.5 c/3 p/4 e/3.5` +"},{"lineNumber":211,"author":{"gitID":"kexiaowen"},"content":"Rates the 1st person to have technical skills score of 4.5, communication skills score of 3, problem solving skills of 4, experience score of 3.5."},{"lineNumber":212,"author":{"gitID":"kexiaowen"},"content":"* `rate 2 t/3 c/5 p/3.5 e/2` +"},{"lineNumber":213,"author":{"gitID":"kexiaowen"},"content":"Rates the 2nd person to have technical skills score of 3, communication skills score of 5, problem solving skills of 3.5, experience score of 2."},{"lineNumber":214,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":215,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Deleting the rating given to an applicant : `deleteRating`"},{"lineNumber":216,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":217,"author":{"gitID":"kexiaowen"},"content":"Deletes the rating given to the applicant identified by the index number used in the last person listing. +"},{"lineNumber":218,"author":{"gitID":"kexiaowen"},"content":"Format: `deleteRating INDEX`"},{"lineNumber":219,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":220,"author":{"gitID":"kexiaowen"},"content":"****"},{"lineNumber":221,"author":{"gitID":"kexiaowen"},"content":"* Deletes the rating of the applicant at the specified `INDEX`."},{"lineNumber":222,"author":{"gitID":"kexiaowen"},"content":"* The index refers to the index number shown in the last person listing."},{"lineNumber":223,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":224,"author":{"gitID":"-"},"content":"****"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"kexiaowen"},"content":"* `deleteRating 1` +"},{"lineNumber":229,"author":{"gitID":"kexiaowen"},"content":"Deletes the rating of the first applicant in HR+."},{"lineNumber":230,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":238,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":245,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":249,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":261,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":266,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":277,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":281,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":286,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":289,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":294,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"kexiaowen"},"content":"Data in HR+ are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":304,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":310,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Customising rating criteria `[coming in v2.0]`"},{"lineNumber":313,"author":{"gitID":"kexiaowen"},"content":"Specifies the criteria that candidates will be rated against."},{"lineNumber":314,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":315,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Saving searches `[coming in v2.0]`"},{"lineNumber":316,"author":{"gitID":"kexiaowen"},"content":"Saves searches that can be displayed in future for fast lookups."},{"lineNumber":317,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":318,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Sending and receiving emails `[coming in v2.0]`"},{"lineNumber":319,"author":{"gitID":"kexiaowen"},"content":"Sends and receives emails within HR+."},{"lineNumber":320,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"tanhengyeow"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS y/EXPECTED_GRADUATION_YEAR m/MAJOR [t/TAG]...` +"},{"lineNumber":329,"author":{"gitID":"mhq199657"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 y/2020 t/friend t/colleague`"},{"lineNumber":330,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":331,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":333,"author":{"gitID":"tanhengyeow"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [y/EXPECTED_GRADUATION_YEAR] [m/MAJOR] [t/TAG]...` +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":335,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":337,"author":{"gitID":"mhq199657"},"content":"* *Filter* : `filter y/KEYWORD` +"},{"lineNumber":338,"author":{"gitID":"mhq199657"},"content":"e.g. `filter y/2019`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":340,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":341,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":343,"author":{"gitID":"kexiaowen"},"content":"* *Rate* : `rate INDEX t/TECHNICAL_SKILLS_SCORE c/COMMUNICATION_SKILLS_SCORE p/PROBLEM_SOLVING_SKILLS_SCORE e/EXPERIENCE_SKILLS_SCORE` +"},{"lineNumber":344,"author":{"gitID":"kexiaowen"},"content":"e.g. `rate 1 t/4.5 c/3 p/4 e/3.5`"},{"lineNumber":345,"author":{"gitID":"kexiaowen"},"content":"* *deleteRating* : `deleteRating INDEX` +"},{"lineNumber":346,"author":{"gitID":"kexiaowen"},"content":"e.g. `deleteRating 1`"},{"lineNumber":347,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":348,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"kexiaowen":42,"mhq199657":17,"-":256,"tanhengyeow":17,"Ang-YC":17}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.InfoPanel;"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.TitleBar;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        getTitleBar().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        getTitleBar().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        getTitleBar().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        getInfoPanel().click();"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        getTitleBar().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        getTitleBar().openHelpWindowUsingControl();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        assertNotEquals(InfoPanel.DEFAULT_PERSON, getInfoPanel().getLoadedPerson());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        assertNotEquals(TitleBar.SYNC_STATUS_INITIAL, getTitleBar().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":82,"Ang-YC":12}},{"path":"src/test/java/systemtests/ClockRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.TitleBar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * This rule makes the time stamp in the status bar predictable during a test."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * At the end of the test, the rule restores the original clock."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * @see Clock#fixed(Instant, ZoneId)"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ClockRule implements TestRule {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private Clock injectedClock;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    private final Clock originalClock \u003d TitleBar.getClock();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected void before() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        setInjectedClockToCurrentTime();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"        TitleBar.setClock(originalClock);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                before();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Clock getInjectedClock() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return injectedClock;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void setInjectedClockToCurrentTime() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"        TitleBar.setClock(injectedClock);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":53,"Ang-YC":4}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_GRADUATION_YEAR_DESC;"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESUME_DESC;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESUME_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":83,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + EXPECTED_GRADUATION_YEAR_DESC_AMY + \" \""},{"lineNumber":87,"author":{"gitID":"tanhengyeow"},"content":"                + MAJOR_DESC_AMY + \" \" + RESUME_DESC_AMY + TAG_DESC_FRIEND + \" \";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":104,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":113,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":116,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":122,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":123,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":125,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_BOB).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":131,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":132,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":138,"author":{"gitID":"mhq199657"},"content":"        except expected graduation year -\u003e added */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":140,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":141,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":144,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_AMY + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"mhq199657"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":148,"author":{"gitID":"tanhengyeow"},"content":"        except major -\u003e added */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"                .withAddress(VALID_ADDRESS_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":151,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_BOB)"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":154,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_BOB + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"mhq199657"},"content":"        /* Case: add a person with resume, command with parameters in random order -\u003e added */"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"        toAdd \u003d AMY;"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + RESUME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY"},{"lineNumber":164,"author":{"gitID":"tanhengyeow"},"content":"                + TAG_DESC_FRIEND + EMAIL_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"        /* Case: add a person, missing resume -\u003e added */"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(BOB);"},{"lineNumber":169,"author":{"gitID":"mhq199657"},"content":"        deleteAllPersons();"},{"lineNumber":170,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"tanhengyeow"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":196,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":203,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":204,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":205,"author":{"gitID":"mhq199657"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_RESUME.getPrefix()"},{"lineNumber":206,"author":{"gitID":"mhq199657"},"content":"                + \"src/test/resources/resume/amy.pdf\";"},{"lineNumber":207,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":220,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":221,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":225,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":226,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"mhq199657"},"content":"        /* Case: missing expected graduation year -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"tanhengyeow"},"content":"                + MAJOR_DESC_AMY;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: missing major -\u003e rejected */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":236,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":244,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":245,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":249,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":250,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":254,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":255,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":259,"author":{"gitID":"mhq199657"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":260,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"mhq199657"},"content":"        /* Case: invalid expected graduation year -\u003e rejected */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":265,"author":{"gitID":"tanhengyeow"},"content":"                + INVALID_EXPECTED_GRADUATION_YEAR_DESC + MAJOR_DESC_AMY;"},{"lineNumber":266,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":267,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":268,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: invalid major -\u003e rejected */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":270,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + INVALID_MAJOR_DESC;"},{"lineNumber":271,"author":{"gitID":"tanhengyeow"},"content":"        assertCommandFailure(command, Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":272,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":273,"author":{"gitID":"mhq199657"},"content":"        /* Case: invalid resume -\u003e rejected */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":275,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + INVALID_RESUME_DESC;"},{"lineNumber":276,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, Resume.MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":277,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":280,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":282,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":283,"author":{"gitID":"mhq199657"},"content":"        /* Case: blank resume -\u003e rejected */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":285,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + \" \" + PREFIX_RESUME;"},{"lineNumber":286,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, Resume.MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":329,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":346,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":350,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":75,"-":245,"tanhengyeow":40}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import static guitests.guihandles.InfoPanelUtil.waitUntilInfoPanelLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import static seedu.address.ui.TitleBar.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import static seedu.address.ui.TitleBar.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"import guitests.guihandles.InfoPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"import guitests.guihandles.TitleBarHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.InfoPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanelHandle getInfoPanel() {"},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"        return mainWindowHandle.getInfoPanel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"    public TitleBarHandle getTitleBar() {"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"        return mainWindowHandle.getTitleBar();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"    protected void executeCommandWaitForUi(String command) {"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"        getInfoPanel().resetLoadedStatus();"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":"        executeCommand(command);"},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":"        waitUntilInfoPanelLoaded(getInfoPanel());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"Ang-YC"},"content":"     * Calls {@code InfoPanelHandle}, {@code PersonListPanelHandle} and {@code TitleBarHandle} to remember"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":186,"author":{"gitID":"Ang-YC"},"content":"        TitleBarHandle titleBarHandle \u003d getTitleBar();"},{"lineNumber":187,"author":{"gitID":"Ang-YC"},"content":"        getInfoPanel().rememberPerson();"},{"lineNumber":188,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.rememberSaveLocation();"},{"lineNumber":189,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.rememberSyncStatus();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":196,"author":{"gitID":"Ang-YC"},"content":"     * @see InfoPanelHandle#isPersonChanged()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":199,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(getInfoPanel().isPersonChanged());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":206,"author":{"gitID":"Ang-YC"},"content":"     * @see InfoPanelHandle#isPersonChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Ang-YC"},"content":"        // TODO: Match Person instead of just Name"},{"lineNumber":213,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(selectedCardName, getInfoPanel().getLoadedPerson().getName().toString());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":219,"author":{"gitID":"Ang-YC"},"content":"     * @see InfoPanelHandle#isPersonChanged()"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":223,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(getInfoPanel().isPersonChanged());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":245,"author":{"gitID":"Ang-YC"},"content":"        TitleBarHandle handle \u003d getTitleBar();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":255,"author":{"gitID":"Ang-YC"},"content":"        TitleBarHandle handle \u003d getTitleBar();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":270,"author":{"gitID":"Ang-YC"},"content":"            assertEquals(InfoPanel.DEFAULT_PERSON, getInfoPanel().getLoadedPerson());"},{"lineNumber":271,"author":{"gitID":"Ang-YC"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getTitleBar().getSaveLocation());"},{"lineNumber":272,"author":{"gitID":"Ang-YC"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getTitleBar().getSyncStatus());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":252,"Ang-YC":32}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"tanhengyeow"},"content":"\u003d HR+ Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B3/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":"By: `Team W14-B3`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"kexiaowen"},"content":"\u003d\u003d\u003d Rate feature"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":235,"author":{"gitID":"kexiaowen"},"content":"The `rate` command allows campus recruiters to evaluate candidates\u0027 performance in interviews against four specific criteria, namely technical skills, communication skills, problem solving skills and experience. The format of this command is `rate INDEX t/TECHNICAL SKILLS SCORE c/COMMUNICATINO SKILLS SCORE p/PROBLEM SOLVING SKILLS SCORE e/EXPERIENCE SCORE`."},{"lineNumber":236,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":237,"author":{"gitID":"kexiaowen"},"content":"In our current implementation, the `rate` command inherits from the `UndoableCommands` class. Two components, `Logic` and `Model`, are involved in the execution of this command. The `Logic` component is responsible for parsing user inputs while the `Model` component deals with updating of filtered person list."},{"lineNumber":238,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":239,"author":{"gitID":"kexiaowen"},"content":"Below is a sequence diagram that illustrates how these two components interact when the `rate` command is executed:"},{"lineNumber":240,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":241,"author":{"gitID":"kexiaowen"},"content":"image::RateCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"kexiaowen"},"content":"Figure 3.1.1.1 Sequence diagram to illustrate component interactions for the `rate` command"},{"lineNumber":243,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":244,"author":{"gitID":"kexiaowen"},"content":"As shown above, execution of the `rate` command comprises the following steps:"},{"lineNumber":245,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":246,"author":{"gitID":"kexiaowen"},"content":". `LogicManager` invokes `parseCommand` method of `AddressbookParser`, taking user inputs as arguments."},{"lineNumber":247,"author":{"gitID":"kexiaowen"},"content":". During the `parseCommand` method call, an instance of `RateCommandParser` will be created when the keyword \"rate\" is matched. `RateCommandParser` then extracts the remaining user inputs and a `RateCommand` instance r will be return, provided that the format of user\u0027s input is correct."},{"lineNumber":248,"author":{"gitID":"kexiaowen"},"content":". `LogicManager` then calls `executeUndoableCommand` of the `RateCommand` r instantiated in step 2. Another component, `Model`, will be involved as the `RateCommand` requests to update the rating scores of the person."},{"lineNumber":249,"author":{"gitID":"kexiaowen"},"content":". The `Model` component gets the filtered persons list and replaces `Person` p1 with `Person` p2 which is identical to p2 except rating scores. A `CommandResult` will be generated and returned to `LogicManager`."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":252,"author":{"gitID":"kexiaowen"},"content":"In the current implementation, adding ratings for a `Person` is done through a new command, `rate`. Alternatively, we can modify the `add` command by making it support more prefixes and accept rating scores as well. We can also update the `edit` command, allowing it to modifying rating scores of a person. However, this approach might result in very long `add` commands that are not user-friendly."},{"lineNumber":253,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":267,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":268,"author":{"gitID":"-"},"content":"----"},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":278,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"}"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"},{"lineNumber":295,"author":{"gitID":"-"},"content":"----"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":326,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":366,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":369,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":375,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":377,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":378,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":380,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"tanhengyeow"},"content":"//tag::findcommand"},{"lineNumber":383,"author":{"gitID":"tanhengyeow"},"content":"\u003d\u003d\u003d Find Command"},{"lineNumber":384,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"tanhengyeow"},"content":"The `find` command allows campus recruiters to search for students with exact keywords in `compulsory` fields of the student entry. This command is supported by the `FindCommandParser` class."},{"lineNumber":388,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":389,"author":{"gitID":"tanhengyeow"},"content":"The `find` command will be supporting more compulsory fields that will be added in subsequent weeks."},{"lineNumber":390,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":391,"author":{"gitID":"tanhengyeow"},"content":"The sequence diagram shown below illustrates how the `Logic` and `Model` component interacts when the `find` command is executed:"},{"lineNumber":392,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":393,"author":{"gitID":"tanhengyeow"},"content":"image::FindCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":394,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":395,"author":{"gitID":"tanhengyeow"},"content":"Execution of the `find` command comprises the following steps:"},{"lineNumber":396,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":397,"author":{"gitID":"tanhengyeow"},"content":"1. `LogicManager` invokes `parseCommand` method of `AddressbookParser`, taking user inputs as arguments."},{"lineNumber":398,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":399,"author":{"gitID":"tanhengyeow"},"content":"2. During the `parseCommand` method call, an instance of `FindCommandParser` will be created."},{"lineNumber":400,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":401,"author":{"gitID":"tanhengyeow"},"content":"3. `FindCommandParser` calls the `parseFindArgs` method of `FindUtil` and returns a `Predicate\u003cPerson\u003e` object."},{"lineNumber":402,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":403,"author":{"gitID":"tanhengyeow"},"content":"4. The `FindCommand` object is initialized with this `Predicate\u003cPerson\u003e` object."},{"lineNumber":404,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":405,"author":{"gitID":"tanhengyeow"},"content":"5. The `FindCommand` object calls the method `updateFilteredPersonList` with this `Predicate\u003cPerson\u003e` object."},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":408,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":409,"author":{"gitID":"tanhengyeow"},"content":"In the current implementation, creating the `Predicate\u003cPerson\u003e` object is done in the `FindUtil` class. As more predicates get added in the future, we may need to consider breaking up the utility methods into separate classes."},{"lineNumber":410,"author":{"gitID":"tanhengyeow"},"content":"//end::findcommand"},{"lineNumber":411,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":412,"author":{"gitID":"mhq199657"},"content":"//tag::filtercommand"},{"lineNumber":413,"author":{"gitID":"mhq199657"},"content":"\u003d\u003d\u003d Filter Command"},{"lineNumber":414,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"mhq199657"},"content":"Filter Command is supported by an `FilterCommand` class. It supports the advanced filtering of multiple fields such as `ExpectedGraduationYear`. Filter commands can supports both filtering by keyword and filtering by range, if the field has natural ordering."},{"lineNumber":418,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":419,"author":{"gitID":"mhq199657"},"content":"Filter command currently only filters `ExpectedGraduationYear` but will support more fields in the subsequent weeks."},{"lineNumber":420,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":421,"author":{"gitID":"mhq199657"},"content":"Filter command interact with `Model` and `UI` in the following way:"},{"lineNumber":422,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":423,"author":{"gitID":"mhq199657"},"content":". `FilterCommandParser` parses the user inputs into a wholesome `Predicate\u003cPerson\u003e`."},{"lineNumber":424,"author":{"gitID":"mhq199657"},"content":". This predicate will be used to instantiate the `FilterCommand`"},{"lineNumber":425,"author":{"gitID":"mhq199657"},"content":". Upon execution of the filter command, the UI will be updated by imposing the new predicate to the `FilteredList` in the `ModelManager` class."},{"lineNumber":426,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":427,"author":{"gitID":"mhq199657"},"content":"Below is the sequence diagram of filter command."},{"lineNumber":428,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":429,"author":{"gitID":"mhq199657"},"content":"image::FilterCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":430,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":431,"author":{"gitID":"mhq199657"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `FilterCommandParser`"},{"lineNumber":432,"author":{"gitID":"mhq199657"},"content":"* *Alternative 1 (current choice)*: `FilterCommandParser` breaks down user input according to prefix and pass to different methods in `FilterUtil` to generate respective `Predicate\u003cPerson\u003e`, after which it unions these `Predicate`."},{"lineNumber":433,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":434,"author":{"gitID":"mhq199657"},"content":"** Pros: This appoach breaks down the parsing process into multiple classes and each class is responsible for single duty. This makes debugging easier."},{"lineNumber":435,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":436,"author":{"gitID":"mhq199657"},"content":"** Cons: New developers may find it hard to understand the design pattern."},{"lineNumber":437,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":438,"author":{"gitID":"mhq199657"},"content":"* *Alternative 2*: Puts actual parsing in `FilterCommandParser` class."},{"lineNumber":439,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":440,"author":{"gitID":"mhq199657"},"content":"** Pros: It reduces number of classes used and is easier for new developers to understand."},{"lineNumber":441,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":442,"author":{"gitID":"mhq199657"},"content":"** Cons: It violates single responsibility principle. `FilterCommandParser` will have too many distinct functionalities such as"},{"lineNumber":443,"author":{"gitID":"mhq199657"},"content":"*** breaking down user input by prefix"},{"lineNumber":444,"author":{"gitID":"mhq199657"},"content":"*** breaking down user\u0027s predicate for each prefix"},{"lineNumber":445,"author":{"gitID":"mhq199657"},"content":"*** creating `FilterRange` objects to record down each range specified in the predicate"},{"lineNumber":446,"author":{"gitID":"mhq199657"},"content":"*** creating `Predicate` from `FilterRange`"},{"lineNumber":447,"author":{"gitID":"mhq199657"},"content":"*** unioning these `Predicate`"},{"lineNumber":448,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":449,"author":{"gitID":"mhq199657"},"content":"\u003d\u003d\u003d\u003d\u003d Ascpect: Implementation of range tracker: `FilterRange\u003cE\u003e`"},{"lineNumber":450,"author":{"gitID":"mhq199657"},"content":"* *Alternative 1 (current choice)*: All user input will either be in form of `ToBeFilteredClassPrefix/singletonValue, lowerRange - higherRange`. Both singleton value and range will be parsed into a `FilterRange\u003cToBeFilteredClass\u003e`."},{"lineNumber":451,"author":{"gitID":"mhq199657"},"content":"** Pros: It ensures the user input is valid since `FilterRange\u003cE\u003e` can call `E.isValid()` to check. This ensures the integrity of `Predicate` later."},{"lineNumber":452,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":453,"author":{"gitID":"mhq199657"},"content":"** Cons: New developers may find it hard to understand the design pattern."},{"lineNumber":454,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":455,"author":{"gitID":"mhq199657"},"content":"* *Alternative 2 (current choice)*: All parsing of singleton or ranged values will be handled by some methods in `FilterUtil`."},{"lineNumber":456,"author":{"gitID":"mhq199657"},"content":"** Pros: New developers will find it easier to understand the design pattern."},{"lineNumber":457,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":458,"author":{"gitID":"mhq199657"},"content":"** Cons: It will be messy to handle both singletona dn ranged values in one method. It also adds the complexity of `FilterUtil` class."},{"lineNumber":459,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":460,"author":{"gitID":"mhq199657"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: `FilterCommand` behaviour"},{"lineNumber":461,"author":{"gitID":"mhq199657"},"content":"* *Alternative 1 (current choice)*: Predicates in the same field will be ORed together. Predicates in the different field will be ANDed together."},{"lineNumber":462,"author":{"gitID":"mhq199657"},"content":"** Pros: For the same field, the user can have more flexibility in selecting the desired values. For the different field, the predicates are in logical conjunction to make the filter more restrictive. This follows the natural way of human thinking."},{"lineNumber":463,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":464,"author":{"gitID":"mhq199657"},"content":"** Cons: The developers may be confused about the OR/AND rule at first."},{"lineNumber":465,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":466,"author":{"gitID":"mhq199657"},"content":"* *Alternative 2*: Everything will be ORed together."},{"lineNumber":467,"author":{"gitID":"mhq199657"},"content":"** Pros: It is an easier logical pattern for developers to understand."},{"lineNumber":468,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":469,"author":{"gitID":"mhq199657"},"content":"** Cons: It is user unfriendly. The only way for user to filter the persons who is in Computer Science, graduating in 2020 and has a GPA greater than 4.6 is to use 3 filter commands."},{"lineNumber":470,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":471,"author":{"gitID":"mhq199657"},"content":"//end::filtercommand"},{"lineNumber":472,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":485,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":486,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":491,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":492,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":493,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":505,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":510,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":523,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":524,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":525,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":528,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":531,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":538,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":543,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":550,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":563,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":564,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":565,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":566,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":567,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":568,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":569,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":570,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":575,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":578,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":595,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":602,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":603,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":604,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":609,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":610,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":613,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":633,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":636,"author":{"gitID":"-"},"content":"+"},{"lineNumber":637,"author":{"gitID":"-"},"content":"****"},{"lineNumber":638,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":639,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":640,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":642,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":643,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":645,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":646,"author":{"gitID":"-"},"content":"****"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":654,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":657,"author":{"gitID":"-"},"content":"+"},{"lineNumber":658,"author":{"gitID":"-"},"content":"****"},{"lineNumber":659,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":660,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":661,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":662,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":663,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":664,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":665,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":666,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":667,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":668,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":669,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":670,"author":{"gitID":"-"},"content":"****"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":681,"author":{"gitID":"-"},"content":"+"},{"lineNumber":682,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":683,"author":{"gitID":"-"},"content":"+"},{"lineNumber":684,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":685,"author":{"gitID":"-"},"content":"+"},{"lineNumber":686,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":688,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":689,"author":{"gitID":"-"},"content":"+"},{"lineNumber":690,"author":{"gitID":"-"},"content":"****"},{"lineNumber":691,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":692,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":693,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":694,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":695,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":696,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":697,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":698,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":699,"author":{"gitID":"-"},"content":"****"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":703,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":704,"author":{"gitID":"-"},"content":"+"},{"lineNumber":705,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":706,"author":{"gitID":"-"},"content":"+"},{"lineNumber":707,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":708,"author":{"gitID":"-"},"content":"+"},{"lineNumber":709,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"+"},{"lineNumber":711,"author":{"gitID":"-"},"content":"****"},{"lineNumber":712,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":713,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":714,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":715,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":716,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":717,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":718,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":719,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":720,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":722,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":723,"author":{"gitID":"-"},"content":"****"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":726,"author":{"gitID":"-"},"content":"+"},{"lineNumber":727,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":728,"author":{"gitID":"-"},"content":"+"},{"lineNumber":729,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":730,"author":{"gitID":"-"},"content":"+"},{"lineNumber":731,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":732,"author":{"gitID":"-"},"content":"+"},{"lineNumber":733,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"+"},{"lineNumber":735,"author":{"gitID":"-"},"content":"****"},{"lineNumber":736,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":737,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":738,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":739,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":740,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":741,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":742,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":743,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":744,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":745,"author":{"gitID":"-"},"content":"****"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":753,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":756,"author":{"gitID":"-"},"content":"+"},{"lineNumber":757,"author":{"gitID":"-"},"content":"****"},{"lineNumber":758,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":761,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":762,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":763,"author":{"gitID":"-"},"content":"****"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":773,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":774,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":781,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":786,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":791,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":796,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":799,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":804,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":805,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":810,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":811,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":812,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":815,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":820,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":827,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":832,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":839,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":844,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":845,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":848,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":859,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":864,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":867,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":878,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"* campus recruiters that have a need to manage a significant number of student contacts"},{"lineNumber":898,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":899,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":900,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":901,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":902,"author":{"gitID":"-"},"content":"* need to keep track of interviews scheduled"},{"lineNumber":903,"author":{"gitID":"-"},"content":"* want to evaluate students\u0027 performance after interviews to decide who to hire"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"*Value proposition*: offers an open source solution to the recruiting process, enables campus recruiters to find the best-fitting candidates easily and allows them to manage student contacts faster than a typical mouse/GUI driven app."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"kexiaowen"},"content":"*Feature contribution*:"},{"lineNumber":908,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":909,"author":{"gitID":"kexiaowen"},"content":"1. Ang Yee Chin"},{"lineNumber":910,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":911,"author":{"gitID":"kexiaowen"},"content":"* Major Feature: UI Scheme"},{"lineNumber":912,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":913,"author":{"gitID":"kexiaowen"},"content":"** Revamps the interface to make it more intuitive and clean"},{"lineNumber":914,"author":{"gitID":"kexiaowen"},"content":"** Makes the design responsive so that the application page looks good on devices with any screen size"},{"lineNumber":915,"author":{"gitID":"kexiaowen"},"content":"** Integrates a PDF viewer to display applicants\u0027 resumes"},{"lineNumber":916,"author":{"gitID":"kexiaowen"},"content":"** Adds a calendar that displays scheduled interviews"},{"lineNumber":917,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":918,"author":{"gitID":"kexiaowen"},"content":"* Minor Features:"},{"lineNumber":919,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":920,"author":{"gitID":"kexiaowen"},"content":"** Adds a `comments` field that allows recruiters to provide additional information"},{"lineNumber":921,"author":{"gitID":"kexiaowen"},"content":"** Creates radar graphs to help visualise applicants\u0027 performance in interviews"},{"lineNumber":922,"author":{"gitID":"kexiaowen"},"content":"** Adds a `profile picture` field for applicants"},{"lineNumber":923,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":924,"author":{"gitID":"kexiaowen"},"content":"2. Ke Xiaowen"},{"lineNumber":925,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":926,"author":{"gitID":"kexiaowen"},"content":"* Major Feature: Rating"},{"lineNumber":927,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":928,"author":{"gitID":"kexiaowen"},"content":"** Rates an applicant based on technical, communication, problem solving skills and experience after an interview"},{"lineNumber":929,"author":{"gitID":"kexiaowen"},"content":"** Allows editing of rating scores"},{"lineNumber":930,"author":{"gitID":"kexiaowen"},"content":"** Supports deletion of ratings"},{"lineNumber":931,"author":{"gitID":"kexiaowen"},"content":"** Displays overall ratings for rated applicants"},{"lineNumber":932,"author":{"gitID":"kexiaowen"},"content":"** Offers keyboard shortcuts to auto-fill prefixes"},{"lineNumber":933,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":934,"author":{"gitID":"kexiaowen"},"content":"* Minor Features:"},{"lineNumber":935,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":936,"author":{"gitID":"kexiaowen"},"content":"** Adds a `job applied` field for applicants"},{"lineNumber":937,"author":{"gitID":"kexiaowen"},"content":"** Adds a `university` field for applicants"},{"lineNumber":938,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":939,"author":{"gitID":"kexiaowen"},"content":"3. Ma Hongqiang"},{"lineNumber":940,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":941,"author":{"gitID":"kexiaowen"},"content":"* Major Feature: Filter"},{"lineNumber":942,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":943,"author":{"gitID":"kexiaowen"},"content":"** Supports filtering based on the current view of listed persons"},{"lineNumber":944,"author":{"gitID":"kexiaowen"},"content":"** Allows users to filter fields whose values are either finite or have natural ordering"},{"lineNumber":945,"author":{"gitID":"kexiaowen"},"content":"** Supports filtering multiple fields at the same time"},{"lineNumber":946,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":947,"author":{"gitID":"kexiaowen"},"content":"* Minor Features:"},{"lineNumber":948,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":949,"author":{"gitID":"kexiaowen"},"content":"** Adds a `expected graduation year` field for applicants"},{"lineNumber":950,"author":{"gitID":"kexiaowen"},"content":"** Adds a `resume` field for applicants"},{"lineNumber":951,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":952,"author":{"gitID":"kexiaowen"},"content":"4. Tan Heng Yeow"},{"lineNumber":953,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":954,"author":{"gitID":"kexiaowen"},"content":"* Major Feature: Find"},{"lineNumber":955,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":956,"author":{"gitID":"kexiaowen"},"content":"** Allows users to find all fields that match the exact keyword inputted"},{"lineNumber":957,"author":{"gitID":"kexiaowen"},"content":"** Supports finding all fields that contain the keyword input"},{"lineNumber":958,"author":{"gitID":"kexiaowen"},"content":"** Adds a fuzzy find function that enables users to find all fields that are a fuzzy match of the keyword inputted"},{"lineNumber":959,"author":{"gitID":"kexiaowen"},"content":"** Highlights the search keyword in results if found"},{"lineNumber":960,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":961,"author":{"gitID":"kexiaowen"},"content":"* Minor Features:"},{"lineNumber":962,"author":{"gitID":"kexiaowen"},"content":"+"},{"lineNumber":963,"author":{"gitID":"kexiaowen"},"content":"** Adds a `major` field for applicants"},{"lineNumber":964,"author":{"gitID":"kexiaowen"},"content":"** Adds a `cGPA` field for applicants"},{"lineNumber":965,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":967,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":972,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":973,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":974,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new student |manage details of students, schedule interviews and track job offers."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a student |remove entries that I no longer need"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"|`* * *` |user |find a student by name |locate details of students without having to go through the entire list"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"|`* * *` |user |find a student by some characters |locate details of students without having to remember his/her full name"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"|`* * *` |user |filter a student by \u003c\u003cfields,fields\u003e\u003e |locate details of students in a more optimized view"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"|`* * *` |user |add profile photo of a student |recognize the student easily"},{"lineNumber":987,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"|`* * *` |user |add a student\u0027s expected graduation date |gauge how far along the student is in his/her degree"},{"lineNumber":989,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"|`* * *` |user |add a student\u0027s interview date |keep track of interviews scheduled"},{"lineNumber":991,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"|`* * *` |user |add a student\u0027s resume |view the competency of the student"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"|`* * *` |user |edit a student\u0027s \u003c\u003cstatus,status\u003e\u003e |indicate whether students are still being considered or rejected"},{"lineNumber":995,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"|`* * *` |user |add a remark |update additional information about the student"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"|`* * *` |user |add a \u003c\u003crating,rating\u003e\u003e |evaluate the performance of the student after an interview"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"|`* * *` |user |sort students according to their interview performance |decide on the best-fitting students"},{"lineNumber":1001,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|`* * *` |user |add tags for students |categorise the students better"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"|`* * *` |user |delete students with a particular tag |remove groups of student contacts that I no longer need"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"|`* * *` |user |undo my previous command |Restore the data to its previous state before the command was executed"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|`* * *` |user |redo the previously undone command |Reverse the most recent undo command"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|`* *` |user |view all interviews scheduled in a calendar |have a overview of all interviews arranged"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"|`* *` |user |send mass emails to successful/unsuccessful candidates |make recruitment easier"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"|`* *` |user |have syntax highlight for my commands |check my command easily and spot errors faster"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"|`* *` |user |change colour scheme of the interface |customise it according to my preferences"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"|`* *` |user who values efficiency |see a list of suggested commands when I key in the command |select the command I want without having to type out the entire command"},{"lineNumber":1019,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"|`*` |user |visualise a student\u0027s performance using a radar graph|easily understand his/her performance"},{"lineNumber":1023,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"|`*` |careless user |auto-correct typos in my command |save time checking the command manually"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"|`*` |cautious user |encrypt student\u0027s data stored |ensure sensitive information will not leak out"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"|`*` |user |send and receive emails within the application |save time switching between different applications"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1054,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1058,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1061,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add person"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"1.  User requests to add a new person in the list"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"2.  AddressBook adds the new person into the address book."},{"lineNumber":1070,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"* 1a. The command is invalid"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find person by name"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"1.  User enters the command with the keyword as the name"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"2.  AddressBook shows the list of persons with the keyword"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"* 1a. The keyword is not found in the list of persons"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find person by some letters"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"1.  User enters the command with the some letters as the name"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"2.  AddressBook shows the list of persons with fields containing the letters"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"* 1a. There is no such letter found in the list of persons."},{"lineNumber":1109,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Filter a person by field"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"1.  User requests to filter a list of persons that matches the filter"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"2.  AddressBook shows the list of persons that matches the filter"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"* 1a. The filter condition is invalid"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add resume"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"3.  User requests to add a resume to the person in the list"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"4.  AddressBook adds a resume to the person"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1143,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1147,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add profile picture"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"3.  User requests to add a profile picture to a specific person in the list"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"4.  AddressBook adds a profile picture to the person in the list"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1172,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1175,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"* 3b. The given path to the image is invalid."},{"lineNumber":1179,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1182,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add rating"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"3.  User requests to add a rating to the specific person in the list"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"4.  AddressBook adds a rating to the person"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1200,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1204,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1207,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add remark"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"3.  User requests to add a remark to the person in the list"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"4.  AddressBook adds a remark to the person"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1225,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add interview date"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"3.  User requests to add an interview date to the person in the list"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"4.  AddressBook adds an interview date to the person"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1261,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1264,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1265,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1266,"author":{"gitID":"-"},"content":".  Should follow Java coding standards/styles."},{"lineNumber":1267,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":1268,"author":{"gitID":"-"},"content":".  Should work without access to the internet."},{"lineNumber":1269,"author":{"gitID":"-"},"content":".  Should work without external software."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[[rating]] Rating::"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"A score given to a student by interviewers based on areas such as technical competency, leadership quality, communication skills and ability to work well in a team"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"[[status]] Status::"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"Indicates a student\u0027s current state within the hiring process - new, in-review, interview, offered, rejected or withdrawn"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"[[fields]] Fields::"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Refer to the student\u0027s attributes, including name, phone, address, email, expected graduation year, GPA, interview date, university, major, position applied, profile photo, salutation, status, rating and remark. Some of these fields are mandatory while optional fields can be updated later."},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1299,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1304,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1319,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1320,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1325,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1335,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1337,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1338,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1339,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"kexiaowen":77,"mhq199657":66,"-":1179,"tanhengyeow":28}},{"path":"src/test/java/systemtests/WindowGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Point2D;"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Rectangle2D;"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseButton;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MaximizeAppRequestEvent;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.testutil.EventsUtil;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"public class WindowGuiTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    public void testDraggableTitleBar() {"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"        Point2D originalPosition \u003d mainWindowHandle.getWindowPosition();"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"        Point2D expectedDelta \u003d new Point2D(50, 50);"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"        Point2D dragFrom \u003d mainWindowHandle.getTitleBarPosition();"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"        Point2D dragTo \u003d dragFrom.add(expectedDelta);"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"        // Drag it!"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.moveTo(dragFrom);"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.press(MouseButton.PRIMARY);"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.drag(dragTo);"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.release(MouseButton.PRIMARY);"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        Point2D newPosition \u003d mainWindowHandle.getWindowPosition();"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"        Point2D delta \u003d newPosition.subtract(originalPosition);"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(delta.equals(expectedDelta));"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    public void testDoubleClickMaximize() {"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        Point2D clickPosition \u003d mainWindowHandle.getTitleBarPosition();"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        // Double click it"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.doubleClickOn(clickPosition, MouseButton.PRIMARY);"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        assertWindowMaximized();"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"    public void testUnMaximize() {"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D originalBound \u003d mainWindowHandle.getWindowBound();"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"        // Maximize"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"        EventsUtil.postNow(new MaximizeAppRequestEvent());"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"        assertWindowMaximized();"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"        // UnMaximize"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        EventsUtil.postNow(new MaximizeAppRequestEvent());"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D newBound \u003d mainWindowHandle.getWindowBound();"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(originalBound.equals(newBound));"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    public void testResizableWindow() {"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D originalBound \u003d mainWindowHandle.getWindowBound();"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"        Point2D expectedDelta \u003d new Point2D(50, 50);"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"        Point2D dragFrom \u003d mainWindowHandle.getResizablePosition();"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"        Point2D dragTo \u003d dragFrom.add(expectedDelta);"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.moveTo(dragFrom);"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.press(MouseButton.PRIMARY);"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.drag(dragTo);"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.release(MouseButton.PRIMARY);"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D newBound \u003d mainWindowHandle.getWindowBound();"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"        Point2D delta \u003d new Point2D(newBound.getWidth() - originalBound.getWidth(),"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"                newBound.getHeight() - originalBound.getHeight());"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(delta.equals(expectedDelta));"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"    public void testSplitPaneResponsive() {"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"        double originalWidth \u003d mainWindowHandle.getListPaneWidth();"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":"        // Maximize"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"        EventsUtil.postNow(new MaximizeAppRequestEvent());"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"        assertWindowMaximized();"},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"        // Allow floating point error"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(Math.abs(mainWindowHandle.getListPaneWidth() - originalWidth) \u003c\u003d 1);"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"        // Reset size and position"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"        mainWindowHandle.setWindowDefaultPositionAndSize();"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"        // Allow floating point error"},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(Math.abs(mainWindowHandle.getListPaneWidth() - originalWidth) \u003c\u003d 1);"},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"     * Asserts that the window is maximized"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"    private void assertWindowMaximized() {"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"        MainWindowHandle mainWindowHandle \u003d getMainWindowHandle();"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D windowBound \u003d mainWindowHandle.getWindowBound();"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D screenBound \u003d mainWindowHandle.getSceenBound();"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(windowBound.equals(screenBound));"},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":12,"Ang-YC":114}},{"path":"src/test/java/systemtests/FilterCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_2019;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"    public void filter() {"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"        /* Case: filters multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"         * -\u003e 3 persons found"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        String command \u003d \"   \" + FilterCommand.COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"                + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019 + \"   \";"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, FIONA); // their graduation year is before or equal 2019"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        /* Case: repeat previous filter command where person list is displaying the persons satisfying the filter"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"         * -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter person twice -\u003e 5 persons found and 2 persons found*/"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2017-2020\";"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA);"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2020-2022\";"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, DANIEL);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter no person in address book, 2017 -\u003e 0 persons found */"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2017\";"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter multiple persons in address book, 2 keywords -\u003e 3 persons found */"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2018\" + \" \""},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"                + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, FIONA); //only last keyword effective"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"        /* Case: undo previous filter command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"        /* Case: redo previous filter command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter same persons in address book after deleting 1 of them -\u003e 2 person found */"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(CARL));"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2017-2019\";"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter while a person is selected -\u003e selected card deselected */"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        showAllPersons();"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"        selectPerson(Index.fromOneBased(4));"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"        assertTrue(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + \"2017-2019\";"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE, FIONA);"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"        /* Case: filter person in empty address book -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"        deleteAllPersons();"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_EXPECTED_GRADUATION_YEAR + KEYWORD_MATCHING_2019;"},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"        command \u003d \"fiLteR y/2020\";"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":118,"author":{"gitID":"mhq199657"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"     * These verifications are done by"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"mhq199657"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":123,"author":{"gitID":"mhq199657"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":128,"author":{"gitID":"mhq199657"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"        executeCommand(command);"},{"lineNumber":131,"author":{"gitID":"mhq199657"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":132,"author":{"gitID":"mhq199657"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":133,"author":{"gitID":"mhq199657"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":134,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":138,"author":{"gitID":"mhq199657"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":139,"author":{"gitID":"mhq199657"},"content":"     * These verifications are done by"},{"lineNumber":140,"author":{"gitID":"mhq199657"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"mhq199657"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"     * error style."},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"mhq199657"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":148,"author":{"gitID":"mhq199657"},"content":"        executeCommand(command);"},{"lineNumber":149,"author":{"gitID":"mhq199657"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":154}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON, true);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(command, personCount, true);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(command, middleIndex, true);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(command, middleIndex, false);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(command, validIndex, true);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex, boolean expectChanges) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"        if (expectChanges) {"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"            executeCommandWaitForUi(command);"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":147,"Ang-YC":10}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"            assertEquals(Integer.toString(i + 1), actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"Ang-YC":1}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ prefix (only 1 name) -\u003e 1 persons found */"},{"lineNumber":117,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ prefix (\u003e\u003d2 names) -\u003e 3 persons found */"},{"lineNumber":123,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" \" + BENSON.getName() + ELLE.getName();"},{"lineNumber":124,"author":{"gitID":"tanhengyeow"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, BENSON, ELLE);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ + p/ prefix (only 1 name) -\u003e 1 persons found */"},{"lineNumber":129,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" p/\" + DANIEL.getPhone().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ + p/ prefix (\u003e\u003d 2 names and p/ matches 1 of the names) -\u003e 1 persons found */"},{"lineNumber":135,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" \""},{"lineNumber":136,"author":{"gitID":"tanhengyeow"},"content":"                + BENSON.getName() + \" \" + ELLE.getName() + \" p/\" + DANIEL.getPhone().value;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ + p/ prefix (\u003e\u003d 2 names and p/ does not match any names) -\u003e 0 persons found */"},{"lineNumber":142,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" \""},{"lineNumber":143,"author":{"gitID":"tanhengyeow"},"content":"                + BENSON.getName() + \" \" + ELLE.getName() + \" p/\" + GEORGE.getPhone().value;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ + p/ + e/ a/ + y/ prefix (1 value per field - all correct) -\u003e 1 persons found */"},{"lineNumber":149,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" \" + \" p/\" + DANIEL.getPhone().value"},{"lineNumber":150,"author":{"gitID":"tanhengyeow"},"content":"                + \" e/\" + DANIEL.getEmail().value + \" a/\" + DANIEL.getAddress().value"},{"lineNumber":151,"author":{"gitID":"tanhengyeow"},"content":"                + \" y/\" + DANIEL.getExpectedGraduationYear().value;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find person with n/ + p/ + e/ a/ + y/ prefix (1 value per field - one incorrect) -\u003e 0 persons found */"},{"lineNumber":157,"author":{"gitID":"tanhengyeow"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getName() + \" \" + \" p/\" + DANIEL.getPhone().value"},{"lineNumber":158,"author":{"gitID":"tanhengyeow"},"content":"                + \" e/\" + DANIEL.getEmail().value + \" a/\" + DANIEL.getAddress().value"},{"lineNumber":159,"author":{"gitID":"tanhengyeow"},"content":"                + \" y/\" + GEORGE.getExpectedGraduationYear().value;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find address of person in address book -\u003e 3 persons found */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":172,"author":{"gitID":"tanhengyeow"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, CARL, GEORGE);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"tanhengyeow"},"content":"        /* Case: find email of person in address book -\u003e 1 persons found */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":223,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":223,"tanhengyeow":26}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(String.valueOf(expectedId), personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"Ang-YC":1}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESUME_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"  \" + ADDRESS_DESC_AMY + \" \""},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + \" \" + MAJOR_DESC_AMY + \" \""},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"                + RESUME_DESC_AMY + \" \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withResume(VALID_RESUME_AMY)"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).withMajor(VALID_MAJOR_AMY)"},{"lineNumber":80,"author":{"gitID":"tanhengyeow"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"tanhengyeow"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"tanhengyeow"},"content":"                + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, index, AMY);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"        /* Case: clear resume -\u003e cleared */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_RESUME.getPrefix();"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withResume(null).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withResume(null).withTags().build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":133,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"tanhengyeow"},"content":"                + RESUME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":179,"author":{"gitID":"mhq199657"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":183,"author":{"gitID":"mhq199657"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":187,"author":{"gitID":"mhq199657"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":191,"author":{"gitID":"mhq199657"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"mhq199657"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":195,"author":{"gitID":"mhq199657"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":203,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"tanhengyeow"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":240,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":41,"-":249,"tanhengyeow":14}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(expectedCard.getUniversity(), actualCard.getUniversity());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(expectedCard.getRating(), actualCard.getRating());"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(expectedCard.getStatus(), actualCard.getStatus());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(\"-\", actualCard.getUniversity());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(\"-\", actualCard.getRating());"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(\"-\", actualCard.getStatus());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":67,"Ang-YC":6}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"    private static final String[] CSS_FILES \u003d {\"view/HRTheme.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":28,"Ang-YC":1}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(800.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":122,"Ang-YC":1}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"        String defaultConfigAsString \u003d \"App title: HR+\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level: INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location: preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"Ang-YC":1}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"        assertNotNull(AppUtil.getImage(\"/images/help_icon.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"Ang-YC":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_EXPECTED_GRADUATION_YEAR \u003d \"2020\";"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"    private static final String VALID_MAJOR \u003d \"Computer Science\";"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_TECHNICAL_SKILLS_SCORE \u003d \"4\";"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_COMMUNICATION_SKILLS_SCORE \u003d \"3.5\";"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_PROBLEM_SOLVING_SKILLS_SCORE \u003d \"3\";"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_EXPERIENCE_SCORE \u003d \"2.5\";"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_RESUME \u003d TEST_DATA_FOLDER + \"hans.pdf\";"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"    private static final String VALID_INTERVIEW_DATE \u003d \"1540814400\";"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"            Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR,"},{"lineNumber":93,"author":{"gitID":"tanhengyeow"},"content":"                VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE, VALID_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"                VALID_PROBLEM_SOLVING_SKILLS_SCORE, VALID_EXPERIENCE_SCORE, VALID_RESUME,"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"                VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":104,"author":{"gitID":"kexiaowen"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR,"},{"lineNumber":105,"author":{"gitID":"tanhengyeow"},"content":"                VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE, VALID_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"                VALID_PROBLEM_SOLVING_SKILLS_SCORE, VALID_EXPERIENCE_SCORE, VALID_RESUME,"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"                VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":114,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR,"},{"lineNumber":117,"author":{"gitID":"tanhengyeow"},"content":"                VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE, VALID_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"                VALID_PROBLEM_SOLVING_SKILLS_SCORE, VALID_EXPERIENCE_SCORE, VALID_RESUME,"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"                VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":151,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":7,"mhq199657":4,"-":142,"tanhengyeow":4,"Ang-YC":7}},{"path":"src/test/java/seedu/address/ui/InfoPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import static guitests.guihandles.InfoPanelUtil.waitUntilInfoPanelLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import guitests.guihandles.InfoPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"public class InfoPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"    private InfoPanel infoPanel;"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    private InfoPanelHandle infoPanelHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.interact(() -\u003e infoPanel \u003d new InfoPanel());"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"        uiPartRule.setUiPart(infoPanel);"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        infoPanelHandle \u003d new InfoPanelHandle(infoPanel.getRoot());"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    public void display() {"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"        // Default selected person is null"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        assertNull(infoPanelHandle.getLoadedPerson());"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"        // Post changed event"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        waitUntilInfoPanelLoaded(infoPanelHandle);"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(ALICE, infoPanelHandle.getLoadedPerson());"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"    public void responsive() {"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        // Select someone first"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        waitUntilInfoPanelLoaded(infoPanelHandle);"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(ALICE, infoPanelHandle.getLoadedPerson());"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"        // Test responsiveness"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        infoPanelHandle.setWidthAndWait(InfoPanel.SPLIT_MIN_WIDTH - 100);"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(infoPanelHandle.isResponsiveSingle());"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"        infoPanelHandle.setWidthAndWait(InfoPanel.SPLIT_MIN_WIDTH + 100);"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(infoPanelHandle.isResponsiveSplit());"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"mhq199657":2,"-":13,"Ang-YC":44}},{"path":"src/test/java/seedu/address/ui/TitleBarTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import static seedu.address.ui.TitleBar.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import static seedu.address.ui.TitleBar.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"import guitests.guihandles.TitleBarHandle;"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MaximizeAppRequestEvent;"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MinimizeAppRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"public class TitleBarTest extends GuiUnitTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"    private static final Clock originalClock \u003d TitleBar.getClock();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    private TitleBarHandle titleBarHandle;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        TitleBar.setClock(injectedClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"        TitleBar.setClock(originalClock);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"        TitleBar titleBar \u003d new TitleBar(STUB_SAVE_LOCATION);"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"        uiPartRule.setUiPart(titleBar);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle \u003d new TitleBarHandle(titleBar.getRoot());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    public void controlHelp() {"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.openHelpWindowUsingControl();"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(HelpWindowHandle.isWindowPresent());"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    public void controlMinimize() {"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.minimizeWindow();"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof MinimizeAppRequestEvent);"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    public void controlMaximize() {"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.maximizeWindow();"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof MaximizeAppRequestEvent);"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"    public void controlClose() {"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"        titleBarHandle.closeWindow();"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(expectedSaveLocation, titleBarHandle.getSaveLocation());"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(expectedSyncStatus, titleBarHandle.getSyncStatus());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":64,"Ang-YC":49}},{"path":"src/test/java/seedu/address/commons/util/DoubleUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"public class DoubleUtilTest {"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"    public void roundToTwoDecimalPlaces_inputDouble() {"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(1) \u003d\u003d 1.0);"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(1.3424323423424) \u003d\u003d 1.34);"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(4242.3351231231) \u003d\u003d 4242.34);"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces("},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"                3.345331231234444444232322325898788765767645436658689797676547587698) \u003d\u003d 3.35);"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"    public void roundToTwoDecimalPlaces_inputString() {"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(\"1\") \u003d\u003d 1.0);"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(\"1.3424323423424\") \u003d\u003d 1.34);"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces(\"4242.3351231231\") \u003d\u003d 4242.34);"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(DoubleUtil.roundToTwoDecimalPlaces("},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"                \"3.345331231234444444232322325898788765767645436658689797676547587698\") \u003d\u003d 3.35);"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":22,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearInKeywordsRangePredicate;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    public void parse_validArg_returnsFilterCommand() {"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        FilterCommand expectedFilterCommand \u003d"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"                new FilterCommand(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003cExpectedGraduationYear\u003e("},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"                                new ExpectedGraduationYear(\"2020\"), new ExpectedGraduationYear(\"2020\"))));"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, \" y/2020\", expectedFilterCommand);"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        expectedFilterCommand \u003d"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"                new FilterCommand(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003cExpectedGraduationYear\u003e("},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"                                new ExpectedGraduationYear(\"2019\"), new ExpectedGraduationYear(\"2021\"))));"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, \" y/2019-2021\", expectedFilterCommand);"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"        //Missing input, invalid command format"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"y/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/2025--2025\","},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/-\","},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/,\","},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/,,\","},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        //Correct command format but invalid expected graduation year"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/2o2o\","},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/2025,,2025\","},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        //Both mistakes occured, detect invalid command format first"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"   y/2025--2025,2o2o\","},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":58,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/FilterUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearInKeywordsRangePredicate;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"public class FilterUtilTest {"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"    public void parseExpectedGraduationYear_invalidCommandFormat_throwsIllegalValueException() throws Exception {"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"        FilterUtil.parseExpectedGraduationYear(\"  \");"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"    public void parseExpectedGraduationYear_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"        FilterUtil.parseExpectedGraduationYear(\"3000\");"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"    public void parseExpectedGraduationYear_validInput_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        //Single value"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        //No whitespaces"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        assertEquals(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"                new FilterRange\u003c\u003e(new ExpectedGraduationYear(\"2020\"))),"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"                FilterUtil.parseExpectedGraduationYear(\"2020\"));"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        //With whitespaces"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assertEquals(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003c\u003e(new ExpectedGraduationYear(\"2020\"))),"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"                FilterUtil.parseExpectedGraduationYear(\"    2020     \"));"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        //Multiple values with whitespaces"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        assertEquals(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003c\u003e(new ExpectedGraduationYear(\"2020\"), new ExpectedGraduationYear(\"2024\"))),"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"                FilterUtil.parseExpectedGraduationYear(\"    2020    - 2024 \"));"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":40,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMUNICATION_SKILLS_SCORE;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE_SCORE;"},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROBLEM_SOLVING_SKILLS_SCORE;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TECHNICAL_SKILLS_SCORE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneOffset;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.DeleteRatingCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.logic.commands.InterviewCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearInKeywordsRangePredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":71,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"    public void parseCommand_interview() throws Exception {"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.ofEpochSecond(1521036000, 0, ZoneOffset.UTC);"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand command \u003d (InterviewCommand) parser.parseCommand(InterviewCommand.COMMAND_WORD + \" \""},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" Mar 14 2018 2pm\");"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        assertEquals(new InterviewCommand(INDEX_FIRST_PERSON, dateTime), command);"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":103,"author":{"gitID":"tanhengyeow"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")))"},{"lineNumber":104,"author":{"gitID":"tanhengyeow"},"content":"                instanceof FindCommand);"},{"lineNumber":105,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(parser.parseCommand(FindCommand.COMMAND_WORD + \" n/foo\") instanceof FindCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"                PersonUtil.getFilterCommand(person));"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"        assertEquals(new FilterCommand(new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"                person.getExpectedGraduationYear(), person.getExpectedGraduationYear())), command);"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"kexiaowen"},"content":"    public void parseCommand_rate() throws Exception {"},{"lineNumber":119,"author":{"gitID":"kexiaowen"},"content":"        final Rating rating \u003d new Rating(4.5, 4,"},{"lineNumber":120,"author":{"gitID":"kexiaowen"},"content":"                3.5, 4);"},{"lineNumber":121,"author":{"gitID":"kexiaowen"},"content":"        RateCommand command \u003d (RateCommand) parser.parseCommand(RateCommand.COMMAND_WORD + \" \""},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":123,"author":{"gitID":"kexiaowen"},"content":"                + PREFIX_TECHNICAL_SKILLS_SCORE + rating.technicalSkillsScore + \" \""},{"lineNumber":124,"author":{"gitID":"kexiaowen"},"content":"                + PREFIX_COMMUNICATION_SKILLS_SCORE + rating.communicationSkillsScore + \" \""},{"lineNumber":125,"author":{"gitID":"kexiaowen"},"content":"                + PREFIX_PROBLEM_SOLVING_SKILLS_SCORE + rating.problemSolvingSkillsScore + \" \""},{"lineNumber":126,"author":{"gitID":"kexiaowen"},"content":"                + PREFIX_EXPERIENCE_SCORE + rating.experienceScore);"},{"lineNumber":127,"author":{"gitID":"kexiaowen"},"content":"        assertEquals(new RateCommand(INDEX_FIRST_PERSON, rating), command);"},{"lineNumber":128,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":130,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"kexiaowen"},"content":"    public void parseCommand_deleteRating() throws Exception {"},{"lineNumber":132,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand command \u003d (DeleteRatingCommand) parser.parseCommand("},{"lineNumber":133,"author":{"gitID":"kexiaowen"},"content":"                DeleteRatingCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":134,"author":{"gitID":"kexiaowen"},"content":"        assertEquals(new DeleteRatingCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":135,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":165,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":27,"mhq199657":10,"-":141,"Ang-YC":12,"tanhengyeow":4}},{"path":"src/test/java/seedu/address/logic/parser/InterviewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.logic.commands.InterviewCommand;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"public class InterviewCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE);"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    private static final String VALID_DATE \u003d \"14th Mar 2pm\";"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"    private static final String INVALID_DATE \u003d \"My Birthday\";"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    private InterviewCommandParser parser \u003d new InterviewCommandParser();"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"        // No index specified"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"        assertParseFailure(parser, VALID_DATE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"        // No date specified"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"        // No index and no date specified"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"    public void parse_invalidValue_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"        assertParseFailure(parser, \"1 \" + INVALID_DATE,"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"                String.format(InterviewCommandParser.MESSAGE_DATETIME_PARSE_FAIL, INVALID_DATE));"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    public void parse_validValue_returnsInterviewCommand() {"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2018, 3, 14, 14, 0, 0);"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand expectedInterviewCommand \u003d"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"                new InterviewCommand(Index.fromOneBased(2), dateTime);"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        assertParseSuccess(parser, \"2 \" + VALID_DATE, expectedInterviewCommand);"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":11,"Ang-YC":39}},{"path":"src/test/java/seedu/address/logic/parser/DeleteRatingCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.DeleteRatingCommand;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":" * outside of the DeleteRatingCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":" * same path through the DeleteRatingCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"public class DeleteRatingCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRatingCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"    private DeleteRatingCommandParser parser \u003d new DeleteRatingCommandParser();"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"    public void parse_validArgs_returnsDeleteRatingCommand() {"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"        assertParseSuccess(parser, \"1\", new DeleteRatingCommand(INDEX_FIRST_PERSON));"},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":36,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_GRADUATION_YEAR_DESC;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EXPECTED_GRADUATION_YEAR_DESC,"},{"lineNumber":101,"author":{"gitID":"tanhengyeow"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS); // invalid expected grad year"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MAJOR_DESC, Major.MESSAGE_MAJOR_CONSTRAINTS); // invalid major"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":127,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY;"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":131,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":132,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":146,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"mhq199657"},"content":"        // expectedGraduationYear"},{"lineNumber":180,"author":{"gitID":"mhq199657"},"content":"        userInput \u003d targetIndex.getOneBased() + EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"mhq199657"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":185,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":186,"author":{"gitID":"tanhengyeow"},"content":"        // major"},{"lineNumber":187,"author":{"gitID":"tanhengyeow"},"content":"        userInput \u003d targetIndex.getOneBased() + MAJOR_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"mhq199657"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":189,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":203,"author":{"gitID":"mhq199657"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY"},{"lineNumber":205,"author":{"gitID":"tanhengyeow"},"content":"                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY"},{"lineNumber":206,"author":{"gitID":"mhq199657"},"content":"                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + EXPECTED_GRADUATION_YEAR_DESC_BOB"},{"lineNumber":207,"author":{"gitID":"tanhengyeow"},"content":"                + MAJOR_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":208,"author":{"gitID":"tanhengyeow"},"content":"                + EMAIL_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY"},{"lineNumber":209,"author":{"gitID":"mhq199657"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":213,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":214,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":215,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":231,"author":{"gitID":"mhq199657"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":232,"author":{"gitID":"mhq199657"},"content":"                + INVALID_EXPECTED_GRADUATION_YEAR_DESC + ADDRESS_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":233,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":235,"author":{"gitID":"tanhengyeow"},"content":"                .withAddress(VALID_ADDRESS_BOB).withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":236,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_BOB).build();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":25,"-":204,"tanhengyeow":22}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_GRADUATION_YEAR_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_GRADUATION_YEAR_DESC;"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAJOR_DESC;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESUME_DESC;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MAJOR_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESUME_DESC_AMY;"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESUME_DESC_BOB;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":37,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_AMY;"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.CommandTestUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB).withMajor(VALID_MAJOR_BOB)"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"                .withResume(VALID_RESUME_BOB)"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"                + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"tanhengyeow"},"content":"                + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":90,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"tanhengyeow"},"content":"                        + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"tanhengyeow"},"content":"                        + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"tanhengyeow"},"content":"                        + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"        // multiple expectedGraduationYear - last expectedGraduationYear accepted"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_AMY + EXPECTED_GRADUATION_YEAR_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"tanhengyeow"},"content":"                        + MAJOR_DESC_BOB + RESUME_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"tanhengyeow"},"content":"        // multiple major - last major accepted"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"tanhengyeow"},"content":"                        + MAJOR_DESC_AMY + MAJOR_DESC_BOB + RESUME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"        // multiple resume - last expectedGraduationYear accepted"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"tanhengyeow"},"content":"                        + RESUME_DESC_AMY + RESUME_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":130,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_BOB)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":134,"author":{"gitID":"mhq199657"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":139,"author":{"gitID":"mhq199657"},"content":"        // zero resume"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":141,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":143,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":145,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":149,"author":{"gitID":"mhq199657"},"content":"        // zero tags"},{"lineNumber":150,"author":{"gitID":"mhq199657"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"                .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":153,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":154,"author":{"gitID":"tanhengyeow"},"content":"                .withResume(VALID_RESUME_AMY)"},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"                .withTags().build();"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":157,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_AMY + MAJOR_DESC_AMY + RESUME_DESC_AMY,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":168,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":172,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":173,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":177,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":178,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":183,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB,"},{"lineNumber":184,"author":{"gitID":"mhq199657"},"content":"                expectedMessage);"},{"lineNumber":185,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":186,"author":{"gitID":"mhq199657"},"content":"        //missing expectedGraduationYear prefix"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"tanhengyeow"},"content":"                + VALID_EXPECTED_GRADUATION_YEAR_BOB + MAJOR_DESC_BOB,"},{"lineNumber":189,"author":{"gitID":"tanhengyeow"},"content":"                expectedMessage);"},{"lineNumber":190,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":191,"author":{"gitID":"tanhengyeow"},"content":"        //missing major prefix"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":193,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB + VALID_MAJOR_BOB,"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":195,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":197,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":198,"author":{"gitID":"tanhengyeow"},"content":"                + VALID_EXPECTED_GRADUATION_YEAR_BOB + VALID_MAJOR_BOB + VALID_RESUME_AMY,"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":207,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":208,"author":{"gitID":"mhq199657"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":212,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":213,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":214,"author":{"gitID":"mhq199657"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":218,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":219,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":220,"author":{"gitID":"mhq199657"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":224,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":225,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":226,"author":{"gitID":"mhq199657"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":227,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":228,"author":{"gitID":"mhq199657"},"content":"        //invalid expectedGraduationYear"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":230,"author":{"gitID":"tanhengyeow"},"content":"                        + INVALID_EXPECTED_GRADUATION_YEAR_DESC + MAJOR_DESC_BOB"},{"lineNumber":231,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":232,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":234,"author":{"gitID":"tanhengyeow"},"content":"        //invalid major"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":236,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB + INVALID_MAJOR_DESC"},{"lineNumber":237,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":238,"author":{"gitID":"tanhengyeow"},"content":"                Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":240,"author":{"gitID":"mhq199657"},"content":"        // invalid resume"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":242,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":243,"author":{"gitID":"tanhengyeow"},"content":"                        + INVALID_RESUME_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":244,"author":{"gitID":"mhq199657"},"content":"                Resume.MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":248,"author":{"gitID":"tanhengyeow"},"content":"                + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":249,"author":{"gitID":"mhq199657"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":252,"author":{"gitID":"mhq199657"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":253,"author":{"gitID":"tanhengyeow"},"content":"                        + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":257,"author":{"gitID":"tanhengyeow"},"content":"                + ADDRESS_DESC_BOB + EXPECTED_GRADUATION_YEAR_DESC_BOB + MAJOR_DESC_BOB"},{"lineNumber":258,"author":{"gitID":"tanhengyeow"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":71,"-":125,"tanhengyeow":65}},{"path":"src/test/java/seedu/address/logic/commands/RateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"  * Contains integration tests (interaction with the Model) and unit tests for RateCommand."},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"  */"},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"public class RateCommandTest {"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"    public static final String TECHNICAL_SKILLS_SCORE \u003d \"4\";"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"    public static final String COMMUNICATION_SKILLS_SCORE \u003d \"4.5\";"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    public static final String PROBLEM_SOLVING_SKILLS_SCORE \u003d \"3\";"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"    public static final String EXPERIENCE_SCORE \u003d \"3.5\";"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"    public static final Rating VALID_RATING \u003d new Rating(4, 4.5,"},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"            3, 3.5);"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"        Person ratedPerson \u003d new PersonBuilder(firstPerson).withRating(TECHNICAL_SKILLS_SCORE,"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"                COMMUNICATION_SKILLS_SCORE, PROBLEM_SOLVING_SKILLS_SCORE, EXPERIENCE_SCORE).build();"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, ratedPerson.getRating());"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATE_PERSON_SUCCESS,"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getName(), ratedPerson.getRating().getTechnicalSkillsScore(),"},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getCommunicationSkillsScore(),"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getProblemSolvingSkillsScore(),"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getExperienceScore(),"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getOverallScore());"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(firstPerson, ratedPerson);"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"    public void execute_allFieldsSpecifiedFilteredList_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":67,"author":{"gitID":"kexiaowen"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"kexiaowen"},"content":"        Person ratedPerson \u003d new PersonBuilder(firstPerson).withRating(TECHNICAL_SKILLS_SCORE,"},{"lineNumber":69,"author":{"gitID":"kexiaowen"},"content":"                COMMUNICATION_SKILLS_SCORE, PROBLEM_SOLVING_SKILLS_SCORE, EXPERIENCE_SCORE).build();"},{"lineNumber":70,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":71,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, ratedPerson.getRating());"},{"lineNumber":72,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATE_PERSON_SUCCESS,"},{"lineNumber":73,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getName(),"},{"lineNumber":74,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getTechnicalSkillsScore(),"},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getCommunicationSkillsScore(),"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getProblemSolvingSkillsScore(),"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getExperienceScore(),"},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getOverallScore());"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(firstPerson, ratedPerson);"},{"lineNumber":82,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":83,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":86,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"kexiaowen"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":88,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":89,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":90,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, VALID_RATING);"},{"lineNumber":91,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"     * but smaller than size of address book"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":102,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":103,"author":{"gitID":"kexiaowen"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":104,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":105,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":106,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, VALID_RATING);"},{"lineNumber":107,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":108,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":111,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":113,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":"        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":"        Person modifiedPerson \u003d new PersonBuilder(personToModify).withRating(TECHNICAL_SKILLS_SCORE,"},{"lineNumber":118,"author":{"gitID":"kexiaowen"},"content":"                COMMUNICATION_SKILLS_SCORE, PROBLEM_SOLVING_SKILLS_SCORE, EXPERIENCE_SCORE).build();"},{"lineNumber":119,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_RATING);"},{"lineNumber":120,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":121,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"        // rate -\u003e first person rating changed"},{"lineNumber":123,"author":{"gitID":"kexiaowen"},"content":"        rateCommand.execute();"},{"lineNumber":124,"author":{"gitID":"kexiaowen"},"content":"        undoRedoStack.push(rateCommand);"},{"lineNumber":125,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":126,"author":{"gitID":"kexiaowen"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":127,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":128,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":129,"author":{"gitID":"kexiaowen"},"content":"        // redo -\u003e same first person modified again"},{"lineNumber":130,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToModify, modifiedPerson);"},{"lineNumber":131,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":132,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":134,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":136,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":137,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":138,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":139,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":140,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, VALID_RATING);"},{"lineNumber":141,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":142,"author":{"gitID":"kexiaowen"},"content":"        // execution failed -\u003e rateCommand not pushed into undoRedoStack"},{"lineNumber":143,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":145,"author":{"gitID":"kexiaowen"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":146,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":147,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":148,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":150,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"kexiaowen"},"content":"     * 1. Modifies {@code Person#remark} from a filtered list."},{"lineNumber":152,"author":{"gitID":"kexiaowen"},"content":"     * 2. Undo the modification."},{"lineNumber":153,"author":{"gitID":"kexiaowen"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"},{"lineNumber":154,"author":{"gitID":"kexiaowen"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":155,"author":{"gitID":"kexiaowen"},"content":"     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."},{"lineNumber":156,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonRated() throws Exception {"},{"lineNumber":159,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":160,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_RATING);"},{"lineNumber":163,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":165,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":166,"author":{"gitID":"kexiaowen"},"content":"        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":167,"author":{"gitID":"kexiaowen"},"content":"        Person modifiedPerson \u003d new PersonBuilder(personToModify).withRating(TECHNICAL_SKILLS_SCORE,"},{"lineNumber":168,"author":{"gitID":"kexiaowen"},"content":"                COMMUNICATION_SKILLS_SCORE, PROBLEM_SOLVING_SKILLS_SCORE, EXPERIENCE_SCORE).build();"},{"lineNumber":169,"author":{"gitID":"kexiaowen"},"content":"        // rate -\u003e modifies second person in unfiltered person list / first person in filtered person list"},{"lineNumber":170,"author":{"gitID":"kexiaowen"},"content":"        rateCommand.execute();"},{"lineNumber":171,"author":{"gitID":"kexiaowen"},"content":"        undoRedoStack.push(rateCommand);"},{"lineNumber":172,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":173,"author":{"gitID":"kexiaowen"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":174,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":176,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToModify, modifiedPerson);"},{"lineNumber":177,"author":{"gitID":"kexiaowen"},"content":"        assertNotEquals(personToModify, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":178,"author":{"gitID":"kexiaowen"},"content":"        // redo -\u003e modifies same second person in unfiltered person list"},{"lineNumber":179,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":180,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":182,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"kexiaowen"},"content":"    public void equals() {"},{"lineNumber":184,"author":{"gitID":"kexiaowen"},"content":"        final RateCommand standardCommand \u003d new RateCommand(INDEX_FIRST_PERSON, VALID_RATING);"},{"lineNumber":185,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":186,"author":{"gitID":"kexiaowen"},"content":"        // same values -\u003e returns true"},{"lineNumber":187,"author":{"gitID":"kexiaowen"},"content":"        RateCommand commandWithSameValues \u003d new RateCommand(INDEX_FIRST_PERSON, VALID_RATING);"},{"lineNumber":188,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":189,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":190,"author":{"gitID":"kexiaowen"},"content":"        // same object -\u003e returns true"},{"lineNumber":191,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":192,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":193,"author":{"gitID":"kexiaowen"},"content":"        // null -\u003e returns false"},{"lineNumber":194,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":195,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":196,"author":{"gitID":"kexiaowen"},"content":"        // different types -\u003e returns false"},{"lineNumber":197,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":198,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":199,"author":{"gitID":"kexiaowen"},"content":"        // different index -\u003e returns false"},{"lineNumber":200,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(standardCommand.equals(new RateCommand(INDEX_SECOND_PERSON,"},{"lineNumber":201,"author":{"gitID":"kexiaowen"},"content":"                VALID_RATING)));"},{"lineNumber":202,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":203,"author":{"gitID":"kexiaowen"},"content":"        // different rating -\u003e returns false"},{"lineNumber":204,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(standardCommand.equals(new RateCommand(INDEX_FIRST_PERSON,"},{"lineNumber":205,"author":{"gitID":"kexiaowen"},"content":"                new Rating(1, 1,"},{"lineNumber":206,"author":{"gitID":"kexiaowen"},"content":"                        1, 1))));"},{"lineNumber":207,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":209,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"kexiaowen"},"content":"      * Returns an {@code RemarkCommand}."},{"lineNumber":211,"author":{"gitID":"kexiaowen"},"content":"      */"},{"lineNumber":212,"author":{"gitID":"kexiaowen"},"content":"    private RateCommand prepareCommand(Index index, Rating rating) {"},{"lineNumber":213,"author":{"gitID":"kexiaowen"},"content":"        RateCommand rateCommand \u003d new RateCommand(index, rating);"},{"lineNumber":214,"author":{"gitID":"kexiaowen"},"content":"        rateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":215,"author":{"gitID":"kexiaowen"},"content":"        return rateCommand;"},{"lineNumber":216,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":211,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/RateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMUNICATION_SKILLS_SCORE;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE_SCORE;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROBLEM_SOLVING_SKILLS_SCORE;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TECHNICAL_SKILLS_SCORE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"public class RateCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE);"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"    private RateCommandParser parser \u003d new RateCommandParser();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"        assertParseFailure(parser, \"1\" + \" \" + PREFIX_TECHNICAL_SKILLS_SCORE"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"                + \" \" + PREFIX_COMMUNICATION_SKILLS_SCORE"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"                + \" \" + PREFIX_PROBLEM_SOLVING_SKILLS_SCORE"},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"                + \" \" + PREFIX_EXPERIENCE_SCORE, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":26,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMUNICATION_SKILLS_SCORE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE_SCORE;"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROBLEM_SOLVING_SKILLS_SCORE;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TECHNICAL_SKILLS_SCORE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    public static final String RESUME_PATH \u003d \"src/test/resources/resume/\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_EXPECTED_GRADUATION_YEAR_AMY \u003d \"2018\";"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_EXPECTED_GRADUATION_YEAR_BOB \u003d \"2020\";"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":"    public static final String VALID_MAJOR_AMY \u003d \"Computer Science\";"},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"    public static final String VALID_MAJOR_BOB \u003d \"Information Security\";"},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_TECHNICAL_SKILLS_SCORE_AMY \u003d \"4\";"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_TECHNICAL_SKILLS_SCORE_BOB \u003d \"4.5\";"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_COMMUNICATION_SKILLS_SCORE_AMY \u003d \"3\";"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_COMMUNICATION_SKILLS_SCORE_BOB \u003d \"4\";"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_PROBLEM_SOLVING_SKILLS_SCORE_AMY \u003d \"2\";"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_PROBLEM_SOLVING_SKILLS_SCORE_BOB \u003d \"4\";"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_EXPERIENCE_SCORE_AMY \u003d \"3\";"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":"    public static final String VALID_EXPERIENCE_SCORE_BOB \u003d \"4.5\";"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_RESUME_AMY \u003d RESUME_PATH + \"amy.pdf\";"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"    public static final String VALID_RESUME_BOB \u003d null;"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"    public static final String EXPECTED_GRADUATION_YEAR_DESC_AMY \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"            + VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"    public static final String EXPECTED_GRADUATION_YEAR_DESC_BOB \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"            + VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"    public static final String MAJOR_DESC_AMY \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_AMY;"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"    public static final String MAJOR_DESC_BOB \u003d \" \" + PREFIX_MAJOR + VALID_MAJOR_BOB;"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"    public static final String RESUME_DESC_AMY \u003d \" \" + PREFIX_RESUME + VALID_RESUME_AMY;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"    public static final String RESUME_DESC_BOB \u003d \"\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"    public static final String INVALID_EXPECTED_GRADUATION_YEAR_DESC \u003d \" \" + PREFIX_EXPECTED_GRADUATION_YEAR"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"            + \"2o20\";"},{"lineNumber":91,"author":{"gitID":"tanhengyeow"},"content":"    public static final String INVALID_MAJOR_DESC \u003d \" \" + PREFIX_MAJOR + \"\u0026Computer\"; // \u0027\u0026\u0027 not allowed in major"},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_TECHNICAL_SKILLS_SCORE + \"-10\""},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"            + \" \" + PREFIX_COMMUNICATION_SKILLS_SCORE + \"0\""},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":"            + \" \" + PREFIX_PROBLEM_SOLVING_SKILLS_SCORE + \"7.5\""},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"            + \" \" + PREFIX_EXPERIENCE_SCORE + \"0.5\"; // scores should be between 1 and 5 or equal to default value -1"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"    public static final String INVALID_RESUME_DESC \u003d \" \" + PREFIX_RESUME + \"fileDoesNot.exist\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"                .withTags(VALID_TAG_FRIEND).withResume(VALID_RESUME_AMY).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"                .withResume(VALID_RESUME_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":139,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":16,"mhq199657":20,"-":153,"tanhengyeow":6}},{"path":"src/test/java/seedu/address/logic/commands/DeleteRatingCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RateCommand."},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"public class DeleteRatingCommandTest {"},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"        Person personToDeleteRating \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"        PersonBuilder firstPerson \u003d new PersonBuilder(personToDeleteRating);"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"        Person editedPerson \u003d firstPerson.withRating(\"-1\", \"-1\","},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"                \"-1\", \"-1\").build();"},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d String.format(DeleteRatingCommand.MESSAGE_DELETE_RATING_SUCCESS,"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"                personToDeleteRating.getName());"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToDeleteRating, editedPerson);"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(deleteRatingCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(deleteRatingCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"kexiaowen"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"        Person personToDeleteRating \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":67,"author":{"gitID":"kexiaowen"},"content":"        PersonBuilder firstPerson \u003d new PersonBuilder(personToDeleteRating);"},{"lineNumber":68,"author":{"gitID":"kexiaowen"},"content":"        Person editedPerson \u003d firstPerson.withRating(\"-1\", \"-1\","},{"lineNumber":69,"author":{"gitID":"kexiaowen"},"content":"                \"-1\", \"-1\").build();"},{"lineNumber":70,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":71,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d String.format(DeleteRatingCommand.MESSAGE_DELETE_RATING_SUCCESS,"},{"lineNumber":72,"author":{"gitID":"kexiaowen"},"content":"                personToDeleteRating.getName());"},{"lineNumber":73,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":74,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToDeleteRating, editedPerson);"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(deleteRatingCommand, model, expectedMessage, expectedModel);"},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"kexiaowen"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":82,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":84,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":85,"author":{"gitID":"kexiaowen"},"content":"        // ensures that outOfBoundIndex is still in bounds of list of candidates"},{"lineNumber":86,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":87,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":88,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":89,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":90,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(deleteRatingCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":"    public void execute_personNotRated_throwsCommandException() {"},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"        Person personNotRated \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(INDEX_THIRD_PERSON);"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d String.format(DeleteRatingCommand.MESSAGE_PERSON_NOT_RATED,"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"                personNotRated.getName());"},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":102,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(deleteRatingCommand, model, expectedMessage);"},{"lineNumber":103,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":105,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":107,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"kexiaowen"},"content":"        Person personToDeleteRating \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"kexiaowen"},"content":"        PersonBuilder firstPerson \u003d new PersonBuilder(personToDeleteRating);"},{"lineNumber":112,"author":{"gitID":"kexiaowen"},"content":"        Person editedPerson \u003d firstPerson.withRating(\"-1\", \"-1\","},{"lineNumber":113,"author":{"gitID":"kexiaowen"},"content":"                \"-1\", \"-1\").build();"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":118,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":119,"author":{"gitID":"kexiaowen"},"content":"        // deleteRating -\u003e first person\u0027s rating deleted"},{"lineNumber":120,"author":{"gitID":"kexiaowen"},"content":"        deleteRatingCommand.execute();"},{"lineNumber":121,"author":{"gitID":"kexiaowen"},"content":"        undoRedoStack.push(deleteRatingCommand);"},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":123,"author":{"gitID":"kexiaowen"},"content":"        // undo -\u003e reverts HR+ back to previous state and filtered person list to show all persons"},{"lineNumber":124,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":125,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":126,"author":{"gitID":"kexiaowen"},"content":"        // redo -\u003e same first person\u0027s rating deleted again"},{"lineNumber":127,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToDeleteRating, editedPerson);"},{"lineNumber":128,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":129,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":131,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":133,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":134,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":136,"author":{"gitID":"kexiaowen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":137,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":138,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":139,"author":{"gitID":"kexiaowen"},"content":"        // execution failed -\u003e deleteRatingCommand not pushed into undoRedoStack"},{"lineNumber":140,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(deleteRatingCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":141,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":142,"author":{"gitID":"kexiaowen"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":143,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":144,"author":{"gitID":"kexiaowen"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":145,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":147,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"kexiaowen"},"content":"     * 1. Modifies {@code Person#remark} from a filtered list."},{"lineNumber":149,"author":{"gitID":"kexiaowen"},"content":"     * 2. Undo the modification."},{"lineNumber":150,"author":{"gitID":"kexiaowen"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"},{"lineNumber":151,"author":{"gitID":"kexiaowen"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":152,"author":{"gitID":"kexiaowen"},"content":"     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."},{"lineNumber":153,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"kexiaowen"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeletedRating() throws Exception {"},{"lineNumber":156,"author":{"gitID":"kexiaowen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"kexiaowen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"kexiaowen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":160,"author":{"gitID":"kexiaowen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":162,"author":{"gitID":"kexiaowen"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":163,"author":{"gitID":"kexiaowen"},"content":"        Person personToModify \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":164,"author":{"gitID":"kexiaowen"},"content":"        Person modifiedPerson \u003d new PersonBuilder(personToModify).withRating(\"-1\","},{"lineNumber":165,"author":{"gitID":"kexiaowen"},"content":"                \"-1\", \"-1\", \"-1\").build();"},{"lineNumber":166,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":167,"author":{"gitID":"kexiaowen"},"content":"        // deleteRating -\u003e modifies second person in unfiltered person list / first person in filtered person list"},{"lineNumber":168,"author":{"gitID":"kexiaowen"},"content":"        deleteRatingCommand.execute();"},{"lineNumber":169,"author":{"gitID":"kexiaowen"},"content":"        undoRedoStack.push(deleteRatingCommand);"},{"lineNumber":170,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":171,"author":{"gitID":"kexiaowen"},"content":"        // undo -\u003e reverts HR+ back to previous state and filtered person list to show all persons"},{"lineNumber":172,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":173,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":174,"author":{"gitID":"kexiaowen"},"content":"        expectedModel.updatePerson(personToModify, modifiedPerson);"},{"lineNumber":175,"author":{"gitID":"kexiaowen"},"content":"        assertNotEquals(personToModify, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":176,"author":{"gitID":"kexiaowen"},"content":"        // redo -\u003e modifies same second person in unfiltered person list"},{"lineNumber":177,"author":{"gitID":"kexiaowen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":178,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":180,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"kexiaowen"},"content":"     * Returns a {@code DeleteRatingCommand} with the parameter {@code index}."},{"lineNumber":182,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"kexiaowen"},"content":"    private DeleteRatingCommand prepareCommand(Index index) {"},{"lineNumber":184,"author":{"gitID":"kexiaowen"},"content":"        DeleteRatingCommand deleteRatingCommand \u003d new DeleteRatingCommand(index);"},{"lineNumber":185,"author":{"gitID":"kexiaowen"},"content":"        deleteRatingCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":186,"author":{"gitID":"kexiaowen"},"content":"        return deleteRatingCommand;"},{"lineNumber":187,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":182,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.parser.FilterUtil;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearInKeywordsRangePredicate;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandTest {"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                        new ExpectedGraduationYear(\"2018\"), new ExpectedGraduationYear(\"2020\"));"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"                        new ExpectedGraduationYear(\"2019\"), new ExpectedGraduationYear(\"2019\"));"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        FilterCommand findFirstCommandCopy \u003d new FilterCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        assertTrue(filterFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand.equals(2020));"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand \u003d\u003d null);"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"        // different filter command -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    public void execute_noPersonsGraduationYear_noPersonFound() {"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d prepareCommand(\"2017\");"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"    public void execute_moderateGraduationYear_somePersonsFound() {"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"        FilterCommand command \u003d prepareCommand(\"2019-2020\");"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, CARL, DANIEL,  FIONA));"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"    private FilterCommand prepareCommand(String userInput) {"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"            FilterCommand command \u003d"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"                    new FilterCommand(FilterUtil.parseExpectedGraduationYear(userInput));"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"            command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"            return command;"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"            throw new AssertionError(\"This should not be reachable.\");"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"    private void assertCommandSuccess(FilterCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":104,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.logic.parser.FindCommandParser;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_noKeywords_invalidCommandFormat() {"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command;"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"tanhengyeow"},"content":"            command \u003d prepareCommand(\" \");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"        } catch (ParseException pve) {"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"            if (!pve.getMessage().equals(expectedMessage)) {"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"                pve.printStackTrace();"},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() throws ParseException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_singlePrefixWithSingleKeyword_onePersonsFound() throws ParseException {"},{"lineNumber":88,"author":{"gitID":"tanhengyeow"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":89,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command \u003d prepareCommand(\" n/Kurz\");"},{"lineNumber":90,"author":{"gitID":"tanhengyeow"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"},{"lineNumber":91,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":93,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_singlePrefixWithMultipleKeywords_multiplePersonsFound() throws ParseException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":96,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command \u003d prepareCommand(\" n/Kurz Elle Kunz\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_multiplePrefixesWithSingleKeyword_onePersonsFound() throws ParseException {"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":103,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command \u003d prepareCommand(\" n/Kurz p/95352563 e/heinz@example.com a/wall street y/2019\");"},{"lineNumber":104,"author":{"gitID":"tanhengyeow"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"},{"lineNumber":105,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":107,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"tanhengyeow"},"content":"    public void execute_multiplePrefixesWithMultipleKeywords_zeroPersonsFound() throws ParseException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":110,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command \u003d prepareCommand(\" n/Kurz p/999 e/heinz@example.com a/wall street y/2019\");"},{"lineNumber":111,"author":{"gitID":"tanhengyeow"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList());"},{"lineNumber":112,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"tanhengyeow"},"content":"    private FindCommand prepareCommand(String userInput) throws ParseException {"},{"lineNumber":118,"author":{"gitID":"tanhengyeow"},"content":"        FindCommand command \u003d parser.parse(userInput);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":99,"tanhengyeow":38}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":144,"author":{"gitID":"mhq199657"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"mhq199657"},"content":"        public void filterFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":4,"-":179}},{"path":"src/test/java/seedu/address/model/person/ResumeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"public class ResumeTest {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    private static final String TEST_DATA_FOLDER \u003d \"src/test/data/ResumeTest/\";"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public void constructor_null_constructionSuccessValueNull() {"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"        assertNull(new Resume(null).value);"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    public void constructor_invalidResume_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"        String invalidResume \u003d formFilePath(\"\");"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Resume(invalidResume));"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"    public void constructor_validResume_constructionSuccess() {"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"        String validResume \u003d formFilePath(\"valid.pdf\");"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        assertEquals(validResume, new Resume(validResume).value);"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"    private String formFilePath(String fileName) {"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        return TEST_DATA_FOLDER + fileName;"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"    public void isValidResume() {"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        // null resume"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Resume.isValidResume(null));"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        // invalid resume file name"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        assertFalse(Resume.isValidResume(formFilePath(\"\"))); // empty string"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        assertFalse(Resume.isValidResume(formFilePath(\" \"))); // spaces only"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        assertFalse(Resume.isValidResume(formFilePath(\"fileNot.exist\"))); // not a existing file name"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        assertFalse(Resume.isValidResume(formFilePath(\"largeFile.pdf\"))); // greater than 1MB"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        assertFalse(Resume.isValidResume(formFilePath(\"fake.pdf\"))); // a fake pdf"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        // valid resume file name"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"1 2.pdf\"))); // spaces within fileName"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"valid.pdf\")));"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"validPdf\")));"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"alice.pdf\")));"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"benson.pdf\")));"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"bob.pdf\")));"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"daniel.pdf\")));"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"george.pdf\")));"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"        assertTrue(Resume.isValidResume(formFilePath(\"hoon.pdf\")));"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":51,"-":9}},{"path":"src/test/java/seedu/address/model/person/RatingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"public class RatingTest {"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"    private final Rating rating \u003d new Rating(3, 3,"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"            4, 3.5);"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"    public void isValidScore() {"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"        // null phone number"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidScore(null));"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"        // invalid scores"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(Rating.isValidScore((double) 0));"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(Rating.isValidScore(5.5));"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(Rating.isValidScore((double) -3));"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"        // valid phone numbers"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(Rating.isValidScore((double) 1));"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(Rating.isValidScore(3.5));"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(Rating.isValidScore((double) 5));"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(rating.equals(rating));"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    public void equals_sameValues_returnsTrue() {"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"        Rating ratingCopy \u003d new Rating(rating.getTechnicalSkillsScore(), rating.communicationSkillsScore,"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"                rating.getProblemSolvingSkillsScore(), rating.getExperienceScore());"},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"        assertTrue(rating.equals(ratingCopy));"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"    public void equals_differentTypes_returnsFalse() {"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(rating.equals(1));"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":"    public void equals_null_returnsFalse() {"},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(rating.equals(null));"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"    public void equals_differentValues_returnsFalse() {"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"        Rating differentRating \u003d new Rating(1, 1,"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"                1, 1);"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"        assertFalse(rating.equals(differentRating));"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":58}},{"path":"src/test/java/seedu/address/model/person/ExpectedGraduationYearTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpectedGraduationYear(null));"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"        String invalidExpectedGraduationYear \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidExpectedGraduationYear));"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        // null expectedGraduationYear"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.isValidExpectedGraduationYear(null));"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        // invalid expectedGraduationYear"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"91\")); // less than 4 numbers"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"year2018\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"-2018\")); // negative symbol before digits"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"201 8\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        assertFalse(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2018.5\")); // year and month"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        // valid expectedGraduationYear"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assertTrue(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2018\"));"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        assertTrue(ExpectedGraduationYear.isValidExpectedGraduationYear(\"2025\"));"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":25,"-":15}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"    private static final String INVALID_EXPECTED_GRADUATION_YEAR \u003d \"2o1o\";"},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"    private static final String INVALID_MAJOR \u003d \"C[]mputer Science\";"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"    private static final String INVALID_TECHNICAL_SKILLS_SCORE \u003d \"10\";"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    private static final String INVALID_COMMUNICATION_SKILLS_SCORE \u003d \"-1.5\";"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"    private static final String INVALID_PROBLEM_SOLVING_SKILLS_SCORE \u003d \"0\";"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"    private static final String INVALID_EXPERIENCE_SCORE \u003d \"5.5\";"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    private static final String INVALID_RESUME \u003d \"fileDoesNot.exist\";"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    private static final String INVALID_INTERVIEW_DATE \u003d \"Tomorrow\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_EXPECTED_GRADUATION_YEAR \u003d BENSON.getExpectedGraduationYear().toString();"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"    private static final String VALID_MAJOR \u003d BENSON.getMajor().toString();"},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_TECHNICAL_SKILLS_SCORE \u003d Double.toString("},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":"            BENSON.getRating().getTechnicalSkillsScore());"},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_COMMUNICATION_SKILLS_SCORE \u003d Double.toString("},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"            BENSON.getRating().getCommunicationSkillsScore());"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_PROBLEM_SOLVING_SKILLS_SCORE \u003d Double.toString("},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"            BENSON.getRating().getProblemSolvingSkillsScore());"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"    private static final String VALID_EXPERIENCE_SCORE \u003d Double.toString("},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"            BENSON.getRating().getExperienceScore());"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"    private static final String VALID_RESUME \u003d BENSON.getResume().toString();"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    private static final String VALID_INTERVIEW_DATE \u003d \"1540814400\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":85,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":86,"author":{"gitID":"tanhengyeow"},"content":"                VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":87,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":97,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":98,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":108,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":109,"author":{"gitID":"tanhengyeow"},"content":"                VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":110,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":120,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":121,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":131,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":132,"author":{"gitID":"tanhengyeow"},"content":"                VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":133,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":134,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":142,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":143,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":144,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":145,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":146,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":154,"author":{"gitID":"tanhengyeow"},"content":"                null,  VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":155,"author":{"gitID":"tanhengyeow"},"content":"                VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":156,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":157,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"    public void toModelType_invalidExpectedGraduationYear_throwsIllegalValueException() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":165,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":166,"author":{"gitID":"tanhengyeow"},"content":"                        INVALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR,"},{"lineNumber":167,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":168,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":169,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":170,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"mhq199657"},"content":"    public void toModelType_nullExpectedGraduationYear_throwsIllegalValueException() {"},{"lineNumber":176,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":177,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS,  null, VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":178,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":179,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":180,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":181,"author":{"gitID":"mhq199657"},"content":"                ExpectedGraduationYear.class.getSimpleName());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"tanhengyeow"},"content":"    public void toModelType_invalidMajor_throwsIllegalValueException() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":188,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":189,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, INVALID_MAJOR,"},{"lineNumber":190,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":191,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":192,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":193,"author":{"gitID":"tanhengyeow"},"content":"        String expectedMessage \u003d Major.MESSAGE_MAJOR_CONSTRAINTS;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"tanhengyeow"},"content":"    public void toModelType_nullExpectedMajor_throwsIllegalValueException() {"},{"lineNumber":199,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":200,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS,  VALID_EXPECTED_GRADUATION_YEAR, null, VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":201,"author":{"gitID":"kexiaowen"},"content":"                VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":202,"author":{"gitID":"Ang-YC"},"content":"                VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":203,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":204,"author":{"gitID":"tanhengyeow"},"content":"                Major.class.getSimpleName());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"kexiaowen"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"kexiaowen"},"content":"    public void toModelType_invalidRating_throwsIllegalValueException() {"},{"lineNumber":210,"author":{"gitID":"mhq199657"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":211,"author":{"gitID":"tanhengyeow"},"content":"                VALID_ADDRESS, VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR, INVALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":212,"author":{"gitID":"kexiaowen"},"content":"                INVALID_COMMUNICATION_SKILLS_SCORE, INVALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":213,"author":{"gitID":"Ang-YC"},"content":"                INVALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":214,"author":{"gitID":"kexiaowen"},"content":"        String expectedMessage \u003d Rating.MESSAGE_RATING_CONSTRAINTS;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"mhq199657"},"content":"    public void toModelType_invalidResume_throwsIllegalValueException() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":221,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":222,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":223,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":224,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, INVALID_RESUME, VALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":225,"author":{"gitID":"mhq199657"},"content":"        String expectedMessage \u003d Resume.MESSAGE_RESUME_CONSTRAINTS;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":230,"author":{"gitID":"Ang-YC"},"content":"    public void toModelType_invalidInterviewDate_throwsIllegalValueException() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":232,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":233,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":234,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":235,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, INVALID_INTERVIEW_DATE, VALID_TAGS);"},{"lineNumber":236,"author":{"gitID":"Ang-YC"},"content":"        String expectedMessage \u003d InterviewDate.MESSAGE_INTERVIEW_DATE_XML_ERROR;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":245,"author":{"gitID":"mhq199657"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":246,"author":{"gitID":"tanhengyeow"},"content":"                        VALID_EXPECTED_GRADUATION_YEAR, VALID_MAJOR, VALID_TECHNICAL_SKILLS_SCORE,"},{"lineNumber":247,"author":{"gitID":"kexiaowen"},"content":"                        VALID_COMMUNICATION_SKILLS_SCORE, VALID_PROBLEM_SOLVING_SKILLS_SCORE,"},{"lineNumber":248,"author":{"gitID":"Ang-YC"},"content":"                        VALID_EXPERIENCE_SCORE, VALID_RESUME, VALID_INTERVIEW_DATE, invalidTags);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"Ang-YC"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":255,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(person.equals(person));"},{"lineNumber":256,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":258,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"Ang-YC"},"content":"    public void equals_differentValues_returnsFalse() {"},{"lineNumber":260,"author":{"gitID":"Ang-YC"},"content":"        XmlAdaptedPerson alice \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":261,"author":{"gitID":"Ang-YC"},"content":"        XmlAdaptedPerson benson \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":262,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(alice.equals(benson));"},{"lineNumber":263,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":32,"mhq199657":32,"-":129,"Ang-YC":36,"tanhengyeow":35}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        NameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match phone, email, expected graduation year and address, but does not match name"},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"2020\"));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":68,"tanhengyeow":12}},{"path":"src/test/java/seedu/address/model/person/MajorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":"public class MajorTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Major(null));"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"    public void constructor_invalidMajor_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        String invalidMajor \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Major(invalidMajor));"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"    public void isValidMajor() {"},{"lineNumber":25,"author":{"gitID":"tanhengyeow"},"content":"        // null major"},{"lineNumber":26,"author":{"gitID":"tanhengyeow"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Major.isValidMajor(null));"},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"        // invalid major"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(Major.isValidMajor(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(Major.isValidMajor(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(Major.isValidMajor(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(Major.isValidMajor(\"comp*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"        // valid major"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(Major.isValidMajor(\"computer science\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(Major.isValidMajor(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(Major.isValidMajor(\"2nd major in Business\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(Major.isValidMajor(\"Computer Engineering\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(Major.isValidMajor(\"Business Analytics and Information Security\")); // long names"},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"kexiaowen":9,"-":3,"tanhengyeow":29}},{"path":"src/test/java/seedu/address/model/person/InterviewDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneOffset;"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"public class InterviewDateTest {"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"    private LocalDateTime timeNow \u003d LocalDateTime.now().withNano(0);"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"    private long timeNowInEpoch \u003d timeNow.toEpochSecond(ZoneOffset.UTC);"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    private final InterviewDate validInterviewDate \u003d new InterviewDate(timeNow);"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"    private final InterviewDate nullInterviewDate \u003d new InterviewDate();"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"    public void setup_sameTimeNow_returnsTrue() {"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"        LocalDateTime convertedTime \u003d LocalDateTime.ofEpochSecond(timeNowInEpoch, 0, ZoneOffset.UTC);"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(convertedTime.equals(timeNow));"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    public void constructor_sameInterviewDate_returnsTrue() {"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        InterviewDate validInterviewDateInEpoch \u003d new InterviewDate(timeNowInEpoch);"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(validInterviewDate.equals(validInterviewDateInEpoch));"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"    public void constructor_unscheduledInterviewDate_returnsTrue() {"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        assertNotNull(nullInterviewDate);"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"        assertNull(nullInterviewDate.getDateTime());"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(validInterviewDate.equals(validInterviewDate));"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"    public void equals_sameValues_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        InterviewDate validInterviewDateCopy \u003d new InterviewDate(validInterviewDate.getDateTime());"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        assertTrue(validInterviewDate.equals(validInterviewDateCopy));"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"    public void equals_differentTypes_returnsFalse() {"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(validInterviewDate.equals(1));"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"    public void equals_null_returnsFalse() {"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(validInterviewDate.equals(null));"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"    public void equals_differentValues_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(validInterviewDate.equals(nullInterviewDate));"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":3,"Ang-YC":61}},{"path":"src/test/java/seedu/address/model/person/AddressContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"public class AddressContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Kent Ridge Drive\");"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Kent Ridge Drive\", \"Computing Drive\");"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        AddressContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"        AddressContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"                new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        AddressContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                new AddressContainsKeywordsPredicate(Collections.singletonList(\"Computing\"));"},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Computing Drive\").build()));"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Computing\", \"Drive\"));"},{"lineNumber":53,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Kent Ridge Drive\").build()));"},{"lineNumber":54,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":55,"author":{"gitID":"tanhengyeow"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Computing\", \"Test\"));"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Computing Drive\").build()));"},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"comPuTing\", \"dRivE\"));"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Computing Drive\").build()));"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"        AddressContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"                new AddressContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAddress(\"Computing Drive\").build()));"},{"lineNumber":70,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Compting\"));"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Computing Drive\").build()));"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match phone, email, expected graduation year and name, but does not match address"},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\", \"2020\"));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":32,"tanhengyeow":48}},{"path":"src/test/java/seedu/address/model/person/ExpectedGraduationYearInKeywordsRangePredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.parser.FilterRange;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearInKeywordsRangePredicateTest {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new ExpectedGraduationYearInKeywordsRangePredicate(null));"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"        FilterRange\u003cExpectedGraduationYear\u003e firstPredicateFilterRange \u003d new FilterRange\u003c\u003e("},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYear(\"2018\"), new ExpectedGraduationYear(\"2020\"));"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        FilterRange\u003cExpectedGraduationYear\u003e secondPredicateFilterRange \u003d new FilterRange\u003c\u003e("},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYear(\"2021\"));"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate firstPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate(firstPredicateFilterRange);"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate secondPredicate \u003d"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate(secondPredicateFilterRange);"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        // same object -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        // same values -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate firstPredicateCopy \u003d"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate(firstPredicateFilterRange);"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"        // different types -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        // null -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate \u003d\u003d null);"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        // different person -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"    public void test_expectedGraduationYearInKeywordsRange_returnsTrue() {"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        // Single keyword"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate predicate \u003d"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003cExpectedGraduationYear\u003e(new ExpectedGraduationYear(\"2021\")));"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2021\").build()));"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"        // Ranged keyword"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        predicate \u003d new ExpectedGraduationYearInKeywordsRangePredicate(new FilterRange\u003cExpectedGraduationYear\u003e("},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYear(\"2017\"), new ExpectedGraduationYear(\"2020\")));"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    public void test_expectedGraduationYearNotInKeywordsRange_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"        // Non-matching keyword for single predicate"},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYearInKeywordsRangePredicate predicate \u003d"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYearInKeywordsRangePredicate("},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"                        new FilterRange\u003cExpectedGraduationYear\u003e(new ExpectedGraduationYear(\"2025\")));"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"2020\").build()));"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"        // Not-in-range keyword for ranged predicate"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"        predicate \u003d new ExpectedGraduationYearInKeywordsRangePredicate(new FilterRange\u003cExpectedGraduationYear\u003e("},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"                new ExpectedGraduationYear(\"2024\"), new ExpectedGraduationYear(\"2025\")));"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":77}},{"path":"src/test/java/seedu/address/model/person/PhoneContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"public class PhoneContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"999\");"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"999\", \"555\");"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        PhoneContainsKeywordsPredicate firstPredicate \u003d new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"        PhoneContainsKeywordsPredicate secondPredicate \u003d new PhoneContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"        PhoneContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"                new PhoneContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"    public void test_phoneContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"tanhengyeow"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"                new PhoneContainsKeywordsPredicate(Collections.singletonList(\"999555\"));"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"999555\").build()));"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":"        // Multiple keywords"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"999555\", \"555999\"));"},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"999555\").build()));"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":53,"author":{"gitID":"tanhengyeow"},"content":"        // Only one matching keyword"},{"lineNumber":54,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"111222\", \"222111\"));"},{"lineNumber":55,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"111222\").build()));"},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"    public void test_phoneDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"        // Zero keywords"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"        PhoneContainsKeywordsPredicate predicate \u003d new PhoneContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"999\").build()));"},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"        // Non-matching keyword"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate(Arrays.asList(\"555\"));"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"999111\").build()));"},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match name, email, expected graduation year and address, but does not match phone"},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new PhoneContainsKeywordsPredicate("},{"lineNumber":70,"author":{"gitID":"tanhengyeow"},"content":"                Arrays.asList(\"Alice\", \"alice@email.com\", \"Main\", \"Street\", \"2020\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":32,"tanhengyeow":42}},{"path":"src/test/java/seedu/address/model/person/ExpectedGraduationYearContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"public class ExpectedGraduationYearContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"2020\");"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2020\", \"2019\");"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        ExpectedGraduationYearContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                new ExpectedGraduationYearContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"        ExpectedGraduationYearContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"                new ExpectedGraduationYearContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        ExpectedGraduationYearContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"                new ExpectedGraduationYearContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"    public void test_expectedGraduationYearContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        ExpectedGraduationYearContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                new ExpectedGraduationYearContainsKeywordsPredicate(Collections.singletonList(\"2020\"));"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new ExpectedGraduationYearContainsKeywordsPredicate(Arrays.asList(\"2020\", \"2019\"));"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        assertTrue(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"    public void test_expectedGraduationYearDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":"        // Zero keywords"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"        ExpectedGraduationYearContainsKeywordsPredicate predicate \u003d"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"                new ExpectedGraduationYearContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"        assertFalse(predicate.test(new PersonBuilder().withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":"        // Non-matching keyword"},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new ExpectedGraduationYearContainsKeywordsPredicate(Arrays.asList(\"2025\"));"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"2020\").build()));"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match phone, email, name and address, but does not match expected graduation year"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new ExpectedGraduationYearContainsKeywordsPredicate("},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Alice\", \"Main\", \"Street\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"mhq199657":7,"-":32,"tanhengyeow":34}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        descriptor.setExpectedGraduationYear(person.getExpectedGraduationYear());"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"        descriptor.setMajor(person.getMajor());"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        descriptor.setResume(person.getResume());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code ExpectedGraduationYear} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"    public EditPersonDescriptorBuilder withExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"        descriptor.setExpectedGraduationYear(new ExpectedGraduationYear(expectedGraduationYear));"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":88,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"tanhengyeow"},"content":"     * Sets the {@code Major} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"tanhengyeow"},"content":"    public EditPersonDescriptorBuilder withMajor(String major) {"},{"lineNumber":92,"author":{"gitID":"tanhengyeow"},"content":"        descriptor.setMajor(new Major(major));"},{"lineNumber":93,"author":{"gitID":"tanhengyeow"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code Resume} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"    public EditPersonDescriptorBuilder withResume(String resume) {"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"        descriptor.setResume(new Resume(resume));"},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":20,"-":86,"tanhengyeow":11}},{"path":"src/test/java/seedu/address/model/person/EmailContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"public class EmailContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"hy@example.com\");"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"hy@example.com\", \"yh@example.com\");"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        EmailContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"        EmailContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"                new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"    public void test_emailContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        EmailContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                new EmailContainsKeywordsPredicate(Collections.singletonList(\"hy@example.com\"));"},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"hy@example.com\").build()));"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"hy@example.com\", \"yh@example.com\"));"},{"lineNumber":53,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"hy@example.com\").build()));"},{"lineNumber":54,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"    public void test_emailDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":"        // Zero keywords"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"        EmailContainsKeywordsPredicate predicate \u003d"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"                new EmailContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"hy@lol.com\").build()));"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":"        // Non-matching keyword"},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"lol@lol.com\"));"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withEmail(\"hy@example.com\").build()));"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match phone, name, expected graduation year and address, but does not match email"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new EmailContainsKeywordsPredicate("},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"                Arrays.asList(\"12345\", \"Alice\", \"Main\", \"Street\", \"2020\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\").build()));"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":32,"tanhengyeow":41}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        sb.append(PREFIX_EXPECTED_GRADUATION_YEAR + person.getExpectedGraduationYear().value + \" \");"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":"        sb.append(PREFIX_MAJOR + person.getMajor().value + \" \");"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        if (!isNull(person.getResume().value)) {"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"            sb.append(PREFIX_RESUME + person.getResume().value + \" \");"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":44,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"    public static String getFilterCommand(Person person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        sb.append(FilterCommand.COMMAND_WORD).append(\" \");"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        sb.append(PREFIX_EXPECTED_GRADUATION_YEAR).append(person.getExpectedGraduationYear().value + \" \");"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        return sb.toString();"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":14,"-":39,"tanhengyeow":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMUNICATION_SKILLS_SCORE_AMY;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMMUNICATION_SKILLS_SCORE_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_AMY;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_GRADUATION_YEAR_BOB;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_SCORE_AMY;"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPERIENCE_SCORE_BOB;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_AMY;"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MAJOR_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROBLEM_SOLVING_SKILLS_SCORE_AMY;"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROBLEM_SOLVING_SKILLS_SCORE_BOB;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_AMY;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESUME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TECHNICAL_SKILLS_SCORE_AMY;"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TECHNICAL_SKILLS_SCORE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"            .withPhone(\"85355255\").withExpectedGraduationYear(\"2020\")"},{"lineNumber":44,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Science\")"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"2.7\", \"3.9\","},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"                    \"2.5\", \"2.5\")"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"            .withResume(formPathFromFileName(\"alice.pdf\"))"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withResume(formPathFromFileName(null))"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withExpectedGraduationYear(\"2021\")"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Engineering\")"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"4\", \"4.5\","},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"                    \"3\", \"3.5\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2019\")"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Science\")"},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":61,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2020\")"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Information Security\")"},{"lineNumber":66,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":67,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\")"},{"lineNumber":68,"author":{"gitID":"kexiaowen"},"content":"            .withResume(formPathFromFileName(\"daniel.pdf\")).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":71,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2018\")"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Business Analytics\")"},{"lineNumber":73,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":74,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2019\")"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Science\")"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\").build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":83,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2022\")"},{"lineNumber":84,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Information Systems\")"},{"lineNumber":85,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":86,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\")"},{"lineNumber":87,"author":{"gitID":"kexiaowen"},"content":"            .withResume(formPathFromFileName(\"george.pdf\")).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final Person ALICE_WITHOUT_TAG \u003d new PersonBuilder(ALICE).withTags().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final Person BENSON_WITH_FRIENDS_TAG_REMOVED \u003d new PersonBuilder(BENSON)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\").build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final Person CARL_WITHOUT_TAG \u003d new PersonBuilder(CARL).withTags().build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2019\")"},{"lineNumber":97,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Science\")"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\")"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"            .withResume(formPathFromFileName(\"hoon.pdf\")).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":103,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(\"2018\")"},{"lineNumber":104,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(\"Computer Science\")"},{"lineNumber":105,"author":{"gitID":"kexiaowen"},"content":"            .withRating(\"-1\", \"-1\","},{"lineNumber":106,"author":{"gitID":"kexiaowen"},"content":"                    \"-1\", \"-1\").build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":111,"author":{"gitID":"kexiaowen"},"content":"            .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_AMY)"},{"lineNumber":112,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(VALID_MAJOR_AMY)"},{"lineNumber":113,"author":{"gitID":"kexiaowen"},"content":"            .withRating(VALID_TECHNICAL_SKILLS_SCORE_AMY, VALID_COMMUNICATION_SKILLS_SCORE_AMY,"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":"                    VALID_PROBLEM_SOLVING_SKILLS_SCORE_AMY, VALID_EXPERIENCE_SCORE_AMY)"},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":"            .withResume(VALID_RESUME_AMY)"},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withResume(VALID_RESUME_BOB)"},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"            .withExpectedGraduationYear(VALID_EXPECTED_GRADUATION_YEAR_BOB)"},{"lineNumber":121,"author":{"gitID":"tanhengyeow"},"content":"            .withMajor(VALID_MAJOR_BOB)"},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"            .withRating(VALID_TECHNICAL_SKILLS_SCORE_BOB, VALID_COMMUNICATION_SKILLS_SCORE_BOB,"},{"lineNumber":123,"author":{"gitID":"kexiaowen"},"content":"                    VALID_PROBLEM_SOLVING_SKILLS_SCORE_BOB, VALID_EXPERIENCE_SCORE_BOB)"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"    public static final String KEYWORD_MATCHING_2019 \u003d \"2019\"; //A keyword that matches 2020"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":"    private static final String RESUME_PATH \u003d \"src/test/resources/resume/\";"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"     * Forms the resume path from the resume file name"},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"    private static String formPathFromFileName(String fileName) {"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"        if (fileName \u003d\u003d null) {"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":"            return null;"},{"lineNumber":158,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":159,"author":{"gitID":"mhq199657"},"content":"            return RESUME_PATH + fileName;"},{"lineNumber":160,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"    public static void main(String[] args) {"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"        System.out.println(ALICE);"},{"lineNumber":164,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":45,"mhq199657":34,"-":72,"tanhengyeow":13,"Ang-YC":1}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"    private static final String RESUME_PATH \u003d \"src/test/resources/resume/\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_EXPECTED_GRADUATION_YEAR \u003d \"2020\";"},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":"    private static final String DEFAULT_MAJOR \u003d \"Computer Science\";"},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"    private static final String DEFAULT_TECHNICAL_SKILLS_SCORE \u003d \"-1\";"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"    private static final String DEFAULT_COMMUNICATION_SKILLS_SCORE \u003d \"-1\";"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    private static final String DEFAULT_PROBLEM_SOLVING_SKILLS_SCORE \u003d \"-1\";"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"    private static final String DEFAULT_EXPERIENCE_SCORE \u003d \"-1\";"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_RESUME \u003d \"alice.pdf\";"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"    private ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"    private Major major;"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"    private Rating rating;"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"    private Resume resume;"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"    private InterviewDate interviewDate;"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d new ExpectedGraduationYear(DEFAULT_EXPECTED_GRADUATION_YEAR);"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"        major \u003d new Major(DEFAULT_MAJOR);"},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"        rating \u003d new Rating(Double.valueOf(DEFAULT_TECHNICAL_SKILLS_SCORE),"},{"lineNumber":61,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(DEFAULT_COMMUNICATION_SKILLS_SCORE),"},{"lineNumber":62,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(DEFAULT_PROBLEM_SOLVING_SKILLS_SCORE),"},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(DEFAULT_EXPERIENCE_SCORE));"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"        resume \u003d new Resume(formPathFromFileName(DEFAULT_RESUME));"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        interviewDate \u003d new InterviewDate();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d personToCopy.getExpectedGraduationYear();"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"        major \u003d personToCopy.getMajor();"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        resume \u003d personToCopy.getResume();"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"        interviewDate \u003d personToCopy.getInterviewDate();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code ExpectedGraduationYear} of the {@code Person} that we are building."},{"lineNumber":126,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"    public PersonBuilder withExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":128,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d new ExpectedGraduationYear(expectedGraduationYear);"},{"lineNumber":129,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":130,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":132,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"tanhengyeow"},"content":"     * Sets the {@code Major} of the {@code Person} that we are building."},{"lineNumber":134,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"tanhengyeow"},"content":"    public PersonBuilder withMajor(String major) {"},{"lineNumber":136,"author":{"gitID":"tanhengyeow"},"content":"        this.major \u003d new Major(major);"},{"lineNumber":137,"author":{"gitID":"tanhengyeow"},"content":"        return this;"},{"lineNumber":138,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":140,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"kexiaowen"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":142,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"kexiaowen"},"content":"    public PersonBuilder withRating(String technicalSkillsScore, String communicationSkillsScore,"},{"lineNumber":144,"author":{"gitID":"kexiaowen"},"content":"                                    String problemSolvingSkillsScore, String experienceScore) {"},{"lineNumber":145,"author":{"gitID":"kexiaowen"},"content":"        this.rating \u003d new Rating(Double.valueOf(technicalSkillsScore),"},{"lineNumber":146,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(communicationSkillsScore),"},{"lineNumber":147,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(problemSolvingSkillsScore),"},{"lineNumber":148,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(experienceScore));"},{"lineNumber":149,"author":{"gitID":"kexiaowen"},"content":"        return this;"},{"lineNumber":150,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"     * Sets the {@code Resume} of the {@code Person} that we are building."},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"    public PersonBuilder withResume(String resume) {"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"        this.resume \u003d new Resume(resume);"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":"        return this;"},{"lineNumber":158,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":160,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"Ang-YC"},"content":"     * Sets the {@code InterviewDate} of the {@code Person} that we are building."},{"lineNumber":162,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Ang-YC"},"content":"    public PersonBuilder withInterviewDate(LocalDateTime interviewDate) {"},{"lineNumber":164,"author":{"gitID":"Ang-YC"},"content":"        this.interviewDate \u003d new InterviewDate(interviewDate);"},{"lineNumber":165,"author":{"gitID":"Ang-YC"},"content":"        return this;"},{"lineNumber":166,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":168,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"tanhengyeow"},"content":"     * Builds and returns a {@code Person}."},{"lineNumber":170,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":172,"author":{"gitID":"tanhengyeow"},"content":"        return new Person(name, phone, email, address, expectedGraduationYear,"},{"lineNumber":173,"author":{"gitID":"tanhengyeow"},"content":"                major, rating, resume, interviewDate, tags);"},{"lineNumber":174,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":176,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"mhq199657"},"content":"     * Forms the resume path from the resume file name"},{"lineNumber":178,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"mhq199657"},"content":"    private static String formPathFromFileName(String fileName) {"},{"lineNumber":180,"author":{"gitID":"mhq199657"},"content":"        if (isNull(fileName)) {"},{"lineNumber":181,"author":{"gitID":"mhq199657"},"content":"            return null;"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":183,"author":{"gitID":"mhq199657"},"content":"            return RESUME_PATH + fileName;"},{"lineNumber":184,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":24,"mhq199657":45,"-":87,"Ang-YC":13,"tanhengyeow":18}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#commandResult\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":21,"Ang-YC":1}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandInput\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":45,"Ang-YC":1}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Bounds;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Point2D;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Rectangle2D;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.ui.MainWindow;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"    public static final String TOP_PANE_ID \u003d \"#topPane\";"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"    public static final String BOTTOM_LIST_PANE_ID \u003d \"#bottomListPane\";"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"    private final TitleBarHandle titleBar;"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    private final InfoPanelHandle infoPanel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    private final Stage stage;"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    private final AnchorPane topPane;"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    private final AnchorPane bottomListPane;"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"        this.stage \u003d stage;"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"        setWindowDefaultPositionAndSize();"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        titleBar \u003d new TitleBarHandle(getChildNode(TitleBarHandle.TITLE_BAR_ID));"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"        infoPanel \u003d new InfoPanelHandle(getChildNode(InfoPanelHandle.INFO_ID));"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"        topPane \u003d getChildNode(TOP_PANE_ID);"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        bottomListPane \u003d getChildNode(BOTTOM_LIST_PANE_ID);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"    public TitleBarHandle getTitleBar() {"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"        return titleBar;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanelHandle getInfoPanel() {"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"        return infoPanel;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    public Point2D getTitleBarPosition() {"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        Bounds bounds \u003d topPane.localToScreen(topPane.getBoundsInLocal());"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        return new Point2D((bounds.getMinX() + bounds.getMaxX()) / 2, ("},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"                bounds.getMinY() + bounds.getMaxY()) / 2 - bounds.getHeight() / 4);"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    public Point2D getResizablePosition() {"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        return new Point2D(stage.getWidth() + stage.getX() - MainWindow.WINDOW_CORNER_SIZE + 1,"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"                stage.getHeight() + stage.getY() - MainWindow.WINDOW_CORNER_SIZE + 1);"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"    public Point2D getWindowPosition() {"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"        return new Point2D(stage.getX(), stage.getY());"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"    public Rectangle2D getWindowBound() {"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"        return new Rectangle2D(stage.getX(), stage.getY(), stage.getWidth(), stage.getHeight());"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"    public void setWindowDefaultPositionAndSize() {"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D screenBound \u003d Screen.getPrimary().getVisualBounds();"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"        stage.setWidth(MainWindow.MIN_WINDOW_WIDTH);"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        stage.setHeight(MainWindow.MIN_WINDOW_HEIGHT);"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"        stage.setX(screenBound.getMinX());"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        stage.setY(screenBound.getMinY());"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"    public double getListPaneWidth() {"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"        return bottomListPane.getWidth();"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"    public Rectangle2D getSceenBound() {"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":"        return Screen.getPrimary().getVisualBounds();"},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":37,"Ang-YC":63}},{"path":"src/test/java/guitests/guihandles/PersonListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPersonCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#listPersons\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Optional\u003cPersonCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle(ListView\u003cPersonCard\u003e personListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(personListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code PersonCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public PersonCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (personList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new PersonCardHandle(personList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Navigates the listview to display and select the person."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void navigateToCard(Person person) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.person.equals(person)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Person does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the person card handle of a person associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).person);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code person} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(Person person) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .filter(card -\u003e card.person.equals(person))"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .map(card -\u003e new PersonCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Person does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Selects the {@code PersonCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code PersonCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":133,"Ang-YC":1}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"    private static final String NAME_FIELD_ID \u003d \"#cardPersonName\";"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"    private static final String UNIVERSITY_FIELD_ID \u003d \"#cardPersonUniversity\";"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#cardPersonEmail\";"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#cardPersonContact\";"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"    private static final String RATING_FIELD_ID \u003d \"#cardPersonRating\";"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#cardPersonStatus\";"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    private static final String ID_FIELD_ID \u003d \"#cardPersonNumber\";"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    private final Label universityLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    private final Label ratingLabel;"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    private final Label statusLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"        this.universityLabel \u003d getChildNode(UNIVERSITY_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        this.ratingLabel \u003d getChildNode(RATING_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"    public String getUniversity() {"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        return universityLabel.getText();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"    public String getRating() {"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"        return ratingLabel.getText();"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"    public String getStatus() {"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"        return statusLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":44,"Ang-YC":23}},{"path":"src/test/java/guitests/guihandles/InfoPanelUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":" * Helper methods for dealing with {@code InfoPanel}."},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"public class InfoPanelUtil {"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"     * If the {@code infoPanelHandle}\u0027s {@code Panel} is loading, sleeps the thread till it is successfully loaded."},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"    public static void waitUntilInfoPanelLoaded(InfoPanelHandle infoPanelHandle) {"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().waitForEvent(infoPanelHandle::isLoaded);"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"Ang-YC":15}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"command-error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"    private TextField commandInput;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"        commandInput.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"        if (historySnapshot.hasPrevious()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            replaceText(historySnapshot.previous());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"        if (historySnapshot.hasNext()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            replaceText(historySnapshot.next());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"        commandInput.setText(text);"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"        commandInput.positionCaret(commandInput.getText().length());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"            CommandResult commandResult \u003d logic.execute(commandInput.getText());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"            // Process result of the command"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"            commandInput.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"            // Handle command failure"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"            logger.info(\"Invalid command: \" + commandInput.getText());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":136,"author":{"gitID":"Ang-YC"},"content":"        commandInput.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":143,"author":{"gitID":"Ang-YC"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandInput.getStyleClass();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"Ang-YC"},"content":"        if (!styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":128,"Ang-YC":22}},{"path":"src/test/java/seedu/address/model/person/MajorContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"public class MajorContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"Computer\");"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"Computer\", \"Science\");"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"        MajorContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                new MajorContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"        MajorContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"                new MajorContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        MajorContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"                new MajorContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(firstPredicate \u003d\u003d null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"    public void test_majorContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        MajorContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                new MajorContainsKeywordsPredicate(Collections.singletonList(\"Computer\"));"},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"Computer\", \"Science\"));"},{"lineNumber":53,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":54,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":55,"author":{"gitID":"tanhengyeow"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"Computer\", \"Engineering\"));"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"ComPutEr\", \"SciEncE\"));"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"        assertTrue(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"    public void test_majorDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"        MajorContainsKeywordsPredicate predicate \u003d new MajorContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":70,"author":{"gitID":"tanhengyeow"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new MajorContainsKeywordsPredicate(Arrays.asList(\"Security\"));"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"        assertFalse(predicate.test(new PersonBuilder().withMajor(\"Computer Science\").build()));"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"        // Keywords match phone, email, expected graduation year and address, but does not match major"},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"        predicate \u003d new MajorContainsKeywordsPredicate("},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\", \"2020\", \"Information\", \"Security\"));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withExpectedGraduationYear(\"2020\")"},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"                .withMajor(\"Computer Science\").build()));"},{"lineNumber":80,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":31,"tanhengyeow":50}},{"path":"src/test/java/guitests/guihandles/InfoPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.InfoPanelChangedEvent;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":" * A handler for the {@code InfoPanel} of the UI."},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"public class InfoPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    public static final String INFO_ID \u003d \"#infoPaneWrapper\";"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"    private static final String SPLIT_PANE_ID \u003d \"#infoSplitPane\";"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    private static final String MAIN_PANE_ID \u003d \"#infoMainPane\";"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    private static final String SPLIT_MAIN_PANE_ID \u003d \"#infoSplitMainPane\";"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    private static final String MAIN_ID \u003d \"#infoMain\";"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"    private static final String MAIN_RATINGS_ID \u003d \"#infoMainRatings\";"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    private static final String SPLIT_SIDE_PANE_ID \u003d \"#infoSplitSidePane\";"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    private static final String SPLIT_RATINGS_ID \u003d \"#infoSplitRatings\";"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"    private boolean isInfoPanelLoaded \u003d true;"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"    private boolean isWidthChanged \u003d false;"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"    private Person lastRememberedPerson;"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoPaneWrapper;"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"    private SplitPane infoSplitPane;"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"    private ScrollPane infoMainPane;"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"    private ScrollPane infoSplitMainPane;"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"    private VBox infoMain;"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoMainRatings;"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoSplitSidePane;"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    private VBox infoSplitRatings;"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanelHandle(Node infoPanel) {"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"        super(infoPanel);"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        this.infoPaneWrapper   \u003d getChildNode(INFO_ID);"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        this.infoSplitPane     \u003d getChildNode(SPLIT_PANE_ID);"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        this.infoMainPane      \u003d getChildNode(MAIN_PANE_ID);"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        this.infoSplitMainPane \u003d getChildNode(SPLIT_MAIN_PANE_ID);"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"        this.infoMain          \u003d getChildNode(MAIN_ID);"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        this.infoMainRatings   \u003d getChildNode(MAIN_RATINGS_ID);"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        this.infoSplitSidePane \u003d getChildNode(SPLIT_SIDE_PANE_ID);"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"        this.infoSplitRatings  \u003d getChildNode(SPLIT_RATINGS_ID);"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().interact(() -\u003e this.infoPaneWrapper.addEventHandler("},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"            InfoPanelChangedEvent.INFO_PANEL_EVENT,"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"            event -\u003e isInfoPanelLoaded \u003d true"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"        ));"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"     * Returns the {@code Person} of the currently previewed person."},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"    public Person getLoadedPerson() {"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        return (Person) infoPaneWrapper.getUserData();"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"     * Remembers the {@code Person} of the currently previewed person."},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    public void rememberPerson() {"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"        lastRememberedPerson \u003d getLoadedPerson();"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"     * Returns true if the current {@code Person} is different from the value remembered by the most recent"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"     * {@code rememberPerson()} call."},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    public boolean isPersonChanged() {"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"        return !Objects.equals(lastRememberedPerson, getLoadedPerson());"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"     * Returns true if the panel is done loading a person, with current person retrievable via {@code getUserData}"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"    public boolean isLoaded() {"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"        return isInfoPanelLoaded;"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"     * Reset the loaded status to wait for next loaded event"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"    public void resetLoadedStatus() {"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"        isInfoPanelLoaded \u003d false;"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":"     * Returns true if the panel is done changing the width"},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"    public boolean isWidthChanged() {"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"        return isWidthChanged;"},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"     * Reset the width changed status to wait for next resize event"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"    public void resetWidthStatus() {"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"        isWidthChanged \u003d false;"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"     * Set the width of info panel and wait until its width changed"},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"     * @param width of the InfoPanel"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"    public void setWidthAndWait(int width) {"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"        resetWidthStatus();"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"            isWidthChanged \u003d true;"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.getScene().getWindow().setWidth(width);"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().waitForEvent(this::isWidthChanged);"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"Ang-YC"},"content":"     * Returns true if it is split due to responsive, false otherwise"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"    public boolean isResponsiveSplit() {"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"        return infoSplitPane.isVisible()"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 !infoMainPane.isVisible()"},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 !infoMainRatings.getChildren().contains(infoSplitRatings)"},{"lineNumber":133,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoSplitSidePane.getChildren().contains(infoSplitRatings)"},{"lineNumber":134,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoMainPane.getContent() \u003d\u003d null"},{"lineNumber":135,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoSplitMainPane.getContent().equals(infoMain);"},{"lineNumber":136,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":138,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"Ang-YC"},"content":"     * Returns true if it is single scroll pane due to responsive, false otherwise"},{"lineNumber":140,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"Ang-YC"},"content":"    public boolean isResponsiveSingle() {"},{"lineNumber":142,"author":{"gitID":"Ang-YC"},"content":"        return !infoSplitPane.isVisible()"},{"lineNumber":143,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoMainPane.isVisible()"},{"lineNumber":144,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoMainRatings.getChildren().contains(infoSplitRatings)"},{"lineNumber":145,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 !infoSplitSidePane.getChildren().contains(infoSplitRatings)"},{"lineNumber":146,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoMainPane.getContent().equals(infoMain)"},{"lineNumber":147,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 infoSplitMainPane.getContent() \u003d\u003d null;"},{"lineNumber":148,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"Ang-YC":149}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        // Set it to borderless"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        //primaryStage.initStyle(StageStyle.TRANSPARENT);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"            mainWindow.requestFocus();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/HRTheme.css\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":109,"Ang-YC":4}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseButton;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"import javafx.stage.Screen;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"import javafx.stage.StageStyle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MaximizeAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MinimizeAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"    public static final double MIN_WINDOW_WIDTH \u003d 800;"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    public static final double MIN_WINDOW_HEIGHT \u003d 600;"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"    public static final int WINDOW_CORNER_SIZE \u003d 8;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    private UiResizer uiResizer;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"    // Independent UI parts residing in this UI container"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    // X and Y offset of the window (Use for draggable title bar"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"    private double xOffset \u003d 0;"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"    private double yOffset \u003d 0;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane topPane;"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoPanePlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane topCommandPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane listPersonsPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane centerPanePlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane topTitlePlaceholder;"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    // Responsive"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"    private SplitPane bottomPaneSplit;"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane bottomListPane;"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane bottomInfoPane;"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"        // Setup custom UI"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":"        setBorderlessWindow();"},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"        setDraggableTitleBar();"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"        setDoubleClickMaximize();"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"        this.uiResizer \u003d new UiResizer(primaryStage, prefs.getGuiSettings(),"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":"                MIN_WINDOW_WIDTH, MIN_WINDOW_HEIGHT, WINDOW_CORNER_SIZE);"},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"        // Handle responsive"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"        handleSplitPaneResponsive();"},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"        // Handle minimize and maximize request"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"        InfoPanel infoPanel \u003d new InfoPanel();"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"        infoPanePlaceholder.getChildren().add(infoPanel.getRoot());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"        listPersonsPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"        centerPanePlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"        TitleBar titleBar \u003d new TitleBar(prefs.getAddressBookFilePath());"},{"lineNumber":127,"author":{"gitID":"Ang-YC"},"content":"        topTitlePlaceholder.getChildren().add(titleBar.getRoot());"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":"        setAccelerator(titleBar.getControlHelp(), KeyCombination.valueOf(\"F1\"));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":"        topCommandPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"Ang-YC"},"content":"    public void requestFocus() {"},{"lineNumber":171,"author":{"gitID":"Ang-YC"},"content":"        primaryStage.requestFocus();"},{"lineNumber":172,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":174,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"Ang-YC"},"content":"     * Handle responsiveness by fixing the width of {@code bottomListPane}"},{"lineNumber":176,"author":{"gitID":"Ang-YC"},"content":"     * when increasing the width of {@code bottomPaneSplit}"},{"lineNumber":177,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"Ang-YC"},"content":"    private void handleSplitPaneResponsive() {"},{"lineNumber":179,"author":{"gitID":"Ang-YC"},"content":"        int splitHandleSize \u003d 5;"},{"lineNumber":180,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":181,"author":{"gitID":"Ang-YC"},"content":"        bottomPaneSplit.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":182,"author":{"gitID":"Ang-YC"},"content":"            if (bottomInfoPane.getWidth() \u003e bottomInfoPane.getMinWidth() - splitHandleSize) {"},{"lineNumber":183,"author":{"gitID":"Ang-YC"},"content":"                bottomPaneSplit.setDividerPosition(0, ("},{"lineNumber":184,"author":{"gitID":"Ang-YC"},"content":"                        bottomListPane.getWidth() + splitHandleSize) / newValue.doubleValue());"},{"lineNumber":185,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":186,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":187,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Ang-YC"},"content":"     * Sets the accelerator of help button pane."},{"lineNumber":191,"author":{"gitID":"Ang-YC"},"content":"     *"},{"lineNumber":192,"author":{"gitID":"Ang-YC"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"Ang-YC"},"content":"    private void setAccelerator(Pane pane, KeyCombination keyCombination) {"},{"lineNumber":195,"author":{"gitID":"Ang-YC"},"content":"        primaryStage.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":197,"author":{"gitID":"Ang-YC"},"content":"                pane.getOnMouseClicked().handle(new javafx.scene.input.MouseEvent("},{"lineNumber":198,"author":{"gitID":"Ang-YC"},"content":"                        javafx.scene.input.MouseEvent.MOUSE_CLICKED, 0, 0, 0, 0,"},{"lineNumber":199,"author":{"gitID":"Ang-YC"},"content":"                        MouseButton.PRIMARY, 0, false, false, false,"},{"lineNumber":200,"author":{"gitID":"Ang-YC"},"content":"                        false, false, false, false,"},{"lineNumber":201,"author":{"gitID":"Ang-YC"},"content":"                        false, false, false, null));"},{"lineNumber":202,"author":{"gitID":"Ang-YC"},"content":"                event.consume();"},{"lineNumber":203,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"Ang-YC"},"content":"    private void setBorderlessWindow() {"},{"lineNumber":208,"author":{"gitID":"Ang-YC"},"content":"        // StageStyle.UNDECORATED is buggy"},{"lineNumber":209,"author":{"gitID":"Ang-YC"},"content":"        primaryStage.initStyle(StageStyle.TRANSPARENT);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Ang-YC"},"content":"    private void setDoubleClickMaximize() {"},{"lineNumber":213,"author":{"gitID":"Ang-YC"},"content":"        topPane.setOnMouseClicked(event -\u003e {"},{"lineNumber":214,"author":{"gitID":"Ang-YC"},"content":"            if (MouseButton.PRIMARY.equals(event.getButton()) \u0026\u0026 event.getClickCount() \u003d\u003d 2) {"},{"lineNumber":215,"author":{"gitID":"Ang-YC"},"content":"                raise(new MaximizeAppRequestEvent());"},{"lineNumber":216,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":218,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":220,"author":{"gitID":"Ang-YC"},"content":"    private void setDraggableTitleBar() {"},{"lineNumber":221,"author":{"gitID":"Ang-YC"},"content":"        double minY \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":222,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":223,"author":{"gitID":"Ang-YC"},"content":"        topPane.setOnMousePressed(event -\u003e {"},{"lineNumber":224,"author":{"gitID":"Ang-YC"},"content":"            xOffset \u003d event.getSceneX();"},{"lineNumber":225,"author":{"gitID":"Ang-YC"},"content":"            yOffset \u003d event.getSceneY();"},{"lineNumber":226,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":227,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":228,"author":{"gitID":"Ang-YC"},"content":"        topPane.setOnMouseDragged(event -\u003e {"},{"lineNumber":229,"author":{"gitID":"Ang-YC"},"content":"            // Only allow in title bar (Blue area)"},{"lineNumber":230,"author":{"gitID":"Ang-YC"},"content":"            if (xOffset \u003e 120 \u0026\u0026 yOffset \u003e 40 \u0026\u0026 xOffset + yOffset - 200 \u003e 0) {"},{"lineNumber":231,"author":{"gitID":"Ang-YC"},"content":"                return;"},{"lineNumber":232,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":234,"author":{"gitID":"Ang-YC"},"content":"            double newY \u003d event.getScreenY() - yOffset;"},{"lineNumber":235,"author":{"gitID":"Ang-YC"},"content":"            primaryStage.setX(event.getScreenX() - xOffset);"},{"lineNumber":236,"author":{"gitID":"Ang-YC"},"content":"            primaryStage.setY(Math.max(newY, minY));"},{"lineNumber":237,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":238,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":240,"author":{"gitID":"Ang-YC"},"content":"    @Subscribe"},{"lineNumber":241,"author":{"gitID":"Ang-YC"},"content":"    public void handleMinimizeAppRequestEvent(MinimizeAppRequestEvent event) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":243,"author":{"gitID":"Ang-YC"},"content":"        primaryStage.setIconified(true);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":247,"author":{"gitID":"Ang-YC"},"content":"    public void handleMaximizeAppRequestEvent(MaximizeAppRequestEvent event) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":249,"author":{"gitID":"Ang-YC"},"content":"        uiResizer.toggleMaximize();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":129,"Ang-YC":122}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":" * A UI for the result display box that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    private TextArea commandResult;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"        commandResult.textProperty().bind(displayed);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"Ang-YC":3}},{"path":"src/test/java/guitests/guihandles/TitleBarHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseButton;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":" * A handle for the {@code TitleBar} at the top of the application."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"public class TitleBarHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"    public static final String TITLE_BAR_ID \u003d \"#topTitle\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#topStatusMessage\";"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#topStatusFile\";"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    private static final String CONTROL_HELP_ID \u003d \"#controlHelp\";"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"    private static final String CONTROL_MINIMIZE_ID \u003d \"#controlMinimize\";"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    private static final String CONTROL_MAXIMIZE_ID \u003d \"#controlMaximize\";"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    private static final String CONTROL_CLOSE_ID \u003d \"#controlClose\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    private final Label syncStatusNode;"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    private final Label saveLocationNode;"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    private final Pane controlHelp;"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"    private final Pane controlMinimize;"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    private final Pane controlMaximize;"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    private final Pane controlClose;"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"    public TitleBarHandle(Node statusBarFooterNode) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        this.controlHelp \u003d getChildNode(CONTROL_HELP_ID);"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"        this.controlMinimize \u003d getChildNode(CONTROL_MINIMIZE_ID);"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"        this.controlMaximize \u003d getChildNode(CONTROL_MAXIMIZE_ID);"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"        this.controlClose \u003d getChildNode(CONTROL_CLOSE_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} by pressing the shortcut key associated"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"     * Opens the {@code HelpWindow} using the button in {@code TitleBar}."},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"    public void openHelpWindowUsingControl() {"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().clickOn(controlHelp, MouseButton.PRIMARY);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"     * Minimize the application using the button in {@code TitleBar}."},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"    public void minimizeWindow() {"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().clickOn(controlMinimize, MouseButton.PRIMARY);"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"     * Maximize the application using the button in {@code TitleBar}."},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    public void maximizeWindow() {"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().clickOn(controlMaximize, MouseButton.PRIMARY);"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"     * Close the application using the button in {@code TitleBar}."},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"    public void closeWindow() {"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"        new GuiRobot().clickOn(controlClose, MouseButton.PRIMARY);"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":72,"Ang-YC":51}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    private ListView\u003cPersonCard\u003e listPersons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        listPersons.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"        listPersons.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        listPersons.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"            listPersons.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"            listPersons.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":82,"Ang-YC":6}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonUniversity;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonEmail;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonContact;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonRating;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonStatus;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"    private Label cardPersonNumber;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"        cardPersonName.setText(person.getName().fullName);"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        cardPersonUniversity.setText(\"-\");"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        cardPersonEmail.setText(person.getEmail().value);"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"        cardPersonContact.setText(person.getPhone().value);"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        cardPersonRating.setText(\"-\");"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        cardPersonStatus.setText(\"-\");"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"        cardPersonNumber.setText(String.valueOf(displayedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        return cardPersonNumber.getText().equals(card.cardPersonNumber.getText())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":53,"Ang-YC":17}},{"path":"src/test/java/seedu/address/logic/commands/InterviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneOffset;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":" * Contains integration tests (interaction with the Model) and unit tests for InterviewCommand."},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"public class InterviewCommandTest {"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"    public static final LocalDateTime VALID_DATETIME \u003d"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"            LocalDateTime.ofEpochSecond(1540814400, 0, ZoneOffset.UTC);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    public void execute_validDateUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"        Person firstPerson \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        Person scheduledPerson \u003d new PersonBuilder(firstPerson).withInterviewDate(VALID_DATETIME).build();"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_DATETIME);"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        String expectedMessage \u003d String.format(InterviewCommand.MESSAGE_INTERVIEW_PERSON_SUCCESS,"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"                scheduledPerson.getName(), scheduledPerson.getInterviewDate().getDateTime().toString());"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"        expectedModel.updatePerson(firstPerson, scheduledPerson);"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        assertCommandSuccess(interviewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(outOfBoundIndex, VALID_DATETIME);"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"        assertCommandFailure(interviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(outOfBoundIndex, VALID_DATETIME);"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"        assertCommandFailure(interviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"        Person personToInterview \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"        Person scheduledPerson \u003d new PersonBuilder(personToInterview).withInterviewDate(VALID_DATETIME).build();"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_DATETIME);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"        // interview -\u003e first person interview date scheduled"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"        interviewCommand.execute();"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"        undoRedoStack.push(interviewCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"        // redo -\u003e same first person scheduled again"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        expectedModel.updatePerson(personToInterview, scheduledPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(outOfBoundIndex, VALID_DATETIME);"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"        // execution failed -\u003e interviewCommand not pushed into undoRedoStack"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"        assertCommandFailure(interviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonScheduled() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, VALID_DATETIME);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"        Person personToInterview \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"        Person scheduledPerson \u003d new PersonBuilder(personToInterview).withInterviewDate(VALID_DATETIME).build();"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"        // interview -\u003e schedule interview for second person in unfiltered person list /"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"        //              first person in filtered person list"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"        interviewCommand.execute();"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"        undoRedoStack.push(interviewCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"        expectedModel.updatePerson(personToInterview, scheduledPerson);"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"        assertNotEquals(personToInterview, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":"        // redo -\u003e same second person scheduled again"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Ang-YC"},"content":"    public void equals() {"},{"lineNumber":138,"author":{"gitID":"Ang-YC"},"content":"        final InterviewCommand standardCommand \u003d new InterviewCommand(INDEX_FIRST_PERSON, VALID_DATETIME);"},{"lineNumber":139,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":140,"author":{"gitID":"Ang-YC"},"content":"        // same values -\u003e returns true"},{"lineNumber":141,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand commandWithSameValues \u003d new InterviewCommand(INDEX_FIRST_PERSON, VALID_DATETIME);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":154,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(standardCommand.equals(new InterviewCommand(INDEX_SECOND_PERSON, VALID_DATETIME)));"},{"lineNumber":155,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":156,"author":{"gitID":"Ang-YC"},"content":"        // different date time -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"Ang-YC"},"content":"        assertFalse(standardCommand.equals(new InterviewCommand(INDEX_FIRST_PERSON, LocalDateTime.MIN)));"},{"lineNumber":158,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":160,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"Ang-YC"},"content":"     * Returns an {@code InterviewCommand}."},{"lineNumber":162,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Ang-YC"},"content":"    private InterviewCommand prepareCommand(Index index, LocalDateTime dateTime) {"},{"lineNumber":164,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand interviewCommand \u003d new InterviewCommand(index, dateTime);"},{"lineNumber":165,"author":{"gitID":"Ang-YC"},"content":"        interviewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":166,"author":{"gitID":"Ang-YC"},"content":"        return interviewCommand;"},{"lineNumber":167,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":96,"Ang-YC":72}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"    private static final double DEFAULT_WIDTH \u003d 800;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":72,"Ang-YC":1}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"    private String appTitle \u003d \"HR+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title: \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level: \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location: \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"Ang-YC":1}},{"path":"src/main/java/seedu/address/ui/UiResizer.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import javafx.event.EventHandler;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import javafx.geometry.Rectangle2D;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.Cursor;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseButton;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":" * Ui Resizer, a utility to manage resize event of Stage such as resizable window"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"public class UiResizer {"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    private Stage stage;"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    private double lastX;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"    private double lastY;"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"    private double lastWidth;"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    private double lastHeight;"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    public UiResizer(Stage stage, GuiSettings guiSettings, double minWidth, double minHeight, int cornerSize) {"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"        this.stage \u003d stage;"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"        // Set listeners"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"        ResizeListener resizeListener \u003d new ResizeListener(stage, minWidth, minHeight, cornerSize);"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_MOVED, resizeListener);"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED, resizeListener);"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_DRAGGED, resizeListener);"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"        stage.getScene().addEventHandler(MouseEvent.MOUSE_RELEASED, resizeListener);"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"        // Set last value"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"        lastX \u003d guiSettings.getWindowCoordinates().x;"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"        lastY \u003d guiSettings.getWindowCoordinates().y;"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"        lastWidth \u003d guiSettings.getWindowWidth();"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"        lastHeight \u003d guiSettings.getWindowHeight();"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    private Rectangle2D getScreenBound() {"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        return Screen.getPrimary().getVisualBounds();"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"     * Maximize / Un-maximize the stage, polyfill for native {@link Stage#setMaximized} feature"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"    public void toggleMaximize() {"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"        Rectangle2D screenBound \u003d getScreenBound();"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        double stageX \u003d stage.getX();"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        double stageY \u003d stage.getY();"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"        double stageWidth \u003d stage.getWidth();"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"        double stageHeight \u003d stage.getHeight();"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"        if (stageWidth \u003d\u003d screenBound.getWidth() \u0026\u0026 stageHeight \u003d\u003d screenBound.getHeight()) {"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"            stage.setX(lastX);"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"            stage.setY(lastY);"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"            stage.setWidth(lastWidth);"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"            stage.setHeight(lastHeight);"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"            lastX \u003d stageX;"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"            lastY \u003d stageY;"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"            lastWidth \u003d stageWidth;"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"            lastHeight \u003d stageHeight;"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"            stage.setX(screenBound.getMinX());"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"            stage.setY(screenBound.getMinY());"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"            stage.setWidth(screenBound.getWidth());"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"            stage.setHeight(screenBound.getHeight());"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"     * Manage the resize event during mouse move and drag"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"    static class ResizeListener implements EventHandler\u003cMouseEvent\u003e {"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"        private Stage stage;"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"        private boolean holding \u003d false;"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"        private int cornerSize;"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"        // Starting position of resizing"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"        private double startX \u003d 0;"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"        private double startY \u003d 0;"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"        // Min sizes for stage"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"        private double minWidth;"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        private double minHeight;"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        public ResizeListener(Stage stage, double minWidth, double minHeight, int borderSize) {"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"            this.stage \u003d stage;"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":"            this.minWidth \u003d minWidth;"},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"            this.minHeight \u003d minHeight;"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"            this.cornerSize \u003d borderSize;"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":"        public void handle(MouseEvent mouseEvent) {"},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":"            String eventType \u003d mouseEvent.getEventType().getName();"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"            Scene scene \u003d stage.getScene();"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"            double mouseX \u003d mouseEvent.getSceneX();"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"            double mouseY \u003d mouseEvent.getSceneY();"},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"            switch (eventType) {"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"            case \"MOUSE_MOVED\":"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"                scene.setCursor((isResizePosition(mouseX, mouseY) || holding) ? Cursor.SE_RESIZE : Cursor.DEFAULT);"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":"                break;"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"            case \"MOUSE_RELEASED\":"},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"                holding \u003d false;"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"                scene.setCursor(Cursor.DEFAULT);"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"                break;"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"            case \"MOUSE_PRESSED\":"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"                // Left click only"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"                if (MouseButton.PRIMARY.equals(mouseEvent.getButton())) {"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"                    holding \u003d isResizePosition(mouseX, mouseY);"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"                    startX \u003d stage.getWidth() - mouseX;"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"                    startY \u003d stage.getHeight() - mouseY;"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"                }"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"                break;"},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"            case \"MOUSE_DRAGGED\":"},{"lineNumber":127,"author":{"gitID":"Ang-YC"},"content":"                if (holding) {"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":"                    setStageWidth(mouseX + startX);"},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"                    setStageHeight(mouseY + startY);"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"                }"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":"                break;"},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":133,"author":{"gitID":"Ang-YC"},"content":"            default:"},{"lineNumber":134,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":135,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":138,"author":{"gitID":"Ang-YC"},"content":"        /**"},{"lineNumber":139,"author":{"gitID":"Ang-YC"},"content":"         * Check if the X and Y coordinate of the mouse are in the range of draggable position"},{"lineNumber":140,"author":{"gitID":"Ang-YC"},"content":"         *"},{"lineNumber":141,"author":{"gitID":"Ang-YC"},"content":"         * @param x coordinate of the {@code MouseEvent}"},{"lineNumber":142,"author":{"gitID":"Ang-YC"},"content":"         * @param y coordinate of the {@code MouseEvent}"},{"lineNumber":143,"author":{"gitID":"Ang-YC"},"content":"         * @return {@code true} if the coordinate is in the range of draggable position, {@code false} otherwise"},{"lineNumber":144,"author":{"gitID":"Ang-YC"},"content":"         */"},{"lineNumber":145,"author":{"gitID":"Ang-YC"},"content":"        private boolean isResizePosition(double x, double y) {"},{"lineNumber":146,"author":{"gitID":"Ang-YC"},"content":"            Scene scene \u003d stage.getScene();"},{"lineNumber":147,"author":{"gitID":"Ang-YC"},"content":"            return (x \u003e scene.getWidth() - cornerSize \u0026\u0026 y \u003e scene.getHeight() - cornerSize);"},{"lineNumber":148,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":150,"author":{"gitID":"Ang-YC"},"content":"        /**"},{"lineNumber":151,"author":{"gitID":"Ang-YC"},"content":"         * Set the width of the stage, with validation to be larger than {@code minWidth}"},{"lineNumber":152,"author":{"gitID":"Ang-YC"},"content":"         *"},{"lineNumber":153,"author":{"gitID":"Ang-YC"},"content":"         * @param width of the stage"},{"lineNumber":154,"author":{"gitID":"Ang-YC"},"content":"         */"},{"lineNumber":155,"author":{"gitID":"Ang-YC"},"content":"        private void setStageWidth(double width) {"},{"lineNumber":156,"author":{"gitID":"Ang-YC"},"content":"            stage.setWidth(Math.max(width, minWidth));"},{"lineNumber":157,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":159,"author":{"gitID":"Ang-YC"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"Ang-YC"},"content":"         * Set the height of the stage, with validation to be larger than {@code minHeight}"},{"lineNumber":161,"author":{"gitID":"Ang-YC"},"content":"         *"},{"lineNumber":162,"author":{"gitID":"Ang-YC"},"content":"         * @param height of the stage"},{"lineNumber":163,"author":{"gitID":"Ang-YC"},"content":"         */"},{"lineNumber":164,"author":{"gitID":"Ang-YC"},"content":"        private void setStageHeight(double height) {"},{"lineNumber":165,"author":{"gitID":"Ang-YC"},"content":"            stage.setHeight(Math.max(height, minHeight));"},{"lineNumber":166,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":168,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":3,"Ang-YC":166}},{"path":"src/main/java/seedu/address/commons/util/DoubleUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import java.math.RoundingMode;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":" * Helper functions for handling doubles."},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":"public class DoubleUtil {"},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"     * Returns a double rounded to two decimal places."},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"     * Note: Whole numbers will round to one decimal place."},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"    public static double roundToTwoDecimalPlaces(String value) {"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"        BigDecimal bd \u003d new BigDecimal(value);"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"        bd \u003d bd.setScale(2, RoundingMode.HALF_UP);"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"        return bd.doubleValue();"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"     * Returns a double rounded to two decimal places."},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"     * Note: Whole numbers will round to one decimal place."},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"    public static double roundToTwoDecimalPlaces(double value) {"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"        long valueMultipliedByHundred \u003d (long) Math.round(value * 100);"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"        return (double) (valueMultipliedByHundred / 100.0);"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":29}},{"path":"src/main/java/seedu/address/commons/events/ui/MaximizeAppRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":" * Indicates a request for App minimize"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"public class MaximizeAppRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":10,"Ang-YC":4}},{"path":"src/main/java/seedu/address/commons/events/ui/InfoPanelChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import javafx.event.Event;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import javafx.event.EventType;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":" * Indicates a change in Info Panel (Used for automated testing purpose)"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":"public class InfoPanelChangedEvent extends Event {"},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"    public static final EventType\u003cInfoPanelChangedEvent\u003e INFO_PANEL_EVENT \u003d"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":"            new EventType\u003c\u003e(\"InfoPanelChangedEvent\");"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanelChangedEvent() {"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"        this(INFO_PANEL_EVENT);"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanelChangedEvent(EventType\u003c? extends Event\u003e eventType) {"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"        super(eventType);"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"Ang-YC":20}},{"path":"src/main/java/seedu/address/commons/events/ui/MinimizeAppRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":" * Indicates a request for App minimize"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"public class MinimizeAppRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":10,"Ang-YC":4}},{"path":"src/main/java/seedu/address/ui/InfoPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import java.time.format.TextStyle;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import java.util.Locale;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.ProgressBar;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.control.SplitPane;"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.InfoPanelChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":" * The Info Panel of the App."},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"public class InfoPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"    public static final Person DEFAULT_PERSON \u003d null;"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"    public static final int SPLIT_MIN_WIDTH \u003d 550;"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    private static final String FXML \u003d \"InfoPanel.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoPaneWrapper;"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    private SplitPane infoSplitPane;"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    // Responsive"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"    private ScrollPane infoMainPane;"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"    private ScrollPane infoSplitMainPane;"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    private VBox infoMain;"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoMainRatings;"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"    private AnchorPane infoSplitSidePane;"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"    private VBox infoSplitRatings;"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainName;"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainUniversity;"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainMajorYear;"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainCgpa;"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainEmail;"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainAddress;"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainPhone;"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainPosition;"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainStatus;"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainComments;"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"    // Interview"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    private VBox infoMainInterviewDatePane;"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainInterviewMonth;"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainInterviewDate;"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainInterviewDay;"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"    private Label infoMainInterviewTime;"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"    // Rating"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    private ProgressBar infoRatingTechnical;"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"    private ProgressBar infoRatingCommunication;"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"    private ProgressBar infoRatingProblemSolving;"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"    private ProgressBar infoRatingExperience;"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"    public InfoPanel() {"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"        super(FXML);"},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.widthProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"            handleResize(oldValue.intValue(), newValue.intValue());"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"        });"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"        handleResponsive((int) infoPaneWrapper.getWidth());"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"     * Handle resize when width changed event occurred, then decide whether should trigger responsive handler or not"},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"     * @param oldValue of the width property"},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"     * @param newValue of the width property"},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"    private void handleResize(int oldValue, int newValue) {"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"        // Process only if there are differences"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"        int smaller \u003d Math.min(oldValue, newValue);"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"        int larger  \u003d Math.max(oldValue, newValue);"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"        if (smaller \u003c\u003d SPLIT_MIN_WIDTH \u0026\u0026 larger \u003e\u003d SPLIT_MIN_WIDTH) {"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"            handleResponsive(newValue);"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"     * Handle responsiveness by checking if window should split into two based on {@code SPLIT_MIN_WIDTH}"},{"lineNumber":127,"author":{"gitID":"Ang-YC"},"content":"     * @param width of {@code InfoPanel}"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"    private void handleResponsive(int width) {"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"        if (width \u003e\u003d SPLIT_MIN_WIDTH) {"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":"            infoSplitPane.setVisible(true);"},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":"            infoMainPane.setVisible(false);"},{"lineNumber":133,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":134,"author":{"gitID":"Ang-YC"},"content":"            infoMainRatings.getChildren().remove(infoSplitRatings);"},{"lineNumber":135,"author":{"gitID":"Ang-YC"},"content":"            infoSplitSidePane.getChildren().remove(infoSplitRatings);"},{"lineNumber":136,"author":{"gitID":"Ang-YC"},"content":"            infoMainPane.setContent(null);"},{"lineNumber":137,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":138,"author":{"gitID":"Ang-YC"},"content":"            infoSplitMainPane.setContent(infoMain);"},{"lineNumber":139,"author":{"gitID":"Ang-YC"},"content":"            infoSplitSidePane.getChildren().add(infoSplitRatings);"},{"lineNumber":140,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":141,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":142,"author":{"gitID":"Ang-YC"},"content":"            infoMainPane.setVisible(true);"},{"lineNumber":143,"author":{"gitID":"Ang-YC"},"content":"            infoSplitPane.setVisible(false);"},{"lineNumber":144,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":145,"author":{"gitID":"Ang-YC"},"content":"            infoMainRatings.getChildren().remove(infoSplitRatings);"},{"lineNumber":146,"author":{"gitID":"Ang-YC"},"content":"            infoSplitSidePane.getChildren().remove(infoSplitRatings);"},{"lineNumber":147,"author":{"gitID":"Ang-YC"},"content":"            infoSplitMainPane.setContent(null);"},{"lineNumber":148,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":149,"author":{"gitID":"Ang-YC"},"content":"            infoMainPane.setContent(infoMain);"},{"lineNumber":150,"author":{"gitID":"Ang-YC"},"content":"            infoMainRatings.getChildren().add(infoSplitRatings);"},{"lineNumber":151,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":157,"author":{"gitID":"Ang-YC"},"content":"        Person person \u003d event.getNewSelection().person;"},{"lineNumber":158,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":159,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.setVisible(true);"},{"lineNumber":160,"author":{"gitID":"Ang-YC"},"content":"        infoMainName.setText(person.getName().fullName);"},{"lineNumber":161,"author":{"gitID":"Ang-YC"},"content":"        infoMainUniversity.setText(\"-\");"},{"lineNumber":162,"author":{"gitID":"Ang-YC"},"content":"        infoMainMajorYear.setText(\"- (Expected \" + person.getExpectedGraduationYear().value + \")\");"},{"lineNumber":163,"author":{"gitID":"Ang-YC"},"content":"        infoMainCgpa.setText(\"-\");"},{"lineNumber":164,"author":{"gitID":"Ang-YC"},"content":"        infoMainEmail.setText(person.getEmail().value);"},{"lineNumber":165,"author":{"gitID":"Ang-YC"},"content":"        infoMainAddress.setText(person.getAddress().value);"},{"lineNumber":166,"author":{"gitID":"Ang-YC"},"content":"        infoMainPhone.setText(person.getPhone().value);"},{"lineNumber":167,"author":{"gitID":"Ang-YC"},"content":"        infoMainPosition.setText(\"-\");"},{"lineNumber":168,"author":{"gitID":"Ang-YC"},"content":"        infoMainStatus.setText(\"-\");"},{"lineNumber":169,"author":{"gitID":"Ang-YC"},"content":"        infoMainComments.setText(\"-\");"},{"lineNumber":170,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":171,"author":{"gitID":"Ang-YC"},"content":"        // Process Interview info"},{"lineNumber":172,"author":{"gitID":"Ang-YC"},"content":"        LocalDateTime interviewDate \u003d person.getInterviewDate().getDateTime();"},{"lineNumber":173,"author":{"gitID":"Ang-YC"},"content":"        if (interviewDate !\u003d null) {"},{"lineNumber":174,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewMonth.setText(interviewDate.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"},{"lineNumber":175,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewDate.setText(String.valueOf(interviewDate.getDayOfMonth()));"},{"lineNumber":176,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewDay.setText(interviewDate.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"},{"lineNumber":177,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewTime.setText(DateTimeFormatter.ofPattern(\"hh:mma\").format(interviewDate).toLowerCase());"},{"lineNumber":178,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewDatePane.setVisible(true);"},{"lineNumber":179,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":180,"author":{"gitID":"Ang-YC"},"content":"            infoMainInterviewDatePane.setVisible(false);"},{"lineNumber":181,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":183,"author":{"gitID":"Ang-YC"},"content":"        // Process Rating info"},{"lineNumber":184,"author":{"gitID":"Ang-YC"},"content":"        Rating rating \u003d person.getRating();"},{"lineNumber":185,"author":{"gitID":"Ang-YC"},"content":"        if (Rating.isValidScore(rating.technicalSkillsScore)"},{"lineNumber":186,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 Rating.isValidScore(rating.communicationSkillsScore)"},{"lineNumber":187,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 Rating.isValidScore(rating.problemSolvingSkillsScore)"},{"lineNumber":188,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 Rating.isValidScore(rating.experienceScore)) {"},{"lineNumber":189,"author":{"gitID":"Ang-YC"},"content":"            infoRatingTechnical.setProgress(rating.technicalSkillsScore / 5);"},{"lineNumber":190,"author":{"gitID":"Ang-YC"},"content":"            infoRatingCommunication.setProgress(rating.communicationSkillsScore / 5);"},{"lineNumber":191,"author":{"gitID":"Ang-YC"},"content":"            infoRatingProblemSolving.setProgress(rating.problemSolvingSkillsScore / 5);"},{"lineNumber":192,"author":{"gitID":"Ang-YC"},"content":"            infoRatingExperience.setProgress(rating.experienceScore / 5);"},{"lineNumber":193,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":194,"author":{"gitID":"Ang-YC"},"content":"            infoRatingTechnical.setProgress(0);"},{"lineNumber":195,"author":{"gitID":"Ang-YC"},"content":"            infoRatingCommunication.setProgress(0);"},{"lineNumber":196,"author":{"gitID":"Ang-YC"},"content":"            infoRatingProblemSolving.setProgress(0);"},{"lineNumber":197,"author":{"gitID":"Ang-YC"},"content":"            infoRatingExperience.setProgress(0);"},{"lineNumber":198,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":200,"author":{"gitID":"Ang-YC"},"content":"        // Set user data for test"},{"lineNumber":201,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.setUserData(person);"},{"lineNumber":202,"author":{"gitID":"Ang-YC"},"content":"        infoPaneWrapper.fireEvent(new InfoPanelChangedEvent());"},{"lineNumber":203,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":17,"Ang-YC":187}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"                        PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_MAJOR, PREFIX_RESUME, PREFIX_TAG);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        if (!arePrefixesPresent(argMultimap,"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"                PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_MAJOR)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"            // Compulsory fields"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"            ExpectedGraduationYear expectedGraduationYear \u003d ParserUtil.parseExpectedGraduationYear(argMultimap"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"                    .getValue(PREFIX_EXPECTED_GRADUATION_YEAR)).get();"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"            Major major \u003d ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR)).get();"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"            // Add command does not allow adding rating straight away"},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"            Rating rating \u003d new Rating(Rating.DEFAULT_SCORE, Rating.DEFAULT_SCORE,"},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"                    Rating.DEFAULT_SCORE, Rating.DEFAULT_SCORE);"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"            // Optional fields"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"            Optional\u003cResume\u003e resumeOptional \u003d ParserUtil.parseResume(argMultimap.getValue(PREFIX_RESUME));"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"            Resume resume \u003d resumeOptional.isPresent() ? resumeOptional.get() : new Resume(null);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"            // Fixed fields"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"            InterviewDate interviewDate \u003d new InterviewDate();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"            // Other fields"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"            Person person \u003d new Person(name, phone, email, address, expectedGraduationYear,"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":"                    major, rating, resume, interviewDate, tagList);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":3,"mhq199657":16,"-":58,"tanhengyeow":6,"Ang-YC":11}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.DeleteRatingCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.logic.commands.InterviewCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"        case InterviewCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"            return new InterviewCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"        case DeleteRatingCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":"            return new DeleteRatingCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":8,"mhq199657":4,"-":92,"Ang-YC":4}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":8,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"        // Check for empty argument input"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"tanhengyeow"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"tanhengyeow"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"                        PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_MAJOR); // more fields to be added if necessary"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"            Predicate\u003cPerson\u003e finalPredicate \u003d FindUtil.parseFindArgs(trimmedArgs, argMultimap);"},{"lineNumber":42,"author":{"gitID":"tanhengyeow"},"content":"            return new FindCommand(finalPredicate);"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"        } catch (ParseException ive) {"},{"lineNumber":44,"author":{"gitID":"tanhengyeow"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":26,"tanhengyeow":23}},{"path":"src/main/java/seedu/address/ui/TitleBar.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseButton;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.Pane;"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MaximizeAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.commons.events.ui.MinimizeAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":" * UI for the title bar that is displayed at the top of the application."},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"public class TitleBar extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(TitleBar.class);"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    private static final String FXML \u003d \"TitleBar.fxml\";"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"    private Label topStatusMessage;"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    private Label topStatusFile;"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"    private Pane controlHelp;"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"    public TitleBar(String saveLocation) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        TitleBar.clock \u003d clock;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"        Platform.runLater(() -\u003e this.topStatusFile.setText(location));"},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":79,"author":{"gitID":"Ang-YC"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":80,"author":{"gitID":"Ang-YC"},"content":"        Platform.runLater(() -\u003e this.topStatusMessage.setText(status));"},{"lineNumber":81,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"     * Return {@code controlHelp} pane, it will show help window when clicked."},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"     * @return {@code controlHelp} pane, to be used to bind accelerator by {@link MainWindow}"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Ang-YC"},"content":"    protected Pane getControlHelp() {"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        return controlHelp;"},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":"     * Opens the help window."},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"    public void handleHelp(MouseEvent event) {"},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":"        if (MouseButton.PRIMARY.equals(event.getButton())) {"},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"            HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":"            helpWindow.show();"},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":102,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"     * Minimizes the application."},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":"    private void handleMinimize(MouseEvent event) {"},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"        if (MouseButton.PRIMARY.equals(event.getButton())) {"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"            raise(new MinimizeAppRequestEvent());"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"Ang-YC"},"content":"     * Maximizes the application."},{"lineNumber":114,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"    private void handleMaximize(MouseEvent event) {"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"        if (MouseButton.PRIMARY.equals(event.getButton())) {"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":"            raise(new MaximizeAppRequestEvent());"},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"     * Closes the application."},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":"    @FXML"},{"lineNumber":126,"author":{"gitID":"Ang-YC"},"content":"    private void handleExit(MouseEvent event) {"},{"lineNumber":127,"author":{"gitID":"Ang-YC"},"content":"        if (MouseButton.PRIMARY.equals(event.getButton())) {"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":"            raise(new ExitAppRequestEvent());"},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":66,"Ang-YC":80}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public static final Prefix PREFIX_EXPECTED_GRADUATION_YEAR \u003d new Prefix(\"y/\");"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public static final Prefix PREFIX_MAJOR \u003d new Prefix(\"m/\");"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public static final Prefix PREFIX_RESUME \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"    public static final Prefix PREFIX_TECHNICAL_SKILLS_SCORE \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"    public static final Prefix PREFIX_COMMUNICATION_SKILLS_SCORE \u003d new Prefix(\"c/\");"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"    public static final Prefix PREFIX_PROBLEM_SOLVING_SKILLS_SCORE \u003d new Prefix(\"p/\");"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"    public static final Prefix PREFIX_EXPERIENCE_SCORE \u003d new Prefix(\"e/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":4,"mhq199657":2,"-":15,"tanhengyeow":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.commons.util.DoubleUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code String expectedGraduationYear} into an {@code ExpectedGraduationYear}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException if given {@code expectedGraduationYear} is invalid."},{"lineNumber":152,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"mhq199657"},"content":"    public static ExpectedGraduationYear parseExpectedGraduationYear(String expectedGraduationYear)"},{"lineNumber":154,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":156,"author":{"gitID":"mhq199657"},"content":"        String trimmedExpectedGraduationYear \u003d expectedGraduationYear.trim();"},{"lineNumber":157,"author":{"gitID":"mhq199657"},"content":"        if (!ExpectedGraduationYear.isValidExpectedGraduationYear(trimmedExpectedGraduationYear)) {"},{"lineNumber":158,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"mhq199657"},"content":"        return new ExpectedGraduationYear(trimmedExpectedGraduationYear);"},{"lineNumber":161,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code Optional\u003cString\u003e expectedGraduationYear}"},{"lineNumber":164,"author":{"gitID":"mhq199657"},"content":"     * into an {@code Optional\u003cExpectedGraduationYear\u003e} if {@code expectedGraduationYear} is present."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"    public static Optional\u003cExpectedGraduationYear\u003e parseExpectedGraduationYear(Optional\u003cString\u003e expectedGraduationYear)"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":170,"author":{"gitID":"mhq199657"},"content":"        return expectedGraduationYear.isPresent() ? Optional.of(parseExpectedGraduationYear("},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"                expectedGraduationYear.get())) : Optional.empty();"},{"lineNumber":172,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":174,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"tanhengyeow"},"content":"     * Parses a {@code String major} into a {@code Major}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":178,"author":{"gitID":"tanhengyeow"},"content":"     * @throws IllegalValueException if the given {@code major} is invalid."},{"lineNumber":179,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"tanhengyeow"},"content":"    public static Major parseMajor(String major) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"tanhengyeow"},"content":"        requireNonNull(major);"},{"lineNumber":182,"author":{"gitID":"tanhengyeow"},"content":"        String trimmedMajor \u003d major.trim();"},{"lineNumber":183,"author":{"gitID":"tanhengyeow"},"content":"        if (!Major.isValidMajor(trimmedMajor)) {"},{"lineNumber":184,"author":{"gitID":"tanhengyeow"},"content":"            throw new IllegalValueException(Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"tanhengyeow"},"content":"        return new Major(trimmedMajor);"},{"lineNumber":187,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":189,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"tanhengyeow"},"content":"     * Parses a {@code Optional\u003cString\u003e major} into an {@code Optional\u003cMajor\u003e} if {@code major} is present."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"tanhengyeow"},"content":"    public static Optional\u003cMajor\u003e parseMajor(Optional\u003cString\u003e major) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"tanhengyeow"},"content":"        requireNonNull(major);"},{"lineNumber":195,"author":{"gitID":"tanhengyeow"},"content":"        return major.isPresent() ? Optional.of(parseMajor(major.get())) : Optional.empty();"},{"lineNumber":196,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":198,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code String technicalSkillsScore} into an {@code double}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"kexiaowen"},"content":"     * @throws IllegalValueException if given {@code technicalSkillsScore} is invalid."},{"lineNumber":203,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"kexiaowen"},"content":"    public static double parseTechnicalSkillsScore(String technicalSkillsScore)"},{"lineNumber":205,"author":{"gitID":"mhq199657"},"content":"        throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(technicalSkillsScore);"},{"lineNumber":207,"author":{"gitID":"kexiaowen"},"content":"        String trimmedTechnicalSkillsScore \u003d technicalSkillsScore.trim();"},{"lineNumber":208,"author":{"gitID":"kexiaowen"},"content":"        double technicalSkillsScoreValue \u003d DoubleUtil.roundToTwoDecimalPlaces(trimmedTechnicalSkillsScore);"},{"lineNumber":209,"author":{"gitID":"kexiaowen"},"content":"        if (!Rating.isValidScore(technicalSkillsScoreValue)) {"},{"lineNumber":210,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"kexiaowen"},"content":"        return technicalSkillsScoreValue;"},{"lineNumber":213,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":215,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code Optional\u003cString\u003e technicalSkillsScore} into an {@code Optional\u003cDouble\u003e}"},{"lineNumber":217,"author":{"gitID":"kexiaowen"},"content":"     * if {@code technicalSkillsScore} is present."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"kexiaowen"},"content":"    public static Optional\u003cDouble\u003e parseTechnicalSkillsScore(Optional\u003cString\u003e technicalSkillsScore)"},{"lineNumber":221,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":222,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(technicalSkillsScore);"},{"lineNumber":223,"author":{"gitID":"kexiaowen"},"content":"        if (technicalSkillsScore.get().trim().equals(\"\")) {"},{"lineNumber":224,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":225,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"kexiaowen"},"content":"        return technicalSkillsScore.isPresent() ? Optional.of(parseTechnicalSkillsScore("},{"lineNumber":227,"author":{"gitID":"kexiaowen"},"content":"                technicalSkillsScore.get())) : Optional.empty();"},{"lineNumber":228,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":230,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code String communicationSkillsScore} into an {@code double}."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":234,"author":{"gitID":"kexiaowen"},"content":"     * @throws IllegalValueException if given {@code communicationSkillsScore} is invalid."},{"lineNumber":235,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"kexiaowen"},"content":"    public static double parseCommunicationSkillsScore(String communicationSkillsScore)"},{"lineNumber":237,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":238,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(communicationSkillsScore);"},{"lineNumber":239,"author":{"gitID":"kexiaowen"},"content":"        String trimmedCommunicationSkillsScore \u003d communicationSkillsScore.trim();"},{"lineNumber":240,"author":{"gitID":"kexiaowen"},"content":"        double communicationSkillsScoreValue \u003d DoubleUtil.roundToTwoDecimalPlaces(trimmedCommunicationSkillsScore);"},{"lineNumber":241,"author":{"gitID":"kexiaowen"},"content":"        if (!Rating.isValidScore(communicationSkillsScoreValue)) {"},{"lineNumber":242,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"kexiaowen"},"content":"        return communicationSkillsScoreValue;"},{"lineNumber":245,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":247,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code Optional\u003cString\u003e communicationSkillsScore} into an {@code Optional\u003cDouble\u003e}"},{"lineNumber":249,"author":{"gitID":"kexiaowen"},"content":"     * if {@code communicationSkillsScore} is present."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"kexiaowen"},"content":"    public static Optional\u003cDouble\u003e parseCommunicationSkillsScore(Optional\u003cString\u003e communicationSkillsScore)"},{"lineNumber":253,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":254,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(communicationSkillsScore);"},{"lineNumber":255,"author":{"gitID":"kexiaowen"},"content":"        if (communicationSkillsScore.get().trim().equals(\"\")) {"},{"lineNumber":256,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"kexiaowen"},"content":"        return communicationSkillsScore.isPresent() ? Optional.of(parseCommunicationSkillsScore("},{"lineNumber":259,"author":{"gitID":"kexiaowen"},"content":"                communicationSkillsScore.get())) : Optional.empty();"},{"lineNumber":260,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":262,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code String problemSolvingSkillsScore} into an {@code double}."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":266,"author":{"gitID":"kexiaowen"},"content":"     * @throws IllegalValueException if given {@code problemSolvingSkillsScore} is invalid."},{"lineNumber":267,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"kexiaowen"},"content":"    public static double parseProblemSolvingSkillsScore(String problemSolvingSkillsScore)"},{"lineNumber":269,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":270,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(problemSolvingSkillsScore);"},{"lineNumber":271,"author":{"gitID":"kexiaowen"},"content":"        String trimmedProblemSolvingSkillsScore \u003d problemSolvingSkillsScore.trim();"},{"lineNumber":272,"author":{"gitID":"kexiaowen"},"content":"        double problemSolvingSkillsScoreValue \u003d DoubleUtil.roundToTwoDecimalPlaces(trimmedProblemSolvingSkillsScore);"},{"lineNumber":273,"author":{"gitID":"kexiaowen"},"content":"        if (!Rating.isValidScore(problemSolvingSkillsScoreValue)) {"},{"lineNumber":274,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":275,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"kexiaowen"},"content":"        return problemSolvingSkillsScoreValue;"},{"lineNumber":277,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":279,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code Optional\u003cString\u003e problemSolvingSkillsScore} into an {@code Optional\u003cDouble\u003e}"},{"lineNumber":281,"author":{"gitID":"kexiaowen"},"content":"     * if {@code problemSolvingSkillsScore} is present."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"kexiaowen"},"content":"    public static Optional\u003cDouble\u003e parseProblemSolvingSkillsScore(Optional\u003cString\u003e problemSolvingSkillsScore)"},{"lineNumber":285,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":286,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(problemSolvingSkillsScore);"},{"lineNumber":287,"author":{"gitID":"kexiaowen"},"content":"        if (problemSolvingSkillsScore.get().trim().equals(\"\")) {"},{"lineNumber":288,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":289,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"kexiaowen"},"content":"        return problemSolvingSkillsScore.isPresent() ? Optional.of(parseProblemSolvingSkillsScore("},{"lineNumber":291,"author":{"gitID":"kexiaowen"},"content":"                problemSolvingSkillsScore.get())) : Optional.empty();"},{"lineNumber":292,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":294,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code String experienceScore} into an {@code double}."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":298,"author":{"gitID":"kexiaowen"},"content":"     * @throws IllegalValueException if given {@code experienceScore} is invalid."},{"lineNumber":299,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"kexiaowen"},"content":"    public static double parseExperienceScore(String experienceScore)"},{"lineNumber":301,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":302,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(experienceScore);"},{"lineNumber":303,"author":{"gitID":"kexiaowen"},"content":"        String trimmedExperienceScore \u003d experienceScore.trim();"},{"lineNumber":304,"author":{"gitID":"kexiaowen"},"content":"        double experienceScoreValue \u003d DoubleUtil.roundToTwoDecimalPlaces(trimmedExperienceScore);"},{"lineNumber":305,"author":{"gitID":"kexiaowen"},"content":"        if (!Rating.isValidScore(experienceScoreValue)) {"},{"lineNumber":306,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":307,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"kexiaowen"},"content":"        return experienceScoreValue;"},{"lineNumber":309,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":311,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"kexiaowen"},"content":"     * Parses a {@code Optional\u003cString\u003e experienceScore} into an {@code Optional\u003cDouble\u003e}"},{"lineNumber":313,"author":{"gitID":"kexiaowen"},"content":"     * if {@code experienceScore} is present."},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":315,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"kexiaowen"},"content":"    public static Optional\u003cDouble\u003e parseExperienceScore(Optional\u003cString\u003e experienceScore)"},{"lineNumber":317,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":318,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(experienceScore);"},{"lineNumber":319,"author":{"gitID":"kexiaowen"},"content":"        if (experienceScore.get().trim().equals(\"\")) {"},{"lineNumber":320,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":321,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"kexiaowen"},"content":"        return experienceScore.isPresent() ? Optional.of(parseExperienceScore("},{"lineNumber":323,"author":{"gitID":"kexiaowen"},"content":"                experienceScore.get())) : Optional.empty();"},{"lineNumber":324,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":329,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":331,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":343,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":353,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":354,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code String resume} into an {@code Resume}."},{"lineNumber":355,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":356,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":357,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException if the given {@code resume} is invalid."},{"lineNumber":358,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":359,"author":{"gitID":"mhq199657"},"content":"    public static Resume parseResume(String resume) throws IllegalValueException {"},{"lineNumber":360,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(resume);"},{"lineNumber":361,"author":{"gitID":"mhq199657"},"content":"        String trimmedResume \u003d resume.trim();"},{"lineNumber":362,"author":{"gitID":"mhq199657"},"content":"        if (!Resume.isValidResume(trimmedResume)) {"},{"lineNumber":363,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(Resume.MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":364,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":365,"author":{"gitID":"mhq199657"},"content":"        return new Resume(trimmedResume);"},{"lineNumber":366,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":368,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":369,"author":{"gitID":"mhq199657"},"content":"     * Parses a {@code Optional\u003cString\u003e resume} into an {@code Optional\u003cResume\u003e} if {@code resume} is present."},{"lineNumber":370,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":371,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":372,"author":{"gitID":"mhq199657"},"content":"    public static Optional\u003cResume\u003e parseResume(Optional\u003cString\u003e resume) throws IllegalValueException {"},{"lineNumber":373,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(resume);"},{"lineNumber":374,"author":{"gitID":"mhq199657"},"content":"        return resume.isPresent() ? Optional.of(parseResume(resume.get())) : Optional.empty();"},{"lineNumber":375,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":106,"mhq199657":53,"-":196,"tanhengyeow":21}},{"path":"src/main/java/seedu/address/logic/parser/FilterRange.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":" * A range recorder for PredicateParsing"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":" * @param \u003cE\u003e a filterable field"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"public class FilterRange\u003cE\u003e {"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"    private boolean isRange;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"    private E lowValue;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"    private E highValue;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"    private E exactValue;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public FilterRange(E exactValue) {"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"        this.isRange \u003d false;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"        this.lowValue \u003d null;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"        this.highValue \u003d null;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"        this.exactValue \u003d exactValue;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    public FilterRange(E lowValue, E highValue) {"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"        this.isRange \u003d true;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"        this.lowValue \u003d lowValue;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        this.highValue \u003d highValue;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        this.exactValue \u003d null;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    public boolean isRange() {"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"        return isRange;"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"    public E getExactValue() {"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        assert(!isRange);"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        return exactValue;"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"    public E getLowValue() {"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"        assert(isRange);"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        return lowValue;"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"    public E getHighValue() {"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        assert(isRange);"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        return highValue;"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":45}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EXPECTED_GRADUATION_YEAR); //PREFIX_TAG temporarily removed"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EXPECTED_GRADUATION_YEAR)"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"            Predicate\u003cPerson\u003e expectedGraduationYearPredicate \u003d FilterUtil.parseExpectedGraduationYear(argMultimap"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"                    .getValue(PREFIX_EXPECTED_GRADUATION_YEAR));"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"            return new FilterCommand(expectedGraduationYearPredicate);"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"            throw pe;"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":33,"-":19}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMUNICATION_SKILLS_SCORE;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE_SCORE;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROBLEM_SOLVING_SKILLS_SCORE;"},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TECHNICAL_SKILLS_SCORE;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"public class RateCommandParser implements Parser\u003cRateCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"     * Parses the given {@code String} of arguments in the context of the RateCommand"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"     * and returns an RateCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"    public RateCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TECHNICAL_SKILLS_SCORE, PREFIX_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"                        PREFIX_PROBLEM_SOLVING_SKILLS_SCORE, PREFIX_EXPERIENCE_SCORE);"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"        Rating rating;"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"        if (!arePrefixesPresent(argMultimap,"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"                PREFIX_TECHNICAL_SKILLS_SCORE, PREFIX_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"                PREFIX_PROBLEM_SOLVING_SKILLS_SCORE, PREFIX_EXPERIENCE_SCORE)"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"                || argMultimap.getPreamble().isEmpty()"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"                || !areAllFieldsSupplied(argMultimap,"},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"                PREFIX_TECHNICAL_SKILLS_SCORE, PREFIX_COMMUNICATION_SKILLS_SCORE,"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"                PREFIX_PROBLEM_SOLVING_SKILLS_SCORE, PREFIX_EXPERIENCE_SCORE)) {"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"            double technicalSkillsScore \u003d ParserUtil.parseTechnicalSkillsScore("},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"                    argMultimap.getValue(PREFIX_TECHNICAL_SKILLS_SCORE)).get();"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":"            double communicationSkillsScore \u003d ParserUtil.parseCommunicationSkillsScore("},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"                    argMultimap.getValue(PREFIX_COMMUNICATION_SKILLS_SCORE)).get();"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"            double problemSolvingSkillsScore \u003d ParserUtil.parseProblemSolvingSkillsScore("},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"                    argMultimap.getValue(PREFIX_PROBLEM_SOLVING_SKILLS_SCORE)).get();"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"            double experienceScore \u003d ParserUtil.parseExperienceScore("},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"                    argMultimap.getValue(PREFIX_EXPERIENCE_SCORE)).get();"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"            rating \u003d new Rating(technicalSkillsScore, communicationSkillsScore, problemSolvingSkillsScore,"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"                    experienceScore);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":"        return new RateCommand(index, rating);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":74,"author":{"gitID":"kexiaowen"},"content":"    private static boolean areAllFieldsSupplied(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e !Optional.of(argumentMultimap.getValue(prefix)).equals(\"\"));"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":53,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":8,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"                        PREFIX_EXPECTED_GRADUATION_YEAR, PREFIX_MAJOR, PREFIX_RESUME, PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"            ParserUtil.parseExpectedGraduationYear(argMultimap.getValue(PREFIX_EXPECTED_GRADUATION_YEAR))"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"                    .ifPresent(editPersonDescriptor::setExpectedGraduationYear);"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"            ParserUtil.parseMajor(argMultimap.getValue(PREFIX_MAJOR)).ifPresent(editPersonDescriptor::setMajor);"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"            parseResumeForEdit(argMultimap.getValue(PREFIX_RESUME)).ifPresent(editPersonDescriptor::setResume);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"     * Parses {@code Optional\u003cResume\u003e resume} into a {@code Optional\u003cResume\u003e} if {@code resume} is non-empty."},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"     * If resume is present and equals to empty string, it will be parsed into a"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"     * {@code Resume} containing null value."},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"    private Optional\u003cResume\u003e parseResumeForEdit(Optional\u003cString\u003e resume) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"        assert resume !\u003d null;"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"        if (!resume.isPresent()) {"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"        if (resume.get().equals(\"\")) {"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"            return Optional.of(new Resume(null));"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"            return ParserUtil.parseResume(resume);"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":24,"-":77,"tanhengyeow":3}},{"path":"src/main/java/seedu/address/logic/parser/DeleteRatingCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.logic.commands.DeleteRatingCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":" * Parses input arguments and creates a new DeleteRatingCommand object"},{"lineNumber":12,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":13,"author":{"gitID":"kexiaowen"},"content":"public class DeleteRatingCommandParser implements Parser\u003cDeleteRatingCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteRatingCommand"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"     * and returns a DeleteRatingCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"    public DeleteRatingCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"        Index index;"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"            index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRatingCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"        return new DeleteRatingCommand(index);"},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":17,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":" * Filters and lists all persons in address book whose graduation year is before or equal to the specified year.."},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"public class FilterCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter according the predicates specified. \""},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"            + \"Display all persons with fields in the range specified by the input keyword.\\n\""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"            + \"Range is either a single predicate, or an interval in the format of `low - high`, \""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"            + \"or a combination of both using commas.\\n\""},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"            + \"Filterable field is expected graduation year.\""},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR] \""},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \" 2020, 2021-2024\";"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    public FilterCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        model.filterFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":33,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/InterviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":"import com.joestelmach.natty.DateGroup;"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.logic.commands.InterviewCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":" * Parses input arguments and creates a new InterviewCommand object"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"public class InterviewCommandParser implements Parser\u003cInterviewCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"    public static final String MESSAGE_DATETIME_PARSE_FAIL \u003d \"Failed to parse the date time from the string: %1$s\";"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"     * Parses the given {@code String} of arguments in the context of the InterviewCommand"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"     * and returns an InterviewCommand object for execution."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"    public InterviewCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"            // Parse the arguments"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"            String[] arguments \u003d args.trim().split(\"\\\\s+\", 2);"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"            if (arguments.length !\u003d 2) {"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"                throw new IllegalValueException(\"Invalid command, expected 2 arguments\");"},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"            // Parse the index"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"            Index index \u003d ParserUtil.parseIndex(arguments[0]);"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"            // Parse the date time"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"            LocalDateTime dateTime \u003d parseDateFromNaturalLanguage(arguments[1]);"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"            return new InterviewCommand(index, dateTime);"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        } catch (ParseException pe) {"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"            throw pe;"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"     * Parses the given natural language {@code String} and returns a {@code LocalDateTime} object"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"     * that represents the English representation of the date and time"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"     * @throws ParseException if the phrase cannot be converted to date and time"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    private LocalDateTime parseDateFromNaturalLanguage(String naturalLanguage) throws ParseException {"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"        com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":"        List\u003cDateGroup\u003e groups \u003d parser.parse(naturalLanguage);"},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"        if (groups.size() \u003c 1) {"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"            throw new ParseException(String.format(MESSAGE_DATETIME_PARSE_FAIL, naturalLanguage));"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        List\u003cDate\u003e dates \u003d groups.get(0).getDates();"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        if (dates.size() \u003c 1) {"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"            throw new ParseException(String.format(MESSAGE_DATETIME_PARSE_FAIL, naturalLanguage));"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"        Date date \u003d dates.get(0);"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":11,"Ang-YC":64}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR \""},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"            + PREFIX_MAJOR + \"MAJOR\""},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_RESUME + \"RESUME] \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_EXPECTED_GRADUATION_YEAR + \"2020 \""},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":"            + PREFIX_MAJOR + \"Computer Science \""},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"            + PREFIX_RESUME + \"jdoe.pdf \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":6,"-":67,"tanhengyeow":3}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESUME;"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_EXPECTED_GRADUATION_YEAR + \"EXPECTED GRADUATION YEAR] \""},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"            + \"[\" + PREFIX_MAJOR + \"MAJOR] \""},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"            + \"[\" + PREFIX_RESUME + \"RESUME] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"        ExpectedGraduationYear updatedExpectedGraduationYear \u003d editPersonDescriptor.getExpectedGraduationYear()"},{"lineNumber":122,"author":{"gitID":"mhq199657"},"content":"                .orElse(personToEdit.getExpectedGraduationYear());"},{"lineNumber":123,"author":{"gitID":"tanhengyeow"},"content":"        Major updatedMajor \u003d editPersonDescriptor.getMajor().orElse(personToEdit.getMajor());"},{"lineNumber":124,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":125,"author":{"gitID":"kexiaowen"},"content":"        // Doesn\u0027t allow editing of rating"},{"lineNumber":126,"author":{"gitID":"kexiaowen"},"content":"        Rating rating \u003d personToEdit.getRating();"},{"lineNumber":127,"author":{"gitID":"mhq199657"},"content":"        Resume updatedResume \u003d editPersonDescriptor.getResume().orElse(personToEdit.getResume());"},{"lineNumber":128,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":129,"author":{"gitID":"Ang-YC"},"content":"        // Doesn\u0027t allow editing of interview date"},{"lineNumber":130,"author":{"gitID":"Ang-YC"},"content":"        InterviewDate interviewDate \u003d personToEdit.getInterviewDate();"},{"lineNumber":131,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"mhq199657"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":135,"author":{"gitID":"tanhengyeow"},"content":"                updatedExpectedGraduationYear, updatedMajor, rating, updatedResume, interviewDate, updatedTags);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":166,"author":{"gitID":"mhq199657"},"content":"        private ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":167,"author":{"gitID":"tanhengyeow"},"content":"        private Major major;"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"        private Resume resume;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":175,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":176,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":182,"author":{"gitID":"mhq199657"},"content":"            setExpectedGraduationYear(toCopy.expectedGraduationYear);"},{"lineNumber":183,"author":{"gitID":"tanhengyeow"},"content":"            setMajor(toCopy.major);"},{"lineNumber":184,"author":{"gitID":"mhq199657"},"content":"            setResume(toCopy.resume);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":190,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":192,"author":{"gitID":"mhq199657"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":193,"author":{"gitID":"tanhengyeow"},"content":"                    this.expectedGraduationYear, this.major, this.resume, this.tags);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"mhq199657"},"content":"        public void setExpectedGraduationYear(ExpectedGraduationYear expectedGraduationYear) {"},{"lineNumber":229,"author":{"gitID":"mhq199657"},"content":"            this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":230,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":232,"author":{"gitID":"mhq199657"},"content":"        public Optional\u003cExpectedGraduationYear\u003e getExpectedGraduationYear() {"},{"lineNumber":233,"author":{"gitID":"mhq199657"},"content":"            return Optional.ofNullable(expectedGraduationYear);"},{"lineNumber":234,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":236,"author":{"gitID":"tanhengyeow"},"content":"        public void setMajor(Major major) {"},{"lineNumber":237,"author":{"gitID":"tanhengyeow"},"content":"            this.major \u003d major;"},{"lineNumber":238,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":240,"author":{"gitID":"tanhengyeow"},"content":"        public Optional\u003cMajor\u003e getMajor() {"},{"lineNumber":241,"author":{"gitID":"tanhengyeow"},"content":"            return Optional.ofNullable(major);"},{"lineNumber":242,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":244,"author":{"gitID":"mhq199657"},"content":"        public void setResume(Resume resume) {"},{"lineNumber":245,"author":{"gitID":"mhq199657"},"content":"            this.resume \u003d resume;"},{"lineNumber":246,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":248,"author":{"gitID":"mhq199657"},"content":"        public Optional\u003cResume\u003e getResume() {"},{"lineNumber":249,"author":{"gitID":"mhq199657"},"content":"            return Optional.ofNullable(resume);"},{"lineNumber":250,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":254,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":262,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":263,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":286,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":287,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 getExpectedGraduationYear().equals(e.getExpectedGraduationYear())"},{"lineNumber":288,"author":{"gitID":"tanhengyeow"},"content":"                    \u0026\u0026 getMajor().equals(e.getMajor())"},{"lineNumber":289,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 getResume().equals(e.getResume())"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":3,"mhq199657":39,"-":228,"tanhengyeow":18,"Ang-YC":5}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"tanhengyeow"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":5,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"tanhengyeow"},"content":" * Finds and lists all persons in address book whose field contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose fields contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"tanhengyeow"},"content":"            + \"Option 1 (Search all fields): KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"            + \"Example: \" + COMMAND_WORD + \" alex david alexyeoh@example.com\\n\\n\""},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"            + \"Option 2 (Search by prefix): /n[KEYWORD] [MORE_KEYWORDS] /p...\\n\""},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/Alex Bernice p/999 555\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"    public Predicate\u003cPerson\u003e getPredicate() {"},{"lineNumber":42,"author":{"gitID":"tanhengyeow"},"content":"        return predicate;"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":29,"tanhengyeow":15}},{"path":"src/main/java/seedu/address/logic/parser/FilterUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYearInKeywordsRangePredicate;"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":" * A utility class for parsing FilterCommand"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"public class FilterUtil {"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"     * Parses a Optional of  predicateString to a Predicate used to filter Person"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"     * @param predicateString a predicate string read from user input"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"     * @return a Predicate for filter command"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    public static Predicate\u003cPerson\u003e parseExpectedGraduationYear(Optional\u003cString\u003e predicateString)"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(predicateString);"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"        if (predicateString.isPresent()) {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"            return parseExpectedGraduationYear(predicateString.get());"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"     * Parses a predicateString to a Predicate used to filter Person"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"     * @param predicateString a predicate string read from user input"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"     * @return a Predicate for filter command"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"    public static Predicate\u003cPerson\u003e parseExpectedGraduationYear(String predicateString)"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(predicateString);"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"        String[] predicateStrings \u003d predicateString.split(\",\");"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        Arrays.stream(predicateStrings).map(String::trim).toArray(unused -\u003e predicateStrings);"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"        if (predicateStrings.length \u003d\u003d 0) {"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"        Predicate\u003cPerson\u003e predicate \u003d processExpectedGraduationYearPredicateStrings(predicateStrings);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"        return predicate;"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"     * Parses the string array of all single predicate strings to a predicate"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"     * @param predicateStrings array of predicateString"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"     * @return the predicate user demanded"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    private static Predicate\u003cPerson\u003e processExpectedGraduationYearPredicateStrings(String[] predicateStrings)"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e allPredicates \u003d new ArrayList\u003cPredicate\u003cPerson\u003e\u003e();"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"        for (String s: predicateStrings) {"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"            Predicate\u003cPerson\u003e predicate \u003d formExpectedGraduationYearPredicateFromPredicateString(s);"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"            allPredicates.add(predicate);"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"        return combineAllPredicates(allPredicates);"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"     * Combines a list of predicate into a single predicate"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"     * @param predicateList list of predicates"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"     * @return a single equivalent predicate"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"    private static Predicate\u003cPerson\u003e combineAllPredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        assert(predicateList.size() \u003e\u003d 1);"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"        Predicate\u003cPerson\u003e allPredicates \u003d predicateList.get(0);"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"        for (int i \u003d 1; i \u003c predicateList.size(); i++) {"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"            allPredicates \u003d allPredicates.or(predicateList.get(i));"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"        return allPredicates;"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"     * Form a single predicate from a single predicate string"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"     * @param s a single predicate string"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":"     * @return a single predicate"},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"     * @throws IllegalValueException"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"    private static Predicate\u003cPerson\u003e formExpectedGraduationYearPredicateFromPredicateString(String s)"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"            throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"        FilterRange\u003cExpectedGraduationYear\u003e filterRange;"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        if (s.contains(\"-\")) { //It is a range"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"            String[] range \u003d s.split(\"-\");"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"            if (range.length !\u003d 2) {"},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"            } else if (ExpectedGraduationYear.isValidExpectedGraduationYear(range[0].trim())"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 ExpectedGraduationYear.isValidExpectedGraduationYear(range[1].trim())) {"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"                filterRange \u003d new FilterRange\u003cExpectedGraduationYear\u003e("},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"                        new ExpectedGraduationYear(range[0].trim()), new ExpectedGraduationYear(range[1].trim()));"},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"            } else {"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"                throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"        } else { //It is a value instead"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"            if (ExpectedGraduationYear.isValidExpectedGraduationYear(s.trim())) {"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"                filterRange \u003d new FilterRange\u003cExpectedGraduationYear\u003e(new ExpectedGraduationYear(s));"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"            } else {"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"                throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"        Predicate\u003cPerson\u003e predicate \u003d new ExpectedGraduationYearInKeywordsRangePredicate(filterRange);"},{"lineNumber":118,"author":{"gitID":"mhq199657"},"content":"        return predicate;"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":110,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/FindUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_GRADUATION_YEAR;"},{"lineNumber":8,"author":{"gitID":"tanhengyeow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MAJOR;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"tanhengyeow"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"tanhengyeow"},"content":"import java.util.stream.Stream;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.ExpectedGraduationYearContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.MajorContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":" * Contains utility methods used for FindCommandParser"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"public class FindUtil {"},{"lineNumber":32,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"     * Parses the string {@code trimmedArgs} and {@code argMultimap} to form a combined Predicate based on user request"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"     * @param trimmedArgs,argMultimap"},{"lineNumber":36,"author":{"gitID":"tanhengyeow"},"content":"     * @return the predicate user demanded"},{"lineNumber":37,"author":{"gitID":"tanhengyeow"},"content":"     * @throws ParseException"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":"    public static Predicate\u003cPerson\u003e parseFindArgs(String trimmedArgs, ArgumentMultimap argMultimap)"},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":"            throws ParseException {"},{"lineNumber":42,"author":{"gitID":"tanhengyeow"},"content":"        requireNonNull(trimmedArgs);"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"tanhengyeow"},"content":"        boolean isGlobalSearch \u003d false;"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"        Predicate\u003cPerson\u003e finalPredicate;"},{"lineNumber":46,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":47,"author":{"gitID":"tanhengyeow"},"content":"        // no prefix used, search for all fields (global search)"},{"lineNumber":48,"author":{"gitID":"tanhengyeow"},"content":"        if (!startWithPrefix(trimmedArgs)) {"},{"lineNumber":49,"author":{"gitID":"tanhengyeow"},"content":"            isGlobalSearch \u003d true;"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":"            String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":52,"author":{"gitID":"tanhengyeow"},"content":"            predicateList \u003d parseAllPredicates(keywords, predicateList);"},{"lineNumber":53,"author":{"gitID":"tanhengyeow"},"content":"            finalPredicate \u003d combinePredicates(isGlobalSearch,"},{"lineNumber":54,"author":{"gitID":"tanhengyeow"},"content":"                    predicateList.toArray(new Predicate[predicateList.size()]));"},{"lineNumber":55,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":56,"author":{"gitID":"tanhengyeow"},"content":"            return finalPredicate;"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"tanhengyeow"},"content":"            // at least one prefix is used, search for fields that matches prefix only"},{"lineNumber":59,"author":{"gitID":"tanhengyeow"},"content":"            if (!argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":60,"author":{"gitID":"tanhengyeow"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"tanhengyeow"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":63,"author":{"gitID":"tanhengyeow"},"content":"            predicateList \u003d parseSelectedPredicates(argMultimap, predicateList);"},{"lineNumber":64,"author":{"gitID":"tanhengyeow"},"content":"            finalPredicate \u003d combinePredicates(isGlobalSearch,"},{"lineNumber":65,"author":{"gitID":"tanhengyeow"},"content":"                    predicateList.toArray(new Predicate[predicateList.size()]));"},{"lineNumber":66,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":67,"author":{"gitID":"tanhengyeow"},"content":"            return finalPredicate;"},{"lineNumber":68,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"     * Parses the string {@code trimmedArgs} and a returns a boolean value true if prefix is present"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"     * @param trimmedArgs"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"     * @return boolean value"},{"lineNumber":75,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"tanhengyeow"},"content":"    private static boolean startWithPrefix(String trimmedArgs) {"},{"lineNumber":77,"author":{"gitID":"tanhengyeow"},"content":"        String[] args \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":78,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":79,"author":{"gitID":"tanhengyeow"},"content":"        return (args[0].contains(PREFIX_NAME.toString())"},{"lineNumber":80,"author":{"gitID":"tanhengyeow"},"content":"                || args[0].contains(PREFIX_PHONE.toString())"},{"lineNumber":81,"author":{"gitID":"tanhengyeow"},"content":"                || args[0].contains(PREFIX_EMAIL.toString())"},{"lineNumber":82,"author":{"gitID":"tanhengyeow"},"content":"                || args[0].contains(PREFIX_ADDRESS.toString())"},{"lineNumber":83,"author":{"gitID":"tanhengyeow"},"content":"                || args[0].contains(PREFIX_EXPECTED_GRADUATION_YEAR.toString())"},{"lineNumber":84,"author":{"gitID":"tanhengyeow"},"content":"                || args[0].contains(PREFIX_MAJOR.toString()));"},{"lineNumber":85,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":87,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"tanhengyeow"},"content":"     * Parses the String array {@code trimmedArgs} and {@code predicateList} to"},{"lineNumber":89,"author":{"gitID":"tanhengyeow"},"content":"     * form a combined Predicate based on user request"},{"lineNumber":90,"author":{"gitID":"tanhengyeow"},"content":"     * @param keywords,predicateList"},{"lineNumber":91,"author":{"gitID":"tanhengyeow"},"content":"     * @return a list of Predicate"},{"lineNumber":92,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"tanhengyeow"},"content":"    private static List\u003cPredicate\u003cPerson\u003e\u003e parseAllPredicates(String[] keywords,"},{"lineNumber":94,"author":{"gitID":"tanhengyeow"},"content":"                                                              List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {"},{"lineNumber":95,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":96,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":97,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":98,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":99,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new ExpectedGraduationYearContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":100,"author":{"gitID":"tanhengyeow"},"content":"        predicateList.add(new MajorContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":101,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"        return predicateList;"},{"lineNumber":103,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":105,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"tanhengyeow"},"content":"     * Parses the ArgumentMultimap {@code argMultimap} and {@code predicateList} to"},{"lineNumber":107,"author":{"gitID":"tanhengyeow"},"content":"     * form a combined Predicate based on user request"},{"lineNumber":108,"author":{"gitID":"tanhengyeow"},"content":"     * @param argMultimap,predicateList"},{"lineNumber":109,"author":{"gitID":"tanhengyeow"},"content":"     * @return a list of Predicate"},{"lineNumber":110,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"tanhengyeow"},"content":"    private static List\u003cPredicate\u003cPerson\u003e\u003e parseSelectedPredicates("},{"lineNumber":112,"author":{"gitID":"tanhengyeow"},"content":"            ArgumentMultimap argMultimap, List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {"},{"lineNumber":113,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":114,"author":{"gitID":"tanhengyeow"},"content":"        // checks if prefix is present in argMultimap and adds the corresponding predicate to predicateList"},{"lineNumber":115,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":116,"author":{"gitID":"tanhengyeow"},"content":"            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"},{"lineNumber":117,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":118,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":120,"author":{"gitID":"tanhengyeow"},"content":"            String[] phoneKeywords \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new PhoneContainsKeywordsPredicate(Arrays.asList(phoneKeywords)));"},{"lineNumber":122,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":124,"author":{"gitID":"tanhengyeow"},"content":"            String[] emailKeywords \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));"},{"lineNumber":126,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":128,"author":{"gitID":"tanhengyeow"},"content":"            String[] addressKeywords \u003d argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\");"},{"lineNumber":129,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new AddressContainsKeywordsPredicate(Arrays.asList(addressKeywords)));"},{"lineNumber":130,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_EXPECTED_GRADUATION_YEAR).isPresent()) {"},{"lineNumber":132,"author":{"gitID":"tanhengyeow"},"content":"            String[] expectedGraduationYearKeywords \u003d"},{"lineNumber":133,"author":{"gitID":"tanhengyeow"},"content":"                    argMultimap.getValue(PREFIX_EXPECTED_GRADUATION_YEAR).get().split(\"\\\\s+\");"},{"lineNumber":134,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new ExpectedGraduationYearContainsKeywordsPredicate("},{"lineNumber":135,"author":{"gitID":"tanhengyeow"},"content":"                    Arrays.asList(expectedGraduationYearKeywords)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"tanhengyeow"},"content":"        if (argMultimap.getValue(PREFIX_MAJOR).isPresent()) {"},{"lineNumber":138,"author":{"gitID":"tanhengyeow"},"content":"            String[] majorKeywords \u003d"},{"lineNumber":139,"author":{"gitID":"tanhengyeow"},"content":"                    argMultimap.getValue(PREFIX_MAJOR).get().split(\"\\\\s+\");"},{"lineNumber":140,"author":{"gitID":"tanhengyeow"},"content":"            predicateList.add(new MajorContainsKeywordsPredicate("},{"lineNumber":141,"author":{"gitID":"tanhengyeow"},"content":"                    Arrays.asList(majorKeywords)));"},{"lineNumber":142,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":144,"author":{"gitID":"tanhengyeow"},"content":"        return predicateList;"},{"lineNumber":145,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":147,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"tanhengyeow"},"content":"     * Combines all predicates in {@code predicateList} that matches the"},{"lineNumber":149,"author":{"gitID":"tanhengyeow"},"content":"     * corresponding condition to form {@code finalPredicate}"},{"lineNumber":150,"author":{"gitID":"tanhengyeow"},"content":"     * @param predicates in the form of varargs"},{"lineNumber":151,"author":{"gitID":"tanhengyeow"},"content":"     * @return {@code finalPredicate} of type {@code Predicate\u003cPerson\u003e}"},{"lineNumber":152,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"tanhengyeow"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":154,"author":{"gitID":"tanhengyeow"},"content":"    private static Predicate\u003cPerson\u003e combinePredicates("},{"lineNumber":155,"author":{"gitID":"tanhengyeow"},"content":"            boolean isGlobalSearch, Predicate\u003cPerson\u003e... predicates) {"},{"lineNumber":156,"author":{"gitID":"tanhengyeow"},"content":"        Predicate\u003cPerson\u003e finalPredicate;"},{"lineNumber":157,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":158,"author":{"gitID":"tanhengyeow"},"content":"        if (isGlobalSearch) {"},{"lineNumber":159,"author":{"gitID":"tanhengyeow"},"content":"            finalPredicate \u003d Stream.of(predicates).reduce(condition -\u003e false, Predicate::or);"},{"lineNumber":160,"author":{"gitID":"tanhengyeow"},"content":"        } else {"},{"lineNumber":161,"author":{"gitID":"tanhengyeow"},"content":"            finalPredicate \u003d Stream.of(predicates).reduce(condition -\u003e true, Predicate::and);"},{"lineNumber":162,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":164,"author":{"gitID":"tanhengyeow"},"content":"        return finalPredicate;"},{"lineNumber":165,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":1,"-":18,"tanhengyeow":147}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":18,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"    //compulsory fields"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"    private String expectedGraduationYear;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"    private String major;"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"    //optional fields"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"    @XmlElement(nillable \u003d true)"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"    private String resume;"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"    @XmlElement(nillable \u003d true)"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":"    private String interviewDate;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    @XmlElement"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"    private String technicalSkillsScore;"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"    @XmlElement"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"    private String communicationSkillsScore;"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"    @XmlElement"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"    private String problemSolvingSkillsScore;"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"    @XmlElement"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":"    private String experienceScore;"},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String expectedGraduationYear,"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":"                            String major, String technicalSkillsScore, String communicationSkillsScore,"},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"                            String problemSolvingSkillsScore, String experienceScore,"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":"                            String resume, String interviewDate, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":82,"author":{"gitID":"tanhengyeow"},"content":"        this.major \u003d major;"},{"lineNumber":83,"author":{"gitID":"kexiaowen"},"content":"        this.technicalSkillsScore \u003d technicalSkillsScore;"},{"lineNumber":84,"author":{"gitID":"kexiaowen"},"content":"        this.communicationSkillsScore \u003d communicationSkillsScore;"},{"lineNumber":85,"author":{"gitID":"kexiaowen"},"content":"        this.problemSolvingSkillsScore \u003d problemSolvingSkillsScore;"},{"lineNumber":86,"author":{"gitID":"kexiaowen"},"content":"        this.experienceScore \u003d experienceScore;"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"        this.resume \u003d resume;"},{"lineNumber":88,"author":{"gitID":"Ang-YC"},"content":"        this.interviewDate \u003d interviewDate;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"        expectedGraduationYear \u003d source.getExpectedGraduationYear().value;"},{"lineNumber":105,"author":{"gitID":"tanhengyeow"},"content":"        major \u003d source.getMajor().value;"},{"lineNumber":106,"author":{"gitID":"kexiaowen"},"content":"        technicalSkillsScore \u003d Double.toString(source.getRating().technicalSkillsScore);"},{"lineNumber":107,"author":{"gitID":"kexiaowen"},"content":"        communicationSkillsScore \u003d Double.toString(source.getRating().communicationSkillsScore);"},{"lineNumber":108,"author":{"gitID":"kexiaowen"},"content":"        problemSolvingSkillsScore \u003d Double.toString(source.getRating().problemSolvingSkillsScore);"},{"lineNumber":109,"author":{"gitID":"kexiaowen"},"content":"        experienceScore \u003d Double.toString(source.getRating().experienceScore);"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"        resume \u003d source.getResume().value;"},{"lineNumber":111,"author":{"gitID":"Ang-YC"},"content":"        interviewDate \u003d source.getInterviewDate().toString();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"mhq199657"},"content":"        if (this.expectedGraduationYear \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":163,"author":{"gitID":"mhq199657"},"content":"                    ExpectedGraduationYear.class.getSimpleName()));"},{"lineNumber":164,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"mhq199657"},"content":"        if (!ExpectedGraduationYear.isValidExpectedGraduationYear(this.expectedGraduationYear)) {"},{"lineNumber":166,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(ExpectedGraduationYear.MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"mhq199657"},"content":"        final ExpectedGraduationYear expectedGraduationYear \u003d new ExpectedGraduationYear(this.expectedGraduationYear);"},{"lineNumber":169,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":170,"author":{"gitID":"tanhengyeow"},"content":"        if (this.major \u003d\u003d null) {"},{"lineNumber":171,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":172,"author":{"gitID":"tanhengyeow"},"content":"                    Major.class.getSimpleName()));"},{"lineNumber":173,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"tanhengyeow"},"content":"        if (!Major.isValidMajor(this.major)) {"},{"lineNumber":175,"author":{"gitID":"tanhengyeow"},"content":"            throw new IllegalValueException(Major.MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"tanhengyeow"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"tanhengyeow"},"content":"        final Major major \u003d new Major(this.major);"},{"lineNumber":178,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":179,"author":{"gitID":"kexiaowen"},"content":"        if (technicalSkillsScore \u003d\u003d null || communicationSkillsScore \u003d\u003d null"},{"lineNumber":180,"author":{"gitID":"kexiaowen"},"content":"                || technicalSkillsScore \u003d\u003d null || experienceScore \u003d\u003d null"},{"lineNumber":181,"author":{"gitID":"kexiaowen"},"content":"                || !Rating.isValidOrDefaultScore(Double.valueOf(technicalSkillsScore))"},{"lineNumber":182,"author":{"gitID":"kexiaowen"},"content":"                || !Rating.isValidOrDefaultScore(Double.valueOf(communicationSkillsScore))"},{"lineNumber":183,"author":{"gitID":"kexiaowen"},"content":"                || !Rating.isValidOrDefaultScore(Double.valueOf(problemSolvingSkillsScore))"},{"lineNumber":184,"author":{"gitID":"kexiaowen"},"content":"                || !Rating.isValidOrDefaultScore(Double.valueOf(experienceScore))) {"},{"lineNumber":185,"author":{"gitID":"kexiaowen"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"kexiaowen"},"content":"        final Rating rating \u003d new Rating(Double.valueOf(technicalSkillsScore), Double.valueOf(communicationSkillsScore),"},{"lineNumber":188,"author":{"gitID":"kexiaowen"},"content":"                Double.valueOf(problemSolvingSkillsScore), Double.valueOf(experienceScore));"},{"lineNumber":189,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":190,"author":{"gitID":"mhq199657"},"content":"        if (!isNull(this.resume) \u0026\u0026 !Resume.isValidResume(this.resume)) {"},{"lineNumber":191,"author":{"gitID":"mhq199657"},"content":"            throw new IllegalValueException(Resume.MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"mhq199657"},"content":"        final Resume resume \u003d new Resume(this.resume);"},{"lineNumber":194,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":195,"author":{"gitID":"Ang-YC"},"content":"        InterviewDate interviewDate \u003d new InterviewDate();"},{"lineNumber":196,"author":{"gitID":"Ang-YC"},"content":"        if (!isNull(this.interviewDate)) {"},{"lineNumber":197,"author":{"gitID":"Ang-YC"},"content":"            try {"},{"lineNumber":198,"author":{"gitID":"Ang-YC"},"content":"                interviewDate \u003d new InterviewDate(Long.parseLong(this.interviewDate, 10));"},{"lineNumber":199,"author":{"gitID":"Ang-YC"},"content":"            } catch (NumberFormatException nfe) {"},{"lineNumber":200,"author":{"gitID":"Ang-YC"},"content":"                throw new IllegalValueException(InterviewDate.MESSAGE_INTERVIEW_DATE_XML_ERROR);"},{"lineNumber":201,"author":{"gitID":"Ang-YC"},"content":"            }"},{"lineNumber":202,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":205,"author":{"gitID":"tanhengyeow"},"content":"        return new Person(name, phone, email, address, expectedGraduationYear,"},{"lineNumber":206,"author":{"gitID":"tanhengyeow"},"content":"                major, rating, resume, interviewDate, tags);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":224,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 Objects.equals(expectedGraduationYear, otherPerson.expectedGraduationYear)"},{"lineNumber":225,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 Objects.equals(major, otherPerson.major)"},{"lineNumber":226,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 Objects.equals(interviewDate, otherPerson.interviewDate)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":30,"mhq199657":31,"-":137,"Ang-YC":15,"tanhengyeow":16}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMUNICATION_SKILLS_SCORE;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPERIENCE_SCORE;"},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROBLEM_SOLVING_SKILLS_SCORE;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TECHNICAL_SKILLS_SCORE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":" * Rates a candidate after an interview."},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" :Rates a candidate.\\n\""},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_TECHNICAL_SKILLS_SCORE + \"TECHNICAL SKILLS SCORE \""},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_COMMUNICATION_SKILLS_SCORE + \"COMMUNICATION SKILLS SCORE \""},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_PROBLEM_SOLVING_SKILLS_SCORE + \"PROBLEM SOLVING SKILLS SCORE \""},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_EXPERIENCE_SCORE + \"EXPERIENCE SCORE \\n\""},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":"            + \"EXAMPLE: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_TECHNICAL_SKILLS_SCORE + \"5 \""},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_COMMUNICATION_SKILLS_SCORE + \"4.5 \""},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_PROBLEM_SOLVING_SKILLS_SCORE + \"4 \""},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"            + PREFIX_EXPERIENCE_SCORE + \"3.5\";"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"    public static final String MESSAGE_RATE_PERSON_SUCCESS \u003d \"Rated %1$s: \\n\""},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"            + \"Technical skills: %2$s, Communication skills: %3$s, \""},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"            + \"Problem solving skills: %4$s, Experience: %5$s \\n\""},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"            + \"Overall: %6$s\";"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"    private final Rating rating;"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"    private Person personToRate;"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":"    private Person ratedPerson;"},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":"     * @param index of the person in the filtered person list to rate"},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"     * @param rating given to the student based on technical skills, communication skills,"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"     *               problem solving skills and experience"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":"    public RateCommand(Index index, Rating rating) {"},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(index);"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(rating);"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":"        this.index \u003d index;"},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"        this.rating \u003d rating;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(personToRate);"},{"lineNumber":66,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(ratedPerson);"},{"lineNumber":67,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":68,"author":{"gitID":"kexiaowen"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"kexiaowen"},"content":"            model.updatePerson(personToRate, ratedPerson);"},{"lineNumber":70,"author":{"gitID":"kexiaowen"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":71,"author":{"gitID":"kexiaowen"},"content":"            throw new AssertionError(\"Changing target person\u0027s rating should not result in a duplicate\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"        return new CommandResult(String.format(MESSAGE_RATE_PERSON_SUCCESS, ratedPerson.getName(),"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getTechnicalSkillsScore(),"},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getCommunicationSkillsScore(),"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getProblemSolvingSkillsScore(),"},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getExperienceScore(),"},{"lineNumber":81,"author":{"gitID":"kexiaowen"},"content":"                ratedPerson.getRating().getOverallScore()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"kexiaowen"},"content":"        personToRate \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"        ratedPerson \u003d createRatedPerson(personToRate, rating);"},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":"     * Creates and returns a {@code Person} with the details of {@code rating}"},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":"    private static Person createRatedPerson(Person personToRate, Rating rating) {"},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"        assert personToRate !\u003d null;"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":"        return new Person(personToRate.getName(), personToRate.getPhone(), personToRate.getEmail(),"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"                personToRate.getAddress(), personToRate.getExpectedGraduationYear(), personToRate.getMajor(), rating,"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"                personToRate.getResume(), personToRate.getInterviewDate(), personToRate.getTags());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":"        if (!(other instanceof RateCommand)) {"},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":118,"author":{"gitID":"kexiaowen"},"content":"        // state check"},{"lineNumber":119,"author":{"gitID":"kexiaowen"},"content":"        RateCommand e \u003d (RateCommand) other;"},{"lineNumber":120,"author":{"gitID":"kexiaowen"},"content":"        return index.equals(e.index)"},{"lineNumber":121,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 rating.equals(e.rating);"},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":124,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":84,"-":38,"tanhengyeow":1,"Ang-YC":1}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    private static final String resumePath \u003d \"src/main/resources/resume/\";"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new ExpectedGraduationYear(\"2018\"),"},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":"                new Major(\"Computer Science\"),"},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"                new Rating(4.3, 4.8,"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"                            4.0, 4.1),"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"                new Resume(formPathFromFileName(\"alex.pdf\")), new InterviewDate(1540814400L), getTagSet(\"friends\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new ExpectedGraduationYear(\"2019\"),"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":"                    new Major(\"Computer Science\"),"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"                new Rating(-1, -1,"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"                        -1, -1),"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"                new Resume(null), new InterviewDate(), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new ExpectedGraduationYear(\"2020\"),"},{"lineNumber":45,"author":{"gitID":"tanhengyeow"},"content":"                    new Major(\"Computer Science\"),"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"                new Rating(4.5, 3,"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"                        4.5, 2.5),"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"                new Resume(formPathFromFileName(\"char.pdf\")), new InterviewDate(), getTagSet(\"neighbours\")),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new ExpectedGraduationYear(\"2020\"),"},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"                    new Major(\"Computer Science\"),"},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"                new Rating(-1, -1,"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"                        -1, -1),"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":"                new Resume(null), new InterviewDate(), getTagSet(\"family\")),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ExpectedGraduationYear(\"2021\"),"},{"lineNumber":57,"author":{"gitID":"tanhengyeow"},"content":"                    new Major(\"Computer Science\"),"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"                new Rating(3, 5, 3.5, 3),"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"                new Resume(null), new InterviewDate(), getTagSet(\"classmates\")),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new ExpectedGraduationYear(\"2019\"),"},{"lineNumber":62,"author":{"gitID":"tanhengyeow"},"content":"                    new Major(\"Computer Science\"),"},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":"                new Rating(-1, -1,"},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"                        -1, -1),"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"                new Resume(null), new InterviewDate(), getTagSet(\"colleagues\"))"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"     * Forms the resume path from resume file name"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"    private static String formPathFromFileName(String fileName) {"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"        if (isNull(fileName)) {"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"            return null;"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"        return resumePath + fileName;"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":12,"mhq199657":20,"-":55,"Ang-YC":8,"tanhengyeow":7}},{"path":"src/main/java/seedu/address/logic/commands/DeleteRatingCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.ExpectedGraduationYear;"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Major;"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"import seedu.address.model.person.Resume;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":" * Deletes the rating of a person identified using it\u0027s last displayed index from HR+."},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":" */"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"public class DeleteRatingCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"    public static final String COMMAND_WORD \u003d \"deleteRating\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"            + \": Deletes the rating of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"    public static final String MESSAGE_DELETE_RATING_SUCCESS \u003d \"Deleted rating of person named %1$s\";"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"    public static final String MESSAGE_PERSON_NOT_RATED \u003d \"You have not rated %1$s.\";"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"    private final Index targetIndex;"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"    private Person targetPerson;"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"    private Person editedPerson;"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"    public DeleteRatingCommand(Index targetIndex) {"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(targetPerson);"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"            model.updatePerson(targetPerson, editedPerson);"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":"            throw new AssertionError(\"Deleting a person\u0027s rating should not result in a duplicate\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RATING_SUCCESS, targetPerson.getName()));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"        targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":"        if (targetPerson.getRating().getOverallScore() \u003d\u003d Rating.DEFAULT_SCORE) {"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":"            throw new CommandException(String.format(MESSAGE_PERSON_NOT_RATED, targetPerson.getName()));"},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":82,"author":{"gitID":"kexiaowen"},"content":"        editedPerson \u003d createEditedPerson(targetPerson);"},{"lineNumber":83,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":85,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"kexiaowen"},"content":"     * Creates and returns a {@code Person} with the details of {@code targetPerson}"},{"lineNumber":87,"author":{"gitID":"kexiaowen"},"content":"     * with rating deleted."},{"lineNumber":88,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"kexiaowen"},"content":"    private static Person createEditedPerson(Person targetPerson) {"},{"lineNumber":90,"author":{"gitID":"kexiaowen"},"content":"        assert targetPerson !\u003d null;"},{"lineNumber":91,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"        Name name \u003d targetPerson.getName();"},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"        Phone phone \u003d targetPerson.getPhone();"},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":"        Email email \u003d targetPerson.getEmail();"},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"        Address address \u003d targetPerson.getAddress();"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":"        ExpectedGraduationYear expectedGraduationYear \u003d targetPerson.getExpectedGraduationYear();"},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"        Major major \u003d targetPerson.getMajor();"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":"        Rating defaultRating \u003d new Rating(Rating.DEFAULT_SCORE, Rating.DEFAULT_SCORE,"},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"                Rating.DEFAULT_SCORE, Rating.DEFAULT_SCORE);"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"        Resume resume \u003d targetPerson.getResume();"},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":"        InterviewDate interviewDate \u003d targetPerson.getInterviewDate();"},{"lineNumber":102,"author":{"gitID":"kexiaowen"},"content":"        Set\u003cTag\u003e tags \u003d targetPerson.getTags();"},{"lineNumber":103,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":104,"author":{"gitID":"kexiaowen"},"content":"        return new Person(name, phone, email, address,"},{"lineNumber":105,"author":{"gitID":"kexiaowen"},"content":"                expectedGraduationYear, major, defaultRating, resume, interviewDate, tags);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"kexiaowen"},"content":"                || (other instanceof DeleteRatingCommand // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteRatingCommand) other).targetIndex) // state check"},{"lineNumber":113,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 Objects.equals(this.targetPerson, ((DeleteRatingCommand) other).targetPerson));"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":68,"mhq199657":3,"-":43,"Ang-YC":1}},{"path":"src/main/java/seedu/address/logic/commands/InterviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"import seedu.address.model.person.InterviewDate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":" * Schedule interview of an existing person in the address book."},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"public class InterviewCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"    public static final String COMMAND_WORD \u003d \"interview\";"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedule interview for the person \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"            + \"Existing scheduled date will be overwritten by the input value.\\n\""},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"            + \"DATETIME (parse by natural language)\\n\""},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 next Friday at 3pm\";"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    public static final String MESSAGE_INTERVIEW_PERSON_SUCCESS \u003d"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":"            \"Interview of person named %1$s has been scheduled on %2$s\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"    private Person personToInterview;"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"    private Person scheduledPerson;"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"     * @param index of the person in the filtered person list to schedule interview"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"     * @param dateTime of the interview"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":"    public InterviewCommand(Index index, LocalDateTime dateTime) {"},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"        requireNonNull(index);"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        requireNonNull(dateTime);"},{"lineNumber":50,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":51,"author":{"gitID":"Ang-YC"},"content":"        this.index    \u003d index;"},{"lineNumber":52,"author":{"gitID":"Ang-YC"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":53,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":55,"author":{"gitID":"Ang-YC"},"content":"    public Index getIndex() {"},{"lineNumber":56,"author":{"gitID":"Ang-YC"},"content":"        return index;"},{"lineNumber":57,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"        return dateTime;"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"    public Person getPersonToInterview() {"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"        return personToInterview;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":"            model.updatePerson(personToInterview, scheduledPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":77,"author":{"gitID":"Ang-YC"},"content":"        return new CommandResult(String.format(MESSAGE_INTERVIEW_PERSON_SUCCESS,"},{"lineNumber":78,"author":{"gitID":"Ang-YC"},"content":"                scheduledPerson.getName(), dateTime.toString()));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Ang-YC"},"content":"        personToInterview \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"Ang-YC"},"content":"        scheduledPerson \u003d createScheduledPerson(personToInterview, dateTime);"},{"lineNumber":91,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":93,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Ang-YC"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToInterview}"},{"lineNumber":95,"author":{"gitID":"Ang-YC"},"content":"     * with updated with {@code dateTime}."},{"lineNumber":96,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Ang-YC"},"content":"    private static Person createScheduledPerson(Person personToInterview, LocalDateTime dateTime) {"},{"lineNumber":98,"author":{"gitID":"Ang-YC"},"content":"        requireAllNonNull(personToInterview, dateTime);"},{"lineNumber":99,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":100,"author":{"gitID":"Ang-YC"},"content":"        return new Person(personToInterview.getName(), personToInterview.getPhone(), personToInterview.getEmail(),"},{"lineNumber":101,"author":{"gitID":"Ang-YC"},"content":"                personToInterview.getAddress(), personToInterview.getExpectedGraduationYear(),"},{"lineNumber":102,"author":{"gitID":"tanhengyeow"},"content":"                personToInterview.getMajor(),"},{"lineNumber":103,"author":{"gitID":"Ang-YC"},"content":"                personToInterview.getRating(), personToInterview.getResume(), new InterviewDate(dateTime),"},{"lineNumber":104,"author":{"gitID":"Ang-YC"},"content":"                personToInterview.getTags());"},{"lineNumber":105,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":107,"author":{"gitID":"Ang-YC"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"Ang-YC"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"Ang-YC"},"content":"        // Short circuit if same object"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"Ang-YC"},"content":"        if (!(other instanceof InterviewCommand)) {"},{"lineNumber":116,"author":{"gitID":"Ang-YC"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":119,"author":{"gitID":"Ang-YC"},"content":"        // State check"},{"lineNumber":120,"author":{"gitID":"Ang-YC"},"content":"        InterviewCommand i \u003d (InterviewCommand) other;"},{"lineNumber":121,"author":{"gitID":"Ang-YC"},"content":"        return getIndex().equals(i.getIndex())"},{"lineNumber":122,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 getDateTime().equals(i.getDateTime())"},{"lineNumber":123,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 Objects.equals(getPersonToInterview(), i.getPersonToInterview());"},{"lineNumber":124,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":41,"Ang-YC":83,"tanhengyeow":1}},{"path":"src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" * Tests that a {@code Person}\u0027s {@code Address} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":19,"tanhengyeow":12}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    private final ExpectedGraduationYear expectedGraduationYear;"},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"    private final Major major;"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"    private final Rating rating;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"    private final Resume resume;"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":"    private final InterviewDate interviewDate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    public Person(Name name, Phone phone, Email email, Address address, ExpectedGraduationYear expectedGraduationYear,"},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"                  Major major, Rating rating, Resume resume, InterviewDate interviewDate, Set\u003cTag\u003e tags) {"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"        requireAllNonNull(name, phone, email, address, expectedGraduationYear,"},{"lineNumber":36,"author":{"gitID":"tanhengyeow"},"content":"                major, rating, resume, interviewDate, tags);"},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        this.expectedGraduationYear \u003d expectedGraduationYear;"},{"lineNumber":43,"author":{"gitID":"tanhengyeow"},"content":"        this.major \u003d major;"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"        this.rating \u003d rating;"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        this.resume \u003d resume;"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"        this.interviewDate \u003d interviewDate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYear getExpectedGraduationYear() {"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"        return expectedGraduationYear;"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":71,"author":{"gitID":"tanhengyeow"},"content":"    public Major getMajor() {"},{"lineNumber":72,"author":{"gitID":"tanhengyeow"},"content":"        return major;"},{"lineNumber":73,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"    public Rating getRating() {"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"        return rating;"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"    public Resume getResume() {"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"        return resume;"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":83,"author":{"gitID":"Ang-YC"},"content":"    public InterviewDate getInterviewDate() {"},{"lineNumber":84,"author":{"gitID":"Ang-YC"},"content":"        return interviewDate;"},{"lineNumber":85,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"        //resume does not constitute the equality condition"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":110,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 otherPerson.getExpectedGraduationYear().equals(this.getExpectedGraduationYear())"},{"lineNumber":111,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 otherPerson.getMajor().equals(this.getMajor())"},{"lineNumber":112,"author":{"gitID":"Ang-YC"},"content":"                \u0026\u0026 otherPerson.getInterviewDate().equals(this.getInterviewDate());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":118,"author":{"gitID":"tanhengyeow"},"content":"        return Objects.hash(name, phone, email, address, expectedGraduationYear,"},{"lineNumber":119,"author":{"gitID":"tanhengyeow"},"content":"                major, rating, resume, interviewDate, tags);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":132,"author":{"gitID":"Ang-YC"},"content":"                .append(\" Expected graduation year: \")"},{"lineNumber":133,"author":{"gitID":"mhq199657"},"content":"                .append(getExpectedGraduationYear())"},{"lineNumber":134,"author":{"gitID":"tanhengyeow"},"content":"                .append(\" Major: \")"},{"lineNumber":135,"author":{"gitID":"tanhengyeow"},"content":"                .append(getMajor())"},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"                .append(\" Resume: \")"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"                .append(getResume())"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":6,"mhq199657":17,"-":95,"tanhengyeow":14,"Ang-YC":11}},{"path":"src/main/java/seedu/address/model/person/InterviewDate.java","lines":[{"lineNumber":1,"author":{"gitID":"Ang-YC"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":3,"author":{"gitID":"Ang-YC"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitID":"Ang-YC"},"content":"import java.time.ZoneOffset;"},{"lineNumber":6,"author":{"gitID":"Ang-YC"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":8,"author":{"gitID":"Ang-YC"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Ang-YC"},"content":" * Represents a Person\u0027s interview date in the address book."},{"lineNumber":10,"author":{"gitID":"Ang-YC"},"content":" * Guarantees: immutable"},{"lineNumber":11,"author":{"gitID":"Ang-YC"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Ang-YC"},"content":"public class InterviewDate {"},{"lineNumber":13,"author":{"gitID":"Ang-YC"},"content":"    public static final String MESSAGE_INTERVIEW_DATE_XML_ERROR \u003d"},{"lineNumber":14,"author":{"gitID":"Ang-YC"},"content":"            \"Interview date must be in epoch format, failed to parse from XML\";"},{"lineNumber":15,"author":{"gitID":"Ang-YC"},"content":"    public static final ZoneOffset LOCAL_ZONE_OFFSET \u003d ZoneId.systemDefault().getRules().getOffset(LocalDateTime.now());"},{"lineNumber":16,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"    public final LocalDateTime dateTime;"},{"lineNumber":18,"author":{"gitID":"Ang-YC"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":20,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Ang-YC"},"content":"     * Constructs a {@code InterviewDate}."},{"lineNumber":22,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Ang-YC"},"content":"    public InterviewDate() {"},{"lineNumber":24,"author":{"gitID":"Ang-YC"},"content":"        this((LocalDateTime) null);"},{"lineNumber":25,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":27,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Ang-YC"},"content":"     * Constructs a {@code InterviewDate}."},{"lineNumber":29,"author":{"gitID":"Ang-YC"},"content":"     * @param timestamp A epoch timestamp"},{"lineNumber":30,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Ang-YC"},"content":"    public InterviewDate(Long timestamp) {"},{"lineNumber":32,"author":{"gitID":"Ang-YC"},"content":"        this(LocalDateTime.ofEpochSecond(timestamp, 0, ZoneOffset.UTC));"},{"lineNumber":33,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":35,"author":{"gitID":"Ang-YC"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Ang-YC"},"content":"     * Constructs a {@code InterviewDate}."},{"lineNumber":37,"author":{"gitID":"Ang-YC"},"content":"     * @param dateTime of the person"},{"lineNumber":38,"author":{"gitID":"Ang-YC"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Ang-YC"},"content":"    public InterviewDate(LocalDateTime dateTime) {"},{"lineNumber":40,"author":{"gitID":"Ang-YC"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":41,"author":{"gitID":"Ang-YC"},"content":"        if (dateTime !\u003d null) {"},{"lineNumber":42,"author":{"gitID":"Ang-YC"},"content":"            this.value \u003d String.valueOf(dateTime.toEpochSecond(ZoneOffset.UTC));"},{"lineNumber":43,"author":{"gitID":"Ang-YC"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"Ang-YC"},"content":"            this.value \u003d null;"},{"lineNumber":45,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":48,"author":{"gitID":"Ang-YC"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":49,"author":{"gitID":"Ang-YC"},"content":"        return dateTime;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"Ang-YC"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"Ang-YC"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":63,"author":{"gitID":"Ang-YC"},"content":"        if (!(other instanceof InterviewDate)) {"},{"lineNumber":64,"author":{"gitID":"Ang-YC"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"Ang-YC"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":67,"author":{"gitID":"Ang-YC"},"content":"        InterviewDate i \u003d (InterviewDate) other;"},{"lineNumber":68,"author":{"gitID":"Ang-YC"},"content":"        return Objects.equals(getDateTime(), i.getDateTime());"},{"lineNumber":69,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Ang-YC"},"content":""},{"lineNumber":71,"author":{"gitID":"Ang-YC"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Ang-YC"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"Ang-YC"},"content":"        return getDateTime().hashCode();"},{"lineNumber":74,"author":{"gitID":"Ang-YC"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Ang-YC"},"content":"}"}],"authorContributionMap":{"-":9,"Ang-YC":66}},{"path":"src/main/java/seedu/address/model/person/ExpectedGraduationYearContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" * Tests that a {@code Person}\u0027s {@code ExpectedGraduationYear} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"public class ExpectedGraduationYearContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public ExpectedGraduationYearContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":"                        (person.getExpectedGraduationYear().value, keyword));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof ExpectedGraduationYearContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.keywords.equals((("},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"                        ExpectedGraduationYearContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":19,"tanhengyeow":14}},{"path":"src/main/java/seedu/address/model/person/ExpectedGraduationYear.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":" * Represents a Person\u0027s expectedGraduationYear in the address book."},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidExpectedGraduationYear(String)}"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYear {"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"    public static final String MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"            \"Expected graduation year can only contain numbers, and should be between 2017 to 2025.\";"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"    private static final String EXPECTED_GRADUATION_YEAR_VALIDATION_REGEX \u003d \"\\\\d{4}\";"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    private static final int YEAR_LOWER_BOUND \u003d 2017;"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"    private static final int YEAR_UPPER_BOUND \u003d 2025;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"     * Constructs a {@code expectedGraduationYear}."},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"     * @param expectedGraduationYear A valid expectedGraduationYear."},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYear(String expectedGraduationYear) {"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(expectedGraduationYear);"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"        checkArgument(isValidExpectedGraduationYear(expectedGraduationYear),"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"                MESSAGE_EXPECTED_GRADUATION_YEAR_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"        this.value \u003d expectedGraduationYear;"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"     * Returns true if a given string is a valid expectedGraduationYear."},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"    public static boolean isValidExpectedGraduationYear(String test) {"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"        return test.matches(EXPECTED_GRADUATION_YEAR_VALIDATION_REGEX) \u0026\u0026 isInValidRange(test);"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"     * @param test An expected graduation year matching regex"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"     * @return whether the graduation year is in valid range"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"    private static boolean isInValidRange(String test) {"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        int year \u003d Integer.parseInt(test);"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"        return year \u003e\u003d YEAR_LOWER_BOUND \u0026\u0026 year \u003c\u003d YEAR_UPPER_BOUND;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof ExpectedGraduationYear // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.value.equals(((ExpectedGraduationYear) other).value)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":42,"-":20}},{"path":"src/main/java/seedu/address/model/person/ExpectedGraduationYearInKeywordsRangePredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":5,"author":{"gitID":"mhq199657"},"content":"import seedu.address.logic.parser.FilterRange;"},{"lineNumber":6,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":7,"author":{"gitID":"mhq199657"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"mhq199657"},"content":" * A Predicate testing whether  a person has his/her expected graduation year in the keywords range"},{"lineNumber":9,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":10,"author":{"gitID":"mhq199657"},"content":"public class ExpectedGraduationYearInKeywordsRangePredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"mhq199657"},"content":"    private final String low;"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":"    private final String high;"},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYearInKeywordsRangePredicate(ExpectedGraduationYear low, ExpectedGraduationYear high) {"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":"        this.low \u003d low.value;"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"        this.high \u003d high.value;"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"    public ExpectedGraduationYearInKeywordsRangePredicate(FilterRange\u003cExpectedGraduationYear\u003e filterRange) {"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"        if (filterRange.isRange()) {"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"            this.low \u003d filterRange.getLowValue().value;"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"            this.high \u003d filterRange.getHighValue().value;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"            this.low \u003d filterRange.getExactValue().value;"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"            this.high \u003d filterRange.getExactValue().value;"},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"    public boolean test(Person person) {"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"        return person.getExpectedGraduationYear().value.compareTo(high) \u003c\u003d 0"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 person.getExpectedGraduationYear().value.compareTo(low) \u003e\u003d 0;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof ExpectedGraduationYearInKeywordsRangePredicate // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.low.equals(((ExpectedGraduationYearInKeywordsRangePredicate) other).low)"},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 this.high.equals(((ExpectedGraduationYearInKeywordsRangePredicate) other).high)); // state check"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"}"}],"authorContributionMap":{"mhq199657":36,"-":5}},{"path":"src/main/java/seedu/address/model/person/Resume.java","lines":[{"lineNumber":1,"author":{"gitID":"mhq199657"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"mhq199657"},"content":" * Represents a Person\u0027s resume\u0027s file name in the address book."},{"lineNumber":13,"author":{"gitID":"mhq199657"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidResume(String)}"},{"lineNumber":14,"author":{"gitID":"mhq199657"},"content":" */"},{"lineNumber":15,"author":{"gitID":"mhq199657"},"content":"public class Resume {"},{"lineNumber":16,"author":{"gitID":"mhq199657"},"content":"    public static final String MESSAGE_RESUME_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"mhq199657"},"content":"            \"Resume file should be at least 1 character long, exist in the same directory as the jar programme, \""},{"lineNumber":18,"author":{"gitID":"mhq199657"},"content":"                    + \"smaller than 1MB and should be a valid PDF.\";"},{"lineNumber":19,"author":{"gitID":"mhq199657"},"content":"    private static final int ONEMEGABYTE \u003d 1 * 1024 * 1024;"},{"lineNumber":20,"author":{"gitID":"mhq199657"},"content":"    private static final String RESUME_VALIDATION_REGEX \u003d \".*\\\\S.*\";"},{"lineNumber":21,"author":{"gitID":"mhq199657"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":23,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"mhq199657"},"content":"     * Constructs a {@code Resume}."},{"lineNumber":25,"author":{"gitID":"mhq199657"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"mhq199657"},"content":"     * @param fileName A valid fileName."},{"lineNumber":27,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"mhq199657"},"content":"    public Resume(String fileName) {"},{"lineNumber":29,"author":{"gitID":"mhq199657"},"content":"        if (isNull(fileName)) {"},{"lineNumber":30,"author":{"gitID":"mhq199657"},"content":"            this.value \u003d null;"},{"lineNumber":31,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"mhq199657"},"content":"            checkArgument(isValidResume(fileName), MESSAGE_RESUME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"mhq199657"},"content":"            this.value \u003d fileName;"},{"lineNumber":34,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":37,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"mhq199657"},"content":"     * Returns true if a given string is a valid person resume."},{"lineNumber":39,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"mhq199657"},"content":"    public static boolean isValidResume(String test) {"},{"lineNumber":41,"author":{"gitID":"mhq199657"},"content":"        requireNonNull(test);"},{"lineNumber":42,"author":{"gitID":"mhq199657"},"content":"        if (!test.matches(RESUME_VALIDATION_REGEX)) {"},{"lineNumber":43,"author":{"gitID":"mhq199657"},"content":"            return false;"},{"lineNumber":44,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"mhq199657"},"content":"        String userDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":46,"author":{"gitID":"mhq199657"},"content":"        File resumeFile \u003d new File(userDir + File.separator + test);"},{"lineNumber":47,"author":{"gitID":"mhq199657"},"content":"        if (resumeFile.isDirectory()) {"},{"lineNumber":48,"author":{"gitID":"mhq199657"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"mhq199657"},"content":"        } else if (!resumeFile.exists()) {"},{"lineNumber":50,"author":{"gitID":"mhq199657"},"content":"            return false;"},{"lineNumber":51,"author":{"gitID":"mhq199657"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"mhq199657"},"content":"            if (resumeFile.length() \u003e ONEMEGABYTE) {"},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"                return false;"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":"            } else {"},{"lineNumber":55,"author":{"gitID":"mhq199657"},"content":"                try {"},{"lineNumber":56,"author":{"gitID":"mhq199657"},"content":"                    byte[] resumeBytes \u003d Files.readAllBytes(resumeFile.toPath());"},{"lineNumber":57,"author":{"gitID":"mhq199657"},"content":"                    return isPdf(resumeBytes);"},{"lineNumber":58,"author":{"gitID":"mhq199657"},"content":"                } catch (IOException ioe) {"},{"lineNumber":59,"author":{"gitID":"mhq199657"},"content":"                    return false;"},{"lineNumber":60,"author":{"gitID":"mhq199657"},"content":"                }"},{"lineNumber":61,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"mhq199657"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"mhq199657"},"content":"     * Returns true if a given byte array is of pdf type."},{"lineNumber":66,"author":{"gitID":"mhq199657"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"mhq199657"},"content":"    private static boolean isPdf(byte[] data) {"},{"lineNumber":68,"author":{"gitID":"mhq199657"},"content":"        if (data !\u003d null \u0026\u0026 data.length \u003e 4"},{"lineNumber":69,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 data[0] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":70,"author":{"gitID":"mhq199657"},"content":"                data[1] \u003d\u003d 0x50 \u0026\u0026 // P"},{"lineNumber":71,"author":{"gitID":"mhq199657"},"content":"                data[2] \u003d\u003d 0x44 \u0026\u0026 // D"},{"lineNumber":72,"author":{"gitID":"mhq199657"},"content":"                data[3] \u003d\u003d 0x46 \u0026\u0026 // F"},{"lineNumber":73,"author":{"gitID":"mhq199657"},"content":"                data[4] \u003d\u003d 0x2D) { // -"},{"lineNumber":74,"author":{"gitID":"mhq199657"},"content":"            // version 1.3 file terminator"},{"lineNumber":75,"author":{"gitID":"mhq199657"},"content":"            if (data[5] \u003d\u003d 0x31 \u0026\u0026 data[6] \u003d\u003d 0x2E \u0026\u0026 data[7] \u003d\u003d 0x33"},{"lineNumber":76,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 data[data.length - 7] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":77,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 6] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":78,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 5] \u003d\u003d 0x45 \u0026\u0026 // E"},{"lineNumber":79,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 4] \u003d\u003d 0x4F \u0026\u0026 // O"},{"lineNumber":80,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 3] \u003d\u003d 0x46 \u0026\u0026 // F"},{"lineNumber":81,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 2] \u003d\u003d 0x20 \u0026\u0026 (// SPACE"},{"lineNumber":82,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 1] \u003d\u003d 0x0A || data[data.length - 1] \u003d\u003d 0x0D)) { // EOL or CR"},{"lineNumber":83,"author":{"gitID":"mhq199657"},"content":"                return true;"},{"lineNumber":84,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"mhq199657"},"content":"            // version 1.3 file terminator"},{"lineNumber":86,"author":{"gitID":"mhq199657"},"content":"            if (data[5] \u003d\u003d 0x31 \u0026\u0026 data[6] \u003d\u003d 0x2E \u0026\u0026 data[7] \u003d\u003d 0x33"},{"lineNumber":87,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 data[data.length - 6] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":88,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 5] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":89,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 4] \u003d\u003d 0x45 \u0026\u0026 // E"},{"lineNumber":90,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 3] \u003d\u003d 0x4F \u0026\u0026 // O"},{"lineNumber":91,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 2] \u003d\u003d 0x46 \u0026\u0026 (// F"},{"lineNumber":92,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 1] \u003d\u003d 0x0A || data[data.length - 1] \u003d\u003d 0x0D)) { // EOL"},{"lineNumber":93,"author":{"gitID":"mhq199657"},"content":"                return true;"},{"lineNumber":94,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"mhq199657"},"content":"            // version 1.4 file terminator"},{"lineNumber":96,"author":{"gitID":"mhq199657"},"content":"            if (data[5] \u003d\u003d 0x31 \u0026\u0026 data[6] \u003d\u003d 0x2E \u0026\u0026 data[7] \u003d\u003d 0x34"},{"lineNumber":97,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 data[data.length - 6] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":98,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 5] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":99,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 4] \u003d\u003d 0x45 \u0026\u0026 // E"},{"lineNumber":100,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 3] \u003d\u003d 0x4F \u0026\u0026 // O"},{"lineNumber":101,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 2] \u003d\u003d 0x46 \u0026\u0026 (// F"},{"lineNumber":102,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 1] \u003d\u003d 0x0A || data[data.length - 1] \u003d\u003d 0x0D)) { // EOL"},{"lineNumber":103,"author":{"gitID":"mhq199657"},"content":"                return true;"},{"lineNumber":104,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"mhq199657"},"content":"            // version 1.5 file terminator"},{"lineNumber":106,"author":{"gitID":"mhq199657"},"content":"            if (data[5] \u003d\u003d 0x31 \u0026\u0026 data[6] \u003d\u003d 0x2E \u0026\u0026 data[7] \u003d\u003d 0x35"},{"lineNumber":107,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 data[data.length - 6] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":108,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 5] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":109,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 4] \u003d\u003d 0x45 \u0026\u0026 // E"},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 3] \u003d\u003d 0x4F \u0026\u0026 // O"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 2] \u003d\u003d 0x46 \u0026\u0026 (// F"},{"lineNumber":112,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 1] \u003d\u003d 0x0A || data[data.length - 1] \u003d\u003d 0x0D)) { // EOL"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"                return true;"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"            if (data[5] \u003d\u003d 0x31 \u0026\u0026 data[6] \u003d\u003d 0x2E \u0026\u0026 data[7] \u003d\u003d 0x35"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":"                    \u0026\u0026 data[data.length - 5] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":117,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 4] \u003d\u003d 0x25 \u0026\u0026 // %"},{"lineNumber":118,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 3] \u003d\u003d 0x45 \u0026\u0026 // E"},{"lineNumber":119,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 2] \u003d\u003d 0x4F \u0026\u0026 // O"},{"lineNumber":120,"author":{"gitID":"mhq199657"},"content":"                    data[data.length - 1] \u003d\u003d 0x46) { // F"},{"lineNumber":121,"author":{"gitID":"mhq199657"},"content":"                return true;"},{"lineNumber":122,"author":{"gitID":"mhq199657"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"mhq199657"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"mhq199657"},"content":"        return false;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"mhq199657"},"content":"                || (other instanceof Resume // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"                \u0026\u0026 ((isNull(this.value) \u0026\u0026 isNull(((Resume) other).value)) //both value are null"},{"lineNumber":137,"author":{"gitID":"mhq199657"},"content":"                    || this.value.equals(((Resume) other).value))); // state check"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":119,"-":26}},{"path":"src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":19,"tanhengyeow":12}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"Ang-YC"},"content":"        this.setGuiSettings(800, 600, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":77,"Ang-YC":1}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":94,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":136,"author":{"gitID":"mhq199657"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":137,"author":{"gitID":"tanhengyeow"},"content":"                person.getExpectedGraduationYear(), person.getMajor(), person.getRating(), person.getResume(),"},{"lineNumber":138,"author":{"gitID":"Ang-YC"},"content":"                person.getInterviewDate(), correctTagReferences);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from this {@code AddressBook}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @throws TagNotFoundException if the {@code tag} is not in this {@code AddressBook}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void removeTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (tags.contains(tag)) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            for (Person person: persons) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                removeTagFromEachPerson(person, tag);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            removeUnusedTags();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new TagNotFoundException();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from this {@code person} if the person has that tag."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void removeTagFromEachPerson(Person person, Tag tag) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e editedTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (editedTags.remove(tag)) {"},{"lineNumber":180,"author":{"gitID":"kexiaowen"},"content":"            Person editedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":181,"author":{"gitID":"kexiaowen"},"content":"                    person.getEmail(), person.getAddress(), person.getExpectedGraduationYear(),"},{"lineNumber":182,"author":{"gitID":"tanhengyeow"},"content":"                    person.getMajor(), person.getRating(), person.getResume(), person.getInterviewDate(), editedTags);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                updatePerson(person, editedPerson);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Deleting a tag should not result in duplicate persons.\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"The target person cannot be missing.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Removes unreferenced tags from {@code tags}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void removeUnusedTags() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e referencedTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        for (Person person: persons) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            person.getTags().forEach(tag -\u003e referencedTags.add(tag));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        tags.setTags(referencedTags);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kexiaowen":2,"mhq199657":1,"-":229,"tanhengyeow":2,"Ang-YC":1}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":19,"tanhengyeow":12}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"mhq199657"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"mhq199657"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"mhq199657"},"content":"    public void filterFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":113,"author":{"gitID":"mhq199657"},"content":"        Predicate\u003c? super Person\u003e currPredicate \u003d filteredPersons.getPredicate();"},{"lineNumber":114,"author":{"gitID":"mhq199657"},"content":"        filteredPersons.setPredicate(isNull(currPredicate) ? predicate : predicate.and(currPredicate));"},{"lineNumber":115,"author":{"gitID":"mhq199657"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":7,"-":128}},{"path":"src/main/java/seedu/address/model/person/MajorContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" * Tests that a {@code Person}\u0027s {@code Major} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":"public class MajorContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":14,"author":{"gitID":"tanhengyeow"},"content":"    public MajorContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getMajor().value, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof MajorContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.keywords.equals(((MajorContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"}"}],"authorContributionMap":{"-":19,"tanhengyeow":12}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Deletes the given tag. */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"mhq199657"},"content":"    void filterFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":54,"author":{"gitID":"mhq199657"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mhq199657":2,"-":53}},{"path":"src/main/java/seedu/address/model/person/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"kexiaowen"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":3,"author":{"gitID":"kexiaowen"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kexiaowen"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":8,"author":{"gitID":"kexiaowen"},"content":"import seedu.address.commons.util.DoubleUtil;"},{"lineNumber":9,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":10,"author":{"gitID":"kexiaowen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"kexiaowen"},"content":" * Represents a candidate\u0027s rating after an interview."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kexiaowen"},"content":"public class Rating {"},{"lineNumber":15,"author":{"gitID":"kexiaowen"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"kexiaowen"},"content":"            \"The scores should be numbers between 1 to 5.\";"},{"lineNumber":17,"author":{"gitID":"kexiaowen"},"content":"    public static final double DEFAULT_SCORE \u003d -1;"},{"lineNumber":18,"author":{"gitID":"kexiaowen"},"content":"    public static final double MAXIMUM_SCORE \u003d 5;"},{"lineNumber":19,"author":{"gitID":"kexiaowen"},"content":"    public static final double MINIMUM_SCORE \u003d 1;"},{"lineNumber":20,"author":{"gitID":"kexiaowen"},"content":"    private static final double NUMBER_OF_SCORES \u003d 4.0;"},{"lineNumber":21,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":22,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":23,"author":{"gitID":"kexiaowen"},"content":"    public final double technicalSkillsScore;"},{"lineNumber":24,"author":{"gitID":"kexiaowen"},"content":"    public final double communicationSkillsScore;"},{"lineNumber":25,"author":{"gitID":"kexiaowen"},"content":"    public final double problemSolvingSkillsScore;"},{"lineNumber":26,"author":{"gitID":"kexiaowen"},"content":"    public final double experienceScore;"},{"lineNumber":27,"author":{"gitID":"kexiaowen"},"content":"    public final double overallScore;"},{"lineNumber":28,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":29,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kexiaowen"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":31,"author":{"gitID":"kexiaowen"},"content":"     * @param technicalSkillsScore A valid technical skills score."},{"lineNumber":32,"author":{"gitID":"kexiaowen"},"content":"     * @param communicationSkillsScore A valid communications skills score."},{"lineNumber":33,"author":{"gitID":"kexiaowen"},"content":"     * @param problemSolvingSkillsScore A valid problem solving skills score."},{"lineNumber":34,"author":{"gitID":"kexiaowen"},"content":"     * @param experienceScore A valid experience score."},{"lineNumber":35,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"kexiaowen"},"content":"    public Rating(double technicalSkillsScore, double communicationSkillsScore, double problemSolvingSkillsScore,"},{"lineNumber":37,"author":{"gitID":"kexiaowen"},"content":"                  double experienceScore) {"},{"lineNumber":38,"author":{"gitID":"kexiaowen"},"content":"        requireAllNonNull(technicalSkillsScore, communicationSkillsScore, problemSolvingSkillsScore,"},{"lineNumber":39,"author":{"gitID":"kexiaowen"},"content":"                experienceScore);"},{"lineNumber":40,"author":{"gitID":"kexiaowen"},"content":"        checkArgument(isValidOrDefaultScore(technicalSkillsScore), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"kexiaowen"},"content":"        checkArgument(isValidOrDefaultScore(communicationSkillsScore), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"kexiaowen"},"content":"        checkArgument(isValidOrDefaultScore(problemSolvingSkillsScore), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"kexiaowen"},"content":"        checkArgument(isValidOrDefaultScore(experienceScore), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"kexiaowen"},"content":"        this.technicalSkillsScore \u003d technicalSkillsScore;"},{"lineNumber":45,"author":{"gitID":"kexiaowen"},"content":"        this.communicationSkillsScore \u003d communicationSkillsScore;"},{"lineNumber":46,"author":{"gitID":"kexiaowen"},"content":"        this.problemSolvingSkillsScore \u003d problemSolvingSkillsScore;"},{"lineNumber":47,"author":{"gitID":"kexiaowen"},"content":"        this.experienceScore \u003d experienceScore;"},{"lineNumber":48,"author":{"gitID":"kexiaowen"},"content":"        this.overallScore \u003d calculateOverallScore(this.technicalSkillsScore,"},{"lineNumber":49,"author":{"gitID":"kexiaowen"},"content":"                this.communicationSkillsScore, this.problemSolvingSkillsScore, this.experienceScore);"},{"lineNumber":50,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":52,"author":{"gitID":"kexiaowen"},"content":"    public double getTechnicalSkillsScore() {"},{"lineNumber":53,"author":{"gitID":"kexiaowen"},"content":"        return technicalSkillsScore;"},{"lineNumber":54,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":56,"author":{"gitID":"kexiaowen"},"content":"    public double getCommunicationSkillsScore() {"},{"lineNumber":57,"author":{"gitID":"kexiaowen"},"content":"        return communicationSkillsScore;"},{"lineNumber":58,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":60,"author":{"gitID":"kexiaowen"},"content":"    public double getProblemSolvingSkillsScore() {"},{"lineNumber":61,"author":{"gitID":"kexiaowen"},"content":"        return problemSolvingSkillsScore;"},{"lineNumber":62,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":64,"author":{"gitID":"kexiaowen"},"content":"    public double getExperienceScore() {"},{"lineNumber":65,"author":{"gitID":"kexiaowen"},"content":"        return experienceScore;"},{"lineNumber":66,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":68,"author":{"gitID":"kexiaowen"},"content":"    public double getOverallScore() {"},{"lineNumber":69,"author":{"gitID":"kexiaowen"},"content":"        return overallScore;"},{"lineNumber":70,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":72,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"kexiaowen"},"content":"     * Returns the average of {@code technicalSkillsScore}, {@code communicationSkillsScore},"},{"lineNumber":74,"author":{"gitID":"kexiaowen"},"content":"     * {@code problemSolvingSkillsScore} and {@code experienceScore}, rounded to two decimal places"},{"lineNumber":75,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"kexiaowen"},"content":"    public static double calculateOverallScore(double technicalSkillsScore, double communicationSkillsScore,"},{"lineNumber":77,"author":{"gitID":"kexiaowen"},"content":"                                         double problemSolvingSkillsScore, double experienceScore) {"},{"lineNumber":78,"author":{"gitID":"kexiaowen"},"content":"        return DoubleUtil.roundToTwoDecimalPlaces((technicalSkillsScore + communicationSkillsScore"},{"lineNumber":79,"author":{"gitID":"kexiaowen"},"content":"                + problemSolvingSkillsScore + experienceScore) / NUMBER_OF_SCORES);"},{"lineNumber":80,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"kexiaowen"},"content":"        if (!(other instanceof Rating)) {"},{"lineNumber":89,"author":{"gitID":"kexiaowen"},"content":"            return false;"},{"lineNumber":90,"author":{"gitID":"kexiaowen"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":92,"author":{"gitID":"kexiaowen"},"content":"        Rating otherRating \u003d (Rating) other;"},{"lineNumber":93,"author":{"gitID":"kexiaowen"},"content":"        return otherRating.getTechnicalSkillsScore() \u003d\u003d this.getTechnicalSkillsScore()"},{"lineNumber":94,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 otherRating.getCommunicationSkillsScore() \u003d\u003d this.getCommunicationSkillsScore()"},{"lineNumber":95,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 otherRating.getProblemSolvingSkillsScore() \u003d\u003d this.getProblemSolvingSkillsScore()"},{"lineNumber":96,"author":{"gitID":"kexiaowen"},"content":"                \u0026\u0026 otherRating.getExperienceScore() \u003d\u003d this.getExperienceScore();"},{"lineNumber":97,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":99,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"kexiaowen"},"content":"     * Returns true if a given double is a valid score."},{"lineNumber":101,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"kexiaowen"},"content":"    public static boolean isValidScore(Double test) {"},{"lineNumber":103,"author":{"gitID":"kexiaowen"},"content":"        return test \u003e\u003d MINIMUM_SCORE \u0026\u0026 test \u003c\u003d MAXIMUM_SCORE;"},{"lineNumber":104,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":106,"author":{"gitID":"kexiaowen"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"kexiaowen"},"content":"     * Returns true if a given double is a default score."},{"lineNumber":108,"author":{"gitID":"kexiaowen"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"kexiaowen"},"content":"    public static boolean isDefaultScore(Double test) {"},{"lineNumber":110,"author":{"gitID":"kexiaowen"},"content":"        return test \u003d\u003d DEFAULT_SCORE;"},{"lineNumber":111,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":113,"author":{"gitID":"kexiaowen"},"content":"    public static boolean isValidOrDefaultScore(Double test) {"},{"lineNumber":114,"author":{"gitID":"kexiaowen"},"content":"        return isValidScore(test) || isDefaultScore(test);"},{"lineNumber":115,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"kexiaowen"},"content":""},{"lineNumber":117,"author":{"gitID":"kexiaowen"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"kexiaowen"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"kexiaowen"},"content":"        return Objects.hash(technicalSkillsScore, communicationSkillsScore, problemSolvingSkillsScore,"},{"lineNumber":120,"author":{"gitID":"kexiaowen"},"content":"                experienceScore);"},{"lineNumber":121,"author":{"gitID":"kexiaowen"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"kexiaowen"},"content":"}"}],"authorContributionMap":{"kexiaowen":112,"-":10}},{"path":"src/main/java/seedu/address/model/person/Major.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"tanhengyeow"},"content":" * Represents a Person\u0027s major in the address book."},{"lineNumber":8,"author":{"gitID":"tanhengyeow"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMajor(String)}"},{"lineNumber":9,"author":{"gitID":"tanhengyeow"},"content":" */"},{"lineNumber":10,"author":{"gitID":"tanhengyeow"},"content":"public class Major {"},{"lineNumber":11,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":12,"author":{"gitID":"tanhengyeow"},"content":"    public static final String MESSAGE_MAJOR_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"tanhengyeow"},"content":"            \"Person major should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"tanhengyeow"},"content":"    public static final String MAJOR_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":21,"author":{"gitID":"tanhengyeow"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":23,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"tanhengyeow"},"content":"     * Constructs a {@code Major}."},{"lineNumber":25,"author":{"gitID":"tanhengyeow"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"tanhengyeow"},"content":"     * @param major A valid major."},{"lineNumber":27,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"tanhengyeow"},"content":"    public Major(String major) {"},{"lineNumber":29,"author":{"gitID":"tanhengyeow"},"content":"        requireNonNull(major);"},{"lineNumber":30,"author":{"gitID":"tanhengyeow"},"content":"        checkArgument(isValidMajor(major), MESSAGE_MAJOR_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"tanhengyeow"},"content":"        this.value \u003d major;"},{"lineNumber":32,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":34,"author":{"gitID":"tanhengyeow"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"tanhengyeow"},"content":"     * Returns true if a given string is a valid person major."},{"lineNumber":36,"author":{"gitID":"tanhengyeow"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"tanhengyeow"},"content":"    public static boolean isValidMajor(String test) {"},{"lineNumber":38,"author":{"gitID":"tanhengyeow"},"content":"        return test.matches(MAJOR_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"tanhengyeow"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":41,"author":{"gitID":"tanhengyeow"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"tanhengyeow"},"content":"                || (other instanceof Major // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"tanhengyeow"},"content":"                \u0026\u0026 this.value.equals(((Major) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":27,"tanhengyeow":32}}]
