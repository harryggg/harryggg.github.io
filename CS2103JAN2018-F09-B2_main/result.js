var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"ReciRecipé was developed by the team below. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Thanh Nguyen"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"image::kokonguyen191.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"{empty}[https://github.com/kokonguyen191[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"Responsibilities: Model"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Ryan Ang"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"image::ryanangjy.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"{empty}[https://github.com/RyanAngJY[github]] [https://ryanangjy.herokuapp.com/[portfolio]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"Role: Deliverables and Deadlines +"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"Responsibilities: UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Hoang Duong"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"image::hoangduong1607.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"{empty}[https://github.com/hoangduong1607[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"Role: Integration +"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"Responsibilities: Logic"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Nicholas Ang"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"image::nicholasangcx.jpeg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"{empty}[https://github.com/nicholasangcx[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"Role: Scheduling and Tracking +"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"Responsibilities: Storage"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"RyanAngJY":20,"-":25}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"\u003d ReciRecipé"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-F09-B2/main[image:https://travis-ci.org/CS2103JAN2018-F09-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/kokonguyen191/main/branch/master[image:https://ci.appveyor.com/api/projects/status/9gwtvvply06uogsd/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F09-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/kokonguyen191/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103JAN2018-F09-B2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/f3f1b716cac244338ea565c73d592d82[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Are you a professional chef who is too lazy to manually flip through each page of your recipe book to find your favorite recipe? Are you a home cook who is lost and doesn\u0027t know what to have to dinner? Or are you just a perfectionist who prefers to have all of his recipes in one place, organized, systematic, well-structured?"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Then **ReciRecipé** is the solution for you!"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* It is a CLI (Command Line Interface) application, so you can save time using your keyboard instead of your mouse to nagivate."},{"lineNumber":22,"author":{"gitID":"-"},"content":"* What you can do with **ReciRecipé**:"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"** Keyboard shortcuts to speed up the process of typing and adding a recipe."},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"** Social media compatibility for sharing of recipes."},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"** Ability to add images to recipes."},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"** Cloud storage to access recipes anytime, anywhere."},{"lineNumber":27,"author":{"gitID":"-"},"content":"** And a lot more!"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":40,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":41,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"RyanAngJY":6,"-":37}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ReciRecipé - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team F09-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"ReciRecipé is for those who *prefer to use a desktop app for managing recipes*. More importantly, ReciRecipé is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ReciRecipé can get your recipe management done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Download the latest `recipebook.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Recipe Book."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Chicken rice`."},{"lineNumber":47,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Chicken rice t/Rice` or as `n/Chicken rice`."},{"lineNumber":48,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/rice`, `t/rice t/chicken` etc."},{"lineNumber":49,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME t/TAGS`, `t/TAGS n/NAME` is also acceptable."},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a recipe: `add`"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"Adds a recipe to the recipe book +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"A recipe can have any number of tags (including 0)"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":67,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all recipes : `list`"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"Shows a list of all recipes in the recipe book. +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a recipe : `edit`"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Edits an existing recipe in the recipe book. +"},{"lineNumber":77,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"****"},{"lineNumber":80,"author":{"gitID":"-"},"content":"* Edits the recipe at the specified `INDEX`. The index refers to the index number shown in the last recipe listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":81,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":83,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the recipe will be removed i.e adding of tags is not cumulative."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* You can remove all the recipe\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":85,"author":{"gitID":"-"},"content":"****"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Edits the preparationTime number and ingredient instruction of the 1st recipe to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Edits the name of the 2nd recipe to be `Betsy Crower` and clears all existing tags."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating recipes by name: `find`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Finds recipes whose names contain any of the given keywords. +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"****"},{"lineNumber":100,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":102,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Recipes matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":105,"author":{"gitID":"-"},"content":"****"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":112,"author":{"gitID":"-"},"content":"Returns any recipe having names `Betsy`, `Tim`, or `John`"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating recipes by tags: `tag`"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"Finds recipe whose tags contain any of the given keywords."},{"lineNumber":117,"author":{"gitID":"-"},"content":"Format: `tag KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"****"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* The search is case sensitive. e.g. `friends` will not match `Friends`"},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Only the tags are searched."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `friends` will not match `friend`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Recipes matching at least one keyword will be returned (i.e. `OR` search). e.g. `friends family` will return recipes with either `friends` OR `family` as their tags."},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* `tag friends` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Returns recipes with the tag `friends`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `tag friends family` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Returns any recipe with the tag `friends` or `family`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a recipe : `delete`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Deletes the specified recipe from the recipe book. +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Deletes the recipe at the specified `INDEX`."},{"lineNumber":140,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Deletes the 2nd recipe in the recipe book."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Deletes the 1st recipe in the results of the `find` command."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a recipe : `select`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Selects the recipe identified by the index number used in the last recipe listing. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"-"},"content":"* Selects the recipe and loads the Google search page the recipe at the specified `INDEX`."},{"lineNumber":160,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Selects the 2nd recipe in the recipe book."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"Selects the 1st recipe in the results of the `find` command."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Restores the recipe book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the recipe book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Clears all entries from the recipe book. +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":249,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":252,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":262,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":263,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":264,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":268,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":270,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":271,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":272,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":274,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":275,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":276,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"RyanAngJY":1,"-":275}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.ALICE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.CARL;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.HOON;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.IDA;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.KEYWORD_MATCHING_MEIER;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeUtil;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: add a recipe without tags to a non-empty recipe book, command with leading spaces and trailing spaces"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Recipe toAdd \u003d AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + INGREDIENT_DESC_AMY + \" \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY + \"   \" + PREPARATION_TIME_DESC_AMY + \"   \" + COOKING_TIME_DESC_AMY + \"   \""},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY + \"   \" + SERVINGS_DESC_AMY + \"   \" + URL_DESC_AMY + \"   \""},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"                + TAG_DESC_FRIEND + \" \";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.addRecipe(toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except name -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                + NAME_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except ingredient -\u003e added */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":129,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except inst -\u003e added */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":152,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except URL -\u003e added */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":176,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                + URL_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: add to empty recipe book -\u003e added */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        deleteAllRecipes();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with tags, command with parameters in random order -\u003e added */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":196,"author":{"gitID":"RyanAngJY"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + URL_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + INGREDIENT_DESC_BOB;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /* Case: add a recipe, missing tags -\u003e added */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: filters the recipe list before adding -\u003e added */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a recipe card is selected --------------------------- */"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the recipe list, add a recipe -\u003e added, card selection remains unchanged */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        selectRecipe(Index.fromOneBased(1));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate recipe -\u003e rejected */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        command \u003d RecipeUtil.getAddCommand(HOON);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate recipe except with different tags -\u003e rejected */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalRecipes#ALICE"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // RecipeBook#addRecipe(Recipe)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        command \u003d RecipeUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY + INSTRUCTION_DESC_AMY;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /* Case: missing ingredient -\u003e rejected */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INSTRUCTION_DESC_AMY;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        /* Case: missing recipe -\u003e rejected */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + RecipeUtil.getRecipeDetails(toAdd);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        /* Case: invalid preparation time -\u003e rejected */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PREPARATION_TIME_DESC + INGREDIENT_DESC_AMY"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        /* Case: invalid ingredient -\u003e rejected */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INVALID_INGREDIENT_DESC"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        /* Case: invalid recipe -\u003e rejected */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                + INVALID_INSTRUCTION_DESC;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} equal to the corresponding components in"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Recipe toAdd) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertCommandSuccess(RecipeUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Recipe)}. Executes {@code command}"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":293,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Recipe)"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Recipe toAdd) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            expectedModel.addRecipe(toAdd);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException dpe) {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Recipe)} except asserts that"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code RecipeListPanel} equal to the corresponding components in"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":314,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Recipe)"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":329,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":332,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":15,"-":331}},{"path":"src/test/java/systemtests/RecipeBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.RecipeListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.TypicalRecipes;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * A system test class for RecipeBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"public abstract class RecipeBookSystemTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-area\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected RecipeBook getInitialData() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TypicalRecipes.getTypicalRecipeBook();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public RecipeListPanelHandle getRecipeListPanel() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getRecipeListPanel();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Displays all recipes in the recipe book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void showAllRecipes() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getRecipeBook().getRecipeList().size(), getModel().getFilteredRecipeList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Displays all recipes with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void showRecipesWithName(String keyword) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredRecipeList().size() \u003c getModel().getRecipeBook().getRecipeList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Selects the recipe at {@code index} of the displayed list."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected void selectRecipe(Index index) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getRecipeListPanel().getSelectedCardIndex());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Deletes all recipes in the recipe book."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    protected void deleteAllRecipes() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getRecipeBook().getRecipeList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same recipe objects as {@code expectedModel}"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * and the recipe list panel displays the recipes in the model correctly."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getRecipeBook(), testApp.readStorageRecipeBook());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertListMatching(getRecipeListPanel(), expectedModel.getFilteredRecipeList());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code RecipeListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        getRecipeListPanel().rememberSelectedRecipeCard();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * of the previously selected recipe."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getRecipeListPanel().isAnyCardSelected());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the recipe in the recipe list panel at"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see RecipeListPanelHandle#isSelectedRecipeCardChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getRecipeListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"RyanAngJY"},"content":"            expectedUrl \u003d new URL(getRecipeListPanel().getHandleToSelectedCard().getUrl());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getRecipeListPanel().getSelectedCardIndex());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the recipe list panel remain unchanged."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see RecipeListPanelHandle#isSelectedRecipeCardChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getRecipeListPanel().isSelectedRecipeCardChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertListMatching(getRecipeListPanel(), getModel().getFilteredRecipeList());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":291}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeUtil;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_BOB + \"  \" + INSTRUCTION_DESC_BOB + \" \" + PREPARATION_TIME_DESC_BOB + \" \""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + \" \" + CALORIES_DESC_BOB + \" \" + SERVINGS_DESC_BOB + \" \""},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"                + URL_DESC_BOB + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Recipe editedRecipe \u003d new RecipeBuilder()"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last recipe in the list -\u003e last recipe restored */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last recipe in the list -\u003e last recipe edited again */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        model.updateRecipe("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased()), editedRecipe);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as existing values -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Recipe recipeToEdit \u003d getModel().getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withTags().build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, edit index within bounds of recipe book and recipe list -\u003e edited */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRecipeList().size());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        recipeToEdit \u003d getModel().getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, edit index within bounds of recipe book but out of bounds of recipe list"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":136,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getRecipeBook().getRecipeList().size();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a recipe card is selected -------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the recipe list, edit a recipe -\u003e edited, card selection remains unchanged but"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        showAllRecipes();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        selectRecipe(index);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY + SERVINGS_DESC_AMY + CALORIES_DESC_AMY"},{"lineNumber":152,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_AMY + INSTRUCTION_DESC_AMY  + URL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new recipe\u0027s name"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredRecipeList().size() + 1;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased(),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + INVALID_NAME_DESC,"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid preparation time -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INVALID_PREPARATION_TIME_DESC,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid ingredient -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + INVALID_INGREDIENT_DESC,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid recipe -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + INVALID_INSTRUCTION_DESC,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as another recipe\u0027s values -\u003e rejected */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        executeCommand(RecipeUtil.getAddCommand(BOB));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getRecipeBook().getRecipeList().contains(BOB));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredRecipeList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":212,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as another recipe\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":218,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Recipe, Index)} except that"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Recipe, Index)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Recipe editedRecipe) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedRecipe, null);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the recipe at index {@code toEdit} being"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedRecipe}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Recipe editedRecipe,"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            expectedModel.updateRecipe("},{"lineNumber":245,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredRecipeList().get(toEdit.getZeroBased()), editedRecipe);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException | RecipeNotFoundException e) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \"editedRecipe is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe), expectedSelectedCardIndex);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":8,"-":305}},{"path":"src/test/java/seedu/recipe/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.KeyboardShortcutsMapping;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String LF \u003d \"\\n\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES \u003d \"add\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES \u003d \"should not work for now\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_HAS_MULTIPLE_LINES \u003d FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES + LF"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES;"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIRST_SUGGESTION \u003d \"a/\";"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_SUGGESTION \u003d \"add\";"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"    private static final String COMMAND_WITH_NEW_LINE_USING_SUGGESTIONS \u003d SECOND_SUGGESTION + LF + FIRST_SUGGESTION;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void commandBox_handleMultipleLinesCommand() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.appendText(FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.NEW_LINE_IN_COMMAND);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.appendText(SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInput(COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    //@@Author"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"    public void commandBox_handleShowingSuggestions() {"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND);"},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(SECOND_SUGGESTION);"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.NEW_LINE_IN_COMMAND);"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND);"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(COMMAND_WITH_NEW_LINE_USING_SUGGESTIONS);"},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertInput(String expectedCommand) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hoangduong1607":22,"-":179}},{"path":"src/test/java/seedu/recipe/ui/UiUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.UiUtil.HEX_COLOR_BLACK;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.UiUtil.HEX_COLOR_WHITE;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"public class UiUtilTest {"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"    private static final String LIGHT_COLOR_CODE \u003d \"#FFFFFF\";"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    private static final String DARK_COLOR_CODE \u003d \"#000000\";"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public void convertStringToValidColorCode() {"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"        // empty string"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"\")));"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"01fb45\")));"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with random whitespaces"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"  cd  eff  f\")));"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with varying lengths"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"1a2b\")));"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"1a2bfc124ab\")));"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with varying lengths and with random whitespaces"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"  1  a  2b \")));"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\" 1a2 bfc12  4ab \")));"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"        // invalid hexadecimal"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"i#tov129nfoiZZ!!Za\")));"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        // invalid hexadecimal with random whitespaces"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\" i t#ov   129 nfoi  ZZ !! Za \")));"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"    public void getMatchingColorFromGivenColor() {"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"        // invalid CSS color code"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_BLACK.equals(UiUtil.getMatchingColorFromGivenColor(\"asdio 42oi n\")));"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"        // light CSS color code"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_BLACK.equals(UiUtil.getMatchingColorFromGivenColor(LIGHT_COLOR_CODE)));"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        // dark CSS color code"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_WHITE.equals(UiUtil.getMatchingColorFromGivenColor(DARK_COLOR_CODE)));"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":65}},{"path":"src/test/java/seedu/recipe/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.RecipePanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private RecipePanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new RecipePanelSelectionChangedEvent(new RecipeCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a recipe"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        URL expectedRecipeUrl \u003d new URL(ALICE.getUrl().toString());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipeUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":47}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"﻿\u003d ReciRecipé - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B2/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team F09-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003c\u003cReciRecipe,ReciRecipé\u003e\u003e is a desktop recipe management application for users who prefer working their keyboard instead of a mouse to manage their recipes more efficiently. It is useful for cooks who have experience with typing and want all of their recipes in one place."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"The Developer Guide will give you a stroll through the design and implementation of ReciRecipé. If you want to understand _how_, and hopefully _why_, ReciRecipé works, you are at the right place."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":47,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":". Run the `seedu.recipe.MainApp` and try a few commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":68,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":102,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/recipe/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Defines its \u003c\u003cAPI,API\u003e\u003e in an `interface` with the same name as the Component."},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its \u003c\u003cAPI,API\u003e\u003e in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":134,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"image::SDforDeleteRecipe.png[width\u003d\"800\"]"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `RecipeBookChangedEvent` when the Recipe Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"image::SDforDeleteRecipeEventHandling.png[width\u003d\"800\"]"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":161,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/recipe/ui/Ui.java[`Ui.java`]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RecipeListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/recipe/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":179,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":180,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":186,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/recipe/logic/Logic.java[`Logic.java`]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".  `Logic` uses the `RecipeBookParser` class to parse the user command."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a recipe) and/or raise events."},{"lineNumber":191,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":196,"author":{"gitID":"-"},"content":"image::DeleteRecipeSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/recipe/model/Model.java[`Model.java`]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* stores the Recipe Book data."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cRecipe\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":217,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/recipe/storage/Storage.java[`Storage.java`]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":224,"author":{"gitID":"-"},"content":"* can save the Recipe Book data in xml format and read it back."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.recipe.commons` package."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the recipe book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the recipe book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":248,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":249,"author":{"gitID":"-"},"content":"----"},{"lineNumber":250,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"----"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":259,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"----"},{"lineNumber":261,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th recipe in the recipe book. The current state of the recipe book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new recipe."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":289,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"The user now decides that adding the recipe was a mistake, and decides to undo that action using `undo`."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the recipe book to the state before the `add` command executed."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":298,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the recipe book to the state after the command is executed)."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":328,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire recipe book."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":337,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the recipe being deleted)."},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the recipe book (`add`, `clear`, `edit`)."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the instruction * book and not the view."},{"lineNumber":350,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":361,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"// tag::multiple-lines[]"},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Multiple lines input support"},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Former implementation of the `CommandBox` used `TextField`, which only allows single-line inputs but supports automatic handler of kbd:[Enter]. To support commands with multiple lines, another class has to be used for `CommandBox`. Current implementation of `CommandBox` uses `TextArea`, a class which has fewer restrictions on the number of input lines allowed. However, the tradeoff for `TextArea` is that it does not support automatic handler of kbd:[Enter]."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"Currently, the solution for this is to consume the use of kbd:[Enter] and invoke the function `submitCommand()` whenever RecipeBook receives a keyboard combination that is assigned to command submission (default is kbd:[Enter])."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"----"},{"lineNumber":373,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    // COMMAND_SUBMISSION default is KeyCode.ENTER"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    if (COMMAND_SUBMISSION.match(keyEvent)) {"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        submitCommand();"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    // Other keyboard combinations"},{"lineNumber":380,"author":{"gitID":"-"},"content":"}"},{"lineNumber":381,"author":{"gitID":"-"},"content":"----"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"Because the default use of kbd:[Enter] has been replaced by command submission, another key combination is used for line breaks. The default combination for line breaks is kbd:[Shift]+kbd:[Enter] (like in Facebook). Note that these two combinations, line breaks and command submission, are interchangeable according to how the user set ups ReciRecipé preferences."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"When RecipeBook receives a keyboard combination that is assigned to line breaks (default is kbd:[Shift]+kbd:[Enter]), `CommandBox` generates a `StringBuilder` from current text inside `CommandBox`, gets the caret location. The `StringBuilder` then inserts a new line at the given caret location, returns a `String` and `CommandBox` replaces its entire body with the new `String`."},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"The implementation for line breaks is below:"},{"lineNumber":388,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":389,"author":{"gitID":"-"},"content":"----"},{"lineNumber":390,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":391,"author":{"gitID":"-"},"content":"    // NEW_LINE_IN_COMMAND default is KeyCodeCombination(KeyCode.SHIFT, KeyCode.ENTER)"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    if (NEW_LINE_IN_COMMAND.match(keyEvent)) {"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":394,"author":{"gitID":"-"},"content":"        createNewLine();"},{"lineNumber":395,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":396,"author":{"gitID":"-"},"content":"    // Other keyboard combinations"},{"lineNumber":397,"author":{"gitID":"-"},"content":"}"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"private void createNewLine() {"},{"lineNumber":400,"author":{"gitID":"-"},"content":"    int caretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    StringBuilder commandTextStringBuilder \u003d new StringBuilder(commandTextArea.getText());"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    commandTextStringBuilder.insert(caretPosition, LF);"},{"lineNumber":403,"author":{"gitID":"-"},"content":"    String newCommandText \u003d commandTextStringBuilder.toString();"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    commandTextArea.setText(newCommandText);"},{"lineNumber":405,"author":{"gitID":"-"},"content":"    commandTextArea.positionCaret(caretPosition + 1);"},{"lineNumber":406,"author":{"gitID":"-"},"content":"}"},{"lineNumber":407,"author":{"gitID":"-"},"content":"----"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usage of a component that support multiple lines input"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** `TextArea`"},{"lineNumber":414,"author":{"gitID":"-"},"content":"** Pros: Easy to use, intuitive."},{"lineNumber":415,"author":{"gitID":"-"},"content":"** Cons: No default handler for kbd:[Enter]. Furthermore, the \u003c\u003cCSS,CSS\u003e\u003e is particularly hard to handle due to the way `TextArea` and its body function separately."},{"lineNumber":416,"author":{"gitID":"-"},"content":"* **Alternative 2:** `TextField` with support for \"\\n\""},{"lineNumber":417,"author":{"gitID":"-"},"content":"** Pros: Hardly needs any change in the codes."},{"lineNumber":418,"author":{"gitID":"-"},"content":"** Cons: Unintuitive and ugly inputs. Also, a long line with hundreds of characters is unavoidable. And once the line gets too long, it is near impossible to make changes to the input."},{"lineNumber":419,"author":{"gitID":"-"},"content":"* **Alternative 3:** `HTMLEditor`"},{"lineNumber":420,"author":{"gitID":"-"},"content":"** Pros: Abundant formatting features."},{"lineNumber":421,"author":{"gitID":"-"},"content":"** Cons: Too complex to implement, unintuitive inputs."},{"lineNumber":422,"author":{"gitID":"-"},"content":"// end::multiple-lines[]"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"// tag::keyboard-shortcut[]"},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Keyboard shortcuts"},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Currently, only `CommandBox` accepts keyboard shortcuts. All shortcuts are stored in the `KeyboardShortcutsMapping` class inside the `Ui` component. `CommandBox` listens for key combinations and executes actions mapped to these key presses, which are defined in the `handleKeyPress()` method as shown below:"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"----"},{"lineNumber":432,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    if (COMMAND_SUBMISSION.match(keyEvent)) {"},{"lineNumber":434,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":435,"author":{"gitID":"-"},"content":"        submitCommand();"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    } else if (LAST_COMMAND.match(keyEvent)) {"},{"lineNumber":437,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        navigateToPreviousInput();"},{"lineNumber":439,"author":{"gitID":"-"},"content":"    } else if (NEXT_COMMAND.match(keyEvent)) {"},{"lineNumber":440,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":441,"author":{"gitID":"-"},"content":"        navigateToNextInput();"},{"lineNumber":442,"author":{"gitID":"-"},"content":"    } else if (NEW_LINE_IN_COMMAND.match(keyEvent)) {"},{"lineNumber":443,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":444,"author":{"gitID":"-"},"content":"        createNewLine();"},{"lineNumber":445,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    // Can have more mappings"},{"lineNumber":447,"author":{"gitID":"-"},"content":"}"},{"lineNumber":448,"author":{"gitID":"-"},"content":"----"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"As seen from above, all key combinations implemented consume the default effect of the combinations. However, this is not a must as there may be future mappings that do not require consuming the `KeyEvent`."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Location of the shortcuts"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store in the `KeyboardShortcutsMapping` class"},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Pros: Good modularity, easier to keep track of the mappings."},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Cons: The shortcuts have to be imported to be used."},{"lineNumber":459,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store in the `CommandBox` class"},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Pros: No needs for imports. Also it is possible to declare new mappings on the run and use it directly in the `CommandBox`."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Cons: Impossible to use them if we want to implement shortcuts for other UI components or globally."},{"lineNumber":462,"author":{"gitID":"-"},"content":"// end::keyboard-shortcut[]"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"hoangduong1607"},"content":"// tag::auto-compeltion[]"},{"lineNumber":465,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d Auto-completion"},{"lineNumber":466,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"hoangduong1607"},"content":"Formerly, users need to type all application keywords and their inputs to the command line. Auto-completion feature is implemented to help users shorten the commands they need to type, by giving suggestions of words based on current input of users and automatically filling chosen words into input field."},{"lineNumber":469,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":470,"author":{"gitID":"hoangduong1607"},"content":"Currently, a class called `SuggestionsPopUp`, which inherits from `ContextMenu`, is created to handle all operations relating to auto-completion. The operations include displaying a pop-up menu consisting of suggestions for user’s input, automatically completing input field when a word is chosen and hiding the pop-up menu."},{"lineNumber":471,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":472,"author":{"gitID":"hoangduong1607"},"content":"Key combination kbd:[Shift]+kbd:[Space] is used to show suggestion pop-up. For other keys and key combinations, the pop-up is hidden. The code to handle these key and key combination actions is shown as below:"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":475,"author":{"gitID":"-"},"content":"----"},{"lineNumber":476,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":477,"author":{"gitID":"hoangduong1607"},"content":"    suggestionsPopUp.hideSuggestions();"},{"lineNumber":478,"author":{"gitID":"hoangduong1607"},"content":"    if (SHOW_SUGGESTIONS_COMMAND.match(keyEvent)) {"},{"lineNumber":479,"author":{"gitID":"hoangduong1607"},"content":"        keyEvent.consume();"},{"lineNumber":480,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp.showSuggestions();"},{"lineNumber":481,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":482,"author":{"gitID":"hoangduong1607"},"content":"    // Other key combinations"},{"lineNumber":483,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":484,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":485,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":486,"author":{"gitID":"hoangduong1607"},"content":"To display suggestions, first, a suggestion list is built, then position of pop-up menu is calculated for display."},{"lineNumber":487,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":488,"author":{"gitID":"hoangduong1607"},"content":"Suggestion list is built with a given list as a dictionary and last word in user input as a word that needs to be looked up. All words in the dictionary that take given word as prefix are valid suggestions and added to the list. However, since `CommandBox` is limited, only a small number of words are added to the pop-up menu. The code for compiling suggestion list is given below:"},{"lineNumber":489,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":490,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":491,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":492,"author":{"gitID":"hoangduong1607"},"content":"for (String suggestion : dictionary) {"},{"lineNumber":493,"author":{"gitID":"hoangduong1607"},"content":"    if (suggestion.startsWith(prefix)) {"},{"lineNumber":494,"author":{"gitID":"hoangduong1607"},"content":"        addSuggestion(suggestion);"},{"lineNumber":495,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":496,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":497,"author":{"gitID":"hoangduong1607"},"content":"    if (getItems().size() \u003d\u003d MAX_SUGGESTIONS) {"},{"lineNumber":498,"author":{"gitID":"hoangduong1607"},"content":"        break;"},{"lineNumber":499,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":500,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":501,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":502,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":503,"author":{"gitID":"hoangduong1607"},"content":"The given dictionary and the constant `MAX_SUGGESTIONS` can be found in `AutoCompletionUtil` class. All operations with input text such as finding the last word of user\u0027s input are supported by `TextInputProcessorUtil` class."},{"lineNumber":504,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":505,"author":{"gitID":"hoangduong1607"},"content":"To calculate position to display pop-up menu, height and width of input text (in pixels) are computed and then used to determine display position in the main window. Height and width of input text are calculated in `TextInputProcessorUtil` class."},{"lineNumber":506,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":507,"author":{"gitID":"hoangduong1607"},"content":"Then, the suggestion list can be shown in main window."},{"lineNumber":508,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":509,"author":{"gitID":"hoangduong1607"},"content":"To hide suggestion list, a method called `hide()` is implemented as below:"},{"lineNumber":510,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":511,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":512,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":513,"author":{"gitID":"hoangduong1607"},"content":"protected void hideSuggestions() {"},{"lineNumber":514,"author":{"gitID":"hoangduong1607"},"content":"    if  (isShowing()) {"},{"lineNumber":515,"author":{"gitID":"hoangduong1607"},"content":"        hide();"},{"lineNumber":516,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":518,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":519,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":520,"author":{"gitID":"hoangduong1607"},"content":"To automatically fill input field with chosen word, an `EventListener` is attached to each item in the pop-up menu. When an item is chosen, it replaces the last word in input field with the word associated with the item. The code is shown below:"},{"lineNumber":521,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":522,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":523,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":524,"author":{"gitID":"hoangduong1607"},"content":"item.setOnAction(event -\u003e commandBox.replaceText(textInputProcessor.replaceLastWord(item.getText())));"},{"lineNumber":525,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":526,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":527,"author":{"gitID":"hoangduong1607"},"content":"`TextInputProcessorUtil` object `textInputProcessor` is used to handle an operation `replaceLastWord()` for the given text."},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Base class of SuggestionsPopUp"},{"lineNumber":532,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":533,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 1 (current choice):** `ContextMenu`"},{"lineNumber":534,"author":{"gitID":"hoangduong1607"},"content":"** Pros: Easy to use since `ContextMenu` and `TextArea` are in the same library `javafx.scene.control`."},{"lineNumber":535,"author":{"gitID":"hoangduong1607"},"content":"** Cons: Dependent on `TextArea` in `CommandBox` class."},{"lineNumber":536,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 2:** `JPopupMenu`"},{"lineNumber":537,"author":{"gitID":"hoangduong1607"},"content":"** Pros: NA."},{"lineNumber":538,"author":{"gitID":"hoangduong1607"},"content":"** Cons: Need additional works to make `JPopupMenu` compatible with `TextArea`."},{"lineNumber":539,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":540,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Abstraction of `SuggestionsPopUp`"},{"lineNumber":541,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":542,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 1 (current choice):** A separate class `SuggestionsPopUp`"},{"lineNumber":543,"author":{"gitID":"hoangduong1607"},"content":"** Pros: More intuitive approach since `SuggestionsPopUp` is a component in `UI`."},{"lineNumber":544,"author":{"gitID":"hoangduong1607"},"content":"** Cons: Need to take extra information from `CommandBox` class."},{"lineNumber":545,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 2:** An inner class of `CommandBox` class"},{"lineNumber":546,"author":{"gitID":"hoangduong1607"},"content":"** Pros: Easy to implement since it has access to all attributes and methods of `CommandBox`."},{"lineNumber":547,"author":{"gitID":"hoangduong1607"},"content":"** Cons: Limitations in reusability."},{"lineNumber":548,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":549,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Abstraction of `TextInputProcessorUtil`"},{"lineNumber":550,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":551,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 1 (current choice):** A separate class `TextInputProcessorUtil`"},{"lineNumber":552,"author":{"gitID":"hoangduong1607"},"content":"** Pros: Common functions can be easily used by other classes if needed."},{"lineNumber":553,"author":{"gitID":"hoangduong1607"},"content":"** Cons: NA."},{"lineNumber":554,"author":{"gitID":"hoangduong1607"},"content":"* **Alternative 2:** An inner class of `SuggestionsPopUp` class"},{"lineNumber":555,"author":{"gitID":"hoangduong1607"},"content":"** Pros: Convenient to use inside the containing class."},{"lineNumber":556,"author":{"gitID":"hoangduong1607"},"content":"** Cons: Limitations in reusability."},{"lineNumber":557,"author":{"gitID":"hoangduong1607"},"content":"// end::auto-completion[]"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"// tag::cloud-storage[]"},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Cloud storage support"},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Formerly, there was no function to upload the data in the recipe book on to the cloud. All these data were only stored locally in a specific file on the user\u0027s computer."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"Currently, a new command `UploadCommand` has been added. `UploadCommandParser` takes in a `String` filename, adds an XML extension to it before parsing it to `UploadCommand` which then uploads the data within the application to Dropbox using the specified filename."},{"lineNumber":566,"author":{"gitID":"-"},"content":"Adding the XML extension is to make the command more user-friendly and to maintain integrity of the data since the application can only read data from files in an XML format."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"`UploadCommandParser` parses the user-input as shown below:"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":571,"author":{"gitID":"-"},"content":"----"},{"lineNumber":572,"author":{"gitID":"-"},"content":"String XmlExtensionFilename \u003d ParserUtil.parseFilename(filename);"},{"lineNumber":573,"author":{"gitID":"-"},"content":"----"},{"lineNumber":574,"author":{"gitID":"-"},"content":"Because the file is being uploaded to the user\u0027s Dropbox account, their Dropbox account access token is needed and is stored in the variable _ACCESS_TOKEN_. This token is then used together"},{"lineNumber":575,"author":{"gitID":"-"},"content":"with `String` _XmlExtensionFilename_, which was obtained from `UploadCommandParser`, in the `upload()` method as shown below:"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":578,"author":{"gitID":"-"},"content":"----"},{"lineNumber":579,"author":{"gitID":"-"},"content":"private CommandResult upload() throws DbxException {"},{"lineNumber":580,"author":{"gitID":"-"},"content":"    // Create Dropbox client"},{"lineNumber":581,"author":{"gitID":"-"},"content":"    DbxRequestConfig config \u003d DbxRequestConfig.newBuilder(\"dropbox/recirecipe\").build();"},{"lineNumber":582,"author":{"gitID":"-"},"content":"    DbxClientV2 client \u003d new DbxClientV2(config, ACCESS_TOKEN);"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"    // Upload RECIPE_BOOK_FILE which contains all the data on recipes to Dropbox"},{"lineNumber":585,"author":{"gitID":"-"},"content":"    try (InputStream in \u003d new FileInputStream(RECIPE_BOOK_FILE)) {"},{"lineNumber":586,"author":{"gitID":"-"},"content":"        client.files().uploadBuilder(\"/\" + XmlExtensionFilename).uploadAndFinish(in);"},{"lineNumber":587,"author":{"gitID":"-"},"content":"    } catch (IOException IOE) {"},{"lineNumber":588,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":589,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"    return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":592,"author":{"gitID":"-"},"content":"}"},{"lineNumber":593,"author":{"gitID":"-"},"content":"----"},{"lineNumber":594,"author":{"gitID":"-"},"content":"The _ACCESS_TOKEN_ is currently hardcoded in, as shown below, but will be improved upon soon."},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":597,"author":{"gitID":"-"},"content":"----"},{"lineNumber":598,"author":{"gitID":"-"},"content":"private static final String ACCESS_TOKEN \u003d \"example_of_legit_token_taken_from_dropbox\";"},{"lineNumber":599,"author":{"gitID":"-"},"content":"----"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Handling of the access token"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save the access token within the application for future use"},{"lineNumber":605,"author":{"gitID":"-"},"content":"** Pros: Convenience. User does not have to keep logging into their Dropbox account every time they want to upload. Since our application does not support multiple users, keeping them \"logged in\" is acceptable."},{"lineNumber":606,"author":{"gitID":"-"},"content":"** Cons: Security concerns. Since the access token is meant to be a secret and there is no security aspect to our application at all, it is possible for a someone malicious to obtain this access token."},{"lineNumber":607,"author":{"gitID":"-"},"content":"* **Alternative 2:** One-time usage of the access token. Delete after using."},{"lineNumber":608,"author":{"gitID":"-"},"content":"** Pros: Less security issues/concerns."},{"lineNumber":609,"author":{"gitID":"-"},"content":"** Cons: Very inconvenient. Requires user to keep logging in to their Dropbox account every time they want to upload. This is redundant as our application only supports one user anyway."},{"lineNumber":610,"author":{"gitID":"hoangduong1607"},"content":"// end::cloud-storage[]"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"RyanAngJY"},"content":"// tag::embedded-url[]"},{"lineNumber":613,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Embedded URL"},{"lineNumber":614,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":616,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":617,"author":{"gitID":"RyanAngJY"},"content":"The URL field is an optional field in the `add` command and can be omitted. In the case when a URL is embedded to a recipe, the `BrowserPanel` will load the given URL."},{"lineNumber":618,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":619,"author":{"gitID":"RyanAngJY"},"content":"As seen below, the URL is not a required parameter during the checking of prefixes in an `add` command."},{"lineNumber":620,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":621,"author":{"gitID":"RyanAngJY"},"content":"[source,java]"},{"lineNumber":622,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":623,"author":{"gitID":"RyanAngJY"},"content":"if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INSTRUCTION, PREFIX_PREPARATION_TIME,"},{"lineNumber":624,"author":{"gitID":"RyanAngJY"},"content":"    PREFIX_INGREDIENT) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":625,"author":{"gitID":"RyanAngJY"},"content":"    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":626,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":627,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":628,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":629,"author":{"gitID":"RyanAngJY"},"content":"In the case when a URL is not added to a recipe, a null reference \u0027-\u0027 is put as a placeholder when parsing the URL field, unlike tag labels. This helps with identifying recipes that do not have embedded URLs."},{"lineNumber":630,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":631,"author":{"gitID":"RyanAngJY"},"content":"[source,java]"},{"lineNumber":632,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":633,"author":{"gitID":"RyanAngJY"},"content":"public static Optional\u003cUrl\u003e parseUrlOnInitialAdd(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":634,"author":{"gitID":"RyanAngJY"},"content":"    requireNonNull(url);"},{"lineNumber":635,"author":{"gitID":"RyanAngJY"},"content":"    return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.of(getNullReferenceUrl());"},{"lineNumber":636,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":637,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":638,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of optional property"},{"lineNumber":642,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":643,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 1 (current choice):** Add a placeholder for omitted URL"},{"lineNumber":644,"author":{"gitID":"RyanAngJY"},"content":"** Pros: Simple implementation can be used as a reference by new developers for creating optional fields. Interaction with `BrowserPanel` requires more control over the status of a recipe\u0027s URL property."},{"lineNumber":645,"author":{"gitID":"RyanAngJY"},"content":"** Cons: `Recipe` class may contain unnecessary variables."},{"lineNumber":646,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 2:** Store URL property in the same fashion as tag labels"},{"lineNumber":647,"author":{"gitID":"RyanAngJY"},"content":"** Pros: `Recipe` class has better separation of optional and compulsory properties."},{"lineNumber":648,"author":{"gitID":"RyanAngJY"},"content":"** Cons: Complex implementation may confuse new developers. Interaction with other components may become needlessly complex."},{"lineNumber":649,"author":{"gitID":"RyanAngJY"},"content":"// end::embedded-url[]"},{"lineNumber":650,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":651,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data encryption"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":665,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":670,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":671,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":672,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":689,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":702,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":703,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":704,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":707,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":717,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":722,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":729,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":742,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":743,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.recipe.ui` package."},{"lineNumber":744,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":745,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":746,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.commons.StringUtilTest`"},{"lineNumber":747,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":748,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.storage.StorageManagerTest`"},{"lineNumber":749,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":750,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.logic.LogicManagerTest`"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":754,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":757,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":774,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/recipe/MainApp.java[`MainApp.java`]."},{"lineNumber":781,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":782,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":783,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Recipe Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":788,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":789,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":792,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":793,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":807,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":812,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all recipes in the list."},{"lineNumber":815,"author":{"gitID":"-"},"content":"+"},{"lineNumber":816,"author":{"gitID":"-"},"content":"****"},{"lineNumber":817,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":818,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/recipe/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/recipe/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":819,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`RecipeBookParser`] is responsible for analyzing command words."},{"lineNumber":820,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":821,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`RecipeBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":822,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":823,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":824,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":825,"author":{"gitID":"-"},"content":"****"},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":828,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from every entry in the recipe book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":833,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from every entry in the recipe book."},{"lineNumber":836,"author":{"gitID":"-"},"content":"+"},{"lineNumber":837,"author":{"gitID":"-"},"content":"****"},{"lineNumber":838,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":839,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/recipe/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`RecipeBook`] API need to be updated."},{"lineNumber":840,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":841,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`RecipeBook`] and link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`RecipeBook`] allows you to update a recipe, and link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`] allows you to update the tags."},{"lineNumber":842,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":843,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`RecipeBook`]. Loop through each recipe, and remove the `tag` from each recipe."},{"lineNumber":844,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/recipe/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/recipe/model/ModelManager.java[`ModelManager`] should call `RecipeBook#removeTag(Tag)`."},{"lineNumber":845,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":846,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":847,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`RecipeBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":848,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":849,"author":{"gitID":"-"},"content":"****"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your recipe book application. You realize that one of the users occasionally tries to delete non-existent tags from a recipe, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last recipe in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":857,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":". Use different colors for different tags inside recipe cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":864,"author":{"gitID":"-"},"content":"+"},{"lineNumber":865,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":866,"author":{"gitID":"-"},"content":"+"},{"lineNumber":867,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":868,"author":{"gitID":"-"},"content":"+"},{"lineNumber":869,"author":{"gitID":"-"},"content":"****"},{"lineNumber":870,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":871,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[the `RecipeCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":872,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":873,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":874,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":875,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `RecipeCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":876,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":877,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":878,"author":{"gitID":"-"},"content":"****"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":881,"author":{"gitID":"-"},"content":"+"},{"lineNumber":882,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":886,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":887,"author":{"gitID":"-"},"content":"+"},{"lineNumber":888,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":889,"author":{"gitID":"-"},"content":"+"},{"lineNumber":890,"author":{"gitID":"-"},"content":"****"},{"lineNumber":891,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":892,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/recipe/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/recipe/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":894,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":895,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":897,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":898,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":899,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/RecipeBookSystemTest.java[`RecipeBookSystemTest#assertCommandBoxShowsDefaultStyle() and RecipeBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":900,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":901,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":902,"author":{"gitID":"-"},"content":"****"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of recipes in the recipe book."},{"lineNumber":905,"author":{"gitID":"-"},"content":"+"},{"lineNumber":906,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":907,"author":{"gitID":"-"},"content":"+"},{"lineNumber":908,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":909,"author":{"gitID":"-"},"content":"+"},{"lineNumber":910,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":911,"author":{"gitID":"-"},"content":"+"},{"lineNumber":912,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":913,"author":{"gitID":"-"},"content":"+"},{"lineNumber":914,"author":{"gitID":"-"},"content":"****"},{"lineNumber":915,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":916,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":917,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the recipe book is updated."},{"lineNumber":918,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":919,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of recipes when the application just started."},{"lineNumber":920,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`StatusBarFooter#handleRecipeBookChangedEvent(RecipeBookChangedEvent)`] to update the number of recipes whenever there are new changes to the Recipe Book."},{"lineNumber":921,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of recipes status, just like what we did for save location and sync status."},{"lineNumber":922,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/RecipeBookSystemTest.java[`RecipeBookSystemTest`] to also verify the new total number of recipes status bar."},{"lineNumber":923,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":924,"author":{"gitID":"-"},"content":"****"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the recipe book to the cloud. However, the current implementation of the application constantly saves the recipe book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the recipe book storage."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":932,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":". Add a new method `backupRecipeBook(ReadOnlyRecipeBook)`, so that the recipe book can be saved in a fixed temporary location."},{"lineNumber":935,"author":{"gitID":"-"},"content":"+"},{"lineNumber":936,"author":{"gitID":"-"},"content":"****"},{"lineNumber":937,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":938,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/recipe/storage/RecipeBookStorage.java[`RecipeBookStorage`] interface."},{"lineNumber":939,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/recipe/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/recipe/storage/XmlRecipeBookStorage.java[`XmlRecipeBookStorage`] class."},{"lineNumber":940,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":941,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":942,"author":{"gitID":"-"},"content":"****"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":945,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for ReciRecipé, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular recipe, by providing a flexible `remark` field for each recipe, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":952,"author":{"gitID":"-"},"content":"Edits the remark for a recipe specified in the `INDEX`. +"},{"lineNumber":953,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":958,"author":{"gitID":"-"},"content":"Edits the remark for the first recipe to `Likes to drink coffee.`"},{"lineNumber":959,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":960,"author":{"gitID":"-"},"content":"Removes the remark for the first recipe."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":965,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/recipe/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":970,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`RecipeBookParser`] to accept a `RemarkCommand`."},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":975,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java[`RecipeBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":978,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":983,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":984,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`RecipeBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":989,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":990,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":991,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java[`RecipeBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `RecipeCard`"},{"lineNumber":994,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`RecipeCard`] s to display a remark for each recipe later."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/RecipeListCard.fxml[`RecipeListCard.fxml`]."},{"lineNumber":999,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`RecipeCard`] to tie the variable to the actual label."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/RecipeCardHandle.java[`RecipeCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Instruction.java[`Instruction`], remove the regex and change the names accordingly)."},{"lineNumber":1011,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Recipe` to support a `Remark` field"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`]."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`]."},{"lineNumber":1023,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the recipe will be created without a remark)."},{"lineNumber":1024,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `recipeBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedRecipe` class"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Recipe` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/recipe/storage/XmlAdaptedRecipe.java[`XmlAdaptedRecipe`] to include a `Remark` field so that it will be saved."},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":". Fix `invalidAndValidRecipeRecipeBook.xml`, `typicalRecipesRecipeBook.xml`, `validRecipeBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `RecipeBuilder`"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"Since `Recipe` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/recipe/testutil/RecipeBuilder.java[`RecipeBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`Recipe`]."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/recipe/testutil/RecipeBuilder.java[`RecipeBuilder`]. This method will create a new `Remark` for the recipe that it is currently building."},{"lineNumber":1043,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Recipe` in link:{repoURL}/src/test/java/seedu/recipe/testutil/TypicalRecipes.java[`TypicalRecipes`]."},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `RecipeCard`"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`RecipeCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`RecipeCard`]\u0027s constructor to bind the `Remark` field to the `Recipe` \u0027s remark."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/recipe/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysRecipe(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a recipe."},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of recipes"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"* is reasonably comfortable using \u003c\u003cCLI,CLI\u003e\u003e apps"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"*Value Proposition*: manage recipes faster than a typical mouse/GUI driven app"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"*Feature Contribution*:"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"`Ryan` - Media: As a user, I want to share my personal recipes with my friends so that they can try my recipes."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"* add url to recipe `minor`"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"* add image to recipe"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"* share recipe on social media `major`"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"`Nicholas` - Organisation: As a user, I want to organise my recipe storage so that I can maintain ease of access to my recipes."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"* create, edit, delete groups for recipes `major`"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"* save files online (cloud storage)"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"* search recipes by tags `minor`"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"`Hoang Duong` - Efficiency: As a user, I want to efficiently manage my recipes so that I can save time."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* find recipe by name, ingredient, cuisine `minor`"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* filter and sort recipes by cooking time/difficulty level"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"* sort recipes by name"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"* auto-completion, IDE style shortcuts (“manage” because you may need to edit recipes. This auto-completion helps in quickening the process) `major`"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"* get a random recipe"},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"`Thanh Nguyen` - Data: As a user, I want to easily add recipes from the internet so that I can save time on unnecessary typing of recipes."},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"* add recipe in a user friendly manner (not a single command line) `minor`"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"* search and import recipes from internet `major`"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1119,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Add a text recipe |Store my favourite recipes"},{"lineNumber":1120,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1121,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Delete a recipe |Remove recipes which I do not want"},{"lineNumber":1122,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1123,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Find a recipe by name |Locate a recipe without having to search through my entire recipe list"},{"lineNumber":1124,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1125,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Find a recipe by ingredient |Locate recipes that can be cooked with the ingredients I have"},{"lineNumber":1126,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1127,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Edit a recipe |Tweak the stored recipes to my liking"},{"lineNumber":1128,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1129,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Sort recipes by name |Locate a recipe easily"},{"lineNumber":1130,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1131,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |List all my recipes |Browse through my recipes"},{"lineNumber":1132,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1133,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Select a recipe |Look at the details of the recipe"},{"lineNumber":1134,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1135,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Add an image to recipe |See what my product is supposed to look like"},{"lineNumber":1136,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1137,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Favorite a recipe |Have easy access to the recipes of all my favourite food"},{"lineNumber":1138,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1139,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |SNS user + cook |Share a recipe |Show an interesting recipe with my friends"},{"lineNumber":1140,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1141,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Save my files online |Have access to my recipes as long as I have Internet"},{"lineNumber":1142,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1143,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Add a video to recipe |Store my favourite cooking tutorials from YouTube"},{"lineNumber":1144,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1145,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Find a recipe by cuisine |Locate recipes that are of a particular cuisine without having to search through my entire recipe list"},{"lineNumber":1146,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1147,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Rate recipes according to difficulty level |Better categorize my list of recipes"},{"lineNumber":1148,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1149,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |User |Export my recipes to a file |Have a backup to transfer to another device"},{"lineNumber":1150,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1151,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Returning user |Import recipes from exported lib |Have all my recipes without inputting everything again"},{"lineNumber":1152,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1153,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Clumsy user |Undo an action |Revert the book to its prior state when I do something wrong with the book"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"hoangduong1607"},"content":"|`*` |User |See instructions |Refer to the instructions when I forget how to use the app"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Filter recipes by cooking time |Decide on recipes based on my time constraint"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Sort recipes by cooking time |See which recipes take longest / shortest to make"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Filter recipes by difficulty level |Easily locate recipes based on my cooking proficiency"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Lazy user |Import recipes from internet |Have my recipes without manually typing out everything"},{"lineNumber":1164,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1165,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Adventurous cook |Get a random recipe |Get a recipe when I don’t know what to make"},{"lineNumber":1166,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1167,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Bodybuilder + Cook |Get energy info of a recipe |Know which dish has more calories than the amount I burn a day"},{"lineNumber":1168,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1169,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Health-conscious cook |Find a recipe by healthiness rating |Be aware of what kind of food I am eating so that I can take better care of my health"},{"lineNumber":1170,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1171,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Customise my UI |Have a personalised look to my RecipeBook"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"hoangduong1607"},"content":"(For all use cases below, the *System* is the `RecipeBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1182,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d Use case: Add a video to recipe"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"hoangduong1607"},"content":"1.  User requests to list recipes"},{"lineNumber":1187,"author":{"gitID":"hoangduong1607"},"content":"2.  RecipeBook shows a list of recipes"},{"lineNumber":1188,"author":{"gitID":"hoangduong1607"},"content":"3.  User requests to add a video URL to a specific recipe in the list"},{"lineNumber":1189,"author":{"gitID":"hoangduong1607"},"content":"4.  RecipeBook updates recipe to show an embedded video when recipe is selected"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1197,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"hoangduong1607"},"content":"* 3a. The given URL is invalid."},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1203,"author":{"gitID":"hoangduong1607"},"content":"** 3a1. RecipeBook shows an error message."},{"lineNumber":1204,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"hoangduong1607"},"content":"[discrete]"},{"lineNumber":1208,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d Use case: Searching for a specific type of food"},{"lineNumber":1209,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1210,"author":{"gitID":"hoangduong1607"},"content":"*MSS*"},{"lineNumber":1211,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"1.  User types `find chicken`"},{"lineNumber":1213,"author":{"gitID":"hoangduong1607"},"content":"2.  RecipeBook shows a list of recipes that contain chicken"},{"lineNumber":1214,"author":{"gitID":"hoangduong1607"},"content":"3.  User clicks on a particular recipe"},{"lineNumber":1215,"author":{"gitID":"hoangduong1607"},"content":"4.  RecipeBook displays full recipe and details on the main area"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1223,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Adding a recipe"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"1.  User types in a format like below."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"[source]"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"add chicken rice"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"Ingredients: chicken, rice, chili, cucumber"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"Preparation time: 15 mins"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"Instruction: Boil water, put in chicken, cook till done"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"Wash rice, drain, put in rice cooker"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"Slice cucumber"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"Put everything on plate"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"2.  RecipeBook adds the recipe with all data given."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"* 1a. User types in invalid format."},{"lineNumber":1247,"author":{"gitID":"-"},"content":"** 1a1. RecipeBook shows user suggestion on the correct format."},{"lineNumber":1248,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"* 1b. One of the required field (Name, Ingredient, Instruction) is missing."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"** 1b1. RecipeBook reminds user of missing required fields."},{"lineNumber":1252,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"* 1c. User types in an already existing recipe."},{"lineNumber":1255,"author":{"gitID":"-"},"content":"** 1c1. RecipeBook reminds user that such recipe already exists, show the user the recipe."},{"lineNumber":1256,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"RecipeBook reminds user to put in a version number for the recipe if user wants to add a variation to the recipe."},{"lineNumber":1258,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Searching a recipe from the Internet"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"1.  User requires to search for a recipe from the Internet."},{"lineNumber":1267,"author":{"gitID":"-"},"content":"2.  RecipeBook shows the search results on the BrowserPanel, RecipeBook also shows the tips on how to navigate with keyboard."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"3.  User types in the index of the result, starting from 1, or types in the exact name of the result, or navigate with mouse."},{"lineNumber":1269,"author":{"gitID":"-"},"content":"4.  RecipeBook shows the result page on the BrowserPanel."},{"lineNumber":1270,"author":{"gitID":"-"},"content":"5.  RecipeBook reminds user that user can parse the data to add a recipe quickly."},{"lineNumber":1271,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"* 1a. The recipe does not exist."},{"lineNumber":1277,"author":{"gitID":"-"},"content":"** 1a1. This will be handled by the API. No results will show."},{"lineNumber":1278,"author":{"gitID":"-"},"content":"** 1a2. RecipeBook tells user to try another recipe name."},{"lineNumber":1279,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* 3a. The index / name the user types in is invalid / does not exist."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"** 3a1. RecipeBook tells user the index / name the user just inputs does not match any results."},{"lineNumber":1284,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Parsing a recipe from a site"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"1.  User requires to parse for a recipe from a site."},{"lineNumber":1293,"author":{"gitID":"-"},"content":"2.  RecipeBook parses the site and put data into their corresponding field in an `add` command."},{"lineNumber":1294,"author":{"gitID":"-"},"content":"3.  User fills the missing fields and submits the command."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"4.  RecipeBook adds the recipe with given data."},{"lineNumber":1296,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"* 1a. User requires to parse while nothing is being displayed on the BrowserPanel."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"** 1a1. RecipeBook reminds user that parsing is only possible when a recipe site is shown on the BrowserPanel."},{"lineNumber":1303,"author":{"gitID":"-"},"content":"* 1b. User requires to parse while an invalid site is being displayed on the BrowserPanel."},{"lineNumber":1304,"author":{"gitID":"-"},"content":"** 1b1. RecipeBook reminds user that the current site displayed is not a valid recipe site."},{"lineNumber":1305,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1306,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1314,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 recipes without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1315,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1316,"author":{"gitID":"-"},"content":".  A user should be able to quickly understand how to navigate the RecipeBook."},{"lineNumber":1317,"author":{"gitID":"-"},"content":".  The product is not required to handle the printing of recipes."},{"lineNumber":1318,"author":{"gitID":"-"},"content":".  The data is no expected to be secure."},{"lineNumber":1319,"author":{"gitID":"-"},"content":".  The program commands should complete executing within 5 seconds."},{"lineNumber":1320,"author":{"gitID":"-"},"content":".  The system should work on both 32-bit and 64-bit environments."},{"lineNumber":1321,"author":{"gitID":"-"},"content":".  Images deemed too offensive should not be added to the recipe book."},{"lineNumber":1322,"author":{"gitID":"-"},"content":".  UI should be visually appealing."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1340,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample recipes. The window size may not be optimum."},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1346,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1347,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a recipe"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":". Deleting a recipe while all recipes are listed"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":".. Prerequisites: List all recipes using the `list` command. Multiple recipes in the list."},{"lineNumber":1356,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"   Expected: First recipe is deleted from the list. Details of the deleted recipe shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1358,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"   Expected: No recipe is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1360,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1366,"author":{"gitID":"-"},"content":""},{"lineNumber":1367,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":"[[ReciRecipe]] ReciRecipé / RecipeBook::"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"This name is derived from \"**Reci**te\" and \"**Recipé**\", an alternate spelling of \"Recipe\". ReciRecipé is what will tell you all the info you need about your recipes so you don\u0027t have to remember your recipes anymore. Also, ReciRecipé sounds fun and kinda French."},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"[[API]] API::"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"Abbreviation of **Application Programming Interface**."},{"lineNumber":1381,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1382,"author":{"gitID":"-"},"content":"API is a set of subroutine definitions, protocols, and tools for building application software. In general terms, it is a set of clearly defined methods of communication between various software components. Definition taken from link:https://en.wikipedia.org/wiki/Application_programming_interface[wiki]."},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"[[CI]] CI::"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"Abbreviation of **Continuous Integration**."},{"lineNumber":1386,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"CI is the practice of merging all developer working copies to a shared mainline several times a day. Definition taken from link:https://en.wikipedia.org/wiki/Continuous_integration[wiki]."},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":"[[CLI]] CLI::"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"Abbreviation of **Command Line Interface**."},{"lineNumber":1391,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"As contrast to \u003c\u003cGUI,GUI\u003e\u003e, CLI is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). Definition taken from link:https://en.wikipedia.org/wiki/Command-line_interface[wiki]."},{"lineNumber":1393,"author":{"gitID":"-"},"content":""},{"lineNumber":1394,"author":{"gitID":"-"},"content":"[[CSS]] CSS::"},{"lineNumber":1395,"author":{"gitID":"-"},"content":"Abbreviation of **Cascading Style Sheets**."},{"lineNumber":1396,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1397,"author":{"gitID":"-"},"content":"CSS is is a style sheet language used for describing the presentation of a document written in a markup language. Definition taken from link:https://en.wikipedia.org/wiki/Cascading_Style_Sheets[wiki]. All visual effects in ReciRecipé are written in CSS."},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":"[[GUI]] GUI::"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"Abbreviation of **Graphical User Interface**."},{"lineNumber":1401,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"As contrast to \u003c\u003cCLI,CLI\u003e\u003e, GUI is a type of user interface that allows users to interact with electronic devices through graphical icons and visual indicators such as secondary notation, instead of text-based user interfaces, typed command labels or text navigation. Definition taken from link:https://en.wikipedia.org/wiki/Graphical_user_interface[wiki]."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1405,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"}],"authorContributionMap":{"RyanAngJY":37,"hoangduong1607":151,"-":1217}},{"path":"src/test/java/seedu/recipe/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlAdaptedRecipe;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlSerializableRecipeBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validRecipeBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_RECIPE_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingRecipeField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_RECIPE_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidRecipeField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_RECIPE_FILE \u003d new File(TEST_DATA_FOLDER + \"validRecipe.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempRecipeBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PREPARATION_TIME \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Chicken Rice\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_INGREDIENT \u003d \"demolishment,bigwig,archer,negative,appearance,afternoon\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_INSTRUCTION \u003d \"Fill a tea kettle or 2 quart saucepan with water and bring to \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"a boil. Remove excess fat from chilled chicken and place in colander over a large bowl. Spread out with\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \" a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave for 2–3 minutes, \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"stirring after 1½ minutes to heat evenly. Combine finely shredded lettuce and cabbage. Mix cheeses \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"together. Place ¼ cup heated chicken mixture in a tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Add salsa as desired.\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String VALID_COOKING_TIME \u003d \"20 min\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String VALID_PREPARATION_TIME \u003d \"69 hours\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String VALID_CALORIES \u003d \"5000\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String VALID_SERVINGS \u003d \"2\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_URL \u003d \"https://www.google.com\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"best\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, RecipeBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, RecipeBook.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, RecipeBook.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        RecipeBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableRecipeBook.class).toModelType();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getRecipeList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithMissingRecipeField_validResult() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                MISSING_RECIPE_FIELD_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(null, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithInvalidRecipeField_validResult() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                INVALID_RECIPE_FIELD_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                        INVALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithValidRecipe_validResult() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                VALID_RECIPE_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new RecipeBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new RecipeBook());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        XmlSerializableRecipeBook dataToWrite \u003d new XmlSerializableRecipeBook(new RecipeBook());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        XmlSerializableRecipeBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableRecipeBook.class);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        RecipeBookBuilder builder \u003d new RecipeBookBuilder(new RecipeBook());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableRecipeBook("},{"lineNumber":150,"author":{"gitID":"-"},"content":"                builder.withRecipe(new RecipeBuilder().build()).withTag(\"food\").build());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableRecipeBook.class);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedRecipe}"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"recipe\")"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedRecipeWithRootElement extends XmlAdaptedRecipe {}"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":162}},{"path":"src/test/java/seedu/recipe/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_COOKING_TIME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_SERVINGS_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_URL_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.LF;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Recipe expectedRecipe \u003d"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_BOB).withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_BOB).withCalories(VALID_CALORIES_BOB)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                        .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                        .withIngredient(VALID_INGREDIENT_BOB).withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"                        .withUrl(VALID_URL_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                PREAMBLE_WHITESPACE + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                NAME_DESC_AMY + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // multiple preparationTimes - last preparationTime accepted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_AMY + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // multiple ingredients - last ingredient accepted"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_AMY + INGREDIENT_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // multiple instructions - last recipe accepted"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"        // multiple urls - last url accepted"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"                + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_BOB + URL_DESC_AMY + URL_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Recipe expectedRecipeMultipleTags \u003d"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_BOB).withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_BOB).withCalories(VALID_CALORIES_BOB)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                        .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                        .withIngredient(VALID_INGREDIENT_BOB).withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"                        .withUrl(VALID_URL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                new AddCommand(expectedRecipeMultipleTags));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"    public void parse_allFieldsPresentWithNewLineDelimiter_success() {"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"        Recipe expectedRecipe \u003d new RecipeBuilder().withName(VALID_NAME_AMY).withServings(VALID_SERVINGS_AMY)"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY).withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY).withUrl(VALID_URL_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"        // Multiple names - last name accepted"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + LF"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":150,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":151,"author":{"gitID":"kokonguyen191"},"content":"        // multiple ingredients - last ingredient accepted"},{"lineNumber":152,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, INGREDIENT_DESC_BOB + LF"},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":"        // multiple preparationTimes - last instruction accepted"},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, INSTRUCTION_DESC_BOB + LF"},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last cooking time"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, COOKING_TIME_DESC_BOB + LF"},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last preparation time"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, PREPARATION_TIME_DESC_BOB + LF"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last calories"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, CALORIES_DESC_BOB + LF"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last servings"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, SERVINGS_DESC_BOB + LF"},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":194,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":197,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":198,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":199,"author":{"gitID":"kokonguyen191"},"content":"        // multiple url - last url accepted"},{"lineNumber":200,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, URL_DESC_BOB + LF"},{"lineNumber":201,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":202,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":205,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":206,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":207,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":208,"author":{"gitID":"kokonguyen191"},"content":"        // multiple tags - all accepted"},{"lineNumber":209,"author":{"gitID":"kokonguyen191"},"content":"        Recipe expectedRecipeMultipleTags \u003d new RecipeBuilder().withName(VALID_NAME_AMY).withServings("},{"lineNumber":210,"author":{"gitID":"kokonguyen191"},"content":"                VALID_SERVINGS_AMY).withPreparationTime(VALID_PREPARATION_TIME_AMY).withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":211,"author":{"gitID":"kokonguyen191"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":212,"author":{"gitID":"kokonguyen191"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY).withUrl(VALID_URL_AMY)"},{"lineNumber":213,"author":{"gitID":"kokonguyen191"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":214,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY + LF + INGREDIENT_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INSTRUCTION_DESC_AMY + LF + URL_DESC_AMY + LF + COOKING_TIME_DESC_AMY + LF"},{"lineNumber":216,"author":{"gitID":"kokonguyen191"},"content":"                        + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":217,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipeMultipleTags));"},{"lineNumber":218,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        Recipe expectedRecipe \u003d"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_AMY).withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":226,"author":{"gitID":"RyanAngJY"},"content":"                        .withIngredient(VALID_INGREDIENT_AMY).withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"                        .withCookingTime(VALID_COOKING_TIME_AMY).withUrl(VALID_URL_AMY).withTags().build();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":230,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY + INSTRUCTION_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                        + URL_DESC_AMY + COOKING_TIME_DESC_AMY + CALORIES_DESC_AMY + SERVINGS_DESC_AMY,"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":241,"author":{"gitID":"RyanAngJY"},"content":"                VALID_NAME_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":242,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB, expectedMessage);"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // missing ingredient prefix"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":246,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + VALID_INGREDIENT_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":247,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB, expectedMessage);"},{"lineNumber":248,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":249,"author":{"gitID":"RyanAngJY"},"content":"        // missing instruction prefix"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":251,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_INSTRUCTION_BOB"},{"lineNumber":252,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB, expectedMessage);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":256,"author":{"gitID":"RyanAngJY"},"content":"                VALID_NAME_BOB + VALID_PREPARATION_TIME_BOB + VALID_INGREDIENT_BOB + VALID_INSTRUCTION_BOB"},{"lineNumber":257,"author":{"gitID":"RyanAngJY"},"content":"                        + VALID_URL_BOB, expectedMessage);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                INVALID_NAME_DESC + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":265,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        //@@Author kokonguyen191"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // invalid ingredient"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INVALID_INGREDIENT_DESC + INSTRUCTION_DESC_BOB"},{"lineNumber":271,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":272,"author":{"gitID":"RyanAngJY"},"content":"                Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"RyanAngJY"},"content":"        // invalid instruction"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INVALID_INSTRUCTION_DESC"},{"lineNumber":277,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":278,"author":{"gitID":"RyanAngJY"},"content":"                Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":279,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"        // invalid preparation time"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":282,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + INVALID_PREPARATION_TIME_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":283,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":284,"author":{"gitID":"RyanAngJY"},"content":"                PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        // invalid cooking time"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + INVALID_COOKING_TIME_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":289,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        // invalid calories"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":294,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + INVALID_CALORIES_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":295,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":296,"author":{"gitID":"-"},"content":"                Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // invalid servings"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":300,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + INVALID_SERVINGS_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":301,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":302,"author":{"gitID":"-"},"content":"                Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":305,"author":{"gitID":"RyanAngJY"},"content":"        // invalid url"},{"lineNumber":306,"author":{"gitID":"RyanAngJY"},"content":"        assertParseFailure(parser,"},{"lineNumber":307,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":308,"author":{"gitID":"RyanAngJY"},"content":"                        + INVALID_URL_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":309,"author":{"gitID":"RyanAngJY"},"content":"                        Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":310,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":314,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":315,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":319,"author":{"gitID":"RyanAngJY"},"content":"                INVALID_NAME_DESC + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INVALID_INSTRUCTION_DESC"},{"lineNumber":320,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":324,"author":{"gitID":"RyanAngJY"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":325,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":326,"author":{"gitID":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":86,"RyanAngJY":58,"-":184}},{"path":"src/test/java/seedu/recipe/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_INGREDIENT_AMY \u003d \"this,is,a,test\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_INGREDIENT_BOB \u003d \"some, ingredients, here\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_INSTRUCTION_AMY \u003d \"Block 312, \\nAmy Street 1\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_INSTRUCTION_BOB \u003d \"Block 123, \\nBobby Street 3\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_COOKING_TIME_AMY \u003d \"1111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_COOKING_TIME_BOB \u003d \"2222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_PREPARATION_TIME_AMY \u003d \"150h\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PREPARATION_TIME_BOB \u003d \"200m\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_CALORIES_AMY \u003d \"11122\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_CALORIES_BOB \u003d \"5000\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_SERVINGS_AMY \u003d \"3\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_SERVINGS_BOB \u003d \"4\";"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_URL_AMY \u003d \"https://www.bbcgoodfood.com/recipes/volcano-cake\";"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_URL_BOB \u003d \"https://www.bbcgoodfood.com/recipes/collection/chicken-salad\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String INGREDIENT_DESC_AMY \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INGREDIENT_DESC_BOB \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INSTRUCTION_DESC_AMY \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INSTRUCTION_DESC_BOB \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String COOKING_TIME_DESC_AMY \u003d \" \" + PREFIX_COOKING_TIME + VALID_COOKING_TIME_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String COOKING_TIME_DESC_BOB \u003d \" \" + PREFIX_COOKING_TIME + VALID_COOKING_TIME_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String PREPARATION_TIME_DESC_AMY \u003d \" \" + PREFIX_PREPARATION_TIME + VALID_PREPARATION_TIME_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String PREPARATION_TIME_DESC_BOB \u003d \" \" + PREFIX_PREPARATION_TIME + VALID_PREPARATION_TIME_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String CALORIES_DESC_AMY \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String CALORIES_DESC_BOB \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String SERVINGS_DESC_AMY \u003d \" \" + PREFIX_SERVINGS + VALID_SERVINGS_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String SERVINGS_DESC_BOB \u003d \" \" + PREFIX_SERVINGS + VALID_SERVINGS_BOB;"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"    public static final String URL_DESC_AMY \u003d \" \" + PREFIX_URL + VALID_URL_AMY;"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"    public static final String URL_DESC_BOB \u003d \" \" + PREFIX_URL + VALID_URL_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    // \u0027a\u0027 not allowed in preparationTimes"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_INGREDIENT_DESC \u003d \" \" + PREFIX_INGREDIENT + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    // empty string not allowed for instructions"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_INSTRUCTION_DESC \u003d \" \" + PREFIX_INSTRUCTION;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_COOKING_TIME_DESC \u003d \" \" + PREFIX_COOKING_TIME + \"911a\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_PREPARATION_TIME_DESC \u003d \" \" + PREFIX_PREPARATION_TIME + \"911a\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"no lah\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_SERVINGS_DESC \u003d \" \" + PREFIX_SERVINGS + \"can\u0027t do\";"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":"    // missing \"https://\" or \"http://\""},{"lineNumber":84,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INVALID_URL_DESC \u003d \" \" + PREFIX_URL + \"www.google.com\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String LF \u003d \"\\n\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditRecipeDescriptor DESC_AMY;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditRecipeDescriptor DESC_BOB;"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditRecipeDescriptorBuilder()"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditRecipeDescriptorBuilder()"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * - the recipe book and the filtered recipe list in the {@code actualModel} remain unchanged"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":142,"author":{"gitID":"-"},"content":"        RecipeBook expectedRecipeBook \u003d new RecipeBook(actualModel.getRecipeBook());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            assertEquals(expectedRecipeBook, actualModel.getRecipeBook());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s recipe book."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static void showRecipeAtIndex(Model model, Index targetIndex) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredRecipeList().size());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Deletes the first recipe in {@code model}\u0027s filtered list from {@code model}\u0027s recipe book."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static void deleteFirstRecipe(Model model) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(0);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            model.deleteRecipe(firstRecipe);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (RecipeNotFoundException pnfe) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Recipe in filtered list must exist in model.\", pnfe);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":8,"-":190}},{"path":"src/test/java/seedu/recipe/model/recipe/UrlTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"public class UrlTest {"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Url(null));"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_invalidUrl_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"        String invalidUrl \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Url(invalidUrl));"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public void isValidUrl() {"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        // blank Url"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\"\")); // empty string"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\" \")); // spaces only"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        // invalid Url"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\"www.google.com\")); // \"http://\" of \"https://\" not at the beginning of Url"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        // valid Url"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"http://www.google.com\")); // \"http://\" at the beginning of Url"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"https://www.google.com\")); // \"https://\" at the beginning of Url"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\" http://www.google.com\")); // leading space"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"http://www.google.com \")); // trailing space"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"https://www.google.com.sg/search\""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"                + \"?ei\u003d1oqfWryFJYvtvgS2kovIDw\u0026q\u003dlong+url+trying+to+add+words\u0026oq\""},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003dlong+url+trying+to+add+words\u0026gs_l\u003dpsy-ab.3...16827.19809.0.19937\""},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"                + \".20.20.0.0.0.0.131.1429.15j3.18.0....0...1c.1.64.psy-ab..2.9.695...0j0\""},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"                + \"i20i263k1j0i22i30k1j33i160k1j33i21k1j33i22i29i30k1.0.ToeND2eqJXA\")); // long url"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":44}},{"path":"src/test/java/seedu/recipe/storage/XmlAdaptedRecipeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.storage.XmlAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedRecipeTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"B\u003c\u003eY\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_INSTRUCTION \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_INGREDIENT \u003d \"no u 55555...;;;;\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_COOKING_TIME \u003d \"aaaa\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_PREPARATION_TIME \u003d \"bbbb\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_CALORIES \u003d \"cccc\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_SERVINGS \u003d \"dddd\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_URL \u003d \"THIS@IS@NOT@AN@URL\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#hastagfriendzone\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_INGREDIENT \u003d BENSON.getIngredient().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_INSTRUCTION \u003d BENSON.getInstruction().toString();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_COOKING_TIME \u003d BENSON.getCookingTime().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PREPARATION_TIME \u003d BENSON.getPreparationTime().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_CALORIES \u003d BENSON.getCalories().toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_SERVINGS \u003d BENSON.getServings().toString();"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_URL \u003d BENSON.getUrl().toString();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        .map(XmlAdaptedTag::new)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(BENSON);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, recipe.toModelType());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(INVALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(null, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void toModelType_invalidIngredient_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            new XmlAdaptedRecipe(VALID_NAME, INVALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void toModelType_nullIngredient_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, null, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ingredient.class.getSimpleName());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void toModelType_invalidInstruction_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, INVALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void toModelType_nullInstruction_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, null,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_COOKING_TIME, VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Instruction.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPreparationTime_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                        INVALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void toModelType_nullPreparationTime_throwsIllegalValueException() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                VALID_COOKING_TIME, null, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PreparationTime.class.getSimpleName());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void toModelType_invalidCookingTime_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, INVALID_COOKING_TIME,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void toModelType_nullCookingTime_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                null, VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CookingTime.class.getSimpleName());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void toModelType_invalidCalories_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_PREPARATION_TIME,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                        VALID_COOKING_TIME, INVALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Calories.MESSAGE_CALORIES_CONSTRAINTS;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void toModelType_nullCalories_throwsIllegalValueException() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                VALID_PREPARATION_TIME, VALID_COOKING_TIME, null, VALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void toModelType_invalidServings_throwsIllegalValueException() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_PREPARATION_TIME,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                        VALID_COOKING_TIME, VALID_CALORIES, INVALID_SERVINGS, VALID_URL, VALID_TAGS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Servings.MESSAGE_SERVINGS_CONSTRAINTS;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void toModelType_nullServings_throwsIllegalValueException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                VALID_PREPARATION_TIME, VALID_COOKING_TIME, VALID_CALORIES, null, VALID_URL, VALID_TAGS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Servings.class.getSimpleName());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":173,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":174,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_invalidUrl_throwsIllegalValueException() {"},{"lineNumber":176,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":177,"author":{"gitID":"RyanAngJY"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":178,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, INVALID_URL, VALID_TAGS);"},{"lineNumber":179,"author":{"gitID":"RyanAngJY"},"content":"        String expectedMessage \u003d Url.MESSAGE_URL_CONSTRAINTS;"},{"lineNumber":180,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":181,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":183,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_nullUrl_throwsIllegalValueException() {"},{"lineNumber":185,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":186,"author":{"gitID":"RyanAngJY"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":187,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, null, VALID_TAGS);"},{"lineNumber":188,"author":{"gitID":"RyanAngJY"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName());"},{"lineNumber":189,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":190,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":192,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":193,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":194,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":196,"author":{"gitID":"RyanAngJY"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":197,"author":{"gitID":"RyanAngJY"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":199,"author":{"gitID":"RyanAngJY"},"content":"            new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":200,"author":{"gitID":"RyanAngJY"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, invalidTags);"},{"lineNumber":201,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, recipe::toModelType);"},{"lineNumber":202,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":204,"author":{"gitID":"RyanAngJY"},"content":"}"}],"authorContributionMap":{"RyanAngJY":35,"-":169}},{"path":"src/test/java/seedu/recipe/testutil/RecipeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class for Recipe."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class RecipeUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code recipe}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Recipe recipe) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code recipe}\u0027s details."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static String getRecipeDetails(Recipe recipe) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + recipe.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_INGREDIENT + recipe.getIngredient().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_INSTRUCTION + recipe.getInstruction().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_COOKING_TIME + recipe.getCookingTime().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PREPARATION_TIME + recipe.getPreparationTime().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_CALORIES + recipe.getCalories().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_SERVINGS + recipe.getServings().value + \" \");"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"        sb.append(PREFIX_URL + recipe.getUrl().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        recipe.getTags().stream().forEach("},{"lineNumber":42,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":44}},{"path":"src/test/java/seedu/recipe/testutil/RecipeBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building Recipe objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class RecipeBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_INGREDIENT \u003d \"demolishment,bigwig,archer,negative,appearance,afternoon\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_INSTRUCTION \u003d \"Fill a tea kettle or 2 quart saucepan with water and bring to \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"a boil. Remove excess fat from chilled chicken and place in colander over a large bowl. Spread out with\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \" a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave for 2–3 minutes, \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"stirring after 1½ minutes to heat evenly. Combine finely shredded lettuce and cabbage. Mix cheeses \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"together. Place ¼ cup heated chicken mixture in a tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Add salsa as desired.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_COOKING_TIME \u003d \"20 mins\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PREPARATION_TIME \u003d \"69 hours\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CALORIES \u003d \"5000\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_SERVINGS \u003d \"2\";"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"    public static final String DEFAULT_URL \u003d \"https://www.jamieoliver.com/recipes/rice-recipes/a-basic-risotto-recipe/\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Ingredient ingredient;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Instruction instruction;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private CookingTime cookingTime;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private PreparationTime preparationTime;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Calories calories;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Servings servings;"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"    private Url url;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public RecipeBuilder() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ingredient \u003d new Ingredient(DEFAULT_INGREDIENT);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        instruction \u003d new Instruction(DEFAULT_INSTRUCTION);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        cookingTime \u003d new CookingTime(DEFAULT_COOKING_TIME);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        preparationTime \u003d new PreparationTime(DEFAULT_PREPARATION_TIME);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        calories \u003d new Calories(DEFAULT_CALORIES);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        servings \u003d new Servings(DEFAULT_SERVINGS);"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d new Url(DEFAULT_URL);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public RecipeBuilder(Recipe recipeToCopy) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d recipeToCopy.getName();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ingredient \u003d recipeToCopy.getIngredient();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        instruction \u003d recipeToCopy.getInstruction();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        cookingTime \u003d recipeToCopy.getCookingTime();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        preparationTime \u003d recipeToCopy.getPreparationTime();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        calories \u003d recipeToCopy.getCalories();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        servings \u003d recipeToCopy.getServings();"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d recipeToCopy.getUrl();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Recipe} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public RecipeBuilder withName(String name) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Instruction} of the {@code Recipe} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public RecipeBuilder withInstruction(String instruction) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.instruction \u003d new Instruction(instruction);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Sets the {@code Ingredient} of the {@code Recipe} that we are building."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public RecipeBuilder withIngredient(String ingredient) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.ingredient \u003d new Ingredient(ingredient);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Sets the {@code CookingTime} of the {@code Recipe} that we are building."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public RecipeBuilder withCookingTime(String cookingTime) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        this.cookingTime \u003d new CookingTime(cookingTime);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Sets the {@code PreparationTime} of the {@code Recipe} that we are building."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public RecipeBuilder withPreparationTime(String preparationTime) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        this.preparationTime \u003d new PreparationTime(preparationTime);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Sets the {@code Calories} of the {@code Recipe} that we are building."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public RecipeBuilder withCalories(String calories) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        this.calories \u003d new Calories(calories);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Sets the {@code Servings} of the {@code Recipe} that we are building."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public RecipeBuilder withServings(String servings) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        this.servings \u003d new Servings(servings);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":137,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code Recipe} that we are building."},{"lineNumber":139,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"RyanAngJY"},"content":"    public RecipeBuilder withUrl(String url) {"},{"lineNumber":141,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d new Url(url);"},{"lineNumber":142,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":143,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public RecipeBuilder withTags(String ... tags) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"RyanAngJY"},"content":"    public Recipe build() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings, url, tags);"},{"lineNumber":156,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":16,"-":141}},{"path":"src/test/java/seedu/recipe/testutil/TypicalRecipes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Recipe} objects to be used in tests."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class TypicalRecipes {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Recipe ALICE \u003d new RecipeBuilder()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withName(\"Alice Pauline\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withIngredient(\"demolishment,bigwig,archer,negative,appearance,afternoon\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withInstruction(\"Fill a tea kettle or 2 quart saucepan with water and bring to a boil.\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    + \" Remove excess fat from chilled chicken and place in colander over a large bowl.\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    + \" Spread out with a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    + \" for 2–3 minutes, stirring after 1½ minutes to heat evenly. Combine finely shredded\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    + \" lettuce and cabbage. Mix cheeses together. Place ¼ cup heated chicken mixture in a \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    + \"tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    + \"Add salsa as desired.\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"85355255\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/baked-potato\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withTags(\"family\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Recipe BENSON \u003d new RecipeBuilder()"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withName(\"Benson Meier\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withIngredient(\"guest, barnyard, genuine, salt\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .withInstruction(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"98765432\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/burger\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"family\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Recipe CARL \u003d new RecipeBuilder()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withName(\"Carl Kurz\")"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withIngredient(\"gadget\")"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withInstruction(\"wall street\")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"95352563\")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/casserole\")"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final Recipe DANIEL \u003d new RecipeBuilder()"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            .withName(\"Daniel Meier\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withIngredient(\"ebony, cold, affliction\")"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .withInstruction(\"10th street\")"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"87652533\")"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/curry\").build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final Recipe ELLE \u003d new RecipeBuilder()"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .withName(\"Elle Meyer\")"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            .withIngredient(\"frantic,aimless\")"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            .withInstruction(\"michegan ave\")"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482224\")"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/fish-pie\").build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final Recipe FIONA \u003d new RecipeBuilder()"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            .withName(\"Fiona Kunz\")"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            .withIngredient(\"bluntness,falls\")"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            .withInstruction(\"little tokyo\")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482427\")"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":101,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/chicken-salad\").build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final Recipe GEORGE \u003d new RecipeBuilder()"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            .withName(\"George Best\")"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            .withIngredient(\"confidence, abandon, brass, model, greed, minipill\")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            .withInstruction(\"4th street\")"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482442\")"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/crumble\").build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final Recipe HOON \u003d new RecipeBuilder()"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            .withName(\"Hoon Meier\")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            .withIngredient(\"test, ingredients\")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            .withInstruction(\"little india\")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            .withCookingTime(\"5555\")"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"420m\")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            .withCalories(\"15000\")"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            .withServings(\"2\")"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.google.com\").build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final Recipe IDA \u003d new RecipeBuilder()"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            .withIngredient(\"just,example\")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            .withInstruction(\"chicago ave\")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            .withCookingTime(\"5555\")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"420m\")"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            .withCalories(\"15000\")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            .withServings(\"2\")"},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.google.com\").build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static final Recipe AMY \u003d new RecipeBuilder()"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            .withName(VALID_NAME_AMY)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            .withUrl(VALID_URL_AMY)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static final Recipe BOB \u003d new RecipeBuilder()"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            .withName(VALID_NAME_BOB)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            .withUrl(VALID_URL_BOB)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private TypicalRecipes() {} // prevents instantiation"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns an {@code RecipeBook} with all the typical recipes."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static RecipeBook getTypicalRecipeBook() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        RecipeBook ab \u003d new RecipeBook();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        for (Recipe recipe : getTypicalRecipes()) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                ab.addRecipe(recipe);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            } catch (DuplicateRecipeException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static List\u003cRecipe\u003e getTypicalRecipes() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":10,"-":166}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 50000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":104}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextArea\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextArea commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"     * Append the given string to text already existing in the Command box"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    public void appendText(String text) {"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.interact(() -\u003e getRootNode().appendText(text));"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":9,"-":47}},{"path":"src/test/java/seedu/recipe/testutil/EditRecipeDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building EditRecipeDescriptor objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class EditRecipeDescriptorBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private EditRecipeDescriptor descriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder(EditRecipeDescriptor descriptor) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder(Recipe recipe) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setName(recipe.getName());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setIngredient(recipe.getIngredient());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setInstruction(recipe.getInstruction());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setCookingTime(recipe.getCookingTime());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setPreparationTime(recipe.getPreparationTime());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setCalories(recipe.getCalories());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        descriptor.setServings(recipe.getServings());"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setUrl(recipe.getUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setTags(recipe.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Ingredient} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withIngredient(String ingredient) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        descriptor.setIngredient(new Ingredient(ingredient));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Sets the {@code Instruction} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withInstruction(String instruction) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        descriptor.setInstruction(new Instruction(instruction));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sets the {@code CookingTime} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withCookingTime(String cookingTime) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        descriptor.setCookingTime(new CookingTime(cookingTime));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Sets the {@code PreparationTime} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withPreparationTime(String preparationTime) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        descriptor.setPreparationTime(new PreparationTime(preparationTime));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the {@code Calories} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withCalories(String calories) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        descriptor.setCalories(new Calories(calories));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the {@code Servings} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withServings(String servings) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        descriptor.setServings(new Servings(servings));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    //@@Author RyanAngJY"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"    public EditRecipeDescriptorBuilder withUrl(String url) {"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setUrl(new Url(url));"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    //@@Author"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRecipeDescriptor}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withTags(String... tags) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptor build() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":11,"-":119}},{"path":"src/main/java/seedu/recipe/ui/CssSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":" * Contains CSS (Cascading Style Sheet) syntax."},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"public class CssSyntax {"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"    public static final String CSS_PROPERTY_BACKGROUND_COLOR \u003d \"-fx-background-color: \";"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"    public static final String CSS_PROPERTY_TEXT_COLOR \u003d \"-fx-text-fill: \";"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":13}},{"path":"src/test/java/guitests/guihandles/RecipeCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a recipe card in the recipe list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RecipeCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String INSTRUCTION_FIELD_ID \u003d \"#instruction\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PREPARATION_TIME_FIELD_ID \u003d \"#preparationTime\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String INGREDIENT_FIELD_ID \u003d \"#ingredient\";"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    private static final String URL_FIELD_ID \u003d \"#url\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label instructionLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label preparationTimeLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label ingredientLabel;"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"    private final Label urlLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public RecipeCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.instructionLabel \u003d getChildNode(INSTRUCTION_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.preparationTimeLabel \u003d getChildNode(PREPARATION_TIME_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.ingredientLabel \u003d getChildNode(INGREDIENT_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        this.urlLabel \u003d getChildNode(URL_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getInstruction() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return instructionLabel.getText();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getPreparationTime() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return preparationTimeLabel.getText();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getIngredient() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return ingredientLabel.getText();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"    public String getUrl() {"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"        return urlLabel.getText();"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":7,"-":71}},{"path":"src/main/java/seedu/recipe/ui/util/KeyboardShortcutsMapping.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.input.KeyCodeCombination;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"content":"//@@author {yourGithubUsername}"},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Contains all mappings for keyboard shortcuts"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class KeyboardShortcutsMapping {"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination COMMAND_SUBMISSION \u003d"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"        (KeyCodeCombination) KeyCodeCombination.valueOf(\"Enter\");"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination LAST_COMMAND \u003d"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"        (KeyCodeCombination) KeyCodeCombination.valueOf(\"Up\");"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination NEXT_COMMAND \u003d"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"        (KeyCodeCombination) KeyCodeCombination.valueOf(\"Down\");"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination NEW_LINE_IN_COMMAND \u003d"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"        (KeyCodeCombination) KeyCodeCombination.valueOf(\"Shift+Enter\");"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination SHOW_SUGGESTIONS_COMMAND \u003d"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"        (KeyCodeCombination) KeyCodeCombination.valueOf(\"Shift+Space\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"hoangduong1607":11,"-":8}},{"path":"src/main/java/seedu/recipe/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.COMMAND_SUBMISSION;"},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.LAST_COMMAND;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEW_LINE_IN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEXT_COMMAND;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.ListElementPointer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"    private static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private TextArea commandTextArea;"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"    private SuggestionsPopUp suggestionsPopUp;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":45,"author":{"gitID":"-"},"content":"        commandTextArea.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp \u003d new SuggestionsPopUp(this);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp.hideSuggestions();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (COMMAND_SUBMISSION.match(keyEvent)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            submitCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } else if (LAST_COMMAND.match(keyEvent)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } else if (NEXT_COMMAND.match(keyEvent)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } else if (NEW_LINE_IN_COMMAND.match(keyEvent)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            createNewLine();"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"        } else if (SHOW_SUGGESTIONS_COMMAND.match(keyEvent)) {"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"            suggestionsPopUp.showSuggestions();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"    protected void replaceText(String text) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        commandTextArea.setText(text);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        commandTextArea.positionCaret(commandTextArea.getText().length());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Append a line feed character to the command area"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void createNewLine() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        int caretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        StringBuilder commandTextStringBuilder \u003d new StringBuilder(commandTextArea.getText());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        commandTextStringBuilder.insert(caretPosition, LF);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String newCommandText \u003d commandTextStringBuilder.toString();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandTextArea.setText(newCommandText);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandTextArea.positionCaret(caretPosition + 1);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Handles the command submission."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void submitCommand() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextArea.getText());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            commandTextArea.setText(\"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextArea.getText());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":151,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandTextArea.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextArea.getStyleClass();"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"hoangduong1607"},"content":"     * Gets TextArea object in CommandBox"},{"lineNumber":176,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"hoangduong1607"},"content":"    protected TextArea getCommandTextArea() {"},{"lineNumber":178,"author":{"gitID":"hoangduong1607"},"content":"        return commandTextArea;"},{"lineNumber":179,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hoangduong1607":20,"-":160}},{"path":"src/main/java/seedu/recipe/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.RecipePanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadRecipePage(Recipe recipe) {"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        loadPage(recipe.getUrl().toString());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handleRecipePanelSelectionChangedEvent(RecipePanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadRecipePage(event.getNewSelection().recipe);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":71}},{"path":"src/main/java/seedu/recipe/ui/util/AutoCompletionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.CliSyntax;"},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":" * Contains constants needed for auto-completion"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"public class AutoCompletionUtil {"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"    public static final String[] APPLICATION_KEYWORDS \u003d {\"add\", \"clear\", \"delete\", \"edit\", \"exit\", \"find\","},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"        \"help\", \"history\", \"list\", \"redo\", \"select\", \"tag\", \"undo\", CliSyntax.PREFIX_INGREDIENT.toString(),"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"        CliSyntax.PREFIX_INSTRUCTION.toString(), CliSyntax.PREFIX_NAME.toString(),"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"        CliSyntax.PREFIX_PREPARATION_TIME.toString(), CliSyntax.PREFIX_TAG.toString(),"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"        CliSyntax.PREFIX_URL.toString()};"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    public static final int MAX_SUGGESTIONS \u003d 8;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":16}},{"path":"src/main/java/seedu/recipe/ui/RecipeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Recipe}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RecipeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"RecipeListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RecipeBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Recipe recipe;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label preparationTime;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label instruction;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label ingredient;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"    private Label url;"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public RecipeCard(Recipe recipe, int displayedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.recipe \u003d recipe;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        name.setText(recipe.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        preparationTime.setText(recipe.getPreparationTime().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        instruction.setText(recipe.getInstruction().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ingredient.setText(recipe.getIngredient().value);"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"        url.setText(recipe.getUrl().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        initTags(recipe);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        // the hash code of the tag name is used to generate a random color for each tag,"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        // color remains consistent between different runs of the program since hash code does not change"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"        String hexadecimalHashCode \u003d UiUtil.convertIntToHexadecimalString(tagName.hashCode());"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"        String hexadecimalColorCode \u003d UiUtil.convertStringToValidColorCode(hexadecimalHashCode);"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"        return hexadecimalColorCode;"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"     * Creates the tag labels for {@code recipe}."},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"    private void initTags(Recipe recipe) {"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"        recipe.getTags().forEach(tag -\u003e {"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"            String labelBackgroundColor \u003d getTagColorStyleFor(tag.tagName);"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"            UiUtil.setLabelColor(tagLabel, labelBackgroundColor);"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"        });"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!(other instanceof RecipeCard)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        RecipeCard card \u003d (RecipeCard) other;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 recipe.equals(card.recipe);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":28,"-":70}},{"path":"src/main/java/seedu/recipe/ui/util/TextInputProcessorUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.text.Font;"},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.text.Text;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":" * Provides basic functions for processing text input"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"public class TextInputProcessorUtil {"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    private static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"    private static final char SPACE \u003d \u0027 \u0027;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    private String content;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    private Font font;"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    private Text text;"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    public TextInputProcessorUtil() {"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"        content \u003d new String();"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"        text \u003d new Text();"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"     * Gets X-coordinate of caret"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"    public double getCaretPositionX() {"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"        Text lastLine \u003d new Text(getTextWithoutLastWord(getLastLine()));"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        lastLine.setFont(font);"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"        return lastLine.prefWidth(-1);"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"     * Gets Y-coordinate of caret"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"    public double getCaretPositionY() {"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"        return text.prefHeight(-1);"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"     * Gets last word from {@code content}"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"    public String getLastWord() {"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"        String lastWord \u003d new String(\"\");"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d content.length() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"            if (isWordSeparator(content.charAt(i))) {"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"            lastWord \u003d content.charAt(i) + lastWord;"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"        return lastWord;"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether {@code inputChar} is a word separator"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"    private boolean isWordSeparator(char inputChar) {"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"        return (inputChar \u003d\u003d LF || inputChar \u003d\u003d SPACE);"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"     * Gets last line from {@code content}"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"    public String getLastLine() {"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        String lastLine \u003d new String(\"\");"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d content.length() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"            if (isLineSeparator(content.charAt(i))) {"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"            lastLine \u003d content.charAt(i) + lastLine;"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"        return lastLine;"},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether {@code inputChar} is a line separator"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":"    private boolean isLineSeparator(char inputChar) {"},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":"        return (inputChar \u003d\u003d LF);"},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after replacing last word of {@code content} with {@code newLastWord}"},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"    public String replaceLastWord(String newLastWord) {"},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"        return getTextWithoutLastWord() + newLastWord;"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after removing last word from {@code content}"},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"    public String getTextWithoutLastWord() {"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"        int newLength \u003d content.length() - getLastWord().length();"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"        return content.substring(0, newLength);"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after removing last word from {@code inputText}"},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"    public String getTextWithoutLastWord(String inputText) {"},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"        int newLength \u003d inputText.length() - getLastWord().length();"},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":"        return inputText.substring(0, newLength);"},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":"     * Sets content in TextInputProcessor to {@code inputText}"},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"    public void setContent(String inputText) {"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":"        content \u003d inputText;"},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":"        text.setText(inputText);"},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"        text.setFont(font);"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"     * Sets font of content in TextInputProcessor to {@code font}"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"hoangduong1607"},"content":"    public void setFont(Font inputFont) {"},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":"        font \u003d inputFont;"},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":124}},{"path":"src/main/java/seedu/recipe/ui/UiUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.CssSyntax.CSS_PROPERTY_BACKGROUND_COLOR;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.CssSyntax.CSS_PROPERTY_TEXT_COLOR;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":" * Contains utility methods for UI design."},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"public class UiUtil {"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_REGEX \u003d \"[A-Fa-f0-9]*\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_BLACK \u003d \"#000000\";"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_WHITE \u003d \"#FFFFFF\";"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_REGEX \u003d \"#([A-Fa-f0-9]{6})\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    private static final char HEX_COLOR_PREFIX \u003d \u0027#\u0027;"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    private static final String HEX_COLOR_BUFFER \u003d \"000000\";"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    private static final int HEX_COLOR_LENGTH \u003d 6;"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    private static final String NEUTRAL_COLOR_DENSITY \u003d \"88\";"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"     * Returns a hexadecimal string representation of an integer."},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"    public static String convertIntToHexadecimalString(int integer) {"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        return Integer.toHexString(integer);"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"     * Returns a valid CSS hexadecimal color code that is as similar"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"     * as possible to the given string (eg. #f23b21)."},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"    public static String convertStringToValidColorCode(String string) {"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"        string \u003d removeAllWhitespaceInString(string);"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"        // HEX_COLOR_BUFFER ensures that the returned value has at least 6 hexadecimal digits"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        String extendedHexString \u003d string.concat(HEX_COLOR_BUFFER);"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        if (Pattern.matches(HEX_REGEX, string)) {"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_PREFIX + extendedHexString.substring(0, HEX_COLOR_LENGTH);"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_WHITE;"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the color of a label given a particular background color"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"     * @@param backgroundColor Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    public static void setLabelColor(Label label, String backgroundColor) {"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d removeAllWhitespaceInString(backgroundColor);"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d isValidHexColorCode(backgroundColor) ? backgroundColor : HEX_COLOR_WHITE;"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        String textColor \u003d getMatchingColorFromGivenColor(backgroundColor);"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        label.setStyle(CSS_PROPERTY_BACKGROUND_COLOR + backgroundColor + \"; \""},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"                + CSS_PROPERTY_TEXT_COLOR + textColor + \";\");"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the text color of a label"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"     * @@param backgroundColor Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"    public static String getMatchingColorFromGivenColor(String backgroundColor) {"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d removeAllWhitespaceInString(backgroundColor);"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d isValidHexColorCode(backgroundColor) ? backgroundColor : HEX_COLOR_WHITE;"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"        if (isColorDark(backgroundColor)) {"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_WHITE;"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_BLACK;"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a given color is dark"},{"lineNumber":84,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"RyanAngJY"},"content":"     * @@param color Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isColorDark(String color) {"},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"        color \u003d removeAllWhitespaceInString(color);"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"        color \u003d isValidHexColorCode(color) ? color : HEX_COLOR_WHITE;"},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"        int darknessCount \u003d 0;"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":"        for (int i \u003d 1; i \u003c 6; i \u003d i + 2) {"},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"            String colorDensity \u003d color.substring(i, i + 2);"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":"            if (colorDensity.compareToIgnoreCase(NEUTRAL_COLOR_DENSITY) \u003c 0) {"},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"                darknessCount++;"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":"        if (darknessCount \u003e\u003d 2) {"},{"lineNumber":101,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":"        return false;"},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a String is a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isValidHexColorCode (String string) {"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"        return Pattern.matches(HEX_COLOR_REGEX, string);"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"     * Returns the given string without whitespaces"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"    public static String removeAllWhitespaceInString(String string) {"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"        return string.replaceAll(\"\\\\s\", \"\");"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":121}},{"path":"src/main/java/seedu/recipe/ui/SuggestionsPopUp.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.AutoCompletionUtil.APPLICATION_KEYWORDS;"},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.AutoCompletionUtil.MAX_SUGGESTIONS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"import javafx.geometry.Side;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.control.ContextMenu;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.TextInputProcessorUtil;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":" * The component that is responsible for showing a suggestion list for auto-completion"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"public class SuggestionsPopUp extends ContextMenu {"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    private CommandBox commandBox;"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    private TextArea commandTextArea;"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    private TextInputProcessorUtil textInputProcessor;"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"    protected SuggestionsPopUp(CommandBox commandBox) {"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"        super();"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"        this.commandBox \u003d commandBox;"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        commandTextArea \u003d commandBox.getCommandTextArea();"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"     * Hides suggestions"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"    protected void hideSuggestions() {"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"        if  (isShowing()) {"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"            hide();"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"     * Shows suggestions for commands when users type in Command Box"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    protected void showSuggestions() {"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(commandTextArea.getText());"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setFont(commandTextArea.getFont());"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"        String lastWord \u003d textInputProcessor.getLastWord();"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"        // finds suggestions and displays"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"        findSuggestions(lastWord, Arrays.asList(APPLICATION_KEYWORDS));"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"        // gets caret position based on input text and font"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"        double anchorX \u003d findDisplayPositionX(textInputProcessor.getCaretPositionX());"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"        double anchorY \u003d findDisplayPositionY(textInputProcessor.getCaretPositionY());"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"        show(commandTextArea, Side.BOTTOM, anchorX, anchorY);"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"     * Finds possible suggestions from {@code word} and"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"     * list of valid suggestions {@code textList}."},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"    private void findSuggestions(String prefix, List\u003cString\u003e dictionary) {"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"        getItems().clear();"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        Collections.sort(dictionary);"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        for (String suggestion : dictionary) {"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"            if (suggestion.startsWith(prefix)) {"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"                addSuggestion(suggestion);"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"            if (getItems().size() \u003d\u003d MAX_SUGGESTIONS) {"},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"     * Finds X-coordinate to display SuggestionsPopUp in CommandBox"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"    double findDisplayPositionX(double caretPositionX) {"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":"        return commandBox.getRoot().getLayoutX() + commandTextArea.getInsets().getLeft() + caretPositionX;"},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"     * Finds Y-coordinate to display SuggestionsPopUp in CommandBox"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"    double findDisplayPositionY(double caretPositionY) {"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"        return Math.min(-commandTextArea.getHeight() + commandTextArea.getInsets().getTop()"},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"                + commandTextArea.getInsets().getBottom() + caretPositionY, -commandTextArea.getInsets().getBottom());"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"     * Adds a suggestion to suggestion list"},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"    private void addSuggestion(String suggestion) {"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"        MenuItem item \u003d new MenuItem(suggestion);"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(commandTextArea.getText());"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":"        item.setOnAction(event -\u003e commandBox.replaceText(textInputProcessor.replaceLastWord(item.getText())));"},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"        getItems().add(item);"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":96,"-":6}},{"path":"src/main/java/seedu/recipe/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_INSTRUCTION, PREFIX_COOKING_TIME,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                        PREFIX_PREPARATION_TIME, PREFIX_CALORIES, PREFIX_SERVINGS, PREFIX_TAG, PREFIX_URL);"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INSTRUCTION, PREFIX_INGREDIENT)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Ingredient ingredient \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Instruction instruction \u003d ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            CookingTime cookingTime \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    ParserUtil.parseCookingTimeOnInitialAdd(argMultimap.getValue(PREFIX_COOKING_TIME)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            PreparationTime preparationTime \u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    ParserUtil.parsePreparationTimeOnInitialAdd(argMultimap.getValue(PREFIX_PREPARATION_TIME)).get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Calories calories \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    ParserUtil.parseCaloriesOnInitialAdd(argMultimap.getValue(PREFIX_CALORIES)).get();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            Servings servings \u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    ParserUtil.parseServingsOnInitialAdd(argMultimap.getValue(PREFIX_SERVINGS)).get();"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"            Url url \u003d ParserUtil.parseUrlOnInitialAdd(argMultimap.getValue(PREFIX_URL)).get();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            Recipe recipe \u003d new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                    url, tagList);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new AddCommand(recipe);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":5,"-":78}},{"path":"src/main/java/seedu/recipe/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"e/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_INSTRUCTION \u003d new Prefix(\"a/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_COOKING_TIME \u003d new Prefix(\"c/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PREPARATION_TIME \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"cl/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_SERVINGS \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public static final Prefix PREFIX_URL \u003d new Prefix(\"url/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":18}},{"path":"src/main/java/seedu/recipe/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        Pattern pattern \u003d Pattern.compile(\"[ \\n]\" + \"\\\\Q\" + prefix + \"\\\\E\");"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        Matcher matcher \u003d pattern.matcher(argsString);"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        if (matcher.find(fromIndex)) {"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"            return matcher.start() + 1;"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"            return -1;"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":11,"-":147}},{"path":"src/main/java/seedu/recipe/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    //@@Author kokonguyen191"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String ingredient} into an {@code Ingredient}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code ingredient} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Ingredient parseIngredient(String ingredient) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(ingredient);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedIngredient \u003d ingredient.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Ingredient.isValidIngredient(trimmedIngredient)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Ingredient(trimmedIngredient);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e ingredient} into an {@code Optional\u003cIngredient\u003e}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * if {@code ingredient} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cIngredient\u003e parseIngredient(Optional\u003cString\u003e ingredient) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(ingredient);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return ingredient.isPresent() ? Optional.of(parseIngredient(ingredient.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String recipe} into an {@code Instruction}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code recipe} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Instruction parseInstruction(String instruction) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(instruction);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedInstruction \u003d instruction.trim();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Instruction.isValidInstuction(trimmedInstruction)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Instruction(trimmedInstruction);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e recipe} into an {@code Optional\u003cInstruction\u003e} if {@code recipe} is present."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Optional\u003cInstruction\u003e parseInstruction(Optional\u003cString\u003e instruction) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(instruction);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return instruction.isPresent() ? Optional.of(parseInstruction(instruction.get())) : Optional.empty();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns a null {@code CookingTime} object to use as the default value if no value is given."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static CookingTime getNullReferenceCookingTime() throws IllegalValueException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return new CookingTime(CookingTime.NULL_COOKING_TIME_REFERENCE);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Parses a {@code String cookingTime} into a {@code CookingTime}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code cookingTime} is invalid."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static CookingTime parseCookingTime(String cookingTime) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String trimmedCookingTime \u003d cookingTime.trim();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!CookingTime.isValidCookingTime(trimmedCookingTime)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return new CookingTime(trimmedCookingTime);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e cookingTime} into an {@code Optional\u003cCookingTime\u003e}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * if {@code cookingTime} is present."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static Optional\u003cCookingTime\u003e parseCookingTime(Optional\u003cString\u003e cookingTime) throws IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return cookingTime.isPresent()"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                ? Optional.of(parseCookingTime(cookingTime.get())) : Optional.empty();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e cookingTime} into an {@code Optional\u003cCookingTime\u003e}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * if {@code cookingTime} is present."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static Optional\u003cCookingTime\u003e parseCookingTimeOnInitialAdd(Optional\u003cString\u003e cookingTime)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return cookingTime.isPresent()"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                ? Optional.of(parseCookingTime(cookingTime.get())) : Optional.of(getNullReferenceCookingTime());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Returns a null {@code PreparationTime} object to use as the default value if no value is given."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static PreparationTime getNullReferencePreparationTime() throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return new PreparationTime(PreparationTime.NULL_PREPARATION_TIME_REFERENCE);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Parses a {@code String preparationTime} into a {@code PreparationTime}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code preparationTime} is invalid."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public static PreparationTime parsePreparationTime(String preparationTime) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        String trimmedPreparationTime \u003d preparationTime.trim();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (!PreparationTime.isValidPreparationTime(trimmedPreparationTime)) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return new PreparationTime(trimmedPreparationTime);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e preparationTime} into an {@code Optional\u003cPreparationTime\u003e}"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * if {@code preparationTime} is present."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public static Optional\u003cPreparationTime\u003e parsePreparationTime(Optional\u003cString\u003e preparationTime)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return preparationTime.isPresent()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                ? Optional.of(parsePreparationTime(preparationTime.get())) : Optional.empty();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e preparationTime} into an {@code Optional\u003cPreparationTime\u003e}"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * if {@code preparationTime} is present."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static Optional\u003cPreparationTime\u003e parsePreparationTimeOnInitialAdd(Optional\u003cString\u003e preparationTime)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throws IllegalValueException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return preparationTime.isPresent() ? Optional.of(parsePreparationTime(preparationTime.get()))"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                : Optional.of(getNullReferencePreparationTime());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Returns a null {@code Calories} object to use as the default value if no value is given."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public static Calories getNullReferenceCalories() throws IllegalValueException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return new Calories(Calories.NULL_CALORIES_REFERENCE);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Parses a {@code String calories} into a {@code Calories}."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code calories} is invalid."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public static Calories parseCalories(String calories) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        requireNonNull(calories);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        String trimmedCalories \u003d calories.trim();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        if (!Calories.isValidCalories(trimmedCalories)) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return new Calories(trimmedCalories);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e calories} into an {@code Optional\u003cCalories\u003e}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * if {@code calories} is present."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    public static Optional\u003cCalories\u003e parseCalories(Optional\u003cString\u003e calories) throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        requireNonNull(calories);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return calories.isPresent()"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                ? Optional.of(parseCalories(calories.get())) : Optional.empty();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e calories} into an {@code Optional\u003cCalories\u003e}"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * if {@code calories} is present."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public static Optional\u003cCalories\u003e parseCaloriesOnInitialAdd(Optional\u003cString\u003e calories) throws IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        requireNonNull(calories);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return calories.isPresent()"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                ? Optional.of(parseCalories(calories.get())) : Optional.of(getNullReferenceCalories());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a null {@code Servings} object to use as the default value if no value is given."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static Servings getNullReferenceServings() throws IllegalValueException {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        return new Servings(Servings.NULL_SERVINGS_REFERENCE);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Parses a {@code String servings} into a {@code Servings}."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code servings} is invalid."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    public static Servings parseServings(String servings) throws IllegalValueException {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        requireNonNull(servings);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        String trimmedServings \u003d servings.trim();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        if (!Servings.isValidServings(trimmedServings)) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        return new Servings(trimmedServings);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e servings} into an {@code Optional\u003cServings\u003e}"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * if {@code servings} is present."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    public static Optional\u003cServings\u003e parseServings(Optional\u003cString\u003e servings) throws IllegalValueException {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        requireNonNull(servings);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        return servings.isPresent()"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                ? Optional.of(parseServings(servings.get())) : Optional.empty();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e servings} into an {@code Optional\u003cServings\u003e}"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * if {@code servings} is present."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":297,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public static Optional\u003cServings\u003e parseServingsOnInitialAdd(Optional\u003cString\u003e servings) throws IllegalValueException {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        requireNonNull(servings);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        return servings.isPresent()"},{"lineNumber":301,"author":{"gitID":"-"},"content":"                ? Optional.of(parseServings(servings.get())) : Optional.of(getNullReferenceServings());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":305,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code String url} into an {@code Url}."},{"lineNumber":307,"author":{"gitID":"RyanAngJY"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":308,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":309,"author":{"gitID":"RyanAngJY"},"content":"     * @throws IllegalValueException if the given {@code url} is invalid."},{"lineNumber":310,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"RyanAngJY"},"content":"    public static Url parseUrl(String url) throws IllegalValueException {"},{"lineNumber":312,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":313,"author":{"gitID":"RyanAngJY"},"content":"        String trimmedUrl \u003d url.trim();"},{"lineNumber":314,"author":{"gitID":"RyanAngJY"},"content":"        if (!Url.isValidUrl(trimmedUrl)) {"},{"lineNumber":315,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":316,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"RyanAngJY"},"content":"        return new Url(trimmedUrl);"},{"lineNumber":318,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":320,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cUrl\u003e} if {@code url} is present."},{"lineNumber":322,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":323,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cUrl\u003e parseUrl(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":325,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":326,"author":{"gitID":"RyanAngJY"},"content":"        return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.empty();"},{"lineNumber":327,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":329,"author":{"gitID":"RyanAngJY"},"content":"    public static Url getNullReferenceUrl() throws IllegalValueException {"},{"lineNumber":330,"author":{"gitID":"RyanAngJY"},"content":"        return new Url(Url.NULL_URL_REFERENCE);"},{"lineNumber":331,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":333,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cUrl\u003e} if {@code url} is present."},{"lineNumber":335,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":336,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cUrl\u003e parseUrlOnInitialAdd(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":338,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":339,"author":{"gitID":"RyanAngJY"},"content":"        return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.of(getNullReferenceUrl());"},{"lineNumber":340,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":342,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":346,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":348,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":353,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":359,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":360,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":40,"-":329}},{"path":"src/main/java/seedu/recipe/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_INSTRUCTION, PREFIX_COOKING_TIME,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                        PREFIX_PREPARATION_TIME, PREFIX_CALORIES, PREFIX_SERVINGS, PREFIX_TAG, PREFIX_URL);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editRecipeDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT))"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setIngredient);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setInstruction);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parseCookingTime(argMultimap.getValue(PREFIX_COOKING_TIME))"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setCookingTime);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(argMultimap.getValue(PREFIX_PREPARATION_TIME))"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setPreparationTime);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES))"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setCalories);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            ParserUtil.parseServings(argMultimap.getValue(PREFIX_SERVINGS))"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setServings);"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"            ParserUtil.parseUrl(argMultimap.getValue(PREFIX_URL)).ifPresent(editRecipeDescriptor::setUrl);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editRecipeDescriptor::setTags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!editRecipeDescriptor.isAnyFieldEdited()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editRecipeDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":92}},{"path":"src/main/java/seedu/recipe/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a recipe to the recipe book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_INGREDIENT + \"INGREDIENT \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_INSTRUCTION + \"INSTRUCTION \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_COOKING_TIME + \"COOKING_TIME] \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PREPARATION_TIME + \"PREPARATION_TIME] \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_SERVINGS + \"SERVINGS] \""},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_URL + \"URL]\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Example:\\n\" + COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"Chicken Rice\\n\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_INGREDIENT + \"chicken, rice\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_INSTRUCTION + \"Cook rice\\nCook chicken\\nEnjoy\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_COOKING_TIME + \"15 mins\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_PREPARATION_TIME + \"5 mins\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_CALORIES + \"500\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_SERVINGS + \"2\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_URL + \"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"yummy \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"best\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final Recipe toAdd;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Recipe}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddCommand(Recipe recipe) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(recipe);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        toAdd \u003d recipe;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            model.addRecipe(toAdd);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":77}},{"path":"src/main/java/seedu/recipe/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.util.CollectionUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Edits the details of an existing recipe in the recipe book."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last recipe listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_INSTRUCTION + \"INSTRUCTION] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_COOKING_TIME + \"COOKING_TIME] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PREPARATION_TIME + \"PREPARATION_TIME] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CALORIES + \"PREFIX_CALORIES] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_SERVINGS + \"PREFIX_SERVINGS] \""},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_URL + \"URL] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_PREPARATION_TIME + \"91234567 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_INGREDIENT + \"johndoe@example.com\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final EditRecipeDescriptor editRecipeDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Recipe recipeToEdit;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Recipe editedRecipe;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param index of the recipe in the filtered recipe list to edit"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param editRecipeDescriptor details to edit the recipe with"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(editRecipeDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            model.updateRecipe(recipeToEdit, editedRecipe);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (RecipeNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target recipe cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        recipeToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * edited with {@code editRecipeDescriptor}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert recipeToEdit !\u003d null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Ingredient updatedIngredient \u003d editRecipeDescriptor.getIngredient().orElse(recipeToEdit.getIngredient());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Instruction updatedInstruction \u003d editRecipeDescriptor.getInstruction().orElse(recipeToEdit.getInstruction());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        CookingTime updatedCookingTime \u003d"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getCookingTime().orElse(recipeToEdit.getCookingTime());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        PreparationTime updatedPreparationTime \u003d"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getPreparationTime().orElse(recipeToEdit.getPreparationTime());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Calories updatedCalories \u003d"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getCalories().orElse(recipeToEdit.getCalories());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Servings updatedServings \u003d"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getServings().orElse(recipeToEdit.getServings());"},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"        Url updatedUrl \u003d editRecipeDescriptor.getUrl().orElse(recipeToEdit.getUrl());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags().orElse(recipeToEdit.getTags());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return new Recipe(updatedName, updatedIngredient, updatedInstruction, updatedCookingTime,"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                updatedPreparationTime, updatedCalories, updatedServings, updatedUrl, updatedTags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(recipeToEdit, e.recipeToEdit);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Stores the details to edit the recipe with. Each non-empty field value will replace the"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * corresponding field value of the recipe."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public static class EditRecipeDescriptor {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Ingredient ingredient;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Instruction instruction;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private CookingTime cookingTime;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private PreparationTime preparationTime;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private Calories calories;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private Servings servings;"},{"lineNumber":166,"author":{"gitID":"RyanAngJY"},"content":"        private Url url;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public EditRecipeDescriptor() {}"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setIngredient(toCopy.ingredient);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            setInstruction(toCopy.instruction);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            setCookingTime(toCopy.cookingTime);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            setPreparationTime(toCopy.preparationTime);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setCalories(toCopy.calories);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            setServings(toCopy.servings);"},{"lineNumber":183,"author":{"gitID":"RyanAngJY"},"content":"            setUrl(toCopy.url);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":189,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.ingredient, this.instruction, this.cookingTime,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    this.preparationTime, this.calories, this.servings, this.url, this.tags);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setIngredient(Ingredient ingredient) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.ingredient \u003d ingredient;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cIngredient\u003e getIngredient() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(ingredient);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setInstruction(Instruction instruction) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.instruction \u003d instruction;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cInstruction\u003e getInstruction() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(instruction);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void setCookingTime(CookingTime cookingTime) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            this.cookingTime \u003d cookingTime;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public Optional\u003cCookingTime\u003e getCookingTime() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(cookingTime);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public void setPreparationTime(PreparationTime preparationTime) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            this.preparationTime \u003d preparationTime;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public Optional\u003cPreparationTime\u003e getPreparationTime() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(preparationTime);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public void setCalories(Calories calories) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            this.calories \u003d calories;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public Optional\u003cCalories\u003e getCalories() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(calories);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public void setServings(Servings servings) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            this.servings \u003d servings;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public Optional\u003cServings\u003e getServings() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(servings);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"RyanAngJY"},"content":"        public void setUrl(Url url) {"},{"lineNumber":255,"author":{"gitID":"RyanAngJY"},"content":"            this.url \u003d url;"},{"lineNumber":256,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":258,"author":{"gitID":"RyanAngJY"},"content":"        public Optional\u003cUrl\u003e getUrl() {"},{"lineNumber":259,"author":{"gitID":"RyanAngJY"},"content":"            return Optional.ofNullable(url);"},{"lineNumber":260,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":262,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":263,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":266,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":267,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":275,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":276,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditRecipeDescriptor)) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":297,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPreparationTime().equals(e.getPreparationTime())"},{"lineNumber":298,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getIngredient().equals(e.getIngredient())"},{"lineNumber":299,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getInstruction().equals(e.getInstruction())"},{"lineNumber":300,"author":{"gitID":"RyanAngJY"},"content":"                    \u0026\u0026 getUrl().equals(e.getUrl())"},{"lineNumber":301,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":17,"-":287}},{"path":"src/main/java/seedu/recipe/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ReadOnlyRecipeBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code RecipeBook} with sample data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Recipe[] getSampleRecipes() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new Recipe[] {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"Chicken Rice\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    new Instruction(\"Fill a tea kettle or 2 quart saucepan with water and bring to a boil. Remove e\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"                            + \"xcess fat from chilled chicken and place in colander over a large bowl. Spread out wi\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"                            + \"th a fork. Pour hot water over meat through colander. \\nPlace chicken in plastic co\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"                            + \"ntainer with tight fitting lid.\\nAdd onions, chili powder, oregano, garlic powder,\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"                            + \" cumin, and paprika to chicken.\\nRefrigerate chicken overnight in plastic containe\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"                            + \"r with tight fitting lid.\\nTo make tacos, place chicken mixture in a pan and heat s\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"                            + \"lowly or heat in microwave for 2–3 minutes, stirring after 1½ minutes to heat evenl\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"                            + \"y. Combine finely shredded lettuce and cabbage. Mix cheeses together. Place ¼ cup \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"                            + \"heated chicken mixture in a tortilla and top with cheese and vegetables.\\nAdd sa\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"                            + \"lsa as desired.\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    new Calories(\"2846\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    new Servings(\"5\"),"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/73634/colleens-slow-cooker-jambalaya/\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"Pizza\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    new Instruction(\"Out too the been like hard off. Improve enquire welcome own beloved matt\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"                            + \"ers her. As insipidity so mr unsatiable increasing attachment motionless cultiva\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"                            + \"ted. Addition mr husbands unpacked occasion he oh. Is unsatiable if projecting \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"                            + \"boisterous insensible. It recommend be resolving pretended middleton.\\n\\nSo by \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"                            + \"colonel hearted ferrars. Draw from upon here gone add one. He in sportsman hous\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"                            + \"ehold otherwise it perceived instantly. Is inquiry no he several excited am. C\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"                            + \"alled though excuse length ye needed it he having. Whatever throwing we on resol\""},{"lineNumber":53,"author":{"gitID":"-"},"content":"                            + \"ved entrance together graceful. Mrs assured add private married removed believe \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                            + \"did she.\\n        \"),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    new Calories(\"3054\"),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    new Servings(\"2\"),"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/8722/mexican-chicken-i/?\""},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"                            + \"internalSource\u003dpopular\u0026referringContentType\u003dhome%20page\u0026clickId\u003dcardslot%203\"),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"Big Pizza\"),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                    new Instruction(\"Silent sir say desire fat him letter. Whatever settling goodness too and\""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                            + \" honoured she building answered her. Strongly thoughts remember mr to do conside\""},{"lineNumber":66,"author":{"gitID":"-"},"content":"                            + \"r debating. Spirits musical behaved on we he farther letters. Repulsive he he as\""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                            + \" deficient newspaper dashwoods we. Discovered her his pianoforte insipidity entr\""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                            + \"eaties. Began he at terms meant as fancy. Breakfast arranging he if furniture we\""},{"lineNumber":69,"author":{"gitID":"-"},"content":"                            + \" described on. Astonished thoroughly unpleasant especially you dispatched bed fav\""},{"lineNumber":70,"author":{"gitID":"-"},"content":"                            + \"ourable.\\nOf recommend residence education be on difficult repulsive offending. \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                            + \"Judge views had mirth table seems great him for her. Alone all happy asked \""},{"lineNumber":72,"author":{"gitID":"-"},"content":"                            + \" fully stand own get. Excuse ye seeing result of we. See scale dried songs ol\""},{"lineNumber":73,"author":{"gitID":"-"},"content":"                            + \"d may not. Promotion did disposing you household any instantly. Hills we do und\""},{"lineNumber":74,"author":{"gitID":"-"},"content":"                            + \"er times at first short an. \"),"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                    new Calories(\"2261\"),"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                    new Servings(\"4\"),"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/11901/to-die-for-fettuccini-alfredo/?\""},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"                            + \"internalSource\u003dpopular\u0026referringContentType\u003dhome%20page\u0026clickId\u003dcardslot%206\"),"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"Kinda Big Pizza\"),"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                    new Instruction(\"Enfants facteur au va cousine violets. Impute va on la ai enfuit couvr\""},{"lineNumber":85,"author":{"gitID":"-"},"content":"                            + \"e charge disant.\\nFanatiques cimetieres on lumineuses xv caracolent electriq\""},{"lineNumber":86,"author":{"gitID":"-"},"content":"                            + \"ue je et retrouvait. Sortes forges me la cranes demain enleve. Abris bande soe\""},{"lineNumber":87,"author":{"gitID":"-"},"content":"                            + \"ur il nerfs et alors as. Cuivres oui fut net trimons empeche mauvais foi. Lors\""},{"lineNumber":88,"author":{"gitID":"-"},"content":"                            + \" un pour cite du suis xv fils crie de. Actrices nid pourquoi joyeuses art. \"),"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                    new Calories(\"4762\"),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                    new Servings(\"2\"),"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/229110/savory-beef-stir-fry/?\""},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"                            + \"internalSource\u003dpopular\u0026referringContentType\u003dhome%20page\u0026clickId\u003dcardslot%2014\"),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"Somewhat Big Pizza\"),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                    new Instruction(\"Publics banques aisance verdure art ces lettres arriere les. Veux voi\""},{"lineNumber":99,"author":{"gitID":"-"},"content":"                            + \"e pans on pont le donc puis. Pu officier et corolles on terrasse.\\nRoc paraiss\""},{"lineNumber":100,"author":{"gitID":"-"},"content":"                            + \"ait artilleurs consentiez moi eclaireurs but. Le dieu la mene ni sais si. Toi \""},{"lineNumber":101,"author":{"gitID":"-"},"content":"                            + \"ame dragons eut etirant sol maudite. Tu batterie ca un forcenee encontre repond\""},{"lineNumber":102,"author":{"gitID":"-"},"content":"                            + \"it la.\\nPas lanternes messieurs art sinistres agreerait fusillade ici six cotil\""},{"lineNumber":103,"author":{"gitID":"-"},"content":"                            + \"lons. Courages il du chantant ah poternes fanfares. Visages se ma semence promene. \"),"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                    new Calories(\"4653\"),"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                    new Servings(\"2\"),"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/222615/scrambled-egg-brunch-bread/?\""},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"                            + \"internalSource\u003dpopular\u0026referringContentType\u003dhome%20page\u0026clickId\u003dcardslot%2020\"),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            new Recipe(new Name(\"I Am Running Out Of Names\"),"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                    new Ingredient(\"this, is, some, sample, ingredient\"),"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                    new Instruction(\"Fill a tea kettle or 2 quart saucepan with water and bring to a boil. Re\""},{"lineNumber":114,"author":{"gitID":"-"},"content":"                            + \"move excess fat from chilled chicken and place in colander over a large bowl. Sp\""},{"lineNumber":115,"author":{"gitID":"-"},"content":"                            + \"read out with a fork. Pour hot water over meat through colander. \\nPlace chicken \""},{"lineNumber":116,"author":{"gitID":"-"},"content":"                            + \"in plastic container with tight fitting lid.\\nAdd onions, chili powder, oregano, \""},{"lineNumber":117,"author":{"gitID":"-"},"content":"                            + \"garlic powder, cumin, and paprika to chicken.\\nRefrigerate chicken overnight in pl\""},{"lineNumber":118,"author":{"gitID":"-"},"content":"                            + \"astic container with tight fitting lid.\\nTo make tacos, place chicken mixture in \""},{"lineNumber":119,"author":{"gitID":"-"},"content":"                            + \"a pan and heat slowly or heat in microwave for 2–3 minutes, stirring after 1½ min\""},{"lineNumber":120,"author":{"gitID":"-"},"content":"                            + \"utes to heat evenly. Combine finely shredded lettuce and cabbage. Mix cheeses toge\""},{"lineNumber":121,"author":{"gitID":"-"},"content":"                            + \"ther. Place ¼ cup heated chicken mixture in a tortilla and top with cheese and v\""},{"lineNumber":122,"author":{"gitID":"-"},"content":"                            + \"egetables.\\nAdd salsa as desired.\"),"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                    new CookingTime(\"20min\"),"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    new PreparationTime(\"1h50m\"),"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    new Calories(\"2235\"),"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                    new Servings(\"4\"),"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"                    new Url(\"https://www.allrecipes.com/recipe/15917/fudge-truffle-cheesecake/?\""},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"                            + \"internalSource\u003dpopular\u0026referringContentType\u003dhome%20page\u0026clickId\u003dcardslot%2022\"),"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static ReadOnlyRecipeBook getSampleRecipeBook() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            RecipeBook sampleAb \u003d new RecipeBook();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            for (Recipe sampleRecipe : getSampleRecipes()) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                sampleAb.addRecipe(sampleRecipe);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException e) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate recipes\", e);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":12,"-":145}},{"path":"src/main/java/seedu/recipe/storage/XmlAdaptedRecipe.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Recipe."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedRecipe {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String ingredient;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String instruction;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String cookingTime;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String preparationTime;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String calories;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String servings;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private String url;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedRecipe."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedRecipe} with the given recipe details."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe(String name, String ingredient, String instruction, String cookingTime,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                            String preparationTime, String calories, String servings, String url,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.ingredient \u003d ingredient;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.instruction \u003d instruction;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.cookingTime \u003d cookingTime;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.preparationTime \u003d preparationTime;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.calories \u003d calories;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.servings \u003d servings;"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d url;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Converts a given Recipe into this class for JAXB use."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedRecipe"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe(Recipe source) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ingredient \u003d source.getIngredient().value;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        instruction \u003d source.getInstruction().value;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        cookingTime \u003d source.getCookingTime().value;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        preparationTime \u003d source.getPreparationTime().value;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        calories \u003d source.getCalories().value;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        servings \u003d source.getServings().value;"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d source.getUrl().value;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted recipe object into the model\u0027s Recipe object."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public Recipe toModelType() throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            recipeTags.add(tag.toModelType());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        //@@Author kokonguyen191"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (this.ingredient \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    Ingredient.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Ingredient.isValidIngredient(this.ingredient)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final Ingredient ingredient \u003d new Ingredient(this.ingredient);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (this.instruction \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                    Instruction.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Instruction.isValidInstuction(this.instruction)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Instruction instruction \u003d new Instruction(this.instruction);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (this.preparationTime \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                    PreparationTime.class.getSimpleName()));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!PreparationTime.isValidPreparationTime(this.preparationTime)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final PreparationTime preparationTime \u003d new PreparationTime(this.preparationTime);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (this.cookingTime \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                    CookingTime.class.getSimpleName()));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!CookingTime.isValidCookingTime(this.cookingTime)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final CookingTime cookingTime \u003d new CookingTime(this.cookingTime);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (this.calories \u003d\u003d null) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                    Calories.class.getSimpleName()));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Calories.isValidCalories(this.calories)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        final Calories calories \u003d new Calories(this.calories);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (this.servings \u003d\u003d null) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    Servings.class.getSimpleName()));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (!Servings.isValidServings(this.servings)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        final Servings servings \u003d new Servings(this.servings);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":171,"author":{"gitID":"RyanAngJY"},"content":"        if (this.url \u003d\u003d null) {"},{"lineNumber":172,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName()));"},{"lineNumber":173,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"RyanAngJY"},"content":"        if (!Url.isValidUrl(this.url)) {"},{"lineNumber":175,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"RyanAngJY"},"content":"        final Url url \u003d new Url(this.url);"},{"lineNumber":178,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":179,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(recipeTags);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings, url, tags);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedRecipe)) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe otherRecipe \u003d (XmlAdaptedRecipe) other;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherRecipe.name)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(ingredient, otherRecipe.ingredient)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(instruction, otherRecipe.instruction)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(cookingTime, otherRecipe.cookingTime)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(preparationTime, otherRecipe.preparationTime)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(calories, otherRecipe.calories)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(servings, otherRecipe.servings)"},{"lineNumber":202,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 Objects.equals(url, otherRecipe.url)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherRecipe.tagged);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":15,"-":190}},{"path":"src/main/java/seedu/recipe/model/recipe/Ingredient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Recipe\u0027s ingredient in the recipe book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidIngredient(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Ingredient {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INGREDIENT_CONSTRAINTS \u003d \"Recipe ingredients should be a list of \""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"ingredients, delimited by commas.\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static  final String INGREDIENT_VALIDATION_REGEX \u003d \"(\\\\w+[\\\\s]{0,1})+(?:,\\\\s*(\\\\w+[\\\\s]{0,1})+)*\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs an {@code Ingredient}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param ingredient A valid ingredient recipe."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Ingredient(String ingredient) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(ingredient);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidIngredient(ingredient), MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d ingredient;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a given string is a valid recipe ingredient."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidIngredient(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(INGREDIENT_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Ingredient // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Ingredient) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":52}},{"path":"src/main/java/seedu/recipe/model/recipe/Recipe.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Recipe in the recipe book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Recipe {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Ingredient ingredient;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Instruction instruction;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final CookingTime cookingTime;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final PreparationTime preparationTime;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Calories calories;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Servings servings;"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    private final Url url;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Recipe(Name name, Ingredient ingredient, Instruction instruction,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                  CookingTime cookingTime, PreparationTime preparationTime,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                  Calories calories, Servings servings, Url url, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        requireAllNonNull(name, preparationTime, ingredient, instruction, url, tags);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.ingredient \u003d ingredient;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.instruction \u003d instruction;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.cookingTime \u003d cookingTime;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.preparationTime \u003d preparationTime;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.calories \u003d calories;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.servings \u003d servings;"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d url;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Ingredient getIngredient() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return ingredient;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Instruction getInstruction() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return instruction;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public CookingTime getCookingTime() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return cookingTime;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PreparationTime getPreparationTime() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return preparationTime;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Calories getCalories() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return calories;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Servings getServings() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return servings;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"    public Url getUrl() {"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"        return url;"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!(other instanceof Recipe)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Recipe otherRecipe \u003d (Recipe) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return otherRecipe.getName().equals(this.getName())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getIngredient().equals(this.getIngredient())"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 otherRecipe.getInstruction().equals(this.getInstruction())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getCookingTime().equals(this.getCookingTime())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getPreparationTime().equals(this.getPreparationTime())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getCalories().equals(this.getCalories())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getServings().equals(this.getServings())"},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 otherRecipe.getUrl().equals(this.getUrl());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"        return Objects.hash(name, preparationTime, ingredient, instruction, url, tags);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" PreparationTime: \")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(getPreparationTime())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(\" Ingredient: \")"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(getIngredient())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(\" Instruction: \")"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .append(getInstruction())"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"                .append(\" Url: \")"},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"                .append(getUrl())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":12,"-":119}},{"path":"src/main/java/seedu/recipe/model/recipe/Servings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"//@@Author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Recipe\u0027s number of servings in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidServings(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Servings {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String NULL_SERVINGS_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SERVINGS_CONSTRAINTS \u003d \"The number of servings must a positive integer.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String SERVINGS_VALIDATION_REGEX \u003d \"[\\\\d]+\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Servings} object."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param servings A valid number of servings."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Servings(String servings) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(servings);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidServings(servings), MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d servings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid number of servings."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidServings(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.equals(NULL_SERVINGS_REFERENCE) || test.matches(SERVINGS_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Servings // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Servings) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":52}},{"path":"src/main/java/seedu/recipe/model/recipe/Url.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":" * Represents a Recipe\u0027s URL in the address book."},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUrl(String)}"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"public class Url {"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    public static final String NULL_URL_REFERENCE \u003d \"-\";"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_URL_CONSTRAINTS \u003d \"URL should start with a http:// or https://\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"     * Constructs a {@code Url}."},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"     * @param url A valid Url."},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public Url(String url) {"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        checkArgument(isValidUrl(url), MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        this.value \u003d url;"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"     *  Returns true if a given string is a valid web url, or no url has been assigned"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isValidUrl(String testUrl) {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        if (testUrl.equals(NULL_URL_REFERENCE)) {"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"            URL url \u003d new URL(testUrl);"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"            url.toURI();"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        } catch (Exception e) {"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"                || (other instanceof Url // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 this.value.equals(((Url) other).value)); // state check"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":64}},{"path":"src/main/java/seedu/recipe/model/recipe/Calories.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"//@@Author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Recipe\u0027s number of calories in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCalories(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Calories {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String NULL_CALORIES_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_CALORIES_CONSTRAINTS \u003d \"The number of calories must a positive integer.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String CALORIES_VALIDATION_REGEX \u003d \"[\\\\d]+\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Calories} object."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param calories A valid number of calories."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Calories(String calories) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(calories);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidCalories(calories), MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d calories;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid number of calories."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidCalories(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.equals(NULL_CALORIES_REFERENCE) || test.matches(CALORIES_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Calories // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Calories) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":52}},{"path":"src/main/java/seedu/recipe/model/recipe/CookingTime.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"//@@Author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Recipe\u0027s cooking time in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCookingTime(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CookingTime {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String NULL_COOKING_TIME_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_COOKING_TIME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"-"},"content":"            \"Cooking time can be in any of these format: 1h10m, 70m, 1 hour 10 minutes, 1 h 10 min, 70.\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COOKING_TIME_VALIDATION_REGEX \u003d"},{"lineNumber":17,"author":{"gitID":"-"},"content":"            \"([\\\\d]+[ ]{0,1}(minute[s]{0,1}|min[s]{0,1}|m|hour[s]{0,1}|h){0,1}[ ]{0,1}){1,2}\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs a {@code CookingTime}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param cookingTime A valid cooking time."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CookingTime(String cookingTime) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        checkArgument(isValidCookingTime(cookingTime), MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.value \u003d cookingTime;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid recipe cooking time."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isValidCookingTime(String test) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return test.equals(NULL_COOKING_TIME_REFERENCE) || test.matches(COOKING_TIME_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                || (other instanceof CookingTime // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((CookingTime) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":54}}]
