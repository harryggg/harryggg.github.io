var resultJson = [{"path":"unused/group/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"public class GroupNotFoundException extends Exception  {"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"}"}],"authorContributionMap":{"hxy0229":6}},{"path":"unused/group/DuplicateGroupException.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"public class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"    public DuplicateGroupException() {"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"        super(\"Operation would result in duplicate group names\");"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":12}},{"path":"unused/GroupPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import seedu.address.ui.GroupCard;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":" * stub comment for checkstyle"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"public class GroupPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"    private final GroupCard newSelection;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"    public GroupPanelSelectionChangedEvent(GroupCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"    public GroupCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"}"}],"authorContributionMap":{"hxy0229":26}},{"path":"unused/DeleteGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"    /** checkstyle comment */"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"    public DeleteGroupCommand parse(String args) throws ParseException {"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"            return new DeleteGroupCommand(index);"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":28}},{"path":"unused/ShortcutNumber.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":" * Represents a Person\u0027s shortcut number in the address book."},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidShortcutNumber(String)}"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":"public class ShortcutNumber {"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"    public static final String MESSAGE_SHORTCUT_NUMBER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"            \"Shortcut numbers can only contain numbers, and should be digits\";"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"    public static final String SHORTCUT_NUMBER_VALIDATION_REGEX \u003d \"\\\\d\";"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"     * Validates given shortcut number."},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"     * @throws IllegalValueException if given shortcut number string is invalid."},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"    public ShortcutNumber(String shortcutNumber) throws IllegalValueException {"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"        if (!isValidShortcutNumber(shortcutNumber)) {"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalValueException(MESSAGE_SHORTCUT_NUMBER_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"        this.value \u003d shortcutNumber;"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"    public static boolean isValidShortcutNumber(String test) {"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"        return test.matches(SHORTCUT_NUMBER_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"    /*@Override"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"                || (other instanceof ShortcutNumber // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 this.value.equals(((ShortcutNumber) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    }*/"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":53}},{"path":"unused/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"public class Group {"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d \"Groups names should be alphanumeric\";"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"    public static final String GROUP_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    private ObjectProperty\u003cUniquePersonList\u003e persons;"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    public Group(Name name, Set\u003cReadOnlyPerson\u003e persons) throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"        requireAllNonNull(name, persons);"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"        this.persons \u003d new SimpleObjectProperty\u003c\u003e(new UniquePersonList());"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"        if (!this.getName().fullName.matches(GROUP_VALIDATION_REGEX)) {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"            throw new IllegalValueException(MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"    public Group(Name name) throws IllegalValueException {"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        requireAllNonNull(name);"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        this.persons \u003d new SimpleObjectProperty\u003c\u003e(new UniquePersonList());"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        if (!this.getName().fullName.matches(GROUP_VALIDATION_REGEX)) {"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"            throw new IllegalValueException(MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"    public Group(Group group) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        this(group.getName(), group.getPersonList());"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"        if (!this.getName().fullName.matches(GROUP_VALIDATION_REGEX)) {"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"            throw new IllegalValueException(MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"        return this.name;"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"    public ObjectProperty\u003cUniquePersonList\u003e personProperty() {"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"        return this.persons;"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"    public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":"        persons.get().add(person);"},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"    public Name getName() {"},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"        return name.get();"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"    public Set\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"        return Collections.unmodifiableSet(persons.get().toSet());"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":"    public void setPersons(Set\u003cReadOnlyPerson\u003e replacementPerson) {"},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"        persons.set(new UniquePersonList(replacementPerson));"},{"lineNumber":76,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":81,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof Group // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.name.get().fullName.equals(((Group) other).name.get().fullName)); // state check"},{"lineNumber":83,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":85,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"        return Objects.hash(name, persons);"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"     * Format state as text for viewing."},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"    public String toString() {"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":"        builder.append(getName())"},{"lineNumber":96,"author":{"gitID":"hxy0229"},"content":"                .append(\" Persons: \");"},{"lineNumber":97,"author":{"gitID":"hxy0229"},"content":"        getPersonList().forEach(builder::append);"},{"lineNumber":98,"author":{"gitID":"hxy0229"},"content":"        return  builder.toString();"},{"lineNumber":99,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":101,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":101}},{"path":"unused/XmlAdaptedGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"public class XmlAdaptedGroup {"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    private String groupName;"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"    public XmlAdaptedGroup() {}"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"    public XmlAdaptedGroup(Group source) {"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        groupName \u003d source.getName().fullName;"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        for (ReadOnlyPerson person : source.getPersonList()) {"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"            persons.add(new XmlAdaptedPerson(person));"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        Name name \u003d new Name(groupName);"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        return new Group(name);"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"}"}],"authorContributionMap":{"-":22,"erik0704":4,"hxy0229":27}},{"path":"unused/GroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_NAME_FORMAT;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.GroupCommand;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"    public GroupCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"            if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"                //System.out.println(\"Caught you up!!!\");"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"                throw new ParseException("},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"            String[] indices \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"            String groupName \u003d indices[0];"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"            if (indices[0].matches(\"\\\\d\")) {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"                throw new ParseException("},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"                        String.format(MESSAGE_INVALID_GROUP_NAME_FORMAT, GroupCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"            String[] realIndices \u003d new String[indices.length - 1];"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"            for (int i \u003d 0; i \u003c indices.length - 1; i++) {"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"                realIndices[i] \u003d indices[i + 1];"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"            List\u003cString\u003e inputInString \u003d Arrays.asList(realIndices);"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"            List\u003cIndex\u003e input \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"            for (String ind : inputInString) {"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"                Index index \u003d ParserUtil.parseIndex(ind);"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"                input.add(index);"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"            Name name \u003d new Name(groupName);"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"            return new GroupCommand(new Group(name), input);"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"            throw new ParseException("},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":62}},{"path":"unused/DeleteGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.GroupNotFoundException;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"    public static final String COMMAND_WORD \u003d \"deleteGroup\";"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"            + \": Deletes the group identified by the index number used in the last group listing.\\n\""},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Group: %1$s\";"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"    public DeleteGroupCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        Group groupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"            model.deleteGroup(groupToDelete);"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"        } catch (GroupNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"            assert false : \"The target group cannot be missing\";"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, groupToDelete));"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteGroupCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":60}},{"path":"unused/group/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":" *"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":" *"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":" * @see Group#equals(Object)"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"     * Constructs empty TagList."},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    public UniqueGroupList() {}"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"     * Enforces no nulls."},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"    public UniqueGroupList(Set\u003cGroup\u003e groups) {"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        requireAllNonNull(groups);"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"        internalList.addAll(groups);"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"    /** checkstyle comment */"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"    public boolean remove(Group toRemove) throws GroupNotFoundException {"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(toRemove);"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        final boolean groupFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"        if (!groupFoundAndDeleted) {"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"        return groupFoundAndDeleted;"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"    public Set\u003cGroup\u003e toSet() {"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"    public void setGroups(Set\u003cGroup\u003e groups) {"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"        requireAllNonNull(groups);"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"        internalList.setAll(groups);"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"hxy0229"},"content":"    public void mergeFrom(UniqueGroupList from) {"},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":"        final Set\u003cGroup\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":"        from.internalList.stream()"},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"                .filter(group -\u003e !alreadyInside.contains(group))"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":"                .forEach(internalList::add);"},{"lineNumber":81,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":82,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":83,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":85,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(toCheck);"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"     * Adds a Tag to the list."},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"hxy0229"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":97,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"hxy0229"},"content":"    public void add(Group toAdd) throws DuplicateGroupException {"},{"lineNumber":99,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(toAdd);"},{"lineNumber":100,"author":{"gitID":"hxy0229"},"content":"        if (contains(toAdd)) {"},{"lineNumber":101,"author":{"gitID":"hxy0229"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":102,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"hxy0229"},"content":"        internalList.add(toAdd);"},{"lineNumber":104,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":105,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":108,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"hxy0229"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":110,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":111,"author":{"gitID":"hxy0229"},"content":"        return internalList.iterator();"},{"lineNumber":112,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":114,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"hxy0229"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":116,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"hxy0229"},"content":"    public ObservableList\u003cGroup\u003e asObservableList() {"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":125,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"},{"lineNumber":128,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":130,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"hxy0229"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":132,"author":{"gitID":"hxy0229"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":133,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"hxy0229"},"content":"    public boolean equalsOrderInsensitive(UniqueGroupList other) {"},{"lineNumber":135,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":136,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":137,"author":{"gitID":"hxy0229"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":138,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":140,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"hxy0229"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":143,"author":{"gitID":"hxy0229"},"content":"        return internalList.hashCode();"},{"lineNumber":144,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":146,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"hxy0229"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":148,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"hxy0229"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":150,"author":{"gitID":"hxy0229"},"content":"        protected DuplicateTagException() {"},{"lineNumber":151,"author":{"gitID":"hxy0229"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":152,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":155,"author":{"gitID":"hxy0229"},"content":"}"}],"authorContributionMap":{"hxy0229":155}},{"path":"unused/GroupListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":" * Panel containing the list of persons."},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"public class GroupListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    private static final String FXML \u003d \"GroupListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    private ListView\u003cGroupCard\u003e groupListView;"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"        setConnections(groupList);"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    private void setConnections(ObservableList\u003cGroup\u003e groupList) {"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        ObservableList\u003cGroupCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"                groupList, (group) -\u003e new GroupCard(group, groupList.indexOf(group) + 1));"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"        groupListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"        groupListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"                        logger.fine(\"Selection in group list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"                        raise(new GroupPanelSelectionChangedEvent(newValue));"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"                    }"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"                });"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"    private void scrollTo(int index) {"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"            groupListView.scrollTo(index);"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"            groupListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code GroupCard}."},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"    class GroupListViewCell extends ListCell\u003cGroupCard\u003e {"},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"        @Override"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"        protected void updateItem(GroupCard group, boolean empty) {"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"            super.updateItem(group, empty);"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"            if (empty || group \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":"                setGraphic(null);"},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":"                setText(null);"},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"            } else {"},{"lineNumber":76,"author":{"gitID":"hxy0229"},"content":"                setGraphic(group.getRoot());"},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":81,"author":{"gitID":"hxy0229"},"content":"}"}],"authorContributionMap":{"hxy0229":81}},{"path":"unused/GroupCard.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import java.util.Random;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"public class GroupCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    private static final String FXML \u003d \"GroupListCard.fxml\";"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"    private static String[] colors \u003d { \"red\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\","},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"        \"grey\", \"purple\", \"gold\", \"crimson\", \"navy\", \"darkBlue\", \"mediumBlue\", \"darkGreen\","},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"        \"teal\", \"darkCyan\", \"deepSkyBlue\", \"lime\", \"springGreen\", \"midnightBlue\", \"forestGreen\","},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"        \"seaGreen\", \"royalBlue\", \"indigo\", \"darkOliveGreen\", \"maroon\", \"saddleBrown\", \"slateBlue\" };"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    private static int[] usedColors \u003d new int[colors.length];"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"    public final Group group;"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"    @javafx.fxml.FXML"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"    private HBox cardPane;"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"    private Label name;"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"    private Label id;"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"    private FlowPane persons;"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"    public GroupCard(Group group, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        this.group \u003d group;"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"        initPersons(group);"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"        bindListeners(group);"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"     * Color getter for a tag"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"    private static String colorGetterForPerson(String personValue) {"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"        int colorCode;"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"        boolean isUsedUpAllColors \u003d true;"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"        for (int i \u003d 0; i \u003c colors.length; i++) {"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"            if (usedColors[i] \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"                isUsedUpAllColors \u003d false;"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"                break;"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"        if (isUsedUpAllColors) {"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"            for (int j \u003d 0; j \u003c colors.length; j++) {"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"                usedColors[j] \u003d 0;"},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"        if (!tagColors.containsKey(personValue)) {"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"            do {"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"                colorCode \u003d random.nextInt(colors.length);"},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"            } while(usedColors[colorCode] \u003d\u003d 1);"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"            usedColors[colorCode] \u003d 1;"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"            tagColors.put(personValue, colors[colorCode]);"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"        return tagColors.get(personValue);"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"    private void bindListeners(Group group) {"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"        name.textProperty().bind(Bindings.convert(group.nameProperty()));"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"        group.personProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"            persons.getChildren().clear();"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"            initPersons(group);"},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":"        });"},{"lineNumber":96,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"     * Distribute colors for tags"},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"    private void initPersons(Group group) {"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"        group.getPersonList().forEach(person -\u003e {"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"            Label personLabel \u003d new Label(person.getName().fullName);"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"            personLabel.setStyle(\"-fx-background-color: \" + colorGetterForPerson(person.getName().fullName));"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"            persons.getChildren().add(personLabel);"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"        });"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":"        if (!(other instanceof GroupCard)) {"},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"            return false;"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"        // state check"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"        GroupCard card \u003d (GroupCard) other;"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":125,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 group.equals(card.group);"},{"lineNumber":126,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":128,"author":{"gitID":"hxy0229"},"content":""}],"authorContributionMap":{"yanji1221":42,"-":12,"hxy0229":74}},{"path":"unused/ComingBirthdayCard.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":" * An UI component that displays information of coming birthdays in certain month."},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"public class ComingBirthdayCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"    private static final String FXML \u003d \"ComingBirthdayz.fxml\";"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"    private HBox birthdayListCardPane;"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"    private Label id;"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"    private Label birthday;"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    private Label name;"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"    public ComingBirthdayCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"        this.person \u003d person;"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"        bindListeners(person);"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"     * so that they will be notified of any changes."},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"        // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        if (!(other instanceof ComingBirthdayCard)) {"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"        // state check"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"        ComingBirthdayCard comingBirthday \u003d (ComingBirthdayCard) other;"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"        return id.getText().equals(comingBirthday.id.getText())"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 person.equals(comingBirthday.person);"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":63}},{"path":"unused/SetShortcutNumberCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":" * Sets shortcut number of person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"public class SetShortcutNumberCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"    public static final String COMMAND_WORD \u003d \"set\";"},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"            + \": Sets the shortcut number of person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"            + \"Parameters: INDEX (must be a positive integer)NUMBER (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\" + \" 1\";"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Person\u0027s shorcut number sets: %1$s\";"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"    private final int shortcutNumber;"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"    public SetShortcutNumberCommand(Index targetIndex, int shortcutNumber) {"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"        this.shortcutNumber \u003d shortcutNumber;"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"        ReadOnlyPerson personToSet \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"            model.setPerson(personToSet);"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToSet));"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"                || (other instanceof SetShortcutNumberCommand // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 this.targetIndex.equals(((SetShortcutNumberCommand) other).targetIndex)); // state check"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":63}},{"path":"unused/GroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.DuplicateGroupException;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"/** checkstyle comment */"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"public class GroupCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    public static final String COMMAND_WORD \u003d \"group\";"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Grouping several people together\\n\""},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"            + \"Parameters: \" + \"GROUP_NAME \" + \"INDEX_1 \" + \"INDEX_2 \" + \"...\\n\""},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"            + \"Example: \" + COMMAND_WORD + \" Stars \" + \"1 \" + \"3 \";"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success Grouping!\";"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group name already exists in the address book\";"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_GROUP_CONSTRAINTS \u003d \"Groups names should be alphanumeric\";"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    private Group toAdd;"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    private final List\u003cIndex\u003e listTargetIndices;"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    public GroupCommand(Group group, List\u003cIndex\u003e listTargetIndices) throws IllegalValueException {"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        toAdd \u003d new Group(group);"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"        this.listTargetIndices \u003d listTargetIndices;"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"    /** checkstyle comment */"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(model);"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"            model.addGroup(toAdd);"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"            List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"            for (Index targetIndex : listTargetIndices) {"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"                if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"                }"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"            List\u003cReadOnlyPerson\u003e listPersonsToGroup \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"            for (Index targetIndex : listTargetIndices) {"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"                ReadOnlyPerson personToGroup \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"                listPersonsToGroup.add(personToGroup);"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"            requireNonNull(toAdd);"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"            for (ReadOnlyPerson personToGroup : listPersonsToGroup) {"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"                toAdd.addPerson(personToGroup);"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":"                personToGroup.addGroup(toAdd);"},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"            throw new CommandException(MESSAGE_GROUP_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"    } //Constructor"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":"//@@ author"}],"authorContributionMap":{"hxy0229":73}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NO_NAME_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROFILE_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_AMY;"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"//import seedu.address.model.person.ProfilePage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ReadOnlyPerson toAdd \u003d AMY;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"                + EMAIL_DESC_AMY + \"   \" + BIRTHDAY_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + PROFILE_DESC_AMY"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":"                + \"   \" + TAG_DESC_FRIEND;"},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY +  PROFILE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // This test will fail is a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(ReadOnlyPerson)"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY +  PROFILE_DESC_AMY + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e acccepted */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":110,"author":{"gitID":"hxy0229"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":111,"author":{"gitID":"hxy0229"},"content":"                .withFavorite(false).withProfilePage(VALID_PROFILE_AMY).build();"},{"lineNumber":112,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY +  PROFILE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":115,"author":{"gitID":"yanji1221"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e accepted */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":117,"author":{"gitID":"hxy0229"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY).withFavorite(false)"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":"                .withProfilePage(VALID_PROFILE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":119,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY +  PROFILE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":122,"author":{"gitID":"yanji1221"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e accepted */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":124,"author":{"gitID":"erik0704"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY).withProfilePage(VALID_PROFILE_AMY)"},{"lineNumber":125,"author":{"gitID":"hxy0229"},"content":"                .withTags(VALID_TAG_FRIEND).withFavorite(false).build();"},{"lineNumber":126,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + BIRTHDAY_DESC_AMY"},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":129,"author":{"gitID":"yanji1221"},"content":"        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e accepted */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":131,"author":{"gitID":"hxy0229"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withAddress(VALID_ADDRESS_AMY).withProfilePage(VALID_PROFILE_AMY)"},{"lineNumber":132,"author":{"gitID":"hxy0229"},"content":"                .withFavorite(false).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY  + TAG_DESC_FRIEND;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"yanji1221"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e accepted */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":138,"author":{"gitID":"hxy0229"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_BOB).withProfilePage(VALID_PROFILE_AMY)"},{"lineNumber":139,"author":{"gitID":"hxy0229"},"content":"                .withFavorite(false).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":141,"author":{"gitID":"hxy0229"},"content":"                + ADDRESS_DESC_BOB + PROFILE_DESC_AMY  + TAG_DESC_FRIEND;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":143,"author":{"gitID":"erik0704"},"content":"        /* Case: add a person with all fields same as another person in the address book except profile -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":145,"author":{"gitID":"hxy0229"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY).withProfilePage(VALID_PROFILE_BOB)"},{"lineNumber":146,"author":{"gitID":"hxy0229"},"content":"                .withFavorite(false).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":147,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size()"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":167,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PROFILE_DESC_BOB"},{"lineNumber":168,"author":{"gitID":"yanji1221"},"content":"                + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"hxy0229"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().isAnyCardSelected();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"yanji1221"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"erik0704"},"content":"        assertCommandFailure(command, String.format(MESSAGE_NO_NAME_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"},{"lineNumber":192,"author":{"gitID":"yanji1221"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"yanji1221"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC"},{"lineNumber":198,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"yanji1221"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":204,"author":{"gitID":"yanji1221"},"content":"                + INVALID_EMAIL_DESC + BIRTHDAY_DESC_AMY"},{"lineNumber":205,"author":{"gitID":"yanji1221"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"yanji1221"},"content":"        /* Case: invalid birthday -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":209,"author":{"gitID":"erik0704"},"content":"                + INVALID_BIRTHDAY_DESC + ADDRESS_DESC_AMY + PROFILE_DESC_AMY;"},{"lineNumber":210,"author":{"gitID":"yanji1221"},"content":"        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":213,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"yanji1221"},"content":"                + INVALID_ADDRESS_DESC + PROFILE_DESC_AMY;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"erik0704"},"content":"        /* Case: invalid profile -\u003e rejected"},{"lineNumber":218,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":219,"author":{"gitID":"erik0704"},"content":"                + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY + INVALID_PROFILE_DESC;"},{"lineNumber":220,"author":{"gitID":"erik0704"},"content":"        assertCommandFailure(command, ProfilePage.MESSAGE_PROFILEPAGE_CONSTRAINTS); */"},{"lineNumber":221,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":223,"author":{"gitID":"yanji1221"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY"},{"lineNumber":224,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_AMY + PROFILE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * the browser url and selected card remains unchanged."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * display box displays {@code expectedResultMessage} and the model related components equal to"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code expectedModel}."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":4,"-":206,"yanji1221":41,"erik0704":28,"hxy0229":14}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete.add(deletedPerson);"},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":93,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete.add(deletedPerson);"},{"lineNumber":94,"author":{"gitID":"quangtdn"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":109,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":124,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"quangtdn"},"content":"    public void deleteMultiplePersons() {"},{"lineNumber":126,"author":{"gitID":"quangtdn"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":127,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":128,"author":{"gitID":"quangtdn"},"content":"        /* Case: delete the first and second persons in the list, command with leading spaces and trailing spaces"},{"lineNumber":129,"author":{"gitID":"quangtdn"},"content":"        * -\u003e deleted"},{"lineNumber":130,"author":{"gitID":"quangtdn"},"content":"        */"},{"lineNumber":131,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":132,"author":{"gitID":"quangtdn"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"    \""},{"lineNumber":133,"author":{"gitID":"quangtdn"},"content":"                + INDEX_SECOND_PERSON.getOneBased() + \"  \";"},{"lineNumber":134,"author":{"gitID":"quangtdn"},"content":"        Index firstIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":135,"author":{"gitID":"quangtdn"},"content":"        Index secondIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":136,"author":{"gitID":"quangtdn"},"content":"        List\u003cIndex\u003e indicesToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":137,"author":{"gitID":"quangtdn"},"content":"        indicesToDelete.add(firstIndex);"},{"lineNumber":138,"author":{"gitID":"quangtdn"},"content":"        indicesToDelete.add(secondIndex);"},{"lineNumber":139,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d removePersonsList(expectedModel, indicesToDelete); ;"},{"lineNumber":140,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":141,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":142,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":143,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":144,"author":{"gitID":"quangtdn"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":145,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":146,"author":{"gitID":"quangtdn"},"content":"        /* Case: filtered person list, delete the first 2 indices within bounds of address book and person list"},{"lineNumber":147,"author":{"gitID":"quangtdn"},"content":"        *-\u003e deleted*/"},{"lineNumber":148,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":149,"author":{"gitID":"quangtdn"},"content":"        showPersonsWithName(\"Me\");"},{"lineNumber":150,"author":{"gitID":"quangtdn"},"content":"        firstIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":151,"author":{"gitID":"quangtdn"},"content":"        secondIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":152,"author":{"gitID":"quangtdn"},"content":"        assertTrue((firstIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size())"},{"lineNumber":153,"author":{"gitID":"quangtdn"},"content":"                    \u0026\u0026 (secondIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size()));"},{"lineNumber":154,"author":{"gitID":"quangtdn"},"content":"        List\u003cIndex\u003e deletedIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"quangtdn"},"content":"        deletedIndices.add(firstIndex);"},{"lineNumber":156,"author":{"gitID":"quangtdn"},"content":"        deletedIndices.add(secondIndex);"},{"lineNumber":157,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(deletedIndices);"},{"lineNumber":158,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":159,"author":{"gitID":"quangtdn"},"content":"        /* Case: filtered person list, delete 2 indeces where one index is valid, and the other is within bounds of"},{"lineNumber":160,"author":{"gitID":"quangtdn"},"content":"        *address book but out of bounds of person list"},{"lineNumber":161,"author":{"gitID":"quangtdn"},"content":"        * -\u003e rejected"},{"lineNumber":162,"author":{"gitID":"quangtdn"},"content":"        */"},{"lineNumber":163,"author":{"gitID":"quangtdn"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":164,"author":{"gitID":"quangtdn"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":165,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 1 \" + invalidIndex;"},{"lineNumber":166,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":167,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":168,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":169,"author":{"gitID":"quangtdn"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":170,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":171,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (0) at the beginning of index list -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0 1 2\";"},{"lineNumber":173,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":174,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":175,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (0) at the middle of index list -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 1 0 2\";"},{"lineNumber":177,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":178,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":179,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (-1)  at the beginning of index list-\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1 2 3\";"},{"lineNumber":181,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":182,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":183,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (-1) at the middle of index list -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 2 -1 3\";"},{"lineNumber":185,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":186,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":187,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (size + 1) at the beginning of index list-\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"quangtdn"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":189,"author":{"gitID":"quangtdn"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":190,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased() + \" 1 2\";"},{"lineNumber":191,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":192,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":193,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid index (size + 1) at the middle of index list-\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":195,"author":{"gitID":"quangtdn"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":196,"author":{"gitID":"quangtdn"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":197,"author":{"gitID":"quangtdn"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 2 \" + outOfBoundsIndex.getOneBased() + \" 1\";"},{"lineNumber":198,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":199,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":200,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":202,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":203,"author":{"gitID":"quangtdn"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":204,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":205,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":206,"author":{"gitID":"quangtdn"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(\"DelETE 1 2\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":208,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":210,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":211,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":212,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"quangtdn"},"content":"     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":214,"author":{"gitID":"quangtdn"},"content":"     * @return the removed person"},{"lineNumber":215,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"quangtdn"},"content":"    private ReadOnlyPerson removePerson(Model model, Index index) {"},{"lineNumber":217,"author":{"gitID":"quangtdn"},"content":"        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"},{"lineNumber":218,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"quangtdn"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":220,"author":{"gitID":"quangtdn"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":221,"author":{"gitID":"quangtdn"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":222,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"quangtdn"},"content":"        return targetPerson;"},{"lineNumber":224,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":226,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"quangtdn"},"content":"     * Removes all the {@code ReadOnlyPerson}\u0027s at the specified {@code index}\u0027s in {@code model}\u0027s address book."},{"lineNumber":228,"author":{"gitID":"quangtdn"},"content":"     * @return the removed person"},{"lineNumber":229,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"quangtdn"},"content":"    private List\u003cReadOnlyPerson\u003e removePersonsList(Model model, List\u003cIndex\u003e listTargetIndices) {"},{"lineNumber":231,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":232,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":233,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":234,"author":{"gitID":"quangtdn"},"content":"        for (Index targetIndex: listTargetIndices) {"},{"lineNumber":235,"author":{"gitID":"quangtdn"},"content":"            ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":236,"author":{"gitID":"quangtdn"},"content":"            listPersonsToDelete.add(personToDelete);"},{"lineNumber":237,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":239,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":240,"author":{"gitID":"quangtdn"},"content":"            for (ReadOnlyPerson personToDelete : listPersonsToDelete) {"},{"lineNumber":241,"author":{"gitID":"quangtdn"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":242,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":243,"author":{"gitID":"quangtdn"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":244,"author":{"gitID":"quangtdn"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":245,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":247,"author":{"gitID":"quangtdn"},"content":"        return listPersonsToDelete;"},{"lineNumber":248,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":250,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"quangtdn"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":252,"author":{"gitID":"quangtdn"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":253,"author":{"gitID":"quangtdn"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":254,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":256,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":257,"author":{"gitID":"quangtdn"},"content":"        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":258,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":259,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete.add(deletedPerson);"},{"lineNumber":260,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":261,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess("},{"lineNumber":262,"author":{"gitID":"quangtdn"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"},{"lineNumber":263,"author":{"gitID":"quangtdn"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":264,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":266,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"quangtdn"},"content":"     * Deletes a list of persons at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete}"},{"lineNumber":268,"author":{"gitID":"quangtdn"},"content":"     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":269,"author":{"gitID":"quangtdn"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":270,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(List\u003cIndex\u003e toDelete) {"},{"lineNumber":272,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":273,"author":{"gitID":"quangtdn"},"content":"        String command \u003d DeleteCommand.COMMAND_WORD;"},{"lineNumber":274,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d removePersonsList(expectedModel, toDelete);"},{"lineNumber":275,"author":{"gitID":"quangtdn"},"content":"        for (Index personToDelete: toDelete) {"},{"lineNumber":276,"author":{"gitID":"quangtdn"},"content":"            command \u003d command + \" \" + personToDelete.getOneBased();"},{"lineNumber":277,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":279,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":280,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":281,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":283,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"quangtdn"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"quangtdn"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"quangtdn"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"quangtdn"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"quangtdn"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"quangtdn"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"quangtdn"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"quangtdn"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":292,"author":{"gitID":"quangtdn"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":293,"author":{"gitID":"quangtdn"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":294,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":296,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":297,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":299,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"quangtdn"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":301,"author":{"gitID":"quangtdn"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":302,"author":{"gitID":"quangtdn"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":303,"author":{"gitID":"quangtdn"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":304,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":306,"author":{"gitID":"quangtdn"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":307,"author":{"gitID":"quangtdn"},"content":"        executeCommand(command);"},{"lineNumber":308,"author":{"gitID":"quangtdn"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":309,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":310,"author":{"gitID":"quangtdn"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":311,"author":{"gitID":"quangtdn"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":312,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":313,"author":{"gitID":"quangtdn"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":314,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":315,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":316,"author":{"gitID":"quangtdn"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":317,"author":{"gitID":"quangtdn"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":318,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":320,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"quangtdn"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"quangtdn"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":323,"author":{"gitID":"quangtdn"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":324,"author":{"gitID":"quangtdn"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":325,"author":{"gitID":"quangtdn"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":326,"author":{"gitID":"quangtdn"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"quangtdn"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":328,"author":{"gitID":"quangtdn"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":329,"author":{"gitID":"quangtdn"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":330,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":332,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":333,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":334,"author":{"gitID":"quangtdn"},"content":"        executeCommand(command);"},{"lineNumber":335,"author":{"gitID":"quangtdn"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":336,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":337,"author":{"gitID":"quangtdn"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":338,"author":{"gitID":"quangtdn"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":339,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":341,"author":{"gitID":"quangtdn"},"content":"    //@@author"}],"authorContributionMap":{"quangtdn":229,"-":112}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initializeStage();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":177,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"quangtdn"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":179,"author":{"gitID":"quangtdn"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":180,"author":{"gitID":"quangtdn"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":181,"author":{"gitID":"quangtdn"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":182,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"quangtdn"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":184,"author":{"gitID":"quangtdn"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":185,"author":{"gitID":"quangtdn"},"content":"        String selectedCardProfile \u003d getPersonListPanel().getHandleToSelectedCard().getProfilePage();"},{"lineNumber":186,"author":{"gitID":"quangtdn"},"content":"        URL expectedUrl;"},{"lineNumber":187,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"quangtdn"},"content":"            if (selectedCardProfile.equals(\"\")) {"},{"lineNumber":189,"author":{"gitID":"quangtdn"},"content":"                expectedUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \", \"+\")"},{"lineNumber":190,"author":{"gitID":"quangtdn"},"content":"                        + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":191,"author":{"gitID":"quangtdn"},"content":"            } else if (selectedCardProfile.contains(\"facebook\")) {"},{"lineNumber":192,"author":{"gitID":"quangtdn"},"content":"                //Facebook will link to the login page"},{"lineNumber":193,"author":{"gitID":"quangtdn"},"content":"                expectedUrl \u003d new URL(\"https://m.facebook.com/?refsrc\u003dhttps%3A%2F%2Fwww.facebook.com%2F\u0026_rdr\");"},{"lineNumber":194,"author":{"gitID":"quangtdn"},"content":"            } else {"},{"lineNumber":195,"author":{"gitID":"quangtdn"},"content":"                expectedUrl \u003d new URL(\"http://\" + selectedCardProfile);"},{"lineNumber":196,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":197,"author":{"gitID":"quangtdn"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":198,"author":{"gitID":"quangtdn"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":199,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":201,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":202,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":28,"-":240}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":83,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * of the selected person, and the model related components equal to the current model."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar remain unchanged. The resulting"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * browser url and selected card will be verified if the current selected card and the card at"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} are different."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        assertApplicationDisplaysExpected(\"\" + \"\" , expectedResultMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":143,"erik0704":1}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", true);"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":35,"yanji1221":3}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 2 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":195,"erik0704":1}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // changes made to Person reflects on card"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            personWithTags.setName(ALICE.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            personWithTags.setAddress(ALICE.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            personWithTags.setEmail(ALICE.getEmail());"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"            personWithTags.setBirthday(ALICE.getBirthday());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personWithTags.setPhone(ALICE.getPhone());"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"            personWithTags.setFavorite(ALICE.getFavorite());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personWithTags.setTags(ALICE.getTags());"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":82,"yanji1221":3,"hxy0229":2}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":157,"yanji1221":8}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"        assertEquals(expectedCard.getBirthday(), actualCard.getBirthday());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"        assertEquals(expectedPerson.getBirthday().value, actualCard.getBirthday());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        //assertEquals(expectedPerson.getFavorite().value, actualCard.getFavorite());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":73,"yanji1221":2,"hxy0229":1}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"    public void display() throws Exception {"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"        // default web page"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"        // associated web page of a person"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"        URL expectedPersonUrl \u003d new URL(\"https://\" + ALICE.getProfilePage().toString());"},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":13,"-":33}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"//import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + BIRTHDAY_DESC_BOB"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"                + ADDRESS_DESC_BOB + \" \" + PROFILE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":"                .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB).withFavorite(false)"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"                .withAddress(VALID_ADDRESS_BOB).withProfilePage(VALID_PROFILE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":135,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":139,"author":{"gitID":"yanji1221"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":141,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_AMY  + TAG_DESC_FRIEND;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":145,"author":{"gitID":"quangtdn"},"content":"        */"},{"lineNumber":146,"author":{"gitID":"quangtdn"},"content":"        //I modify the URL part already. So this test returns some errors. I will look at it later"},{"lineNumber":147,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":148,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"yanji1221"},"content":"        //@@author yanji1221"},{"lineNumber":185,"author":{"gitID":"yanji1221"},"content":"        /* Case: invalid birthday -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"yanji1221"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_BIRTHDAY_DESC,"},{"lineNumber":187,"author":{"gitID":"yanji1221"},"content":"                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"yanji1221"},"content":"        //@@author"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":202,"author":{"gitID":"yanji1221"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":203,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":208,"author":{"gitID":"yanji1221"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":237,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":241,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":5,"-":267,"yanji1221":21,"erik0704":11,"hxy0229":1}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    private static final int numberOfPerson \u003d EVENT_STUB.data.getPersonList().size();"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"    @Before"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(numberOfPerson);"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"        assertStatusBarContent(SYNC_STATUS_INITIAL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"        assertStatusBarContent("},{"lineNumber":61,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"    private void assertStatusBarContent(String expectedSyncStatus) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":58,"yanji1221":15}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"//import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.LocationCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"//import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"import seedu.address.testutil.TaskEventBuilder;"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"import seedu.address.testutil.TaskEventUtil;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    public void parseCommand_addEvent() throws Exception {"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"        Event event \u003d new TaskEventBuilder().build();"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(TaskEventUtil.getAddEventCommand(event));"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        assertEquals(new AddEventCommand(event), command);"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"    public void parseCommand_deleteEvent() throws Exception {"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"                DeleteEventCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EVENT.getOneBased());"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":"        assertEquals(new DeleteEventCommand(INDEX_FIRST_EVENT), command);"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"    public void parseCommand_favorite() throws Exception {"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand command \u003d (FavoriteCommand) parser.parseCommand("},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"                FavoriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"        assertEquals(new FavoriteCommand(INDEX_FIRST_PERSON, true), command);"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"    /* Need fix"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"    */"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":122,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"erik0704"},"content":"    public void parseCommand_findTag() throws Exception {"},{"lineNumber":124,"author":{"gitID":"erik0704"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"some\", \"tag\", \"here\");"},{"lineNumber":125,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d (FindTagCommand) parser.parseCommand("},{"lineNumber":126,"author":{"gitID":"erik0704"},"content":"                FindTagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":"        assertEquals(new FindTagCommand(new TagContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":128,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":130,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":159,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":164,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"erik0704"},"content":"    public void parseCommand_locate() throws Exception {"},{"lineNumber":166,"author":{"gitID":"erik0704"},"content":"        LocationCommand command \u003d (LocationCommand) parser.parseCommand("},{"lineNumber":167,"author":{"gitID":"erik0704"},"content":"                LocationCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":168,"author":{"gitID":"erik0704"},"content":"        assertEquals(new LocationCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":169,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":171,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":137,"erik0704":51,"hxy0229":9}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"                + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS); // invalid birthday"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":120,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":122,"author":{"gitID":"yanji1221"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":123,"author":{"gitID":"yanji1221"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"yanji1221"},"content":"        //@@author yanji1221"},{"lineNumber":162,"author":{"gitID":"yanji1221"},"content":"        // birthday"},{"lineNumber":163,"author":{"gitID":"yanji1221"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"yanji1221"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"},{"lineNumber":165,"author":{"gitID":"yanji1221"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"yanji1221"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"yanji1221"},"content":"        //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":181,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"yanji1221"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":183,"author":{"gitID":"yanji1221"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":184,"author":{"gitID":"yanji1221"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"yanji1221"},"content":"                + BIRTHDAY_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_FRIEND + BIRTHDAY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":189,"author":{"gitID":"yanji1221"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":190,"author":{"gitID":"yanji1221"},"content":"                .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":191,"author":{"gitID":"yanji1221"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":192,"author":{"gitID":"yanji1221"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":194,"author":{"gitID":"yanji1221"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":208,"author":{"gitID":"yanji1221"},"content":"                + PHONE_DESC_BOB + BIRTHDAY_DESC_BOB;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":210,"author":{"gitID":"yanji1221"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":188,"yanji1221":37}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ONE;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TWO;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ONE;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TWO;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_EVENT_DESC;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_EVENT_DESC;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EVENT_ONE;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EVENT_TWO;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EVENT_ONE;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ONE;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EVENT_ONE;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Dates;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"import seedu.address.testutil.TaskEventBuilder;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        Event expectedEvent \u003d new TaskEventBuilder().withName(VALID_NAME_EVENT_ONE).withDates(VALID_DATE_EVENT_ONE)"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"                .withDescription(VALID_DESCRIPTION_ONE).build();"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        // multiple names - last name accepted"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, AddEventCommand.COMMAND_WORD + NAME_DESC_EVENT_TWO + NAME_DESC_EVENT_ONE"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"                + DATE_DESC_ONE + DESCRIPTION_DESC_ONE, new AddEventCommand(expectedEvent));"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        // multiple dates - last dates accepted"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, AddEventCommand.COMMAND_WORD + NAME_DESC_EVENT_ONE"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"                + DATE_DESC_TWO + DATE_DESC_ONE + DESCRIPTION_DESC_ONE, new AddEventCommand(expectedEvent));"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        // multiple descriptions - last description accepted"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, AddEventCommand.COMMAND_WORD + NAME_DESC_EVENT_ONE + DATE_DESC_ONE"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"                + DESCRIPTION_DESC_TWO + DESCRIPTION_DESC_ONE, new AddEventCommand(expectedEvent));"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"        // missing name prefix"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD + VALID_NAME_EVENT_ONE"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"                + DATE_DESC_ONE + DESCRIPTION_DESC_ONE, expectedMessage);"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        // missing date prefix"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD + NAME_DESC_EVENT_ONE"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"                + VALID_DATE_EVENT_ONE + DESCRIPTION_DESC_ONE, expectedMessage);"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        // invalid name"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD + INVALID_NAME_EVENT_DESC + DATE_DESC_ONE"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"                + DESCRIPTION_DESC_ONE, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        // invalid dates"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD + NAME_DESC_EVENT_ONE + INVALID_DATE_EVENT_DESC"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"                + DESCRIPTION_DESC_ONE, Dates.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"    public void parse_noFieldSpecified_failure() throws Exception {"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"        // nothing at all"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddEventCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":83}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"adsd\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"    private static final String VALID_BIRTHDAY \u003d \"1989/12/11\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ParserUtil.parseName(null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ParserUtil.parseName(Optional.of(INVALID_NAME));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValue_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, actualName.get());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(null);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parsePhone_validValue_returnsPhone() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, actualPhone.get());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ParserUtil.parseAddress(null);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseAddress_validValue_returnsAddress() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, actualAddress.get());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(null);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseEmail_validValue_returnsEmail() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, actualEmail.get());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":169,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"yanji1221"},"content":"    public void parseBirthday_null_throwsNullPointerException() throws Exception {"},{"lineNumber":171,"author":{"gitID":"yanji1221"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":172,"author":{"gitID":"yanji1221"},"content":"        ParserUtil.parseBirthday(null);"},{"lineNumber":173,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":175,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"yanji1221"},"content":"    public void parseBirthday_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":177,"author":{"gitID":"yanji1221"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":178,"author":{"gitID":"yanji1221"},"content":"        ParserUtil.parseBirthday(Optional.of(INVALID_BIRTHDAY));"},{"lineNumber":179,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":181,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"yanji1221"},"content":"    public void parseBirthday_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":183,"author":{"gitID":"yanji1221"},"content":"        assertFalse(ParserUtil.parseBirthday(Optional.empty()).isPresent());"},{"lineNumber":184,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":186,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"yanji1221"},"content":"    public void parseBirthday_validValue_returnsBirthday() throws Exception {"},{"lineNumber":188,"author":{"gitID":"yanji1221"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"},{"lineNumber":189,"author":{"gitID":"yanji1221"},"content":"        Optional\u003cBirthday\u003e actualBirthday \u003d ParserUtil.parseBirthday(Optional.of(VALID_BIRTHDAY));"},{"lineNumber":190,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":191,"author":{"gitID":"yanji1221"},"content":"        assertEquals(expectedBirthday, actualBirthday.get());"},{"lineNumber":192,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":189,"yanji1221":29}},{"path":"src/test/java/seedu/address/ui/ComingBirthdayListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"import java.util.Calendar;"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"import guitests.guihandles.ComingBirthdayListPanelHandle;"},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"public class ComingBirthdayListPanelTest extends GuiUnitTest {"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    private static final ObservableList\u003cReadOnlyPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"    private ComingBirthdayListPanelHandle comingBirthdayListPanelHandle;"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"    private boolean isMoreThanOne \u003d false;"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"        ComingBirthdayListPanel comingBirthdayListPanel \u003d new ComingBirthdayListPanel(TYPICAL_PERSONS);"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"        uiPartRule.setUiPart(comingBirthdayListPanel);"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListPanelHandle \u003d new ComingBirthdayListPanelHandle(getChildNode(comingBirthdayListPanel"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"                        .getRoot(),"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"                ComingBirthdayListPanelHandle.COMING_BIRTHDAY_LIST_VIEW_ID));"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    public void display() {"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        List\u003cReadOnlyPerson\u003e comingBirthdayList \u003d TYPICAL_PERSONS.stream().collect(Collectors.toList());"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"        boolean isRemoved \u003d false;"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        int month \u003d cal.get(Calendar.MONTH) + 1;"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"        int date \u003d cal.get(Calendar.DATE);"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        if (((month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"                || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) \u0026\u0026 date \u003d\u003d 31)"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"                || ((month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"                || month \u003d\u003d 11) \u0026\u0026 date \u003d\u003d 30)"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"                || (month \u003d\u003d 2 \u0026\u0026 date \u003d\u003d 29)) {"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"            month +\u003d 1;"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"            if (month \u003d\u003d 13) {"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"                month \u003d 1;"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"            date \u003d 0;"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"        for (int i \u003d 0; i \u003c comingBirthdayList.size(); i++) {"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"            if (!(Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"                    .substring(5, 7)) \u003d\u003d month)) {"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"                comingBirthdayList.remove(i);"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d true;"},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"            } else if ((Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"                    .substring(5, 7)) \u003d\u003d month)"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"                    \u0026\u0026 Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":"                    .substring(8)) \u003c date) {"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"                comingBirthdayList.remove(i);"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d true;"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"            if (isRemoved) {"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"                i--;"},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d false;"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"        if (comingBirthdayList.size() \u003e 1) {"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"            isMoreThanOne \u003d true;"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"        for (int i \u003d 0; i \u003c comingBirthdayList.size(); i++) {"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"            comingBirthdayListPanelHandle.navigateToCard(comingBirthdayList.get(i));"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"            ReadOnlyPerson expectedPerson \u003d comingBirthdayList.get(i);"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"            PersonCardHandle actualCard \u003d comingBirthdayListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"        if (isMoreThanOne) {"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"            PersonCardHandle expectedCard \u003d comingBirthdayListPanelHandle"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"                    .getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"            PersonCardHandle selectedCard \u003d comingBirthdayListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"            assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":108}},{"path":"src/test/java/seedu/address/logic/parser/FindTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"public class FindTagCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    private FindTagCommandParser parser \u003d new FindTagCommandParser();"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        FindTagCommand expectedFindTagCommand \u003d"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friend\", \"family\")));"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, \"friend family\", expectedFindTagCommand);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, \" \\n friend \\n \\t family  \\t\", expectedFindTagCommand);"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":35}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NO_NAME_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PROFILE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_AMY;"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"//import seedu.address.model.person.ProfilePage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"                .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"                .withProfilePage(VALID_PROFILE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"                + PROFILE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"        // multiple birthdays - last birthday accepted"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"                + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + PROFILE_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        // multiple profile - last profile accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"                + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_AMY + PROFILE_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"                .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"                .withProfilePage(VALID_PROFILE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"                        + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"        // zero tags"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"                .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"                .withProfilePage(VALID_PROFILE_AMY).withTags().build();"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"                + BIRTHDAY_DESC_AMY + ADDRESS_DESC_AMY + PROFILE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_NO_NAME_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"        // missing name prefix"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + PHONE_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"                + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB , expectedMessage);"},{"lineNumber":122,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":123,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":125,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"yanji1221"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":127,"author":{"gitID":"yanji1221"},"content":"        // invalid name"},{"lineNumber":128,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"yanji1221"},"content":"                        + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":130,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":132,"author":{"gitID":"yanji1221"},"content":"        // invalid phone"},{"lineNumber":133,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":134,"author":{"gitID":"yanji1221"},"content":"                        + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":135,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":137,"author":{"gitID":"yanji1221"},"content":"        // invalid email"},{"lineNumber":138,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"yanji1221"},"content":"                        + INVALID_EMAIL_DESC + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":142,"author":{"gitID":"yanji1221"},"content":"        // invalid birthday"},{"lineNumber":143,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":144,"author":{"gitID":"yanji1221"},"content":"                        + INVALID_BIRTHDAY_DESC + ADDRESS_DESC_BOB + PROFILE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":145,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_FRIEND, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":147,"author":{"gitID":"yanji1221"},"content":"        // invalid address"},{"lineNumber":148,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"yanji1221"},"content":"                        + BIRTHDAY_DESC_BOB + INVALID_ADDRESS_DESC + PROFILE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":150,"author":{"gitID":"yanji1221"},"content":"                        + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":152,"author":{"gitID":"yanji1221"},"content":"        // invalid tag"},{"lineNumber":153,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"yanji1221"},"content":"                        + BIRTHDAY_DESC_BOB + ADDRESS_DESC_BOB + PROFILE_DESC_BOB  + INVALID_TAG_DESC"},{"lineNumber":155,"author":{"gitID":"yanji1221"},"content":"                        + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":157,"author":{"gitID":"yanji1221"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":158,"author":{"gitID":"yanji1221"},"content":"        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"yanji1221"},"content":"                        + EMAIL_DESC_BOB + BIRTHDAY_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":160,"author":{"gitID":"yanji1221"},"content":"                        + PROFILE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":70,"yanji1221":59,"erik0704":34}},{"path":"src/test/java/seedu/address/logic/parser/FavoriteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"public class FavoriteCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    private FavoriteCommandParser parser \u003d new FavoriteCommandParser();"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    public void parse_validArgs_returnsFavoriteCommand() {"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"        assertParseSuccess(parser, \"1\", new FavoriteCommand(INDEX_FIRST_PERSON, true));"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":34}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"import seedu.address.testutil.TaskEventBuilder;"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"public class AddEventCommandTest {"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        new AddEventCommand(null);"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"        Event validEvent \u003d new TaskEventBuilder().build();"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        CommandResult commandResult \u003d getAddCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        Event validEvent \u003d new TaskEventBuilder().build();"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"        getAddCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        Event one \u003d new TaskEventBuilder().withName(\"Project deadline\").build();"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"        Event two \u003d new TaskEventBuilder().withName(\"Dentist appointment\").build();"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        AddEventCommand addOneCommand \u003d new AddEventCommand(one);"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"        AddEventCommand addTwoCommand \u003d new AddEventCommand(two);"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"        assertTrue(addOneCommand.equals(addOneCommand));"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"        AddEventCommand addOneCommandCopy \u003d new AddEventCommand(one);"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"        assertTrue(addOneCommand.equals(addOneCommandCopy));"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"        assertFalse(addOneCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":"        assertFalse(addOneCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        // different event -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"        assertFalse(addOneCommand.equals(addTwoCommand));"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":"     * Generates a new AddEventCommand with the details of the given evet."},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"    private AddEventCommand getAddCommandForEvent(Event event, Model model) {"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        public void favoritePerson(ReadOnlyPerson p) throws PersonNotFoundException {"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"        public void deleteEvent(Event target) throws EventNotFoundException {"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":123,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"erik0704"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":128,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"erik0704"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":130,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":134,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"erik0704"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":136,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":139,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"erik0704"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":141,"author":{"gitID":"erik0704"},"content":"                throws DuplicatePersonException {"},{"lineNumber":142,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":145,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":151,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"erik0704"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":153,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":156,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":158,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":160,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cEvent\u003e getUpcomingEventList() throws ParseException {"},{"lineNumber":163,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":165,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":167,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"erik0704"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":169,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":172,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":174,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"erik0704"},"content":"     * A Model stub that always throw a DuplicateEventException when trying to add an event."},{"lineNumber":176,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"erik0704"},"content":"    private class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":178,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"erik0704"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":180,"author":{"gitID":"erik0704"},"content":"            throw new DuplicateEventException();"},{"lineNumber":181,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":183,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"erik0704"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":185,"author":{"gitID":"erik0704"},"content":"            return new AddressBook();"},{"lineNumber":186,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":189,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"erik0704"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":191,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"erik0704"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":193,"author":{"gitID":"erik0704"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":194,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":195,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"erik0704"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":197,"author":{"gitID":"erik0704"},"content":"            eventsAdded.add(new Event(event));"},{"lineNumber":198,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":200,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"erik0704"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":202,"author":{"gitID":"erik0704"},"content":"            return new AddressBook();"},{"lineNumber":203,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":206,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":207,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":208,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":208}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"public class DeleteCommandTest {"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete.add(personToDelete);"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"        listPersonsToDelete.add(personToDelete);"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete);"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"quangtdn"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":78,"author":{"gitID":"quangtdn"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":79,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":80,"author":{"gitID":"quangtdn"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":85,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":86,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(deleteCommand, model,"},{"lineNumber":87,"author":{"gitID":"quangtdn"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":94,"author":{"gitID":"quangtdn"},"content":"        List\u003cIndex\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"quangtdn"},"content":"        deleteList.add(INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"quangtdn"},"content":"        deleteList.add(INDEX_SECOND_PERSON);"},{"lineNumber":97,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteListCommand \u003d new DeleteCommand(deleteList);"},{"lineNumber":98,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":99,"author":{"gitID":"quangtdn"},"content":"        // same object -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"quangtdn"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":101,"author":{"gitID":"quangtdn"},"content":"        assertTrue(deleteListCommand.equals(deleteListCommand));"},{"lineNumber":102,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":103,"author":{"gitID":"quangtdn"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"quangtdn"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":106,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":107,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteListCommandCopy \u003d new DeleteCommand(deleteList);"},{"lineNumber":108,"author":{"gitID":"quangtdn"},"content":"        assertTrue(deleteListCommand.equals(deleteListCommandCopy));"},{"lineNumber":109,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":110,"author":{"gitID":"quangtdn"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteListCommand.equals(1));"},{"lineNumber":113,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":114,"author":{"gitID":"quangtdn"},"content":"        // null -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":116,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteListCommand.equals(null));"},{"lineNumber":117,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":118,"author":{"gitID":"quangtdn"},"content":"        // different person -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":120,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":121,"author":{"gitID":"quangtdn"},"content":"        // different number of input arguments -\u003e return false"},{"lineNumber":122,"author":{"gitID":"quangtdn"},"content":"        assertFalse(deleteFirstCommand.equals(deleteListCommand));"},{"lineNumber":123,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":125,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"quangtdn"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":127,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"quangtdn"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":129,"author":{"gitID":"quangtdn"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":130,"author":{"gitID":"quangtdn"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"quangtdn"},"content":"        return deleteCommand;"},{"lineNumber":132,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":134,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"quangtdn"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":136,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"quangtdn"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":138,"author":{"gitID":"quangtdn"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":139,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":140,"author":{"gitID":"quangtdn"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":141,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":143,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":143}},{"path":"src/test/java/seedu/address/logic/parser/LocationCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.LocationCommand;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"public class LocationCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    private LocationCommandParser parser \u003d new LocationCommandParser();"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    public void parse_validArgs_returnsLocationCommand() {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"        assertParseSuccess(parser, \"1\", new LocationCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocationCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":30}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        //@@author yanji1221"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"        // different birthday -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_BIRTHDAY_BOB).build();"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"        //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"yanji1221":6}},{"path":"src/test/java/seedu/address/logic/parser/FindPhoneCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.NameContainsPhonePredicate;"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"public class FindPhoneCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"    private FindPhoneCommandParser parser \u003d new FindPhoneCommandParser();"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"        String firstPersonPhone \u003d ALICE.getPhone().toString();"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"        String secondPersonPhone \u003d BENSON.getPhone().toString();"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand expectedFindPhoneCommand \u003d"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"                new FindPhoneCommand(new NameContainsPhonePredicate(Arrays.asList(firstPersonPhone,"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"                        secondPersonPhone)));"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"        assertParseSuccess(parser, firstPersonPhone + \" \" + secondPersonPhone, expectedFindPhoneCommand);"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"        assertParseSuccess(parser, \" \\n \" + firstPersonPhone + \" \\n \\t \" + secondPersonPhone + \"  \\t\","},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"                expectedFindPhoneCommand);"},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":42}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.NameContainsKeywordsEventPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"1988/08/18\";"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"1992/01/01\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_PROFILE_AMY \u003d \"instagram.com\";"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_PROFILE_BOB \u003d \"www.bob.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_GROUP \u003d \"NUS\";"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_NAME_EVENT_ONE \u003d \"Lunch\";"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_NAME_EVENT_TWO \u003d \"Dinner\";"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_DATE_EVENT_ONE \u003d \"2017-06-06\";"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_DATE_EVENT_TWO \u003d \"2017-08-18\";"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_DESCRIPTION_ONE \u003d \"noon\";"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    public static final String VALID_DESCRIPTION_TWO \u003d \"night\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"    public static final String PROFILE_DESC_AMY \u003d \" \" + PREFIX_PROFILEPAGE + VALID_PROFILE_AMY;"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"    public static final String PROFILE_DESC_BOB \u003d \" \" + PREFIX_PROFILEPAGE + VALID_PROFILE_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    public static final String GROUP_DESC \u003d \" \" + PREFIX_GROUP + VALID_GROUP;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"    public static final String NAME_DESC_EVENT_ONE \u003d \" \" + PREFIX_NAME + VALID_NAME_EVENT_ONE;"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"    public static final String NAME_DESC_EVENT_TWO \u003d \" \" + PREFIX_NAME + VALID_NAME_EVENT_TWO;"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"    public static final String DATE_DESC_ONE \u003d \" \" + PREFIX_DATE + VALID_DATE_EVENT_ONE;"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"    public static final String DATE_DESC_TWO \u003d \" \" + PREFIX_DATE + VALID_DATE_EVENT_TWO;"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"    public static final String DESCRIPTION_DESC_ONE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ONE;"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"    public static final String DESCRIPTION_DESC_TWO \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TWO;"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"12/12\"; // year is missing"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"    public static final String INVALID_PROFILE_DESC \u003d \" \" + PREFIX_PROFILEPAGE + \"random string here\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"    public static final String INVALID_NAME_EVENT_DESC \u003d \" \" + PREFIX_NAME + \"Dinner^^\";"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":"    public static final String INVALID_DATE_EVENT_DESC \u003d \" \" + PREFIX_DATE + \"17-06-06\"; // wrong format"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"    static {"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"                .withAddress(VALID_ADDRESS_AMY).withProfilePage(VALID_PROFILE_AMY)"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"                .withAddress(VALID_ADDRESS_BOB).withProfilePage(VALID_PROFILE_BOB)"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static void showFirstPersonOnly(Model model) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":146,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assert model.getFilteredPersonList().size() \u003d\u003d 1;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":165,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":166,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"erik0704"},"content":"     * Updates {@code model}\u0027s filtered list to show only the first event in the {@code model}\u0027s address book."},{"lineNumber":168,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"erik0704"},"content":"    public static void showFirstEventOnly(Model model) {"},{"lineNumber":170,"author":{"gitID":"erik0704"},"content":"        Event event \u003d model.getAddressBook().getEventList().get(0);"},{"lineNumber":171,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":172,"author":{"gitID":"erik0704"},"content":"        final String[] splitName \u003d event.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":173,"author":{"gitID":"erik0704"},"content":"        model.updateFilteredEventList(new NameContainsKeywordsEventPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":174,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":175,"author":{"gitID":"erik0704"},"content":"        assert model.getFilteredEventList().size() \u003d\u003d 1;"},{"lineNumber":176,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":1,"-":117,"yanji1221":18,"erik0704":42}},{"path":"src/test/java/seedu/address/logic/commands/FindTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import java.util.Collections;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"public class FindTagCommandTest {"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"    public void execute_oneKeyword_multiplePersonsFound() {"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends\");"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    public void execute_oneKeyword_onePersonsFound() {"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d prepareCommand(\"owesMoney\");"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    public void execute_multipleKeyword_onePersonsFound() {"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d prepareCommand(\"friends owesMoney\");"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"        FindTagCommand findFirstCommand \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"        FindTagCommand findSecondCommand \u003d new FindTagCommand(secondPredicate);"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        // same values -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"        FindTagCommand findFirstCommandCopy \u003d new FindTagCommand(firstPredicate);"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":"        // null -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"        // different person -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"     * Parses {@code userInput} into a {@code FindTagCommand}."},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"    private FindTagCommand prepareCommand(String userInput) {"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":"        FindTagCommand command \u003d"},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"                new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"    private void assertCommandSuccess(FindTagCommand command, String expectedMessage,"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":121}},{"path":"src/test/java/systemtests/FindPhoneCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.PARTIAL_PHONE_MATCHING;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"public class FindPhoneCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    public void find() {"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"        /* Case: find multiple phones in address book, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"        String command \u003d \"   \" + FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING + \"   \";"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // phones of Benson and DANIEL contain \"8535\""},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"        /* Case: repeat previous find phone command where person list is displaying the persons with the phone that"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"         * we are finding -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING;"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone where person list is not displaying the person with the phone that we are finding"},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"         * -\u003e 1 person found"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"         */"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + CARL.getPhone().value;"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"        /* Case: find multiple phones in address book, 2 phones -\u003e 2 persons found */"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + BENSON.getPhone().value + \" \" + DANIEL.getPhone().value;"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":"        /* Case: find multiple phones in address book, 2 phones in reversed order -\u003e 2 persons found */"},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value + \" \" + BENSON.getPhone().value;"},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"        /* Case: find multiple phones in address book, 2 phones with 1 repeat -\u003e 2 persons found */"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD +  \" \" + DANIEL.getPhone().value + \" \""},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":"                + BENSON.getPhone().value + \" \" + DANIEL.getPhone().value;"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"        /* Case: find multiple phones in address book, 2 matching phones and 1 non-matching phone"},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"        String nonMatchingPhone \u003d \"91919191\";"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD +  \" \" + DANIEL.getPhone().value + \" \""},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":"                + BENSON.getPhone().value + \" \" + nonMatchingPhone;"},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":79,"author":{"gitID":"quangtdn"},"content":"        /* Case: undo previous find phone command -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"quangtdn"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":"        /* Case: redo previous find phone command -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"quangtdn"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"quangtdn"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":87,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":"        /* Case: find same persons with previously specified phone in address book after deleting 1 of them"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"        * -\u003e 1 person found"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"        */"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":93,"author":{"gitID":"quangtdn"},"content":"        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"},{"lineNumber":94,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING;"},{"lineNumber":95,"author":{"gitID":"quangtdn"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":96,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":97,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":98,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":100,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone in address book, input is substring of phone -\u003e 2 persons found */"},{"lineNumber":101,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING;"},{"lineNumber":102,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":103,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":106,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone in address book, phone is substring of input -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING + \"000\";"},{"lineNumber":108,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":109,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":112,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone not in address book -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" 000000\";"},{"lineNumber":114,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":117,"author":{"gitID":"quangtdn"},"content":"        /* Case: find name of person in address book -\u003e 0 persons found */"},{"lineNumber":118,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getName().toString();"},{"lineNumber":119,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":122,"author":{"gitID":"quangtdn"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":123,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":124,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":125,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":127,"author":{"gitID":"quangtdn"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":128,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":129,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":130,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":131,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":132,"author":{"gitID":"quangtdn"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":133,"author":{"gitID":"quangtdn"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":134,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":135,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":136,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":137,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":138,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone while a person is selected -\u003e selected card deselected */"},{"lineNumber":139,"author":{"gitID":"quangtdn"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"quangtdn"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":141,"author":{"gitID":"quangtdn"},"content":"        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"},{"lineNumber":142,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":143,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":144,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":145,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":146,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":147,"author":{"gitID":"quangtdn"},"content":"        /* Case: find phone in empty address book -\u003e 0 persons found */"},{"lineNumber":148,"author":{"gitID":"quangtdn"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":149,"author":{"gitID":"quangtdn"},"content":"        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"},{"lineNumber":150,"author":{"gitID":"quangtdn"},"content":"        command \u003d FindPhoneCommand.COMMAND_WORD + \" \" + PARTIAL_PHONE_MATCHING;"},{"lineNumber":151,"author":{"gitID":"quangtdn"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"quangtdn"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":156,"author":{"gitID":"quangtdn"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"quangtdn"},"content":"        command \u003d \"pHOne \" + PARTIAL_PHONE_MATCHING;"},{"lineNumber":158,"author":{"gitID":"quangtdn"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":159,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":161,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"quangtdn"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":163,"author":{"gitID":"quangtdn"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":164,"author":{"gitID":"quangtdn"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":165,"author":{"gitID":"quangtdn"},"content":"     * These verifications are done by"},{"lineNumber":166,"author":{"gitID":"quangtdn"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"quangtdn"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":168,"author":{"gitID":"quangtdn"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":169,"author":{"gitID":"quangtdn"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":170,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"quangtdn"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":173,"author":{"gitID":"quangtdn"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":174,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":175,"author":{"gitID":"quangtdn"},"content":"        executeCommand(command);"},{"lineNumber":176,"author":{"gitID":"quangtdn"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"quangtdn"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"quangtdn"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":179,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":181,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"quangtdn"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":183,"author":{"gitID":"quangtdn"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":184,"author":{"gitID":"quangtdn"},"content":"     * These verifications are done by"},{"lineNumber":185,"author":{"gitID":"quangtdn"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"quangtdn"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":187,"author":{"gitID":"quangtdn"},"content":"     * error style."},{"lineNumber":188,"author":{"gitID":"quangtdn"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"quangtdn"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":193,"author":{"gitID":"quangtdn"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"quangtdn"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"quangtdn"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":196,"author":{"gitID":"quangtdn"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":197,"author":{"gitID":"quangtdn"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":198,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":200,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":200}},{"path":"src/test/java/seedu/address/logic/commands/LocationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"public class LocationCommandTest {"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    private Model model;"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateFirstCommand \u003d new LocationCommand(INDEX_FIRST_PERSON);"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateSecondCommand \u003d new LocationCommand(INDEX_SECOND_PERSON);"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommand));"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateFirstCommandCopy \u003d new LocationCommand(INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"        assertTrue(locateFirstCommand.equals(locateFirstCommandCopy));"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        assertFalse(locateFirstCommand.equals(1));"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":"        assertFalse(locateFirstCommand.equals(null));"},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":"        // different person -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"        assertFalse(locateFirstCommand.equals(locateSecondCommand));"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"     * Executes a {@code LocationCommand} with the given {@code index}"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateCommand \u003d prepareCommand(index);"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"            CommandResult commandResult \u003d locateCommand.execute();"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"            assertEquals(String.format(LocationCommand.MESSAGE_LOCATE_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"        } catch (CommandException ce) {"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"     * Executes a {@code LocationCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateCommand \u003d prepareCommand(index);"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"            locateCommand.execute();"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"        } catch (CommandException ce) {"},{"lineNumber":122,"author":{"gitID":"erik0704"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":123,"author":{"gitID":"erik0704"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":124,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"erik0704"},"content":"     * Returns a {@code LocationCommand} with parameters {@code index}."},{"lineNumber":129,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"erik0704"},"content":"    private LocationCommand prepareCommand(Index index) {"},{"lineNumber":131,"author":{"gitID":"erik0704"},"content":"        LocationCommand locateCommand \u003d new LocationCommand(index);"},{"lineNumber":132,"author":{"gitID":"erik0704"},"content":"        locateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":133,"author":{"gitID":"erik0704"},"content":"        return locateCommand;"},{"lineNumber":134,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":135}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        //@@author erik0704"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"        public void deleteEvent(Event target) throws EventNotFoundException {"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"        //@@author"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        public void favoritePerson(ReadOnlyPerson person) throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":158,"author":{"gitID":"erik0704"},"content":"        //@@author erik0704"},{"lineNumber":159,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":161,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":163,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cEvent\u003e getUpcomingEventList() throws ParseException {"},{"lineNumber":166,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"erik0704"},"content":"            return null;"},{"lineNumber":168,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":170,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"erik0704"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":172,"author":{"gitID":"erik0704"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"erik0704"},"content":"        //@@author"},{"lineNumber":175,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            personsAdded.add(new Person(person));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":171,"yanji1221":2,"erik0704":35,"hxy0229":2}},{"path":"src/test/java/seedu/address/model/person/TagContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"    public void test_tagContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"foe\"));"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"foe\", \"family\").build()));"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"foe\", \"family\"));"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"foe\", \"family\").build()));"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        // Only one matching keyword"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"foe\", \"family\"));"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friend\", \"family\").build()));"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        // Mixed-case keywords"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"FoE\", \"famiLy\"));"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"foe\", \"family\").build()));"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        // Zero keywords"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"foe\").build()));"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        // Non-matching keyword"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"foe\", \"family\").build()));"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"        // Keywords match phone, email, address, name, but does not match tag"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"12345\","},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"                \"alice@email.com\", \"Main\", \"Street\", \"Alice\"));"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"foe\").build()));"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":79}},{"path":"src/test/java/seedu/address/model/EventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.EventList;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"public class EventListTest {"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"        EventList eventList \u003d new EventList();"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"        eventList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":20}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"        // Keywords match phone, email, birthday and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"                .withEmail(\"alice@email.com\").withBirthday(\"1988/08/18\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":73,"yanji1221":2}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"public class BirthdayTest {"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"    public void isValidBirthday() {"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"        // invalid birthday"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"^\")); // only non-alphanumeric characters"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"1993\")); // year only"},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"19920102\")); // not in the format yyyy/mm/dd"},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"1992-01-02\")); // wrong symovol \u0027-\u0027"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"1992/1/02\")); // month must be two digits"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"1992/01/2\")); // date must be two digits"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"01/02/1993\")); // wrong order"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"        assertFalse(Birthday.isValidBirthday(\"92/01/02\")); // year must be four digits"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"        // valid birthday"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"        assertTrue(Birthday.isValidBirthday(\"1993/12/12\")); // int the format yyyy/mm/dd"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"        assertTrue(Birthday.isValidBirthday(\"1993/02/30\")); // possible"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":29}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        List\u003cEvent\u003e newEvents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newEvents);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":83,"author":{"gitID":"hxy0229"},"content":"                        Collection\u003c? extends Event\u003e events) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"            this.events.setAll(events);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"            return events;"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":93,"erik0704":11,"hxy0229":2}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstEventOnly;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.testutil.TypicalTaskEvents.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"public class DeleteEventCommandTest {"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        showFirstEventOnly(model);"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        Event eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"        showNoEvent(expectedModel);"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        showFirstEventOnly(model);"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteFirstCommand \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteSecondCommand \u003d new DeleteEventCommand(INDEX_SECOND_EVENT);"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"        // same values -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteFirstCommandCopy \u003d new DeleteEventCommand(INDEX_FIRST_EVENT);"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"        // different event -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":"     * Returns a {@code DeleteEventCommand} with the parameter {@code index}."},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"    private DeleteEventCommand prepareCommand(Index index) {"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(index);"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"        deleteEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"        return deleteEventCommand;"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"     * Updates {@code model}\u0027s filtered list to show no event."},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"    private void showNoEvent(Model model) {"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"        model.updateFilteredEventList(p -\u003e false);"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        assert model.getFilteredEventList().isEmpty();"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":116}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"        descriptor.setProfilePage(person.getProfilePage());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"            ParserUtil.parseBirthday(Optional.of(birthday)).ifPresent(descriptor::setBirthday);"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":101,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"quangtdn"},"content":"     * Sets the {@code ProfilePage} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":103,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"quangtdn"},"content":"    public EditPersonDescriptorBuilder withProfilePage(String profile) {"},{"lineNumber":105,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"quangtdn"},"content":"            ParserUtil.parseProfilePage(Optional.of(profile)).ifPresent(descriptor::setProfilePage);"},{"lineNumber":107,"author":{"gitID":"quangtdn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":108,"author":{"gitID":"quangtdn"},"content":"            throw new IllegalArgumentException(\"Profile Page is expected to be unique.\");"},{"lineNumber":109,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"quangtdn"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":14,"-":99,"yanji1221":15}},{"path":"src/test/java/seedu/address/logic/commands/FindPhoneCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.NameContainsPhonePredicate;"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"public class FindPhoneCommandTest {"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"        NameContainsPhonePredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"                new NameContainsPhonePredicate(Collections.singletonList(\"12345678\"));"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"        NameContainsPhonePredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"                new NameContainsPhonePredicate(Collections.singletonList(\"87654321\"));"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand findPhoneFirstCommand \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand findPhoneSecondCommand \u003d new FindPhoneCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"        assertTrue(findPhoneFirstCommand.equals(findPhoneFirstCommand));"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand findPhoneFirstCommandCopy \u003d new FindPhoneCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"        assertTrue(findPhoneFirstCommand.equals(findPhoneFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"        assertFalse(findPhoneFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"        assertFalse(findPhoneFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"        assertFalse(findPhoneFirstCommand.equals(findPhoneSecondCommand));"},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"    public void execute_noInputNumber_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"    public void execute_multipleNumbers_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand command \u003d prepareCommand("},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"                CARL.getPhone().toString() + \" \" + ELLE.getPhone().toString() + \" 1111222\");"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE));"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"quangtdn"},"content":"    private FindPhoneCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"quangtdn"},"content":"        FindPhoneCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"quangtdn"},"content":"                new FindPhoneCommand(new NameContainsPhonePredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":85,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"quangtdn"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"quangtdn"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"quangtdn"},"content":"     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"    private void assertCommandSuccess(FindPhoneCommand command, String expectedMessage,"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"                                      List\u003cReadOnlyPerson\u003e expectedList) {"},{"lineNumber":93,"author":{"gitID":"quangtdn"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"quangtdn"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":96,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":98,"author":{"gitID":"quangtdn"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":101,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":101}},{"path":"src/test/java/seedu/address/model/event/DatesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"public class DatesTest {"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"    public void isValidDates() {"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"        // invalid dates"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"        assertFalse(Dates.isValidDateFormat(\"\")); //empty string"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"        assertFalse(Dates.isValidDateFormat(\"  \")); //white string"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"        assertFalse(Dates.isValidDateFormat(\"?\")); //non-numeric"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"        assertFalse(Dates.isValidDateFormat(\"20101213\")); //no dash"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"        assertFalse(Dates.isValidDateFormat(\"17-05-25\")); //wrong format, year only 2 digits"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"        // valid dates"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"        assertTrue(Dates.isValidDateFormat(\"2017-05-25\"));"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        assertTrue(Dates.isValidDateFormat(\"0001-01-21\"));"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":23}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":12,"erik0704":3}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(ReadOnlyPerson person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"        sb.append(PREFIX_PROFILEPAGE + person.getProfilePage().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":2,"-":37,"yanji1221":2,"erik0704":1}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_AMY;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PROFILE_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"            .withBirthday(\"1988/08/18\").withPhone(\"97235255\").withProfilePage(\"www.facebook.com\").withFavorite(false)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"            .withEmail(\"johnd@example.com\").withBirthday(\"1980/03/12\").withPhone(\"85357654\").withFavorite(false)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"heinz@example.com\").withBirthday(\"1999/12/11\").withFavorite(false)"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"wall street\").build();"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"85352533\")"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"cornelia@example.com\").withBirthday(\"1980/03/01\").withFavorite(false)"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"10th street\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"werner@example.com\").withBirthday(\"1990/01/01\").withFavorite(false)"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"michegan ave\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"lydia@example.com\").withBirthday(\"1982/06/05\").withFavorite(false)"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"little tokyo\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"anna@example.com\").withBirthday(\"2000/09/09\").withFavorite(false)"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"4th street\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"            .withEmail(\"stefan@example.com\").withBirthday(\"1990/01/02\")"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"little india\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"            .withEmail(\"hans@example.com\").withBirthday(\"2001/10/10\")"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"            .withAddress(\"chicago ave\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"            .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"            .withAddress(VALID_ADDRESS_AMY).withProfilePage(VALID_PROFILE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"            .withEmail(VALID_EMAIL_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"            .withAddress(VALID_ADDRESS_BOB).withProfilePage(VALID_PROFILE_BOB)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"    public static final String PARTIAL_PHONE_MATCHING \u003d \"8535\"; // A partial number in BENSON and DANIEL phones"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (ReadOnlyPerson person : getTypicalPersons()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                assert false : \"not possible\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":4,"-":67,"yanji1221":12,"erik0704":4,"hxy0229":7}},{"path":"src/test/java/seedu/address/testutil/TaskEventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Dates;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":" * A utility class to help with building Event objects."},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"public class TaskEventBuilder {"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"    public static final String DEFAULT_EVENT_NAME \u003d \"Doctor appointment\";"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    public static final String DEFAULT_DATES \u003d \"2012-12-23\";"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Come early\";"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    private Event event;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public TaskEventBuilder() {"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            Name defaultName \u003d new Name(DEFAULT_EVENT_NAME);"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"            Dates defaultDates \u003d new Dates(DEFAULT_DATES);"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            String defaultDes \u003d DEFAULT_DESCRIPTION;"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            this.event \u003d new Event(defaultName, defaultDates, defaultDes);"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"            throw new AssertionError(\"Default event\u0027s values are invalid.\");"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"     * Initializes the TaskEventBuilder with the data of {@code eventToCopy}."},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    public TaskEventBuilder(Event eventToCopy) {"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        this.event \u003d new Event(eventToCopy);"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building."},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    public TaskEventBuilder withName(String name) {"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"            this.event.setName(new Name(name));"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"     * Sets the {@code Dates} of the {@code Event} that we are building."},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    public TaskEventBuilder withDates(String date) {"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"            this.event.setDate(new Dates(date));"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"            throw new IllegalArgumentException(\"date is invalid\");"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"     * Sets the {@code Description} of the {@code Event} that we are building."},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    public TaskEventBuilder withDescription(String des) {"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"        this.event.setDescription(des);"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"    public Event build() {"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        return this.event;"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":72}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 10000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":104,"erik0704":1}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    public static final String DEFAULT_PHONE \u003d \"85657255\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"1988/08/18\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"    public static final String DEFAULT_PROFILEPAGE \u003d \"www.facebook.com\";"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    //@@author hxy0229"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public static final boolean DEFAULT_FAVORITE \u003d true;"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public static final String DEFAULT_GROUPS \u003d \"NUS\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Person person;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Name defaultName \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"            ProfilePage defaultProfilePage \u003d new ProfilePage(DEFAULT_PROFILEPAGE);"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"            Favorite defaultFavorite \u003d new Favorite(DEFAULT_FAVORITE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"            this.person \u003d new Person(defaultName, defaultPhone, defaultEmail, defaultBirthday, defaultAddress,"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"                    defaultProfilePage, defaultFavorite, defaultTags);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Default person\u0027s values are invalid.\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public PersonBuilder(ReadOnlyPerson personToCopy) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.person \u003d new Person(personToCopy);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.person.setName(new Name(name));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"name is expected to be unique.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.person.setTags(SampleDataUtil.getTagSet(tags));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tags are expected to be unique.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            this.person.setAddress(new Address(address));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"address is expected to be unique.\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":98,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"quangtdn"},"content":"     * Sets the {@code ProfilePage} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"quangtdn"},"content":"    public PersonBuilder withProfilePage(String profile) {"},{"lineNumber":102,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"quangtdn"},"content":"            this.person.setProfilePage(new ProfilePage(profile));"},{"lineNumber":104,"author":{"gitID":"quangtdn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":105,"author":{"gitID":"quangtdn"},"content":"            throw new IllegalArgumentException(\"profile page is expected to be unique.\");"},{"lineNumber":106,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"quangtdn"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            this.person.setPhone(new Phone(phone));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"phone is expected to be unique.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            this.person.setEmail(new Email(email));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"email is expected to be unique.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":135,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"yanji1221"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":137,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"yanji1221"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":139,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":"            this.person.setBirthday(new Birthday(birthday));"},{"lineNumber":141,"author":{"gitID":"yanji1221"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":142,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"},{"lineNumber":143,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"yanji1221"},"content":"        return this;"},{"lineNumber":145,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"hxy0229"},"content":"     * Sets the {@code Favorite} of the {@code Person} that we are building."},{"lineNumber":149,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"hxy0229"},"content":"    public PersonBuilder withFavorite(boolean favorite) {"},{"lineNumber":151,"author":{"gitID":"hxy0229"},"content":"        this.person.setFavorite(new Favorite(favorite));"},{"lineNumber":152,"author":{"gitID":"hxy0229"},"content":"        return this;"},{"lineNumber":153,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return this.person;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":18,"-":106,"yanji1221":18,"erik0704":2,"hxy0229":15}},{"path":"src/test/java/guitests/HelpWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class HelpWindowTest extends AddressBookGuiTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        /*"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        assertHelpWindowNotOpen(); */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        runCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"erik0704":2}},{"path":"src/test/java/seedu/address/testutil/TypicalTaskEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"public class TypicalTaskEvents {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    public static final Event ONE \u003d new TaskEventBuilder().withName(\"Project Demo\")"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"            .withDates(\"2016-12-15\").withDescription(\"Read requirements\").build();"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    public static final Event TWO \u003d new TaskEventBuilder().withName(\"BFF birthday\")"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"            .withDates(\"2017-06-11\").withDescription(\"Prepare present\").build();"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public static final Event THREE \u003d new TaskEventBuilder().withName(\"Online quiz\")"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            .withDates(\"2017-10-22\").build();"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    public static final Event FOUR \u003d  new TaskEventBuilder().withName(\"Dinner with gramp\")"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            .withDates(\"2016-01-27\").build();"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    private TypicalTaskEvents() {} // prevents instantiation"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"     * Returns an {@code AddressBook} with all the typical events."},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        for (Event event : getTypicalEvents()) {"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"                ab.addEvent(event);"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"                assert false : \"not possible\";"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"        return ab;"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ONE, TWO, THREE, FOUR));"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":45}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    private static final String FAVORITE_FIELD_ID \u003d \"#favorite\";"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"    private static final String PROFILEPAGE_FIELD_ID \u003d \"#profile\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    private final Label profileLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"    private final Label birthdayLabel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"    private final ImageView favoriteLabel;"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"        this.profileLabel \u003d getChildNode(PROFILEPAGE_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"        this.birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"        this.favoriteLabel \u003d getChildNode(FAVORITE_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"    public String getProfilePage() {"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":"        return profileLabel.getText();"},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":"    public boolean getFavorite() {"},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":"        return (favoriteLabel !\u003d null);"},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"    public String getBirthday() {"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"        return birthdayLabel.getText();"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":9,"-":69,"yanji1221":8,"hxy0229":9}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    public static final String SUCCESS_STYLE_CLASS \u003d \"success\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"            initHistory();"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"            historySnapshot.next();"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"            // process result of the command"},{"lineNumber":109,"author":{"gitID":"yanji1221"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":110,"author":{"gitID":"yanji1221"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"yanji1221"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"},{"lineNumber":112,"author":{"gitID":"yanji1221"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"yanji1221"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"yanji1221"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"yanji1221"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"yanji1221"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"yanji1221"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), true));"},{"lineNumber":118,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":151,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"yanji1221"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":153,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"yanji1221"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":155,"author":{"gitID":"yanji1221"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":156,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":157,"author":{"gitID":"yanji1221"},"content":"        if (styleClass.contains(SUCCESS_STYLE_CLASS)) {"},{"lineNumber":158,"author":{"gitID":"yanji1221"},"content":"            return;"},{"lineNumber":159,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":161,"author":{"gitID":"yanji1221"},"content":"        styleClass.add(SUCCESS_STYLE_CLASS);"},{"lineNumber":162,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":126,"yanji1221":38}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.ui.PersonPanelLocationChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    public static final String GOOGLE_MAP_URL_PREFIX \u003d \"https://www.google.com.sg/maps/place/\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void loadPersonPage(ReadOnlyPerson person) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName.replaceAll(\" \", \"+\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"    private void loadProfilePage(ReadOnlyPerson person) {"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":"        loadPage(\"https://\" + person.getProfilePage().toString());"},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    private void loadPersonAddressPage(ReadOnlyPerson person) {"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        loadPage(GOOGLE_MAP_URL_PREFIX + person.getAddress().value.replaceAll(\" \", \"+\"));"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":85,"author":{"gitID":"quangtdn"},"content":"        ReadOnlyPerson person \u003d event.getNewSelection().person;"},{"lineNumber":86,"author":{"gitID":"quangtdn"},"content":"        if (person.getProfilePage().hasProfilePage()) {"},{"lineNumber":87,"author":{"gitID":"quangtdn"},"content":"            loadProfilePage(person);"},{"lineNumber":88,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":"            loadPersonPage(person);"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"    @Subscribe"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"    private void handlePersonPanelLocationChangedEvent(PersonPanelLocationChangedEvent event) {"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"        loadPersonAddressPage(event.getNewSelection());"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":17,"-":67,"erik0704":15}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.ui.ShowReminderRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(config.getAppTitle());"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":55,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"            EventsCenter.getInstance().post(new ShowReminderRequestEvent());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":122,"erik0704":2}},{"path":"src/test/java/seedu/address/testutil/TaskEventUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * A utility class for task Event."},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class TaskEventUtil {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"     * Returns an add event command string for adding the {@code event}."},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public static String getAddEventCommand(Event event) {"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    public static String getEventDetails(Event event) {"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        sb.append(PREFIX_NAME + event.getName().fullName + \" \");"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        sb.append(PREFIX_DATE + event.getDate().toString() + \" \");"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        sb.append(PREFIX_DESCRIPTION + event.getDescription() + \" \");"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        return sb.toString();"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":34}},{"path":"src/test/java/seedu/address/logic/commands/FavoriteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.logic.commands.FavoriteCommand.MESSAGE_FAVORITE_COMMAND_SUCCESS;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"public class FavoriteCommandTest {"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"        ReadOnlyPerson personToFavorite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"        String expectedMessage \u003d MESSAGE_FAVORITE_COMMAND_SUCCESS + personToFavorite.getName().fullName;"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"        expectedModel.favoritePerson(personToFavorite);"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        CommandResult result \u003d favoriteCommand.execute();"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteCommand  \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        assertCommandFailure(favoriteCommand , model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"        ReadOnlyPerson personToFavorite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"        String expectedMessage \u003d MESSAGE_FAVORITE_COMMAND_SUCCESS + personToFavorite.getName().fullName;"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"        expectedModel.favoritePerson(personToFavorite);"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"        CommandResult result \u003d favoriteCommand.execute();"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":"        showFirstPersonOnly(model);"},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"hxy0229"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":81,"author":{"gitID":"hxy0229"},"content":"        assertCommandFailure(favoriteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":84,"author":{"gitID":"hxy0229"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"hxy0229"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteFirstCommand \u003d new FavoriteCommand(INDEX_FIRST_PERSON, true);"},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteSecondCommand \u003d new FavoriteCommand(INDEX_SECOND_PERSON, true);"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"        // same object -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommand));"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"        // same values -\u003e returns true"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteFirstCommandCopy \u003d new FavoriteCommand(INDEX_FIRST_PERSON, true);"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommandCopy));"},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":96,"author":{"gitID":"hxy0229"},"content":"        // different types -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"hxy0229"},"content":"        assertFalse(favoriteFirstCommand.equals(1));"},{"lineNumber":98,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":99,"author":{"gitID":"hxy0229"},"content":"        // null -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"hxy0229"},"content":"        assertFalse(favoriteFirstCommand.equals(null));"},{"lineNumber":101,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":102,"author":{"gitID":"hxy0229"},"content":"        // different person -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"hxy0229"},"content":"        assertFalse(favoriteFirstCommand.equals(favoriteSecondCommand));"},{"lineNumber":104,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":106,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"hxy0229"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":108,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"hxy0229"},"content":"    private FavoriteCommand prepareCommand(Index index) {"},{"lineNumber":110,"author":{"gitID":"hxy0229"},"content":"        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(index, true);"},{"lineNumber":111,"author":{"gitID":"hxy0229"},"content":"        favoriteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"hxy0229"},"content":"        return favoriteCommand;"},{"lineNumber":113,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":115,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"hxy0229"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":117,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        assert model.getFilteredPersonList().isEmpty();"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":124}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.ui.ShowReminderRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String ICON \u003d \"/images/address_book_32.png\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final int MIN_HEIGHT \u003d 600;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final int MIN_WIDTH \u003d 450;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    private EventListPanel eventListPanel;"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"    private ComingBirthdayListPanel comingBirthdayListPanel;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"    private StackPane eventListPanelPlaceholder;"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"    private StackPane comingBirthdayListPanelPlaceholder;"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitID":"hxy0229"},"content":"    private StackPane groupListPanelPlaceholder;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setIcon(ICON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setWindowMinSize();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":126,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListPanel \u003d new ComingBirthdayListPanel(logic.getFilteredPersonList());"},{"lineNumber":150,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListPanelPlaceholder.getChildren().add(comingBirthdayListPanel.getRoot());"},{"lineNumber":151,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":152,"author":{"gitID":"erik0704"},"content":"        eventListPanel \u003d new EventListPanel(logic.getFilteredEventList());"},{"lineNumber":153,"author":{"gitID":"erik0704"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());"},{"lineNumber":154,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"yanji1221"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFilteredPersonList().size());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Sets the given image as the icon of the main window."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void setIcon(String iconSource) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        FxViewUtil.setStageIcon(primaryStage, iconSource);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void setWindowMinSize() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        primaryStage.setMinHeight(MIN_HEIGHT);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        primaryStage.setMinWidth(MIN_WIDTH);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"erik0704"},"content":"     * Opens the reminder window."},{"lineNumber":217,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":219,"author":{"gitID":"erik0704"},"content":"    public void handleReminder() throws ParseException {"},{"lineNumber":220,"author":{"gitID":"erik0704"},"content":"        for (Event event : logic.getUpcomingEventList()) {"},{"lineNumber":221,"author":{"gitID":"erik0704"},"content":"            ReminderWindow window \u003d new ReminderWindow(event);"},{"lineNumber":222,"author":{"gitID":"erik0704"},"content":"            window.show();"},{"lineNumber":223,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"erik0704"},"content":"    public EventListPanel getEventListPanel() {"},{"lineNumber":243,"author":{"gitID":"erik0704"},"content":"        return this.eventListPanel;"},{"lineNumber":244,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":246,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":247,"author":{"gitID":"yanji1221"},"content":"    public ComingBirthdayListPanel getComingBirthdayListPanel() {"},{"lineNumber":248,"author":{"gitID":"yanji1221"},"content":"        return this.comingBirthdayListPanel;"},{"lineNumber":249,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"yanji1221"},"content":"    //@author"},{"lineNumber":251,"author":{"gitID":"yanji1221"},"content":"    void releaseResources() {"},{"lineNumber":252,"author":{"gitID":"yanji1221"},"content":"        browserPanel.freeResources();"},{"lineNumber":253,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":255,"author":{"gitID":"yanji1221"},"content":"    @Subscribe"},{"lineNumber":256,"author":{"gitID":"yanji1221"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":257,"author":{"gitID":"yanji1221"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":258,"author":{"gitID":"yanji1221"},"content":"        handleHelp();"},{"lineNumber":259,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":261,"author":{"gitID":"erik0704"},"content":"    @Subscribe"},{"lineNumber":262,"author":{"gitID":"erik0704"},"content":"    private void handleShowReminderEvent(ShowReminderRequestEvent event) throws ParseException {"},{"lineNumber":263,"author":{"gitID":"erik0704"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":264,"author":{"gitID":"erik0704"},"content":"        handleReminder();"},{"lineNumber":265,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"-":209,"yanji1221":22,"erik0704":33,"hxy0229":2}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"    private StatusBar totalPersons;"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    private StatusBar currentDate;"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"    public StatusBarFooter(int totalPersons) {"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"        setCurrentDate();"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"        this.totalPersons.setText(totalPersons + \" person(s) total\");"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"    private void setCurrentDate() {"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"        Date date \u003d new Date();"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"        this.currentDate.setText(\" \" + dateFormat.format(date) + \"\\n\");"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"        long now \u003d clock.millis();"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":58,"yanji1221":35}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"    private static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"        if (event.isError) {"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"            setStyleToDefault();"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"    private void setStyleToDefault() {"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"            return;"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"-":33,"yanji1221":38}},{"path":"src/test/java/guitests/guihandles/ComingBirthdayListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":" * Provides a handle for {@code ComingBirthdayListPanel} containing the list of {@code PersonCard}."},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"public class ComingBirthdayListPanelHandle extends NodeHandle\u003cListView\u003cPersonCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"    public static final String COMING_BIRTHDAY_LIST_VIEW_ID \u003d \"#comingBirthdayListView\";"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"    private Optional\u003cPersonCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"    public ComingBirthdayListPanelHandle(ListView\u003cPersonCard\u003e comingBirthdayListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"        super(comingBirthdayListPanelNode);"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"     * Returns a handle to the selected {@code PersonCardHandle}."},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"    public PersonCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"        List\u003cPersonCard\u003e comingBirthdayList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"        if (comingBirthdayList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"            throw new AssertionError(\"Person list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"        return new PersonCardHandle(comingBirthdayList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"        List\u003cPersonCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"     * Navigates the listview to display and select the person."},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"    public void navigateToCard(ReadOnlyPerson person) {"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"        List\u003cPersonCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"        Optional\u003cPersonCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.person.equals(person)).findFirst();"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalArgumentException(\"Person does not exist.\");"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"     * Returns the person card handle of a person associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"    public PersonCardHandle getPersonCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).person);"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code person} in the list."},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"    public PersonCardHandle getPersonCardHandle(ReadOnlyPerson person) {"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"                .filter(card -\u003e card.person.equals(person))"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"                .map(card -\u003e new PersonCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Person does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"     * Selects the {@code PersonCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"     * Remembers the selected {@code PersonCard} in the list."},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"yanji1221"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"yanji1221"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":114,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"yanji1221"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"yanji1221"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":117,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"yanji1221"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":119,"author":{"gitID":"yanji1221"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":121,"author":{"gitID":"yanji1221"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"yanji1221"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"yanji1221"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"yanji1221"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"yanji1221"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":129,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"yanji1221"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"yanji1221"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"yanji1221"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":135}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import java.util.Random;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"    private static String[] colors \u003d { \"red\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\","},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"        \"grey\", \"purple\", \"gold\", \"crimson\", \"navy\", \"darkBlue\", \"mediumBlue\", \"darkGreen\","},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"        \"teal\", \"darkCyan\", \"deepSkyBlue\", \"lime\", \"springGreen\", \"midnightBlue\", \"forestGreen\","},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"        \"seaGreen\", \"royalBlue\", \"indigo\", \"darkOliveGreen\", \"maroon\", \"saddleBrown\", \"slateBlue\","},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"        \"chocolate\", \"darksalmon\"};"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"    private static HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"    private static Random random \u003d new Random();"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"    private static int[] usedColors \u003d new int[colors.length];"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public final ReadOnlyPerson person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"    //@@author hxy0229"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"    private ImageView favorite;"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"    private Label birthday;"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":"    private Label profile;"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        bindListeners(person);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"     * Color getter for a tag"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"    private static String colorGetterForTag(String tagValue) {"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"        int colorCode;"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"        boolean isUsedUpAllColors \u003d true;"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"        for (int i \u003d 0; i \u003c colors.length; i++) {"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"            if (usedColors[i] \u003d\u003d 0) {"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"                isUsedUpAllColors \u003d false;"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"                break;"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"        if (isUsedUpAllColors) {"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"            for (int j \u003d 0; j \u003c colors.length; j++) {"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"                usedColors[j] \u003d 0;"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"        if (!tagColors.containsKey(tagValue)) {"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"            do {"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"                colorCode \u003d random.nextInt(colors.length);"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"            } while(usedColors[colorCode] \u003d\u003d 1);"},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"            usedColors[colorCode] \u003d 1;"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"            tagColors.put(tagValue, colors[colorCode]);"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"        return tagColors.get(tagValue);"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Binds the individual UI elements to observe their respective {@code Person} properties"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * so that they will be notified of any changes."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":113,"author":{"gitID":"quangtdn"},"content":"    private void bindListeners(ReadOnlyPerson person) {"},{"lineNumber":114,"author":{"gitID":"quangtdn"},"content":"        name.textProperty().bind(Bindings.convert(person.nameProperty()));"},{"lineNumber":115,"author":{"gitID":"quangtdn"},"content":"        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"},{"lineNumber":116,"author":{"gitID":"quangtdn"},"content":"        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"},{"lineNumber":117,"author":{"gitID":"quangtdn"},"content":"        address.textProperty().bind(Bindings.convert(person.addressProperty()));"},{"lineNumber":118,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":119,"author":{"gitID":"quangtdn"},"content":"        if (!person.profilepageProperty().toString().equals(\"\")) {"},{"lineNumber":120,"author":{"gitID":"quangtdn"},"content":"            profile.textProperty().bind(Bindings.convert(person.profilepageProperty()));"},{"lineNumber":121,"author":{"gitID":"quangtdn"},"content":"            profile.setVisible(true);"},{"lineNumber":122,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"quangtdn"},"content":"            profile.setVisible(false);"},{"lineNumber":124,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":126,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":127,"author":{"gitID":"quangtdn"},"content":"        email.textProperty().bind(Bindings.convert(person.emailProperty()));"},{"lineNumber":128,"author":{"gitID":"quangtdn"},"content":"        if (person.getFavorite().value \u003d\u003d true) {"},{"lineNumber":129,"author":{"gitID":"quangtdn"},"content":"            Image image \u003d new Image(\"/images/star.png\");"},{"lineNumber":130,"author":{"gitID":"quangtdn"},"content":"            favorite.setImage(image);"},{"lineNumber":131,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":132,"author":{"gitID":"quangtdn"},"content":"            favorite \u003d null;"},{"lineNumber":133,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":135,"author":{"gitID":"quangtdn"},"content":"        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":136,"author":{"gitID":"quangtdn"},"content":"            tags.getChildren().clear();"},{"lineNumber":137,"author":{"gitID":"quangtdn"},"content":"            initTags(person);"},{"lineNumber":138,"author":{"gitID":"quangtdn"},"content":"        });"},{"lineNumber":139,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":142,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"yanji1221"},"content":"     * Distribute colors for tags"},{"lineNumber":144,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"yanji1221"},"content":"    private void initTags(ReadOnlyPerson person) {"},{"lineNumber":146,"author":{"gitID":"yanji1221"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":147,"author":{"gitID":"yanji1221"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":148,"author":{"gitID":"yanji1221"},"content":"            tagLabel.setStyle(\"-fx-background-color: \" + colorGetterForTag(tag.tagName));"},{"lineNumber":149,"author":{"gitID":"yanji1221"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":150,"author":{"gitID":"yanji1221"},"content":"        });"},{"lineNumber":151,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":153,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":154,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"yanji1221"},"content":"    public boolean equals(Object other) {"},{"lineNumber":156,"author":{"gitID":"yanji1221"},"content":"        // short circuit if same object"},{"lineNumber":157,"author":{"gitID":"yanji1221"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":158,"author":{"gitID":"yanji1221"},"content":"            return true;"},{"lineNumber":159,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":161,"author":{"gitID":"yanji1221"},"content":"        // instanceof handles nulls"},{"lineNumber":162,"author":{"gitID":"yanji1221"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":163,"author":{"gitID":"yanji1221"},"content":"            return false;"},{"lineNumber":164,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":166,"author":{"gitID":"yanji1221"},"content":"        // state check"},{"lineNumber":167,"author":{"gitID":"yanji1221"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":168,"author":{"gitID":"yanji1221"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":169,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":170,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"quangtdn":33,"-":51,"yanji1221":78,"erik0704":1,"hxy0229":8}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_INVALID_GROUP_NAME_FORMAT \u003d \"Group name cannot be Numeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_NO_NAME_FORMAT \u003d \"Name cannot be empty.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":13,"erik0704":2,"hxy0229":1}},{"path":"src/main/java/seedu/address/ui/EventCard.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * An UI component that displays information of a {@code Event}."},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public final Event event;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    private Label name;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    private Label date;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    private Label description;"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    public EventCard(Event event, int displayedIndex) {"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        this.event \u003d event;"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        bindListeners(event);"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"     * Binds the individual UI elements to observe their respective {@code Event} properties"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"     * so that they will be notified of any changes."},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"    private void bindListeners(Event event) {"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        name.textProperty().bind(Bindings.convert(event.nameProperty()));"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        date.textProperty().bind(Bindings.convert(event.dateProperty()));"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        description.textProperty().bind(Bindings.convert(event.descriptionProperty()));"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        if (!(other instanceof EventCard)) {"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"        // state check"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"        EventCard card \u003d (EventCard) other;"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 event.equals(card.event);"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":65}},{"path":"src/main/java/seedu/address/commons/util/CollectionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    public static void requireNotAllNull(Object... items) {"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        boolean allNull \u003d true;"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"        for (Object ob:items) {"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"            if (ob !\u003d null) {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"                allNull \u003d false;"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"                break;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"            }"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        if (allNull) {"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"            throw new NullPointerException();"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    /** checkstyle comment */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns true if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (Object item : items) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":51,"erik0704":4,"hxy0229":11}},{"path":"src/main/java/seedu/address/ui/ReminderWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.util.FxViewUtil;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":" * Controller for a reminder page"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"public class ReminderWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ReminderWindow.class);"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    private static final String FXML \u003d \"ReminderWindow.fxml\";"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    private static final String TITLE \u003d \"You have an event coming up.\";"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    private static final String ICON \u003d \"/images/clock.png\";"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    public final Event event;"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    private final Stage dialogStage;"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    private VBox reminder;"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    private Label date;"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    private Label description;"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"    public ReminderWindow(Event event) {"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        Scene scene \u003d new Scene(getRoot());"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        //Null passed as the parent stage to make it non-modal."},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        dialogStage \u003d createDialogStage(TITLE, null, scene);"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        FxViewUtil.setStageIcon(dialogStage, ICON);"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        this.event \u003d event;"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        bindListeners(event);"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"     * Binds the individual UI elements to observe their respective {@code Event} properties"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"     * so that they will be notified of any changes."},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    private void bindListeners(Event event) {"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"        name.textProperty().bind(Bindings.convert(event.nameProperty()));"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        date.textProperty().bind(Bindings.convert(event.dateProperty()));"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        description.textProperty().bind(Bindings.convert(event.descriptionProperty()));"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"     * Show the reminder window"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    public void show() {"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        logger.fine(\"Showing reminder\");"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"        dialogStage.showAndWait();"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":68}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.commons.util;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"/** Utility method related to Date */"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"public class DateUtil {"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"    /** create current date object */"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    public static Date createCurrentDate() throws ParseException {"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss\");"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"        SimpleDateFormat newformat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"        String str \u003d format.format(new Date());"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"            Date now \u003d newformat.parse(str);"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"            String newStr \u003d newformat.format(now);"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"            Date date \u003d newformat.parse(newStr);"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            return date;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        } catch (ParseException e) {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            e.printStackTrace();"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            return format.parse(\"05-05-05\");"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":27}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"    public final boolean isError;"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"    public NewResultAvailableEvent(String message, boolean isError) {"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"        this.isError \u003d isError;"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":16,"yanji1221":7}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.ui.EventPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":" * Panel containing the list of event."},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    private ListView\u003cEventCard\u003e eventListView;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        setConnections(eventList);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    private void setConnections(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"        ObservableList\u003cEventCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"                eventList, (event) -\u003e new EventCard(event, eventList.indexOf(event) + 1));"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        eventListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        eventListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"                        raise(new EventPanelSelectionChangedEvent(newValue));"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"                    }"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"                });"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"     * Scrolls to the {@code EventCard} at the {@code index} and selects it."},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    private void scrollTo(int index) {"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"            eventListView.scrollTo(index);"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"            eventListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EventCard}."},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"    class EventListViewCell extends ListCell\u003cEventCard\u003e {"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        @Override"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"        protected void updateItem(EventCard event, boolean empty) {"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"            super.updateItem(event, empty);"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"                setGraphic(null);"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"                setText(null);"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"            } else {"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"                setGraphic(event.getRoot());"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":81}},{"path":"src/main/java/seedu/address/commons/events/ui/EventPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import seedu.address.ui.EventCard;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":" * Gets an event the panel change selection"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"public class EventPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    private final EventCard newSelection;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    public EventPanelSelectionChangedEvent(EventCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    public EventCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":26}},{"path":"src/main/java/seedu/address/commons/events/ui/ComingBirthdayPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"public class ComingBirthdayPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"    public ComingBirthdayPanelSelectionChangedEvent(PersonCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"yanji1221":6}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    /** Returns a view of the filtered list of events */"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    /** Returns a view of the filtered list of events */"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    ObservableList\u003cEvent\u003e getUpcomingEventList() throws java.text.ParseException;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    /** Returns a view of the filtered list of groups */"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":27,"erik0704":11,"hxy0229":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NO_NAME_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_BIRTHDAY,"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"                PREFIX_ADDRESS, PREFIX_PROFILEPAGE, PREFIX_TAG, PREFIX_GROUP);"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME))"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 (!arePrefixesPresent(argMultimap, PREFIX_ADDRESS))"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 (!arePrefixesPresent(argMultimap, PREFIX_PHONE))"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 (!arePrefixesPresent(argMultimap, PREFIX_EMAIL))"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 (!arePrefixesPresent(argMultimap, PREFIX_BIRTHDAY))) {"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"            Name name;"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"            Phone phone;"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"            Email email;"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"            Birthday birthday;"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"            Address address;"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"            ProfilePage profile;"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"            Favorite favorite;"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"            Set\u003cTag\u003e tagList;"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"                name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"                throw new IllegalValueException(MESSAGE_NO_NAME_FORMAT);"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"                phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"                phone \u003d new Phone();"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":"                email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"                email \u003d new Email();"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_BIRTHDAY)) {"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"                birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"                birthday \u003d new Birthday();"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"                address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"                address \u003d new Address();"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"            profile \u003d ParserUtil.parseProfilePage(argMultimap.getValue(PREFIX_PROFILEPAGE)).get();"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"            favorite \u003d new Favorite(false);"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"            tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"            ReadOnlyPerson person \u003d new Person(name, phone, email, birthday, address, profile, favorite, tagList);"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"            return new AddCommand(person);"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":""}],"authorContributionMap":{"-":25,"yanji1221":72,"erik0704":10,"hxy0229":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowReminderRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":" * An event requesting to show the reminder popup."},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"public class ShowReminderRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":14}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelLocationChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"public class PersonPanelLocationChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"    private final ReadOnlyPerson newSelection;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    public PersonPanelLocationChangedEvent(ReadOnlyPerson newSelection) {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    public ReadOnlyPerson getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":27}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"            if (trimmedArgs.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"                throw new ParseException("},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"            String[] indices \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"            List\u003cString\u003e inputInString \u003d Arrays.asList(indices);"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"            List\u003cIndex\u003e input \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"            for (String ind: inputInString) {"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"                Index index \u003d ParserUtil.parseIndex(ind);"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"                input.add(index);"},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"            return new DeleteCommand(input);"},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"            throw new ParseException("},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":49}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ListFavoriteCommand;"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.LocationCommand;"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.UnfavoriteCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"        case LocationCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"            return new LocationCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"        //@@author hxy0229"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"        case FavoriteCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"            return new FavoriteCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"        case UnfavoriteCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"            return new UnfavoriteCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"        case ListFavoriteCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":"            return new ListFavoriteCommandParser().parse();"},{"lineNumber":96,"author":{"gitID":"hxy0229"},"content":"        //@@author"},{"lineNumber":97,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"        case FindTagCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"            return new FindTagCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":104,"author":{"gitID":"quangtdn"},"content":"        case FindPhoneCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"quangtdn"},"content":"            return new FindPhoneCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":6,"-":79,"erik0704":13,"hxy0229":33}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"    public static final Prefix PREFIX_PROFILEPAGE \u003d new Prefix(\"pr/\");"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"de/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":3,"-":15,"yanji1221":1,"erik0704":2,"hxy0229":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Dates;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":78,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"quangtdn"},"content":"     * Parses a {@code Optional\u003cString\u003e profile} into an {@code Optional\u003cProfilePage\u003e} if {@code profile} is present."},{"lineNumber":80,"author":{"gitID":"quangtdn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"    public static Optional\u003cProfilePage\u003e parseProfilePage(Optional\u003cString\u003e profile) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":"        requireNonNull(profile);"},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":"        return profile.isPresent() ? Optional.of(new ProfilePage(profile.get())) : Optional.of(new ProfilePage(\"\"));"},{"lineNumber":85,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"        requireNonNull(birthday);"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"        return birthday.isPresent() ? Optional.of(new Birthday(birthday.get())) : Optional.empty();"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            tagSet.add(new Tag(tagName));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"    /*"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"    public static Set\u003cPerson\u003e parsePersons(Collection\u003cInteger\u003e persons) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(persons);"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        final Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"        for (Integer indexes : persons) {"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"            personSet.add(new Person());"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"hxy0229"},"content":"        return personSet;"},{"lineNumber":126,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":"    */"},{"lineNumber":128,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":129,"author":{"gitID":"erik0704"},"content":"    /** checkstyle comment, @TODO: David collate this please */"},{"lineNumber":130,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":131,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":132,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"erik0704"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDates\u003e} if {@code date} is present."},{"lineNumber":134,"author":{"gitID":"erik0704"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":135,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"erik0704"},"content":"    public static Optional\u003cDates\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":137,"author":{"gitID":"erik0704"},"content":"        requireNonNull(date);"},{"lineNumber":138,"author":{"gitID":"erik0704"},"content":"        return date.isPresent() ? Optional.of(new Dates(date.get())) : Optional.empty();"},{"lineNumber":139,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":11,"-":88,"yanji1221":10,"erik0704":24,"hxy0229":8}},{"path":"src/main/java/seedu/address/logic/parser/FindTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.FindTagCommand;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" * Parses input arguments and creates a new FindTagCommand object"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"public class FindTagCommandParser implements Parser\u003cFindTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTagCommand"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"     * and returns an FindTagCommand object for execution."},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public FindTagCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTagCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        return new FindTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":33}},{"path":"src/main/java/seedu/address/logic/parser/FindPhoneCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.FindPhoneCommand;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.NameContainsPhonePredicate;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":" * Parses input arguments and creates a new FindPhoneCommand object"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"public class FindPhoneCommandParser implements Parser\u003cFindPhoneCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"     * and returns an FindPhoneCommand object for execution."},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"    public FindPhoneCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"        String[] phoneNumbers \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"        return new FindPhoneCommand(new NameContainsPhonePredicate(Arrays.asList(phoneNumbers)));"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":33}},{"path":"src/main/java/seedu/address/logic/parser/ListFavoriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.ListFavoriteCommand;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.FavoritePredicate;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":" * Parses input arguments and creates a new FindPhoneCommand object"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"public class ListFavoriteCommandParser {"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"     * and returns an FindPhoneCommand object for execution."},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    public ListFavoriteCommand parse() throws ParseException {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"        return new ListFavoriteCommand(new FavoritePredicate());"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":22}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":" * Created by nguyenminhquang on 11/7/17."},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":" * Parses input arguments and creates a new FindPhoneCommand object"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"public class ExportCommandParser {"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"     * and returns an FindPhoneCommand object for execution."},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"        if (args.equals(\"\") || args.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"            return new ExportCommand(\"exportFile.txt\");"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"            return new ExportCommand(args);"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":32}},{"path":"src/main/java/seedu/address/logic/parser/LocationCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.LocationCommand;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * Parses input arguments and creates a new LocationCommand object"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class LocationCommandParser implements Parser\u003cLocationCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"     * Parses the given {@code String} of arguments in the context of the LocationCommand"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"     * and returns an LocationCommand object for execution."},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public LocationCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            return new LocationCommand(index);"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocationCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":30}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"                        PREFIX_BIRTHDAY, PREFIX_ADDRESS, PREFIX_PROFILEPAGE,  PREFIX_TAG, PREFIX_GROUP);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"            ParserUtil.parseBirthday("},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"                    argMultimap.getValue(PREFIX_BIRTHDAY)).ifPresent(editPersonDescriptor::setBirthday);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"            parseProfilePageForEdit("},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"                    argMultimap.getValue(PREFIX_PROFILEPAGE)).ifPresent(editPersonDescriptor::setProfilePage);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":88,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":"    private Optional\u003cProfilePage\u003e parseProfilePageForEdit(Optional\u003cString\u003e profile) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"        requireNonNull(profile);"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"        return profile.isPresent() ? Optional.of(new ProfilePage(profile.get())) : Optional.empty();"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":7,"-":71,"yanji1221":3,"erik0704":13}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"     * and returns an DeleteEventCommand object for execution."},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            return new DeleteEventCommand(index);"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":32}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":" * Deletes a list of persons identified using their last displayed indices from the address book."},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"            + \": Deletes the list of persons identified by the index numbers used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"            + \"Parameters: INDEX [MORE_INDICES] (must be a positive integers)\\n\""},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2 4\";"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Persons: %1$s\";"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    private final List\u003cIndex\u003e listTargetIndices;"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    public DeleteCommand(List\u003cIndex\u003e listTargetIndices) {"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"        this.listTargetIndices \u003d listTargetIndices;"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"        this.listTargetIndices \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"        this.listTargetIndices.add(targetIndex);"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"        for (Index targetIndex: listTargetIndices) {"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"        List\u003cReadOnlyPerson\u003e listPersonsToDelete \u003d new ArrayList\u003cReadOnlyPerson\u003e();"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"        for (Index targetIndex: listTargetIndices) {"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":"            ReadOnlyPerson personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"            listPersonsToDelete.add(personToDelete);"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"            for (ReadOnlyPerson personToDelete: listPersonsToDelete) {"},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, listPersonsToDelete));"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 (this.listTargetIndices.containsAll(((DeleteCommand) other).listTargetIndices)"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"                    \u0026\u0026 ((DeleteCommand) other).listTargetIndices"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"                    .containsAll(this.listTargetIndices))); // state check"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":76}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Dates;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATE, PREFIX_DESCRIPTION);"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATE, PREFIX_DESCRIPTION)) {"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"            Dates date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\");"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"            Event event \u003d new Event(name, date, description);"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"            return new AddEventCommand(event);"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":61}},{"path":"src/main/java/seedu/address/logic/commands/FindTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":" * Finds and lists all persons in address book whose tags contains all of the argument keywords."},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"public class FindTagCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    public static final String COMMAND_WORD \u003d \"findTag\";"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds any persons whose tags contain all of \""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends colleagues\";"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public FindTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"                || (other instanceof FindTagCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.predicate.equals(((FindTagCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":37}},{"path":"src/main/java/seedu/address/logic/parser/FavoriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.FavoriteCommand;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":" * Parses input arguments and creates a new FavoriteCommand object"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"public class FavoriteCommandParser implements Parser\u003cFavoriteCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"     * Parses the given {@code String} of arguments in the context of the FavoriteCommand"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    public FavoriteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"            return new FavoriteCommand(index, true);"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":29}},{"path":"src/main/java/seedu/address/ui/ComingBirthdayListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.events.ui.ComingBirthdayPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":" * Panel containing the list of persons who are having their birthday soon."},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"public class ComingBirthdayListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    private static final String FXML \u003d \"ComingBirthdayListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"    private ListView\u003cPersonCard\u003e comingBirthdayListView;"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"    public ComingBirthdayListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"        ObservableList\u003cReadOnlyPerson\u003e comingBirthdayList \u003d comingBirthdayListGetter(personList);"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"        setConnections(comingBirthdayList);"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"     * To get the list of person who are having their birthday soon"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"    private ObservableList\u003cReadOnlyPerson\u003e comingBirthdayListGetter(ObservableList\u003cReadOnlyPerson\u003e personList) {"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"        List\u003cReadOnlyPerson\u003e comingBirthdayList \u003d personList.stream().collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"        boolean isRemoved \u003d false;"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"        int month \u003d cal.get(Calendar.MONTH) + 1;"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        int date \u003d cal.get(Calendar.DATE);"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"        if (((month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"                || month \u003d\u003d 8 || month \u003d\u003d 10 || month \u003d\u003d 12) \u0026\u0026 date \u003d\u003d 31)"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"                || ((month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"                || month \u003d\u003d 11) \u0026\u0026 date \u003d\u003d 30)"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"                || (month \u003d\u003d 2 \u0026\u0026 date \u003d\u003d 29)) {"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"            month +\u003d 1;"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"            if (month \u003d\u003d 13) {"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"                month \u003d 1;"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"            date \u003d 0;"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"        for (int i \u003d 0; i \u003c comingBirthdayList.size(); i++) {"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"            if (!(Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"                    .substring(5, 7)) \u003d\u003d month)) {"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"                comingBirthdayList.remove(i);"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d true;"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"            } else if ((Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"                    .substring(5, 7)) \u003d\u003d month)"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"                    \u0026\u0026 Integer.parseInt(comingBirthdayList.get(i).getBirthday().toString()"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"                    .substring(8)) \u003c date) {"},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"                comingBirthdayList.remove(i);"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d true;"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":"            if (isRemoved) {"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"                i--;"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"                isRemoved \u003d false;"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"        return FXCollections.observableArrayList(comingBirthdayList);"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e comingBirthdayList) {"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"                comingBirthdayList, (person) -\u003e new PersonCard(person, comingBirthdayList.indexOf(person) + 1));"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListView.setItems(mappedList);"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListView.setCellFactory(listView -\u003e new BirthdayListViewCell());"},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":"        comingBirthdayListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"                        logger.fine(\"Selection in event list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":"                        raise(new ComingBirthdayPanelSelectionChangedEvent(newValue));"},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"                    }"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"                });"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"    private void scrollTo(int index) {"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"            comingBirthdayListView.scrollTo(index);"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"            comingBirthdayListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"        });"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":109,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"yanji1221"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":111,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"yanji1221"},"content":"    class BirthdayListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":113,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":114,"author":{"gitID":"yanji1221"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"yanji1221"},"content":"        protected void updateItem(PersonCard comingBirthday, boolean empty) {"},{"lineNumber":116,"author":{"gitID":"yanji1221"},"content":"            super.updateItem(comingBirthday, empty);"},{"lineNumber":117,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":118,"author":{"gitID":"yanji1221"},"content":"            if (empty || comingBirthday \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"yanji1221"},"content":"                setGraphic(null);"},{"lineNumber":120,"author":{"gitID":"yanji1221"},"content":"                setText(null);"},{"lineNumber":121,"author":{"gitID":"yanji1221"},"content":"            } else {"},{"lineNumber":122,"author":{"gitID":"yanji1221"},"content":"                setGraphic(comingBirthday.getRoot());"},{"lineNumber":123,"author":{"gitID":"yanji1221"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":127,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":127}},{"path":"src/main/java/seedu/address/logic/commands/FindPhoneCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import seedu.address.model.person.NameContainsPhonePredicate;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":" * Finds and lists all persons in address book whose phone numbers match with any of the argument phone numbers."},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"public class FindPhoneCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"    public static final String COMMAND_WORD \u003d \"phone\";"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the persons whose phone numbers appear partially\""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"            + \" in the list of specified numbers and displays those persons as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"            + \"Parameters: NUMBERS\\n\""},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"            + \"Example: \" + COMMAND_WORD + \" 12345678\";"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"    private final NameContainsPhonePredicate predicate;"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"    public FindPhoneCommand(NameContainsPhonePredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"                || (other instanceof FindPhoneCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 this.predicate.equals(((FindPhoneCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":37}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" * Add an event to the application"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add an event with a name, date and description. \\n\""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            + PREFIX_DATE + \"DATE (yyyy-mm-dd format) \""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            + PREFIX_DESCRIPTION + \"[\" + \"DESCRIPTION]\\n\""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"            + PREFIX_NAME + \"Doctor appointment \""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"            + PREFIX_DATE + \"2017-12-17 \""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"            + PREFIX_DESCRIPTION + \"Come before 9am\";"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    private final Event toAdd;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public AddEventCommand(Event event) {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        toAdd \u003d new Event(event);"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"            model.addEvent(toAdd);"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":59}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"            //@@author quangtdn"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"            + PREFIX_PROFILEPAGE + \"PROFILE PAGE \""},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"            //@@author"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"            + PREFIX_BIRTHDAY + \"1995/11/03 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"            //@@author quangtdn"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"            + PREFIX_PROFILEPAGE + \"www.facebook.com \""},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"            //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddCommand(ReadOnlyPerson person) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        toAdd \u003d new Person(person);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":7,"-":67,"yanji1221":3}},{"path":"src/main/java/seedu/address/logic/parser/UnfavoriteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.UnfavoriteCommand;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":" * Parses input arguments and creates a new UnfavoriteCommand object"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"public class UnfavoriteCommandParser implements Parser\u003cUnfavoriteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    public UnfavoriteCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"            return new UnfavoriteCommand(index, false);"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavoriteCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":28}},{"path":"src/main/java/seedu/address/logic/commands/ListFavoriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.FavoritePredicate;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":" * Finds and lists all persons in address book who are favorited."},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"public class ListFavoriteCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"    public static final String COMMAND_WORD \u003d \"listfav\";"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the persons who are favorited\\n\""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"    private final FavoritePredicate predicate;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"    public ListFavoriteCommand(FavoritePredicate predicate) {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof ListFavoriteCommand // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.predicate.equals(((ListFavoriteCommand) other).predicate)); // state check"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":37}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROFILEPAGE;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY]\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":"            //@@author quangtdn"},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"            + \"[\" + PREFIX_PROFILEPAGE + \"PROFILE PAGE] \""},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"            //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\\n\""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                                             EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":116,"author":{"gitID":"yanji1221"},"content":"        Birthday updateBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"quangtdn"},"content":"        ProfilePage updatedProfile \u003d editPersonDescriptor.getProfilePage().orElse(personToEdit.getProfilePage());"},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"        Favorite updatedFavorite \u003d editPersonDescriptor.getFavorite().orElse(personToEdit.getFavorite());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updateBirthday, updatedAddress, updatedProfile,"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"                updatedFavorite, updatedTags);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitID":"yanji1221"},"content":"        private Birthday birthday;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":153,"author":{"gitID":"quangtdn"},"content":"        //@@author quangtdn"},{"lineNumber":154,"author":{"gitID":"quangtdn"},"content":"        private ProfilePage profile;"},{"lineNumber":155,"author":{"gitID":"quangtdn"},"content":"        //@@author"},{"lineNumber":156,"author":{"gitID":"hxy0229"},"content":"        //@@author hxy0229"},{"lineNumber":157,"author":{"gitID":"hxy0229"},"content":"        private Favorite favorite;"},{"lineNumber":158,"author":{"gitID":"hxy0229"},"content":"        //@@author"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":162,"author":{"gitID":"yanji1221"},"content":"        //@@author yanji1221"},{"lineNumber":163,"author":{"gitID":"yanji1221"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":164,"author":{"gitID":"yanji1221"},"content":"            this.name \u003d toCopy.name;"},{"lineNumber":165,"author":{"gitID":"yanji1221"},"content":"            this.phone \u003d toCopy.phone;"},{"lineNumber":166,"author":{"gitID":"yanji1221"},"content":"            this.email \u003d toCopy.email;"},{"lineNumber":167,"author":{"gitID":"yanji1221"},"content":"            this.birthday \u003d toCopy.birthday;"},{"lineNumber":168,"author":{"gitID":"yanji1221"},"content":"            this.address \u003d toCopy.address;"},{"lineNumber":169,"author":{"gitID":"yanji1221"},"content":"            this.profile \u003d toCopy.profile;"},{"lineNumber":170,"author":{"gitID":"yanji1221"},"content":"            this.favorite \u003d toCopy.favorite;"},{"lineNumber":171,"author":{"gitID":"yanji1221"},"content":"            this.tags \u003d toCopy.tags;"},{"lineNumber":172,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"yanji1221"},"content":"        //@@author"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":176,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":178,"author":{"gitID":"yanji1221"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":179,"author":{"gitID":"hxy0229"},"content":"                    this.birthday, this.address, this.profile,  this.favorite, this.tags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"yanji1221"},"content":"        //@@author yanji1221"},{"lineNumber":206,"author":{"gitID":"yanji1221"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":207,"author":{"gitID":"yanji1221"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":208,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":210,"author":{"gitID":"yanji1221"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":211,"author":{"gitID":"yanji1221"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":212,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"yanji1221"},"content":"        //@@author"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"quangtdn"},"content":"        //@@author quangtdn"},{"lineNumber":222,"author":{"gitID":"quangtdn"},"content":"        public void setProfilePage(ProfilePage profile) {"},{"lineNumber":223,"author":{"gitID":"quangtdn"},"content":"            this.profile \u003d profile;"},{"lineNumber":224,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":226,"author":{"gitID":"quangtdn"},"content":"        public Optional\u003cProfilePage\u003e getProfilePage() {"},{"lineNumber":227,"author":{"gitID":"quangtdn"},"content":"            return Optional.ofNullable(profile);"},{"lineNumber":228,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"quangtdn"},"content":"        //@@author"},{"lineNumber":230,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":231,"author":{"gitID":"hxy0229"},"content":"        //@@author hxy0229"},{"lineNumber":232,"author":{"gitID":"hxy0229"},"content":"        public void setFavorite(Favorite favorite) {"},{"lineNumber":233,"author":{"gitID":"hxy0229"},"content":"            this.favorite \u003d favorite;"},{"lineNumber":234,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":236,"author":{"gitID":"hxy0229"},"content":"        public Optional\u003cFavorite\u003e getFavorite() {"},{"lineNumber":237,"author":{"gitID":"hxy0229"},"content":"            return Optional.ofNullable(favorite);"},{"lineNumber":238,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":240,"author":{"gitID":"hxy0229"},"content":"        //@@author"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            this.tags \u003d tags;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(tags);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":267,"author":{"gitID":"yanji1221"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":269,"author":{"gitID":"quangtdn"},"content":"                    \u0026\u0026 getProfilePage().equals(e.getProfilePage())"},{"lineNumber":270,"author":{"gitID":"hxy0229"},"content":"                    \u0026\u0026 getFavorite().equals(e.getFavorite())"},{"lineNumber":271,"author":{"gitID":"hxy0229"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":17,"-":188,"yanji1221":26,"erik0704":11,"hxy0229":32}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"            + \": Finds all persons whose names contain fully or partially any of \""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":1,"-":33,"yanji1221":1,"erik0704":2}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"content":"//@@author quangtdn-reused"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.io.PrintWriter;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import javax.xml.parsers.DocumentBuilder;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":"import javax.xml.parsers.DocumentBuilderFactory;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"import org.w3c.dom.Document;"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":"import org.w3c.dom.Element;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import org.w3c.dom.Node;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import org.w3c.dom.NodeList;"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":" * Export the contact list into XML file and store it at the specified input path"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"public class ExportCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the contact list into text file \""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            + \"and store it at the specified input path \\n\""},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"            + \"Parameters: [FILE_PATH]...\\n\""},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"            + \"Example: \""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"            + COMMAND_WORD + \" C:\\\\Users\\\\(username)\\\\Desktop\\n\""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"            + \"\\n\";"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    private final String savedFilePath;"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"    public ExportCommand(String savedFilePath) {"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"        this.savedFilePath \u003d savedFilePath;"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"    public CommandResult execute() {"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"            File fXmlFile \u003d new File(System.getProperty(\"user.dir\") + \"/data/addressbook.xml\");"},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":"            PrintWriter output \u003d new PrintWriter(savedFilePath, \"UTF-8\");"},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"            DocumentBuilderFactory dbFactory \u003d DocumentBuilderFactory.newInstance();"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"            DocumentBuilder dBuilder \u003d dbFactory.newDocumentBuilder();"},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"            Document doc \u003d dBuilder.parse(fXmlFile);"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"            doc.getDocumentElement().normalize();"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"            output.println(\"Contact List :\");"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"            NodeList personList \u003d doc.getElementsByTagName(\"persons\");"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"            output.println(\"----------------------------\");"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":"            for (int temp \u003d 0; temp \u003c personList.getLength(); temp++) {"},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"                Node nNode \u003d personList.item(temp);"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":"                output.println(\"\\nPerson :\" + (temp + 1));"},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"                if (nNode.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"                    Element eElement \u003d (Element) nNode;"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Name : \""},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"name\")"},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Phone : \""},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"phone\")"},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Email : \""},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"email\")"},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Birthday : \""},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"birthday\")"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Address : \""},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"address\")"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"                    output.println(\"Profile Page : \""},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"                            + eElement.getElementsByTagName(\"profile\")"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"                            .item(0).getTextContent());"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"            output.close();"},{"lineNumber":77,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":78,"author":{"gitID":"quangtdn"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitID":"quangtdn"},"content":"            e.printStackTrace();"},{"lineNumber":80,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"quangtdn"},"content":"        return new CommandResult(\"File exported at \" + savedFilePath);"},{"lineNumber":82,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":84,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":89,"author":{"gitID":"quangtdn"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 this.savedFilePath.equals(((ExportCommand) other).savedFilePath)); // state check"},{"lineNumber":91,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":93,"content":"//@@author"}],"authorContributionMap":{"null":2,"quangtdn":77,"-":4,"erik0704":10}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"        return model.getFilteredEventList();"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getUpcomingEventList() throws java.text.ParseException {"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"        return model.getUpcomingEventList();"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"erik0704":12,"hxy0229":1}},{"path":"src/main/java/seedu/address/logic/commands/LocationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.events.ui.PersonPanelLocationChangedEvent;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" * Locates a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"public class LocationCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    public static final String COMMAND_WORD \u003d \"locate\";"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            + \": Show the address of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_LOCATE_PERSON_SUCCESS \u003d \"Locate Address of Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    public LocationCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        ReadOnlyPerson personToLocateAddress \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        EventsCenter.getInstance().post(new PersonPanelLocationChangedEvent(personToLocateAddress));"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"                || (other instanceof LocationCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.targetIndex.equals(((LocationCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":55}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"erik0704":1}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"    private String birthday;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":"    private String profile \u003d \"\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"    private boolean favorite \u003d false;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(ReadOnlyPerson source) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":"        favorite \u003d source.getFavorite().value;"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"        if (!source.getProfilePage().value.equals(\"\")) {"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":"            profile \u003d source.getProfilePage().value;"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":90,"author":{"gitID":"quangtdn"},"content":"        final ProfilePage profile \u003d new ProfilePage(this.profile);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"        final Favorite favorite \u003d new Favorite(this.favorite);"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"        return new Person(name, phone, email, birthday, address, profile, favorite, tags);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":8,"-":68,"yanji1221":3,"erik0704":2,"hxy0229":14}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    @XmlElement"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(persons);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                return t.toModelType();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"        final ObservableList\u003cEvent\u003e events \u003d this.events.stream().map(p -\u003e {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                return p.toModelType();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                e.printStackTrace();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                //TODO: better error handling"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"        return FXCollections.unmodifiableObservableList(events);"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":81,"erik0704":13,"hxy0229":4}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    // demo purpose 17/02/18"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"        config.setAppTitle(\"NeoXPro Manager\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        // demo v2 17/02/18"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":208,"erik0704":4}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ProfilePage;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"            return new Person[] {"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1993/11/12\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(false),"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1988/12/22\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(false),"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1987/12/12\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(false),"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1999/01/01\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(true),"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1985/03/04\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(false),"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"classmates\")),"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"                    new Birthday(\"1983/05/08\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"                        new ProfilePage(\"www.facebook.com\"), new Favorite(false),"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":"            };"},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"            throw new AssertionError(\"sample data cannot be invalid\", e);"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":"    public static Set\u003cReadOnlyPerson\u003e getPersonSet(String... strings) throws IllegalValueException {"},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"        HashSet\u003cReadOnlyPerson\u003e persons \u003d new HashSet\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"        for (String s : strings) {"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"            Name name \u003d new Name(s);"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"            persons.add(new Person(name));"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"        return persons;"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":40,"yanji1221":34,"hxy0229":23}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"        if (keywords.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            return false;"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"        List\u003cString\u003e tagsAsString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        for (Tag tag : person.getTags()) {"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"            tagsAsString.add(tag.tagName);"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        return tagsAsString.containsAll(keywords);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":41}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Validates given phone number."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given phone string is invalid."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Phone(String phone) throws IllegalValueException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"        if (!isValidPhone(trimmedPhone)) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedPhone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public Phone() throws IllegalValueException {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"        //requireNonNull(phone);"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        String trimmedPhone \u003d \"000\";"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"        /*if (!isValidPhone(trimmedPhone)) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        }*/"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedPhone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"erik0704":1,"hxy0229":9}},{"path":"src/main/java/seedu/address/logic/commands/FavoriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":" * Favorites a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"public class FavoriteCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    public static final String COMMAND_WORD \u003d \"fav\";"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Favorite the person you are interested in!\\n\""},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"            + \"Example: \" + COMMAND_WORD  + \"1\";"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_FAVORITE_COMMAND_SUCCESS \u003d \"Favorited Person: \";"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_FAVORITING_FAVORITED_PERSON \u003d \" has already been favorited!\";"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"    private final Favorite favorite;"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public FavoriteCommand(Index targetIndex, boolean favorite) {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        this.favorite \u003d new Favorite(favorite);"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"        ReadOnlyPerson personToFavorite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        if (personToFavorite.getFavorite().value \u003d\u003d true) {"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"            return new CommandResult(personToFavorite.getName().fullName"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"                    + new String(MESSAGE_FAVORITING_FAVORITED_PERSON));"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"        Person editedPerson \u003d new Person(personToFavorite.getName(), personToFavorite.getPhone(),"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"                personToFavorite.getEmail(), personToFavorite.getBirthday(), personToFavorite.getAddress(),"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"                personToFavorite.getProfilePage(), favorite, personToFavorite.getTags());"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"            model.updatePerson(personToFavorite, editedPerson);"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"            assert false : \"This Person Cannot be duplicate\";"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"        return new CommandResult(new String(MESSAGE_FAVORITE_COMMAND_SUCCESS + personToFavorite.getName().fullName));"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof FavoriteCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.targetIndex.equals(((FavoriteCommand) other).targetIndex)); // state check"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":75}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Dates;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * JAXB-friendly version of the Event."},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class XmlAdaptedEvent {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    private String name;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    private String date;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    private String description;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"     * Constructs an XmlAdaptedEvent."},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    public XmlAdaptedEvent() {}"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"     * Converts a given Event into this class for JAXB use."},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEvent"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"    public XmlAdaptedEvent(Event source) {"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        date \u003d source.getDate().toString();"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"        description \u003d source.getDescription();"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        final Dates dates \u003d new Dates(this.date);"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        final String description \u003d new String(this.description);"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        return new Event(name, dates, description);"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":55}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Validates given email."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given email address string is invalid."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Email(String email) throws IllegalValueException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (!isValidEmail(trimmedEmail)) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedEmail;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public Email() throws IllegalValueException {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"        //requireNonNull(email);"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        String trimmedEmail \u003d \"unknown@email\";"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"        /*if (!isValidEmail(trimmedEmail)) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        }*/"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.value \u003d trimmedEmail;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":60,"erik0704":1,"hxy0229":5}},{"path":"src/main/java/seedu/address/model/person/NameContainsPhonePredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Phone} matches any of the phones given."},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":"public class NameContainsPhonePredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"    private final List\u003cString\u003e numbers;"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"    public NameContainsPhonePredicate(List\u003cString\u003e numbers) {"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"        this.numbers \u003d numbers;"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"        return numbers.stream().anyMatch(number"},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().toString(), number)) || numbers.stream()"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"            .anyMatch(number -\u003e person.getPhone().toString().contains(number));"},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"                || (other instanceof NameContainsPhonePredicate // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 this.numbers.containsAll((((NameContainsPhonePredicate) other).numbers))"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 ((NameContainsPhonePredicate) other).numbers.containsAll(this.numbers)); // state check"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":37}},{"path":"src/main/java/seedu/address/model/person/ReadOnlyPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A read-only immutable interface for a Person in the addressbook."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface ReadOnlyPerson {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cName\u003e nameProperty();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Name getName();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cPhone\u003e phoneProperty();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Phone getPhone();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cEmail\u003e emailProperty();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Email getEmail();"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"    ObjectProperty\u003cBirthday\u003e birthdayProperty();"},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"    Birthday getBirthday();"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cAddress\u003e addressProperty();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Address getAddress();"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"    ObjectProperty\u003cProfilePage\u003e profilepageProperty();"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"    ProfilePage getProfilePage();"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Set\u003cTag\u003e getTags();"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"    ObjectProperty\u003cFavorite\u003e favoriteProperty();"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    Favorite getFavorite();"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":"    default boolean isSameStateAs(ReadOnlyPerson other) {"},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getPhone().equals(this.getPhone())"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getEmail().equals(this.getEmail())"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getBirthday().equals(this.getBirthday())"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getAddress().equals(this.getAddress()))"},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 other.getProfilePage().equals(this.getProfilePage());"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Formats the person as text, showing all contact details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    default String getAsText() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"                .append(\" Birthday \")"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"                .append(getBirthday())"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"                .append(\" Profile Page: \")"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"                .append(getProfilePage())"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"                .append(\" Status: \")"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"                .append(\" \")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":6,"-":39,"yanji1221":21,"erik0704":2,"hxy0229":7}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    // used by asObservableList()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cReadOnlyPerson\u003e mappedList \u003d EasyBind.map(internalList, (person) -\u003e person);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"    public UniquePersonList(Set\u003cReadOnlyPerson\u003e persons) {"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(persons);"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        ArrayList\u003cReadOnlyPerson\u003e personList \u003d new ArrayList\u003cReadOnlyPerson\u003e(persons);"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"        for (int i \u003d 0; i \u003c personList.size(); i++) {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"            Person p \u003d new Person(personList.get(i));"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"            internalList.add(p);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(mappedList);"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"    public UniquePersonList(){}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean contains(ReadOnlyPerson toCheck) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void add(ReadOnlyPerson toAdd) throws DuplicatePersonException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        internalList.add(new Person(toAdd));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    /** checkstyle comment, @TODO: David collate this please */"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"    public void mergeFrom(UniquePersonList from) {"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":"        final Set\u003cReadOnlyPerson\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"        from.internalList.stream()"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"                .forEach(internalList::add);"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void setPerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        internalList.set(index, new Person(editedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public boolean remove(ReadOnlyPerson toRemove) throws PersonNotFoundException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"hxy0229"},"content":"    //@@author hxy0229"},{"lineNumber":110,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"hxy0229"},"content":"     * Favorites the equivalent person from the list."},{"lineNumber":112,"author":{"gitID":"hxy0229"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"hxy0229"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":114,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"hxy0229"},"content":"    public boolean favorite(ReadOnlyPerson toFavorite) throws PersonNotFoundException {"},{"lineNumber":116,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(toFavorite);"},{"lineNumber":117,"author":{"gitID":"hxy0229"},"content":"        final boolean personFoundAndDeleted \u003d internalList.contains(toFavorite);"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        return personFoundAndDeleted;"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":125,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        for (final ReadOnlyPerson person : persons) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            replacement.add(new Person(person));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e asObservableList() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"erik0704"},"content":"    /** checkstyle comment, @TODO: David collate this please */"},{"lineNumber":146,"author":{"gitID":"hxy0229"},"content":"    public Set\u003cReadOnlyPerson\u003e toSet() {"},{"lineNumber":147,"author":{"gitID":"hxy0229"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":148,"author":{"gitID":"hxy0229"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":149,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":121,"erik0704":8,"hxy0229":38}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" * Deletes an event identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"public class DeleteEventCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public static final String COMMAND_WORD \u003d \"deleteEvent\";"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"            + \": Deletes the event identified by the index number used in the event listing.\\n\""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    public DeleteEventCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        List\u003cEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"        Event eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"            model.deleteEvent(eventToDelete);"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        } catch (EventNotFoundException enfe) {"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"            assert false : \"The target event cannot be missing\";"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":59}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Validates given address."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given address string is invalid."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Address(String address) throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        if (!isValidAddress(address)) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    public Address() throws IllegalValueException {"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"        //requireNonNull(address);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        this.value \u003d \"unknwon_address\";"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"        /* if (!isValidAddress(this.value)) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        }*/"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"erik0704":1,"hxy0229":6}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static seedu.address.commons.util.CollectionUtil.requireNotAllNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class Person implements ReadOnlyPerson {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cPhone\u003e phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cEmail\u003e email;"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"    private ObjectProperty\u003cBirthday\u003e birthday;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"    private ObjectProperty\u003cProfilePage\u003e profile;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ObjectProperty\u003cUniqueTagList\u003e tags;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    private ObjectProperty\u003cFavorite\u003e favorite;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public Person(Name name, Phone phone, Email email, Birthday birthday, Address address,"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"                  ProfilePage profile, Favorite favorite, Set\u003cTag\u003e tags) {"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"        requireNotAllNull(name, phone, email, birthday, address, tags);"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"        //if(name!\u003dnull)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":"        //if(phone!\u003dnull)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":"        //if(email!\u003dnull)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"        //if(birthday!\u003dnull)"},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":"        //if(address!\u003dnull)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        //if(profile!\u003dnull)"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":"        this.profile \u003d new SimpleObjectProperty\u003c\u003e(profile);"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"        //if(profile!\u003dnull)"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        this.favorite \u003d new SimpleObjectProperty\u003c\u003e(favorite);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"    public Person(Name name) {"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"     * Creates a copy of the given ReadOnlyPerson."},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"    public Person(ReadOnlyPerson source) {"},{"lineNumber":68,"author":{"gitID":"yanji1221"},"content":"        this(source.getName(), source.getPhone(), source.getEmail(), source.getBirthday(), source.getAddress(),"},{"lineNumber":69,"author":{"gitID":"yanji1221"},"content":"                source.getProfilePage(), source.getFavorite(), source.getTags());"},{"lineNumber":70,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":72,"author":{"gitID":"yanji1221"},"content":"    public void setName(Name name) {"},{"lineNumber":73,"author":{"gitID":"yanji1221"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":74,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":76,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"yanji1221"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":78,"author":{"gitID":"yanji1221"},"content":"        return name;"},{"lineNumber":79,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":81,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"yanji1221"},"content":"    public Name getName() {"},{"lineNumber":83,"author":{"gitID":"yanji1221"},"content":"        return name.get();"},{"lineNumber":84,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":86,"author":{"gitID":"yanji1221"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":87,"author":{"gitID":"yanji1221"},"content":"        this.phone.set(requireNonNull(phone));"},{"lineNumber":88,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":90,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"yanji1221"},"content":"    public ObjectProperty\u003cPhone\u003e phoneProperty() {"},{"lineNumber":92,"author":{"gitID":"yanji1221"},"content":"        return phone;"},{"lineNumber":93,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":95,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"yanji1221"},"content":"    public Phone getPhone() {"},{"lineNumber":97,"author":{"gitID":"yanji1221"},"content":"        return phone.get();"},{"lineNumber":98,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":100,"author":{"gitID":"yanji1221"},"content":"    public void setEmail(Email email) {"},{"lineNumber":101,"author":{"gitID":"yanji1221"},"content":"        this.email.set(requireNonNull(email));"},{"lineNumber":102,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":104,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"yanji1221"},"content":"    public ObjectProperty\u003cEmail\u003e emailProperty() {"},{"lineNumber":106,"author":{"gitID":"yanji1221"},"content":"        return email;"},{"lineNumber":107,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":109,"author":{"gitID":"hxy0229"},"content":"    //@@author hxy0229"},{"lineNumber":110,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"hxy0229"},"content":"    public Favorite getFavorite() {"},{"lineNumber":112,"author":{"gitID":"hxy0229"},"content":"        return favorite.get();"},{"lineNumber":113,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":115,"author":{"gitID":"hxy0229"},"content":"    public void setFavorite(Favorite favorite) {"},{"lineNumber":116,"author":{"gitID":"hxy0229"},"content":"        this.favorite.set(requireNonNull(favorite));"},{"lineNumber":117,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":119,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":"    public ObjectProperty\u003cFavorite\u003e favoriteProperty() {"},{"lineNumber":121,"author":{"gitID":"hxy0229"},"content":"        return favorite;"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"hxy0229"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return email.get();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"yanji1221"},"content":"    //@@author yanji1221"},{"lineNumber":130,"author":{"gitID":"yanji1221"},"content":"    public void setBirthday(Birthday birthday) {"},{"lineNumber":131,"author":{"gitID":"yanji1221"},"content":"        this.birthday.set(requireNonNull(birthday));"},{"lineNumber":132,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":134,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"yanji1221"},"content":"    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"},{"lineNumber":136,"author":{"gitID":"yanji1221"},"content":"        return birthday;"},{"lineNumber":137,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":139,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"yanji1221"},"content":"    public Birthday getBirthday() {"},{"lineNumber":141,"author":{"gitID":"yanji1221"},"content":"        return birthday.get();"},{"lineNumber":142,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"yanji1221"},"content":"    //@@author"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        this.address.set(requireNonNull(address));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cAddress\u003e addressProperty() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return address.get();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"quangtdn"},"content":"    //@@author quangtdn"},{"lineNumber":159,"author":{"gitID":"quangtdn"},"content":"    public void setProfilePage(ProfilePage profile) {"},{"lineNumber":160,"author":{"gitID":"quangtdn"},"content":"        this.profile.set(requireNonNull(profile));"},{"lineNumber":161,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":163,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"quangtdn"},"content":"    public ObjectProperty\u003cProfilePage\u003e profilepageProperty() {"},{"lineNumber":165,"author":{"gitID":"quangtdn"},"content":"        return profile;"},{"lineNumber":166,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":168,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"quangtdn"},"content":"    public ProfilePage getProfilePage() {"},{"lineNumber":170,"author":{"gitID":"quangtdn"},"content":"        return profile.get();"},{"lineNumber":171,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"quangtdn"},"content":"    //@@author"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.get().toSet());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Replaces this person\u0027s tags with the tags in the argument tag set."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"hxy0229"},"content":"    public void setTags(Set\u003cTag\u003e replacementTag) {"},{"lineNumber":190,"author":{"gitID":"hxy0229"},"content":"        tags.set(new UniqueTagList(replacementTag));"},{"lineNumber":191,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                || (other instanceof ReadOnlyPerson // instanceof handles nulls"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":204,"author":{"gitID":"quangtdn"},"content":"        return Objects.hash(name, phone, email, birthday, address, profile,  tags);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        return getAsText();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quangtdn":21,"-":88,"yanji1221":63,"erik0704":2,"hxy0229":39}},{"path":"src/main/java/seedu/address/logic/commands/UnfavoriteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Favorite;"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":" * Unfavorites a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"public class UnfavoriteCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    public static final String COMMAND_WORD \u003d \"unfav\";"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": UnFavorite the person you\u0027ve favorited!\\n\""},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"            + \"Example: \" + COMMAND_WORD  + \"1\";"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_FAVORITE_COMMAND_SUCCESS \u003d \"Unfavorited Person: \";"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    public static final String MESSAGE_UNFAVORITING_UNFAVORITED_PERSON \u003d \" is not favorited yet!\";"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"    private final Favorite favorite;"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    public UnfavoriteCommand(Index targetIndex, boolean favorite) {"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"        this.favorite \u003d new Favorite(favorite);"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":41,"author":{"gitID":"hxy0229"},"content":"        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":44,"author":{"gitID":"hxy0229"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":47,"author":{"gitID":"hxy0229"},"content":"        ReadOnlyPerson personToFavorite \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"hxy0229"},"content":"        if (personToFavorite.getFavorite().value \u003d\u003d false) {"},{"lineNumber":49,"author":{"gitID":"hxy0229"},"content":"            return new CommandResult(personToFavorite.getName().fullName"},{"lineNumber":50,"author":{"gitID":"hxy0229"},"content":"                    +  new String(MESSAGE_UNFAVORITING_UNFAVORITED_PERSON));"},{"lineNumber":51,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"hxy0229"},"content":"        Person editedPerson \u003d new Person(personToFavorite.getName(), personToFavorite.getPhone(),"},{"lineNumber":53,"author":{"gitID":"hxy0229"},"content":"                personToFavorite.getEmail(), personToFavorite.getBirthday(), personToFavorite.getAddress(),"},{"lineNumber":54,"author":{"gitID":"hxy0229"},"content":"                personToFavorite.getProfilePage(), favorite, personToFavorite.getTags());"},{"lineNumber":55,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":56,"author":{"gitID":"hxy0229"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"hxy0229"},"content":"            model.updatePerson(personToFavorite, editedPerson);"},{"lineNumber":58,"author":{"gitID":"hxy0229"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":59,"author":{"gitID":"hxy0229"},"content":"            assert false : \"The target person cannot be missing\";"},{"lineNumber":60,"author":{"gitID":"hxy0229"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":61,"author":{"gitID":"hxy0229"},"content":"            assert false : \"This Person Cannot be duplicate\";"},{"lineNumber":62,"author":{"gitID":"hxy0229"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":64,"author":{"gitID":"hxy0229"},"content":"        return new CommandResult(new String(MESSAGE_FAVORITE_COMMAND_SUCCESS + personToFavorite.getName().fullName));"},{"lineNumber":65,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":67,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof UnfavoriteCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnfavoriteCommand) other).targetIndex)); // state check"},{"lineNumber":72,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":74,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":75,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":75}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        return keywords.stream().anyMatch(keyword"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)) || keywords.stream()"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            .anyMatch(keyword -\u003e person.getName().fullName.toLowerCase().contains(keyword.toLowerCase()));"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":26,"yanji1221":1,"erik0704":8}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Validates given name."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if given name string is invalid."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Name(String name) throws IllegalValueException {"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"            name \u003d \"haha\";"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!isValidName(trimmedName)) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.fullName \u003d trimmedName;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"erik0704":4,"hxy0229":1}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"     * Returns an unmodifiable view of the groups list."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"     * Returns an unmodifiable view of the event list."},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"     * This list will not contain any duplicate events."},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":25,"erik0704":7,"hxy0229":3}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"yanji1221"},"content":"//@@author yanji1221"},{"lineNumber":2,"author":{"gitID":"yanji1221"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":4,"author":{"gitID":"yanji1221"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":6,"author":{"gitID":"yanji1221"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":8,"author":{"gitID":"yanji1221"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yanji1221"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":10,"author":{"gitID":"yanji1221"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":11,"author":{"gitID":"yanji1221"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yanji1221"},"content":"public class Birthday {"},{"lineNumber":13,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":14,"author":{"gitID":"yanji1221"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"yanji1221"},"content":"            \"Person birthday should be in the yyyy/mm/dd format\";"},{"lineNumber":16,"author":{"gitID":"yanji1221"},"content":"    public static final String BIRTHDAY_VALIDATION_REGEX \u003d \"\\\\d{4}\" + \"/\" + \"\\\\d{2}\" + \"/\" + \"\\\\d{2}\";"},{"lineNumber":17,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":18,"author":{"gitID":"yanji1221"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":20,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"yanji1221"},"content":"     * Validates given birthday."},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"yanji1221"},"content":"     * @throws IllegalValueException if given birthday address string is invalid."},{"lineNumber":24,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"yanji1221"},"content":"    public Birthday(String birthday) throws IllegalValueException {"},{"lineNumber":26,"author":{"gitID":"yanji1221"},"content":"        requireNonNull(birthday);"},{"lineNumber":27,"author":{"gitID":"yanji1221"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":28,"author":{"gitID":"yanji1221"},"content":"        if (!isValidBirthday(trimmedBirthday)) {"},{"lineNumber":29,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"yanji1221"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"yanji1221"},"content":"        this.value \u003d trimmedBirthday;"},{"lineNumber":32,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":34,"author":{"gitID":"yanji1221"},"content":"    public Birthday() throws IllegalValueException {"},{"lineNumber":35,"author":{"gitID":"yanji1221"},"content":"        // requireNonNull(birthday);"},{"lineNumber":36,"author":{"gitID":"yanji1221"},"content":"        String trimmedBirthday \u003d \"0000/00/00\";"},{"lineNumber":37,"author":{"gitID":"yanji1221"},"content":"        /*if (!isValidBirthday(trimmedBirthday)) {"},{"lineNumber":38,"author":{"gitID":"yanji1221"},"content":"            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"yanji1221"},"content":"        }*/"},{"lineNumber":40,"author":{"gitID":"yanji1221"},"content":"        this.value \u003d trimmedBirthday;"},{"lineNumber":41,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":43,"author":{"gitID":"yanji1221"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yanji1221"},"content":"     * Returns if a given string is a valid person birthday."},{"lineNumber":45,"author":{"gitID":"yanji1221"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"yanji1221"},"content":"    public static boolean isValidBirthday(String test) {"},{"lineNumber":47,"author":{"gitID":"yanji1221"},"content":"        return test.matches(BIRTHDAY_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":50,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"yanji1221"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"yanji1221"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":55,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"yanji1221"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"yanji1221"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"yanji1221"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"yanji1221"},"content":"                \u0026\u0026 this.value.equals(((Birthday) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":62,"author":{"gitID":"yanji1221"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"yanji1221"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"yanji1221"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"yanji1221"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":67,"author":{"gitID":"yanji1221"},"content":"}"}],"authorContributionMap":{"yanji1221":67}},{"path":"src/main/java/seedu/address/model/person/FavoritePredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":" * Tests that a {@code ReadOnlyPerson}\u0027s {@code Phone} matches any of the phones given."},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":"public class FavoritePredicate implements Predicate\u003cReadOnlyPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":"    public FavoritePredicate() { }"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"    public boolean test(ReadOnlyPerson person) {"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":"        return person.getFavorite().value;"},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof FavoritePredicate);"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":26}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.EventList;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    private final EventList events;"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"        events \u003d new EventList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    public void setEvents(List\u003c? extends Event\u003e events) throws DuplicateEventException {"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"        this.events.setEvents(events);"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":76,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":77,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            setPersons(newData.getPersonList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            assert false : \"AddressBooks should not have duplicate persons\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(persons);"},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":"            setEvents(newData.getEventList());"},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"            assert false : \"AddressBooks should not have duplicate events\";"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person newPerson \u003d new Person(p);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(newPerson);"},{"lineNumber":109,"author":{"gitID":"hxy0229"},"content":"        //syncMasterGroupListWith(newPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        persons.add(newPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @see #syncMasterTagListWith(Person)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(editedReadOnlyPerson);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new Person(editedReadOnlyPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        syncMasterTagListWith(editedPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Ensures that every tag in this person:"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(Person person) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        person.setTags(correctTagReferences);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Ensures that every tag in these persons:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     *  - exists in the master list {@link #tags}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *  - points to a Tag object in the master list"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *  @see #syncMasterTagListWith(Person)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void syncMasterTagListWith(UniquePersonList persons) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        persons.forEach(this::syncMasterTagListWith);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"hxy0229"},"content":"     * Favorites {@code key} from this {@code AddressBook}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"hxy0229"},"content":"    public boolean favoritePerson(ReadOnlyPerson key) throws PersonNotFoundException {"},{"lineNumber":184,"author":{"gitID":"hxy0229"},"content":"        if (persons.favorite(key)) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"erik0704"},"content":"    //// event-level operations"},{"lineNumber":198,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":199,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"erik0704"},"content":"     * Adds an event to the address book."},{"lineNumber":201,"author":{"gitID":"erik0704"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":202,"author":{"gitID":"erik0704"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":203,"author":{"gitID":"erik0704"},"content":"     * TO DO:"},{"lineNumber":204,"author":{"gitID":"erik0704"},"content":"     * TO DECIDE: whether to @throws DuplicateEventException if an equivalent event already exists."},{"lineNumber":205,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"erik0704"},"content":"    public void addEvent(Event e) throws DuplicateEventException  {"},{"lineNumber":207,"author":{"gitID":"erik0704"},"content":"        Event newEvent \u003d new Event(e);"},{"lineNumber":208,"author":{"gitID":"erik0704"},"content":"        events.add(newEvent);"},{"lineNumber":209,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":211,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"erik0704"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":213,"author":{"gitID":"erik0704"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":214,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"erik0704"},"content":"    public boolean removeEvent(Event key) throws EventNotFoundException {"},{"lineNumber":216,"author":{"gitID":"erik0704"},"content":"        if (events.remove(key)) {"},{"lineNumber":217,"author":{"gitID":"erik0704"},"content":"            return true;"},{"lineNumber":218,"author":{"gitID":"erik0704"},"content":"        } else {"},{"lineNumber":219,"author":{"gitID":"erik0704"},"content":"            throw new EventNotFoundException();"},{"lineNumber":220,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":223,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":232,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":245,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":247,"author":{"gitID":"erik0704"},"content":"        return events.asObservableList();"},{"lineNumber":248,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":261,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":198,"erik0704":59,"hxy0229":13}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.UpcomingEventPredicate;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"yanji1221"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    private final FilteredList\u003cEvent\u003e upcomingEvents;"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        upcomingEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"hxy0229"},"content":"    //@@author hxy0229"},{"lineNumber":87,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"hxy0229"},"content":"    public synchronized void favoritePerson(ReadOnlyPerson person) throws PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"hxy0229"},"content":"        addressBook.favoritePerson(person);"},{"lineNumber":90,"author":{"gitID":"hxy0229"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitID":"hxy0229"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"hxy0229"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":95,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"    public synchronized void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        addressBook.addEvent(event);"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"        indicateAddressBookChanged();"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"    public synchronized void deleteEvent(Event target) throws EventNotFoundException {"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"        addressBook.removeEvent(target);"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"        indicateAddressBookChanged();"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":120,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":122,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":140,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":141,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"erik0704"},"content":"     * Returns a view of the list of {@code Event} backed by the internal list of"},{"lineNumber":143,"author":{"gitID":"erik0704"},"content":"     * {@code addressBook}"},{"lineNumber":144,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":147,"author":{"gitID":"erik0704"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":148,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":150,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e getUpcomingEventList() throws java.text.ParseException {"},{"lineNumber":152,"author":{"gitID":"erik0704"},"content":"        UpcomingEventPredicate predicate \u003d new UpcomingEventPredicate();"},{"lineNumber":153,"author":{"gitID":"erik0704"},"content":"        upcomingEvents.setPredicate(predicate);"},{"lineNumber":154,"author":{"gitID":"erik0704"},"content":"        return FXCollections.unmodifiableObservableList(upcomingEvents);"},{"lineNumber":155,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":157,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"erik0704"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"erik0704"},"content":"        requireNonNull(predicate);"},{"lineNumber":160,"author":{"gitID":"erik0704"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":161,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":163,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":120,"yanji1221":1,"erik0704":48,"hxy0229":13}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":" * Exception for when the event is not found"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"public class EventNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":7}},{"path":"src/main/java/seedu/address/model/person/ProfilePage.java","lines":[{"lineNumber":1,"author":{"gitID":"quangtdn"},"content":"//@@author quangtdn"},{"lineNumber":2,"author":{"gitID":"quangtdn"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":4,"author":{"gitID":"quangtdn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"quangtdn"},"content":"//import org.apache.commons.validator.routines.UrlValidator;"},{"lineNumber":6,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":7,"author":{"gitID":"quangtdn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":9,"author":{"gitID":"quangtdn"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"quangtdn"},"content":" * Represents a Person\u0027s profile page in the address book."},{"lineNumber":11,"author":{"gitID":"quangtdn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidProfilePage(String)}"},{"lineNumber":12,"author":{"gitID":"quangtdn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"quangtdn"},"content":"public class ProfilePage {"},{"lineNumber":14,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":15,"author":{"gitID":"quangtdn"},"content":"    public static final String MESSAGE_PROFILEPAGE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"quangtdn"},"content":"            \"Person Profile page should be a valid URL pointing to that person\u0027s profile\";"},{"lineNumber":17,"author":{"gitID":"quangtdn"},"content":"    public static final String PROFILEPAGE_VALIDATION_REGEX \u003d"},{"lineNumber":18,"author":{"gitID":"quangtdn"},"content":"            \"^(http://|https://)?(www.)?([a-zA-Z0-9_]+).[a-zA-Z0-9_]+.[a-z_]{3}.([a-z_]+)((/)?[a-zA-Z0-9._]?)*?$\";"},{"lineNumber":19,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":20,"author":{"gitID":"quangtdn"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":22,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"quangtdn"},"content":"     * Validates given profile page."},{"lineNumber":24,"author":{"gitID":"quangtdn"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"quangtdn"},"content":"     * @throws IllegalValueException if given profile page string is invalid."},{"lineNumber":26,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"quangtdn"},"content":"    public ProfilePage(String profile) throws IllegalValueException {"},{"lineNumber":28,"author":{"gitID":"quangtdn"},"content":"        requireNonNull(profile);"},{"lineNumber":29,"author":{"gitID":"quangtdn"},"content":"        if (!isValidProfilePage(profile)) {"},{"lineNumber":30,"author":{"gitID":"quangtdn"},"content":"            throw new IllegalValueException(MESSAGE_PROFILEPAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"quangtdn"},"content":"        String profileLink \u003d profile.replace(\"https://\", \"\");"},{"lineNumber":33,"author":{"gitID":"quangtdn"},"content":"        if (!profileLink.equals(\"\") \u0026\u0026 !profileLink.endsWith(\"/\")) {"},{"lineNumber":34,"author":{"gitID":"quangtdn"},"content":"            this.value \u003d profileLink + \"/\";"},{"lineNumber":35,"author":{"gitID":"quangtdn"},"content":"        } else {"},{"lineNumber":36,"author":{"gitID":"quangtdn"},"content":"            this.value \u003d profileLink;"},{"lineNumber":37,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":40,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":41,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"quangtdn"},"content":"     * Returns if a given string is a valid person profile page."},{"lineNumber":43,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"quangtdn"},"content":"    public static boolean isValidProfilePage(String test) {"},{"lineNumber":45,"author":{"gitID":"quangtdn"},"content":"        if (test.equals(\"\")) {"},{"lineNumber":46,"author":{"gitID":"quangtdn"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"quangtdn"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"quangtdn"},"content":"        return test.matches(PROFILEPAGE_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":51,"author":{"gitID":"quangtdn"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"quangtdn"},"content":"     * Returns true if this person has a profile page."},{"lineNumber":53,"author":{"gitID":"quangtdn"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"quangtdn"},"content":"    public boolean hasProfilePage() {"},{"lineNumber":55,"author":{"gitID":"quangtdn"},"content":"        return (this.value.equals(\"\") || this.value \u003d\u003d null) ? false : true;"},{"lineNumber":56,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":58,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"quangtdn"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitID":"quangtdn"},"content":"        return value;"},{"lineNumber":61,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":63,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"quangtdn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"quangtdn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"quangtdn"},"content":"                || (other instanceof ProfilePage // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"quangtdn"},"content":"                \u0026\u0026 this.value.equals(((ProfilePage) other).value)); // state check"},{"lineNumber":68,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":70,"author":{"gitID":"quangtdn"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"quangtdn"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"quangtdn"},"content":"        return value.hashCode();"},{"lineNumber":73,"author":{"gitID":"quangtdn"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"quangtdn"},"content":""},{"lineNumber":75,"author":{"gitID":"quangtdn"},"content":"}"},{"lineNumber":76,"author":{"gitID":"quangtdn"},"content":"//@@author"}],"authorContributionMap":{"quangtdn":76}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":" * Signals that the operation will result in duplicate Event objects."},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"    public DuplicateEventException() {"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"        super(\"Operation would result in duplicate event\");"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":14}},{"path":"src/main/java/seedu/address/model/person/Favorite.java","lines":[{"lineNumber":1,"author":{"gitID":"hxy0229"},"content":"//@@author hxy0229"},{"lineNumber":2,"author":{"gitID":"hxy0229"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":4,"author":{"gitID":"hxy0229"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":6,"author":{"gitID":"hxy0229"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":8,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":9,"author":{"gitID":"hxy0229"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"hxy0229"},"content":" * Represents whether a Person is favorite in the address book."},{"lineNumber":11,"author":{"gitID":"hxy0229"},"content":" * Guarantees: immutable; is valid as declared in }"},{"lineNumber":12,"author":{"gitID":"hxy0229"},"content":" */"},{"lineNumber":13,"author":{"gitID":"hxy0229"},"content":"public class Favorite {"},{"lineNumber":14,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":"    public final boolean value;"},{"lineNumber":16,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":17,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"hxy0229"},"content":"     * Validates given birthday."},{"lineNumber":19,"author":{"gitID":"hxy0229"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"hxy0229"},"content":"     * @throws IllegalValueException if given birthday address string is invalid."},{"lineNumber":21,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"hxy0229"},"content":"    public Favorite (boolean favorite) {"},{"lineNumber":23,"author":{"gitID":"hxy0229"},"content":"        requireNonNull(favorite);"},{"lineNumber":24,"author":{"gitID":"hxy0229"},"content":"        this.value \u003d favorite;"},{"lineNumber":25,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":27,"author":{"gitID":"hxy0229"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"hxy0229"},"content":"     * Returns if a given string is a valid person birthday."},{"lineNumber":29,"author":{"gitID":"hxy0229"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"hxy0229"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"hxy0229"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"hxy0229"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"                || (other instanceof Favorite // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":"                \u0026\u0026 this.value \u003d\u003d (((Favorite) other).value)); // state check"},{"lineNumber":35,"author":{"gitID":"hxy0229"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":37,"author":{"gitID":"hxy0229"},"content":"}"},{"lineNumber":38,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":39,"author":{"gitID":"hxy0229"},"content":"//@@author"}],"authorContributionMap":{"hxy0229":39}},{"path":"src/main/java/seedu/address/model/event/UpcomingEventPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"public class UpcomingEventPredicate implements Predicate\u003cEvent\u003e {"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"    private Date now;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"    public UpcomingEventPredicate() throws ParseException {"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"            now \u003d DateUtil.createCurrentDate();"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"        } catch (ParseException e) {"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"            e.printStackTrace();"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    public boolean test(Event event) {"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"        Date target \u003d event.getDate().getDate();"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        long julianDayNumber1 \u003d now.getTime();"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        long julianDayNumber2 \u003d target.getTime();"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"        if (julianDayNumber1 \u003d\u003d julianDayNumber2) {"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"            return true;"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"            return false;"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"                || (other instanceof UpcomingEventPredicate); // instanceof handles null"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":45}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.ReadOnlyPerson;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"hxy0229"},"content":"    void favoritePerson(ReadOnlyPerson target) throws PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"hxy0229"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    //@@author erik0704"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    /** Adds the given event */"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    void addEvent(Event event) throws DuplicateEventException;"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"    /** Deletes the given person. */"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    void deleteEvent(Event target) throws EventNotFoundException;"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    /** Returns a view of the filtered event list */"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    /** Return a view of upcoming (in 1 day) event list */"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"    ObservableList\u003cEvent\u003e getUpcomingEventList() throws ParseException;"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":47,"erik0704":27,"hxy0229":3}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":" * Main class of Event"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"public class Event implements Comparable\u003cEvent\u003e {"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"     * Reuse name class of person because they have the exact behavior for now"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    private ObjectProperty\u003cName\u003e name;"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    private ObjectProperty\u003cDates\u003e date;"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    private ObjectProperty\u003cString\u003e description;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    public Event(Name name, Dates date, String description) {"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"        requireAllNonNull(name, date, description);"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"        this.date \u003d new SimpleObjectProperty\u003c\u003e(date);"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"    public Event(Event source) {"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        this(source.getName(), source.getDate(), source.getDescription());"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public void setName(Name name) {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        this.name.set(requireNonNull(name));"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"    public ObjectProperty\u003cName\u003e nameProperty() {"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"        return name;"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"        return name.get();"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"    public void setDate(Dates date) {"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"        this.date.set(requireNonNull(date));"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    public ObjectProperty\u003cDates\u003e dateProperty() {"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"        return date;"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    public Dates getDate() {"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"        return date.get();"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"    public void setDescription(String description) {"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"        this.description.set(description);"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    public ObjectProperty\u003cString\u003e descriptionProperty() {"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        return description;"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"    public String getDescription() {"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        return description.get();"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"        if (other instanceof Event) {"},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"            // state check"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"            Event e \u003d (Event) other;"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"            return e.getName().equals(this.getName())"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"                    \u0026\u0026 e.getDate().equals(this.getDate())"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":"                    \u0026\u0026 e.getDescription().equals(this.getDescription());"},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"        } else {"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"            return false;"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"        builder.append(getName())"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"                .append(\" Date: \")"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":"                .append(getDate())"},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"                .append(\" Description: \")"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"                .append(getDescription());"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"        return builder.toString();"},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":"     * @param anotherevent"},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"     * @return 0, -1 or 1 if the date is same, before or after"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"    public int compareTo(Event anotherevent) {"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        Dates anotherdate \u003d anotherevent.getDate();"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"        if (this.getDate().equals(anotherdate)) {"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"            return 0;"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":"        } else if (this.getDate().getDate().after(anotherdate.getDate())) {"},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"            return 1;"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"        } else {"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"            return -1;"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":117}},{"path":"src/main/java/seedu/address/model/event/NameContainsKeywordsEventPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":" * Tests that a {@code Event}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"public class NameContainsKeywordsEventPredicate implements Predicate\u003cEvent\u003e {"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"    public NameContainsKeywordsEventPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public boolean test(Event event) {"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":"        return keywords.stream().anyMatch(keyword"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(event.getName().fullName, keyword)) || keywords.stream()"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"            .anyMatch(keyword -\u003e event.getName().fullName.toLowerCase().contains(keyword.toLowerCase()));"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"                || (other instanceof NameContainsKeywordsEventPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsEventPredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"}"}],"authorContributionMap":{"erik0704":33}},{"path":"src/main/java/seedu/address/model/event/Dates.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.text.DateFormat;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":" * Main class of Dates"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"public class Dates {"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"            \"Event date should be in yyyy-mm-dd format\";"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{4}\" + \"-\" + \"\\\\d{2}\" + \"-\" + \"\\\\d{2}\";"},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":"    public final Date date;"},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":"     * @throws IllegalValueException if given date string is invalid."},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"    public Dates(String date) throws IllegalValueException {"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":"        requireNonNull(date);"},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"        if (!isValidDateFormat(trimmedDate)) {"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"            throw new IllegalValueException(MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"            //if not valid, it will throw ParseException"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"            Date value \u003d format.parse(trimmedDate);"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"            this.date \u003d value;"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        } catch (ParseException e) {"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"            throw new IllegalValueException(\"Not a real date\");"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"    public Dates(Dates dates) {"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"        this.date \u003d dates.getDate();"},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"     * Returns if a given string is in the valid date format. Check the value to be a real date."},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"    public static boolean isValidDateFormat(String test) {"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":"    public Date getDate() {"},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"        return date;"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"        return df.format(date);"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"                || (other instanceof Dates // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.date.equals(((Dates) other).date)); // state check"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"        return date.hashCode();"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":75}},{"path":"src/main/java/seedu/address/model/event/EventList.java","lines":[{"lineNumber":1,"author":{"gitID":"erik0704"},"content":"//@@author erik0704"},{"lineNumber":2,"author":{"gitID":"erik0704"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":4,"author":{"gitID":"erik0704"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":6,"author":{"gitID":"erik0704"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"erik0704"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"erik0704"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":10,"author":{"gitID":"erik0704"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":11,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":12,"author":{"gitID":"erik0704"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"erik0704"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"erik0704"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":16,"author":{"gitID":"erik0704"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":17,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":18,"author":{"gitID":"erik0704"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"erik0704"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"erik0704"},"content":" *"},{"lineNumber":21,"author":{"gitID":"erik0704"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"erik0704"},"content":" *"},{"lineNumber":23,"author":{"gitID":"erik0704"},"content":" * @see Event#equals(Object)"},{"lineNumber":24,"author":{"gitID":"erik0704"},"content":" * // @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"erik0704"},"content":" */"},{"lineNumber":26,"author":{"gitID":"erik0704"},"content":"public class EventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":27,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":28,"author":{"gitID":"erik0704"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"erik0704"},"content":"    // used by asObservableList()"},{"lineNumber":30,"author":{"gitID":"erik0704"},"content":"    private final ObservableList\u003cEvent\u003e mappedList \u003d EasyBind.map(internalList, (event) -\u003e event);"},{"lineNumber":31,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":32,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"erik0704"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":34,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"erik0704"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":36,"author":{"gitID":"erik0704"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitID":"erik0704"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":38,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":40,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"erik0704"},"content":"     * Adds a event to the list."},{"lineNumber":42,"author":{"gitID":"erik0704"},"content":"     * @throws DuplicateEventException"},{"lineNumber":43,"author":{"gitID":"erik0704"},"content":"     * if the event to add is a duplicate of an existing event in the list."},{"lineNumber":44,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"erik0704"},"content":"    public void add(Event toAdd) throws DuplicateEventException {"},{"lineNumber":46,"author":{"gitID":"erik0704"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitID":"erik0704"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitID":"erik0704"},"content":"            throw new DuplicateEventException();"},{"lineNumber":49,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"erik0704"},"content":"        internalList.add(new Event(toAdd));"},{"lineNumber":51,"author":{"gitID":"erik0704"},"content":"        Collections.sort(internalList);"},{"lineNumber":52,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":54,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"erik0704"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":56,"author":{"gitID":"erik0704"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"erik0704"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":58,"author":{"gitID":"erik0704"},"content":"     * @throws EventNotFoundException if {@code target} could not be found in the list."},{"lineNumber":59,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"erik0704"},"content":"    public void setEvent(Event target, Event editedEvent)"},{"lineNumber":61,"author":{"gitID":"erik0704"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":62,"author":{"gitID":"erik0704"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":63,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":64,"author":{"gitID":"erik0704"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":65,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":66,"author":{"gitID":"erik0704"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":67,"author":{"gitID":"erik0704"},"content":"            throw new EventNotFoundException();"},{"lineNumber":68,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":70,"author":{"gitID":"erik0704"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":71,"author":{"gitID":"erik0704"},"content":"            throw new DuplicateEventException();"},{"lineNumber":72,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":74,"author":{"gitID":"erik0704"},"content":"        internalList.set(index, new Event(editedEvent));"},{"lineNumber":75,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":77,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"erik0704"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":79,"author":{"gitID":"erik0704"},"content":"     * * @throws EventNotFoundException if {@code toRemove} could not be found in the list."},{"lineNumber":80,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"erik0704"},"content":"    public boolean remove(Event toRemove) throws EventNotFoundException {"},{"lineNumber":82,"author":{"gitID":"erik0704"},"content":"        requireNonNull(toRemove);"},{"lineNumber":83,"author":{"gitID":"erik0704"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":84,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":85,"author":{"gitID":"erik0704"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":86,"author":{"gitID":"erik0704"},"content":"            throw new EventNotFoundException();"},{"lineNumber":87,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"erik0704"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":89,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":90,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":92,"author":{"gitID":"erik0704"},"content":"    public void setEvents(EventList replacement) {"},{"lineNumber":93,"author":{"gitID":"erik0704"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":94,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":96,"author":{"gitID":"erik0704"},"content":"    public void setEvents(List\u003c? extends Event\u003e events) throws DuplicateEventException {"},{"lineNumber":97,"author":{"gitID":"erik0704"},"content":"        final EventList replacement \u003d new EventList();"},{"lineNumber":98,"author":{"gitID":"erik0704"},"content":"        for (final Event event : events) {"},{"lineNumber":99,"author":{"gitID":"erik0704"},"content":"            replacement.add(new Event(event));"},{"lineNumber":100,"author":{"gitID":"erik0704"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"erik0704"},"content":"        setEvents(replacement);"},{"lineNumber":102,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":104,"author":{"gitID":"erik0704"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"erik0704"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":106,"author":{"gitID":"erik0704"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"erik0704"},"content":"    public ObservableList\u003cEvent\u003e asObservableList() {"},{"lineNumber":108,"author":{"gitID":"erik0704"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":109,"author":{"gitID":"erik0704"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":110,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":112,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"erik0704"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":114,"author":{"gitID":"erik0704"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":117,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"erik0704"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"erik0704"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"erik0704"},"content":"                || (other instanceof EventList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"erik0704"},"content":"                \u0026\u0026 this.internalList.equals(((EventList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"erik0704"},"content":""},{"lineNumber":124,"author":{"gitID":"erik0704"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"erik0704"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"erik0704"},"content":"        return internalList.hashCode();"},{"lineNumber":127,"author":{"gitID":"erik0704"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"erik0704"},"content":"}"},{"lineNumber":129,"author":{"gitID":"erik0704"},"content":""}],"authorContributionMap":{"erik0704":129}}]
