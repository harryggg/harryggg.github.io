var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"melvintzw"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F12-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"melvintzw"},"content":"* *Email us* : You can also reach us at `ahlong [at] example.com`"}],"authorContributionMap":{"melvintzw":2,"-":4}},{"path":"docs/team/melvintzw.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonleeyz"},"content":"\u003d Melvin Tan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d PROJECT: LoanShark Manager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"---"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"jonleeyz":2,"-":69}},{"path":"docs/team/jonleeyz.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonleeyz"},"content":"\u003d Jonathan Lee - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d PROJECT: LoanShark Manager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"---"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"jonleeyz":2,"-":69}},{"path":"docs/team/Der-Erlkonig.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonleeyz"},"content":"\u003d Choi Wi Su - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d PROJECT: LoanShark Manager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"---"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"jonleeyz":2,"-":69}},{"path":"docs/team/ZhangRuiqi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"zhangriqi"},"content":"\u003d Zhang Ruiqi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"zhangriqi"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"zhangriqi"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":5,"author":{"gitID":"zhangriqi"},"content":"\u003d\u003d PROJECT: LoanShark Manager"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *the ability to undo/redo previous commands*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Integrated a third party library (Natty) to the project (https://github.com[#42])"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"_{you can add/remove categories in the list above}_"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dundoredo]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dundoredo]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddataencryption]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: PowerPointLabs"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"---"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"_{Optionally, you may include other projects in your portfolio.}_"}],"authorContributionMap":{"zhangriqi":5,"-":66}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"AddressBook - Level 4 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"zhangriqi"},"content":"\u003d\u003d\u003d Zhang Ruiqi"},{"lineNumber":14,"author":{"gitID":"zhangriqi"},"content":"image::ruiqi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitID":"zhangriqi"},"content":"{empty}[http://github.com/zhangriqi[github]] [\u003c\u003cZhangRuiqi#, portfolio\u003e\u003e]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"zhangriqi"},"content":"Role: Developer +"},{"lineNumber":18,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d Melvin Tan"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"image::melvin.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"jonleeyz"},"content":"{empty}[http://github.com/melvintzw[github]] [\u003c\u003cmelvintzw#, portfolio\u003e\u003e]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":27,"author":{"gitID":"melvintzw"},"content":"Responsibilities: Model"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d Jonathan Lee"},{"lineNumber":32,"author":{"gitID":"jonleeyz"},"content":"image::jonlee.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"jonleeyz"},"content":"{empty}[http://github.com/jonleeyz[github]] [\u003c\u003cjonleeyz#, portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":36,"author":{"gitID":"melvintzw"},"content":"Responsibilities: Logic"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d Choi Wi Su"},{"lineNumber":41,"author":{"gitID":"Der-Erlkonig"},"content":"image::wisu.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"jonleeyz"},"content":"{empty}[http://github.com/Der-Erlkonig[github]] [\u003c\u003cDer-Erlkonig#, portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Responsibilities: Data"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"zhangriqi":4,"jonleeyz":4,"melvintzw":6,"-":32,"Der-Erlkonig":1}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"melvintzw"},"content":"\u003d Loanshark Tycoon"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"jonleeyz"},"content":"https://travis-ci.org/CS2103JAN2018-F12-B4/main[image:https://travis-ci.org/CS2103JAN2018-F12-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"jonleeyz"},"content":"https://ci.appveyor.com/project/jonleeyz/main/branch/master[image:https://ci.appveyor.com/api/projects/status/o5fr0a29pv70cubj/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"melvintzw"},"content":"* This is a desktop loanshark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"melvintzw"},"content":"* It is a Java application intended for 21st century loanshark managers to streamline their syndicate operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":31,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"jonleeyz":2,"melvintzw":3,"-":29}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AddressBook Level 4 - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":":repoURL: https://github.com/CS2103JAN2018-F12-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"melvintzw"},"content":"By: `LoanShark Tycoon`      Since: `Jan 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"melvintzw"},"content":"LoanShark Tycoon is for 21st century Loanshark bosses who *prefer to use a desktop app for managing operations*. More"},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":"importantly, LoanShark Tycoon is *optimized for those who prefer to work with a Command Line Interface* (CLI) while"},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"still having the benefits of a Graphical User Interface (GUI). If you can type fast, LoanShark Tycoon can get your"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"operations management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get"},{"lineNumber":24,"author":{"gitID":"melvintzw"},"content":"started. Enjoy!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"melvintzw"},"content":".  Download the latest `LoanSharkTycoon.jar` link:{repoURL}/releases[here]. (_to be updated_)"},{"lineNumber":35,"author":{"gitID":"melvintzw"},"content":".  Copy the file to the folder you want to use as the home folder for your application."},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":46,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":47,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":70,"author":{"gitID":"zhangriqi"},"content":"Alias: `a` +"},{"lineNumber":71,"author":{"gitID":"melvintzw"},"content":"Format: `add n:NAME p:PHONE_NUMBER e:EMAIL a:ADDRESS [t:TAG]...`"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":74,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"melvintzw"},"content":"* `add n:John Doe p:98765432 e:johnd@example.com a:John street, block 123, #01-01`"},{"lineNumber":79,"author":{"gitID":"melvintzw"},"content":"* `add n:Betsy Crowe t:friend e:betsycrowe@example.com a:Newgate Prison p:1234567 t:criminal`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":84,"author":{"gitID":"zhangriqi"},"content":"Alias: `l` +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":90,"author":{"gitID":"zhangriqi"},"content":"Alias: `e` +"},{"lineNumber":91,"author":{"gitID":"melvintzw"},"content":"Format: `edit INDEX [n:NAME] [p:PHONE] [e:EMAIL] [a:ADDRESS] [t:TAG]...`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"****"},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":97,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":98,"author":{"gitID":"melvintzw"},"content":"* You can remove all the person\u0027s tags by typing `t:` without specifying any tags after it."},{"lineNumber":99,"author":{"gitID":"-"},"content":"****"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"melvintzw"},"content":"* `edit 1 p:91234567 e:johndoe@example.com` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":105,"author":{"gitID":"melvintzw"},"content":"* `edit 2 n:Betsy Crower t:` +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":111,"author":{"gitID":"zhangriqi"},"content":"Alias: `f` +"},{"lineNumber":112,"author":{"gitID":"melvintzw"},"content":"Specifiers: `-all` `-n` `-p` `-e` `-a` `-t` +"},{"lineNumber":113,"author":{"gitID":"melvintzw"},"content":"Format: `find [SPECIFIER] KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"****"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":117,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":118,"author":{"gitID":"melvintzw"},"content":"* Name, address and tags are searched by default (no specifier or -all specifier)"},{"lineNumber":119,"author":{"gitID":"melvintzw"},"content":"* `-n` to search only names, `-p` to search only phones, `-e` to search only emails,"},{"lineNumber":120,"author":{"gitID":"melvintzw"},"content":"`-a` to search only addresses, `-t` to search only tags."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":123,"author":{"gitID":"-"},"content":"****"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":128,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":130,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":131,"author":{"gitID":"melvintzw"},"content":"* `find -p 91234567` +"},{"lineNumber":132,"author":{"gitID":"melvintzw"},"content":"Returns any person with the above phone number. Note that there should be no spaces in the entered number."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":137,"author":{"gitID":"zhangriqi"},"content":"Alias: `d` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":152,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":158,"author":{"gitID":"zhangriqi"},"content":"Alias: `s` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"****"},{"lineNumber":162,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":163,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":164,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":165,"author":{"gitID":"-"},"content":"****"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":172,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":179,"author":{"gitID":"zhangriqi"},"content":"Alias: `h` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":191,"author":{"gitID":"zhangriqi"},"content":"Alias: `u` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":196,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":203,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":206,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":218,"author":{"gitID":"zhangriqi"},"content":"Alias: `r` +"},{"lineNumber":219,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":229,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":235,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":242,"author":{"gitID":"zhangriqi"},"content":"Alias: `c` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":259,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":264,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"melvintzw"},"content":"* *Add* `add n:NAME p:PHONE_NUMBER e:EMAIL a:ADDRESS [t:TAG]...` +"},{"lineNumber":269,"author":{"gitID":"melvintzw"},"content":"e.g. `add n:James Ho p:22224444 e:jamesho@example.com a:123, Clementi Rd, 1234665 t:friend t/colleague`"},{"lineNumber":270,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":271,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":272,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":273,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":275,"author":{"gitID":"melvintzw"},"content":"* *Find* : `find [SPECIFIER] KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":276,"author":{"gitID":"melvintzw"},"content":"e.g. `find -all James Jake`"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":278,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":281,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":282,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":283,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"zhangriqi":10,"melvintzw":27,"-":246}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":1,"-":93}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":2,"-":198}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":2,"-":99}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"jonleeyz"},"content":"        // Test fails when prefix is edited to \"a: \" from \"a:\"."},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":238,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":3,"-":259}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":2,"-":151}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"jonleeyz"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"jonleeyz"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":59,"author":{"gitID":"jonleeyz"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":60,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"jonleeyz"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":77,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":78,"author":{"gitID":"jonleeyz"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":79,"author":{"gitID":"jonleeyz"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":80,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"jonleeyz"},"content":"     * Asserts that the command box and result display show the default style."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"jonleeyz"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":250,"author":{"gitID":"jonleeyz"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"jonleeyz"},"content":"     * Asserts that the command box and result display show the error style."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"jonleeyz"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":258,"author":{"gitID":"jonleeyz"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":300,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":15,"-":289}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AddressBook Level 4 - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d Find Command Enhancements"},{"lineNumber":389,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":390,"author":{"gitID":"melvintzw"},"content":"In the original AddressBook, the `find` command only searches through the `Name` field of the `Person`. The current implementation enables the user to search through all fields in a Person. This is bound to be useful when the user may be interested in quickly finding someone whose address or tags contains a certain word. Furthermore, the current implementation allows the user to enter certain specifier parameters to narrow down the search range, which allows more relevant results to appear to the user."},{"lineNumber":391,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":392,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d\u003d Basic Enhancement"},{"lineNumber":393,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":394,"author":{"gitID":"melvintzw"},"content":"Most of the useful work done in the Find Command is done by constructing a `FindCommand` object and passing an appropriate `Predicate\u003c\u003e` as a parameter to it."},{"lineNumber":395,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":396,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":397,"author":{"gitID":"melvintzw"},"content":"public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":398,"author":{"gitID":"melvintzw"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":399,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":400,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":402,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":403,"author":{"gitID":"melvintzw"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":404,"author":{"gitID":"melvintzw"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":405,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":407,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":408,"author":{"gitID":"melvintzw"},"content":"In this case, the `FindCommand` object expects a `Predicate\u003cPerson\u003e` as an argument, and then uses that Predicate object in `execute()` to filter the list in the `Model`."},{"lineNumber":409,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":410,"author":{"gitID":"melvintzw"},"content":"All that is needed now is to create an appropriate `Predicate\u003cPerson\u003e` class that checks the correct fields in a `Person` instance."},{"lineNumber":411,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":412,"author":{"gitID":"melvintzw"},"content":"For example, in a `PersonContainsKeywordsPredicate`, the test field is overridden as such:"},{"lineNumber":413,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":414,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":415,"author":{"gitID":"melvintzw"},"content":"public boolean test(Person person) {"},{"lineNumber":416,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":417,"author":{"gitID":"melvintzw"},"content":"        String stringOfTags \u003d getStringOfTags(person);"},{"lineNumber":418,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":419,"author":{"gitID":"melvintzw"},"content":"        return keywords.stream()"},{"lineNumber":420,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"},{"lineNumber":421,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":422,"author":{"gitID":"melvintzw"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword))"},{"lineNumber":423,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":424,"author":{"gitID":"melvintzw"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"},{"lineNumber":425,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":426,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"},{"lineNumber":427,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":428,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":429,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":431,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":432,"author":{"gitID":"melvintzw"},"content":"a `stream` is generated from the user-entered keywords and each keyword is checked against all the words in specific fields such as `person.getName().fullName`."},{"lineNumber":433,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":434,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d\u003d Further Enhancement"},{"lineNumber":435,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":436,"author":{"gitID":"melvintzw"},"content":"The `find` command accepts a specifier, such as `-t` or `-p` as the first argument to the program to search through a specific field. `FindCommandParser` then recognises the specifers and constructs the correct `FindCommand` object with the correct `Predicate\u003cPerson\u003e`. `FindCommand.execute()` is then called, and it searches for the keywords in the correct fields according to the Predicate that was passed to it."},{"lineNumber":437,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":438,"author":{"gitID":"melvintzw"},"content":"These are the names of the `Predicate\u003cPerson\u003e` classes currently implemented:"},{"lineNumber":439,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":440,"author":{"gitID":"melvintzw"},"content":"** PersonContainsKeywordsPredicate"},{"lineNumber":441,"author":{"gitID":"melvintzw"},"content":"** NameContainsKeywordsPredicate"},{"lineNumber":442,"author":{"gitID":"melvintzw"},"content":"** AddressContainsKeywordsPredicate"},{"lineNumber":443,"author":{"gitID":"melvintzw"},"content":"** EmailContainsKeywordsPredicate"},{"lineNumber":444,"author":{"gitID":"melvintzw"},"content":"** PhoneContainsKeywordsPredicate"},{"lineNumber":445,"author":{"gitID":"melvintzw"},"content":"** TagsContainsKeywordsPredicate"},{"lineNumber":446,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":447,"author":{"gitID":"melvintzw"},"content":"In order to implement this further enhancement, we have to modify `FindCommandParser` to recognize the specifier and then to construct the correct `FindCommand` object. The code is shown below."},{"lineNumber":448,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":449,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":450,"author":{"gitID":"melvintzw"},"content":" String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":451,"author":{"gitID":"melvintzw"},"content":"        String[] keywords;"},{"lineNumber":452,"author":{"gitID":"melvintzw"},"content":"        //check arguments[0] for specifier"},{"lineNumber":453,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":454,"author":{"gitID":"melvintzw"},"content":"        if (arguments[0].matches(\"\\\\p{Alnum}+.++\")) {"},{"lineNumber":455,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"},{"lineNumber":456,"author":{"gitID":"melvintzw"},"content":"        }"},{"lineNumber":457,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":458,"author":{"gitID":"melvintzw"},"content":"        switch (arguments[0]) {"},{"lineNumber":459,"author":{"gitID":"melvintzw"},"content":"        case \"-all\":"},{"lineNumber":460,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":461,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":462,"author":{"gitID":"melvintzw"},"content":"        case \"-n\":"},{"lineNumber":463,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":464,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":465,"author":{"gitID":"melvintzw"},"content":"        case \"-p\":"},{"lineNumber":466,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":467,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":468,"author":{"gitID":"melvintzw"},"content":"        case \"-e\":"},{"lineNumber":469,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":470,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":471,"author":{"gitID":"melvintzw"},"content":"        case \"-a\":"},{"lineNumber":472,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":473,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":474,"author":{"gitID":"melvintzw"},"content":"        case \"-t\":"},{"lineNumber":475,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":476,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":477,"author":{"gitID":"melvintzw"},"content":"        default:"},{"lineNumber":478,"author":{"gitID":"melvintzw"},"content":"            throw new ParseException("},{"lineNumber":479,"author":{"gitID":"melvintzw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":480,"author":{"gitID":"melvintzw"},"content":"        }"},{"lineNumber":481,"author":{"gitID":"melvintzw"},"content":"----"},{"lineNumber":482,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":483,"author":{"gitID":"melvintzw"},"content":"The first if-block captures the case for no specifiers, while the switch-case block captures the case for valid specifiers and throws an exception when the specifier is invalid."},{"lineNumber":484,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":485,"author":{"gitID":"melvintzw"},"content":"\u003d\u003d\u003d\u003d Rationale"},{"lineNumber":486,"author":{"gitID":"melvintzw"},"content":"The rationale for improving the `find` command is the fact that users of an application containing contact data would like to be able to search for a contact easily using keywords."},{"lineNumber":487,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":488,"author":{"gitID":"melvintzw"},"content":"It was important to make sure that the `find` command would search through fields other than the Name of the Person, as relevant information may be contained in other fields."},{"lineNumber":489,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":490,"author":{"gitID":"melvintzw"},"content":"It was also important to be able to specify the field the user was interested in searching as this would increase the relevance of search results or reduce the occurence of irrelevant results. For example, if I searched \"Baker\" and there was a contact whose address was \"Baker Street\" and there was another contact who had been tagged as \"Baker\" I would receive two search results. But if I wanted to only view contacts who had been _tagged_ as \"Baker\", then I need only enter the specifier `-t` to increase the relevance of the results. This becomes more important as the size of the addressbook gets larger. Having more relevant results also increases the speed at which a user can use the application."},{"lineNumber":491,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":492,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":493,"author":{"gitID":"zhangriqi"},"content":"\u003d\u003d\u003d Location on Google Map"},{"lineNumber":494,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":495,"author":{"gitID":"zhangriqi"},"content":"The command locate followed by an INDEX(must be positive) shows the location of the place on Google Map in the BrowserPanel. The command takes the INDEX from the argument and get the name of the place in the list in LocateCommand.java, and pass it to the method loadUrl in browerPanel in MainWindow. The user can use \u0027locate\u0027 / \u0027lo\u0027 command with the index of the person as the parameter to locate a person on google map."},{"lineNumber":496,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":497,"author":{"gitID":"zhangriqi"},"content":"The method loadUrl will pass the Google Map url to BrowserPanel to display the location in BrowserPanel."},{"lineNumber":498,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":499,"author":{"gitID":"zhangriqi"},"content":"In the implementation, the `LocateCommand` takes `Index targetIndex` as an argument, and then uses that index in `execute()` to filter the list in the `Model`."},{"lineNumber":500,"author":{"gitID":"zhangriqi"},"content":"Locate command is implemented this way:"},{"lineNumber":501,"author":{"gitID":"zhangriqi"},"content":"[source,java]"},{"lineNumber":502,"author":{"gitID":"zhangriqi"},"content":"----"},{"lineNumber":503,"author":{"gitID":"zhangriqi"},"content":"public LocateCommand (Index targetIndex) {"},{"lineNumber":504,"author":{"gitID":"zhangriqi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":505,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"zhangriqi"},"content":"----"},{"lineNumber":507,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":508,"author":{"gitID":"zhangriqi"},"content":"With loadUrl, the Google Map url is passed to \u0027BrowserPanel\u0027to display the location indicated by the index in BrowserPanel."},{"lineNumber":509,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":510,"author":{"gitID":"zhangriqi"},"content":"----"},{"lineNumber":511,"author":{"gitID":"zhangriqi"},"content":"    @Override"},{"lineNumber":512,"author":{"gitID":"zhangriqi"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":513,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":514,"author":{"gitID":"zhangriqi"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":515,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":516,"author":{"gitID":"zhangriqi"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":517,"author":{"gitID":"zhangriqi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":518,"author":{"gitID":"zhangriqi"},"content":"        }"},{"lineNumber":519,"author":{"gitID":"zhangriqi"},"content":"        Person location \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":520,"author":{"gitID":"zhangriqi"},"content":"        // Open Google Map on BrowserPanel"},{"lineNumber":521,"author":{"gitID":"zhangriqi"},"content":"        MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""},{"lineNumber":522,"author":{"gitID":"zhangriqi"},"content":"                + location.getAddress().toString());"},{"lineNumber":523,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":524,"author":{"gitID":"zhangriqi"},"content":"        EventsCenter.getInstance().post(new LocateRequestEvent(targetIndex));"},{"lineNumber":525,"author":{"gitID":"zhangriqi"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":526,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":527,"author":{"gitID":"zhangriqi"},"content":"----"},{"lineNumber":528,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":529,"author":{"gitID":"zhangriqi"},"content":"As we can see from the picture below, once the command is executed, the location is presented on Google Map is loaded in the BrowserPanel."},{"lineNumber":530,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":531,"author":{"gitID":"zhangriqi"},"content":"image::interface_of_locate.png[width\u003d\"800\"]"},{"lineNumber":532,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":533,"author":{"gitID":"zhangriqi"},"content":"\u003d\u003d\u003d\u003d Further Enhancement"},{"lineNumber":534,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":535,"author":{"gitID":"zhangriqi"},"content":"The `locate` command currently accepts only INDEX as the parameter to locate a person, if the user needs to locate a person, he would have to find out the index of the person first, which is not easy to use in this case. It should be more natural if the user can locate a person with any related information of that person. For example, the user might want to locate a person by his name with a simple command of \u0027locate Alice\u0027, or the user might forget the name of a person he\u0027s trying to find, but he knows the phone of the person, then he wants to use \u0027locate 93714378\u0027 to locate the person."},{"lineNumber":536,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":537,"author":{"gitID":"zhangriqi"},"content":"In order to implement this further enhancement, we have to modify `LocateCommandParser` to use the parameters as the new \"INDEX\" to find the person and then find the location of the person to loacte him on Google Map."},{"lineNumber":538,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":539,"author":{"gitID":"zhangriqi"},"content":"\u003d\u003d\u003d\u003d Rationale"},{"lineNumber":540,"author":{"gitID":"zhangriqi"},"content":"The rationale for implementing the `locate` command is that there\u0027s actual need of the users to find a person as easily as possible while using this application. By locating the person on Google Map in this application, the user can directly see the location of a person instead of a simple line of address that\u0027s not so useful."},{"lineNumber":541,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":542,"author":{"gitID":"zhangriqi"},"content":"It was important to make sure that the `locate` command would use parameters other than the Index, as relevant information may be more easily to be obtained."},{"lineNumber":543,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":544,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d\u003d Tag Colours Enhancement"},{"lineNumber":545,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":546,"author":{"gitID":"jonleeyz"},"content":"In the original AddressBook, all tags were of the same colour, irrespective of the `Person` they were tagged to or the content of the tag. Users were able to visually identify the tags a `Person` is associated with by the textual content of each tag. The current implementation enables colours for tags and tags with the same textual content will consistently bear the same colour. This is substantially more useful than the previous application as users are able to visually identify multiple `Person` objects with the same tag with much more ease. Also, users can now more easily compare and contrast the tags that two distinct `Person` objects are associated with."},{"lineNumber":547,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":548,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d\u003d\u003d Basic Enhancement"},{"lineNumber":549,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":550,"author":{"gitID":"jonleeyz"},"content":"The colours for the tags are first created in `resources/main/view/DarkTheme.css`."},{"lineNumber":551,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":552,"author":{"gitID":"jonleeyz"},"content":"The textual representations of the colours are then initialised and placed into a `String[]`."},{"lineNumber":553,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":554,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":555,"author":{"gitID":"jonleeyz"},"content":"private static final String[] TAG_COLOUR_STYLES \u003d"},{"lineNumber":556,"author":{"gitID":"jonleeyz"},"content":"\t{ \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"},{"lineNumber":557,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":558,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":559,"author":{"gitID":"jonleeyz"},"content":"A helper method is then created to return a specific tag colour style given a `String` input. The `hashcode()` method of each `String` is utilised in this method to ensure that the colour assigned is **consistently random**: equivalent `Strings` will receive identical colours while different `Strings` will receive \"random\" colours that will be in most cases distinct. This behaviour is consistent over repeated runs of the Application."},{"lineNumber":560,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":561,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":562,"author":{"gitID":"jonleeyz"},"content":"private String getTagColourStyleFor(String tagName) {"},{"lineNumber":563,"author":{"gitID":"jonleeyz"},"content":"    return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"},{"lineNumber":564,"author":{"gitID":"jonleeyz"},"content":"}"},{"lineNumber":565,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":566,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":567,"author":{"gitID":"jonleeyz"},"content":"All that remains to be done is to implement a new method to initialise all tags of a Person object with the appropriate colours. This method calls the above helper method, utilising it to associate each tag with a appropriate colour based on its `String` content."},{"lineNumber":568,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":569,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":570,"author":{"gitID":"jonleeyz"},"content":"private void initTags(Person person) {"},{"lineNumber":571,"author":{"gitID":"jonleeyz"},"content":"    person.getTags().forEach(tag -\u003e {"},{"lineNumber":572,"author":{"gitID":"jonleeyz"},"content":"        Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":573,"author":{"gitID":"jonleeyz"},"content":"        tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"},{"lineNumber":574,"author":{"gitID":"jonleeyz"},"content":"        tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"},{"lineNumber":575,"author":{"gitID":"jonleeyz"},"content":"        tags.getChildren().add(tagLabel);"},{"lineNumber":576,"author":{"gitID":"jonleeyz"},"content":"     });"},{"lineNumber":577,"author":{"gitID":"jonleeyz"},"content":"}"},{"lineNumber":578,"author":{"gitID":"jonleeyz"},"content":"----"},{"lineNumber":579,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":580,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d\u003d\u003d Further Enhancement"},{"lineNumber":581,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":582,"author":{"gitID":"jonleeyz"},"content":"This enhancement can be taken steps further in the coming weeks by assigning certain set colours to certain tags instead of using the `hashCode()` method to assign colours."},{"lineNumber":583,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":584,"author":{"gitID":"jonleeyz"},"content":"This would be useful in the content of our Application as it is important for the User to discern between `Runners` and `Customers`, and to be able to tell at a glance whether and what actions need to be taken or assigned to respective `Customers` or `Runners`."},{"lineNumber":585,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":586,"author":{"gitID":"jonleeyz"},"content":"\u003d\u003d\u003d\u003d Rationale"},{"lineNumber":587,"author":{"gitID":"jonleeyz"},"content":"The rationale for adding tag colours stems from two facts: firstly, that in the context of this Application, tags are used to categorise, group and distinguish between `Person` objects and that secondly, colours are an excellent way to visually and manually group and distinguish between groups of objects."},{"lineNumber":588,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":589,"author":{"gitID":"jonleeyz"},"content":"As a result, implementing tag colours utilises these two facts in tandom to make it significantly easier for the User to group different `Persons` and in combination with our newly implement `find` command, which enables wide sweeping, flexible search and filtering functionality, these tag colours add much value to the searching and filtering user experience."},{"lineNumber":590,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":591,"author":{"gitID":"jonleeyz"},"content":"These tag colours will be significantly more useful with the further enhancement mentioned above and hence, this basic enhancement is the first step towards the finished product."},{"lineNumber":592,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":598,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":603,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":616,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":617,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":618,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":621,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":624,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":631,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":636,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":643,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":656,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":657,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":658,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":659,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":660,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":661,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":662,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":663,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":664,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":668,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":671,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":688,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":695,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":696,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":697,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":702,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":706,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":721,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":726,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":729,"author":{"gitID":"-"},"content":"+"},{"lineNumber":730,"author":{"gitID":"-"},"content":"****"},{"lineNumber":731,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":732,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":733,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":734,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":735,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":736,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":737,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":738,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":739,"author":{"gitID":"-"},"content":"****"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":747,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":750,"author":{"gitID":"-"},"content":"+"},{"lineNumber":751,"author":{"gitID":"-"},"content":"****"},{"lineNumber":752,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":753,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":755,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":756,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":757,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":758,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":761,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":762,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":763,"author":{"gitID":"-"},"content":"****"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":776,"author":{"gitID":"-"},"content":"+"},{"lineNumber":777,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":778,"author":{"gitID":"-"},"content":"+"},{"lineNumber":779,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":780,"author":{"gitID":"-"},"content":"+"},{"lineNumber":781,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":782,"author":{"gitID":"-"},"content":"+"},{"lineNumber":783,"author":{"gitID":"-"},"content":"****"},{"lineNumber":784,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":785,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":786,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":787,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":788,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":789,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":790,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":791,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":792,"author":{"gitID":"-"},"content":"****"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":796,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":797,"author":{"gitID":"-"},"content":"+"},{"lineNumber":798,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":799,"author":{"gitID":"-"},"content":"+"},{"lineNumber":800,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":801,"author":{"gitID":"-"},"content":"+"},{"lineNumber":802,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":803,"author":{"gitID":"-"},"content":"+"},{"lineNumber":804,"author":{"gitID":"-"},"content":"****"},{"lineNumber":805,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":806,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":807,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":808,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":809,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":810,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":811,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":812,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":813,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":814,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":815,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":816,"author":{"gitID":"-"},"content":"****"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":819,"author":{"gitID":"-"},"content":"+"},{"lineNumber":820,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":821,"author":{"gitID":"-"},"content":"+"},{"lineNumber":822,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":823,"author":{"gitID":"-"},"content":"+"},{"lineNumber":824,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":826,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"+"},{"lineNumber":828,"author":{"gitID":"-"},"content":"****"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":830,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":831,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":832,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":833,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":834,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":835,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":836,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":837,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":838,"author":{"gitID":"-"},"content":"****"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":841,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":846,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":849,"author":{"gitID":"-"},"content":"+"},{"lineNumber":850,"author":{"gitID":"-"},"content":"****"},{"lineNumber":851,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":852,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":853,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":854,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":855,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":856,"author":{"gitID":"-"},"content":"****"},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":859,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":866,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":867,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":872,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":873,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":874,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":879,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":884,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":889,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":892,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":897,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":898,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":903,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":904,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":905,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":908,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":913,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":920,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":925,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":932,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":937,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":938,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":941,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":952,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":957,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":960,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":971,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":986,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"jonleeyz"},"content":"* Loan Shark Bosses"},{"lineNumber":991,"author":{"gitID":"jonleeyz"},"content":"* Need to manage a significant number of contacts (customers and runners)."},{"lineNumber":992,"author":{"gitID":"jonleeyz"},"content":"* Prefer desktop apps over other types since he will be operating the syndicate from his den / headquarters and not out in the field."},{"lineNumber":993,"author":{"gitID":"jonleeyz"},"content":"* Can type fast as he is tech-savvy and is comfortable with using technology to manage data and streamline his workflow."},{"lineNumber":994,"author":{"gitID":"jonleeyz"},"content":"* Prefer typing over mouse mouse input as he has fast fingers."},{"lineNumber":995,"author":{"gitID":"jonleeyz"},"content":"* Is reasonable comfortable using CLI apps."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"jonleeyz"},"content":"*Value proposition*:"},{"lineNumber":998,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":999,"author":{"gitID":"jonleeyz"},"content":"* Manage the operations of the loan shark syndicate substantially more efficiently and quickly than a typical mouse / GUI-driven app."},{"lineNumber":1000,"author":{"gitID":"jonleeyz"},"content":"* Untapped market potential."},{"lineNumber":1001,"author":{"gitID":"jonleeyz"},"content":"* Integrated with map, calendar and calculator functionality to centralise and optimise management tasks for the syndicate."},{"lineNumber":1002,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":1003,"author":{"gitID":"melvintzw"},"content":"*Feature Contribution:*"},{"lineNumber":1004,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1005,"author":{"gitID":"melvintzw"},"content":"~Zhang Rui Qi~"},{"lineNumber":1006,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1007,"author":{"gitID":"melvintzw"},"content":"Major: Implementation of `Locate` command to bring up address of target on"},{"lineNumber":1008,"author":{"gitID":"melvintzw"},"content":"Google Maps."},{"lineNumber":1009,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1010,"author":{"gitID":"melvintzw"},"content":"Minor: Addition of command aliases to improve speed of using CLI"},{"lineNumber":1011,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1012,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1013,"author":{"gitID":"melvintzw"},"content":"~Melvin Tan~"},{"lineNumber":1014,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1015,"author":{"gitID":"melvintzw"},"content":"Major: Integration with Google Calendar"},{"lineNumber":1016,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1017,"author":{"gitID":"melvintzw"},"content":"Minor: Enhancement to `Find` command to improve searching"},{"lineNumber":1018,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1019,"author":{"gitID":"melvintzw"},"content":"~Jonathan Lee~"},{"lineNumber":1020,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1021,"author":{"gitID":"jonleeyz"},"content":"Major: Natural language processing for commands"},{"lineNumber":1022,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1023,"author":{"gitID":"jonleeyz"},"content":"Minor: UI update - colours and layout"},{"lineNumber":1024,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1025,"author":{"gitID":"melvintzw"},"content":"~Choi Wi Su~"},{"lineNumber":1026,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1027,"author":{"gitID":"melvintzw"},"content":"Major: Import and export function to update contacts and export information to other formats"},{"lineNumber":1028,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1029,"author":{"gitID":"melvintzw"},"content":"Minor: Addition of remarks field for each contact"},{"lineNumber":1030,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1031,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1040,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |new user |view help information |find out how to use the application"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"zhangriqi"},"content":"|`* * *` |user |list all my customers |have an overview of all customers"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |add a new customer |store the data of a new customer as well as related deals and contracts"},{"lineNumber":1045,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1046,"author":{"gitID":"zhangriqi"},"content":"|`* * *` |user |clear the list of customers |start on a clean state"},{"lineNumber":1047,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1048,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |delete a customer |remove unwanted data"},{"lineNumber":1049,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1050,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |edit a customer\u0027s data |correct mistakes or update the data with the latest information"},{"lineNumber":1051,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1052,"author":{"gitID":"zhangriqi"},"content":"|`* * *` |user |exit the application |call it a day"},{"lineNumber":1053,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1054,"author":{"gitID":"melvintzw"},"content":"|`* * *` |user |find a customer with a keyword and specify which data field to search |search up a customer quickly without looking at the whole list"},{"lineNumber":1055,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1056,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |view history of previously entered commands |trace my workflow"},{"lineNumber":1057,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1058,"author":{"gitID":"zhangriqi"},"content":"|`* * *` |user |undo a command |easily revert to a previous state"},{"lineNumber":1059,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1060,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |redo a command |redo a command that was undone"},{"lineNumber":1061,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1062,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |select a person from the previously retrieved list |view more details about the particular customer"},{"lineNumber":1063,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1064,"author":{"gitID":"zhangriqi"},"content":"|`* * *` |user |view a customer\u0027s address on Google Maps |visualize the location of the customer"},{"lineNumber":1065,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1066,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |back up my list |create backup copies of the current data in case of data corruption"},{"lineNumber":1067,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1068,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |list all my runners |get an overview of all subordinates"},{"lineNumber":1069,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1070,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |schedule collection of payment |plan  meetings with customers and facilitate timely collection of payments"},{"lineNumber":1071,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1072,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |schedule a house visit |send a friendly, personal reminder to a customer regarding payments"},{"lineNumber":1073,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1074,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |add a customer with partial information |add a customer entry without requiring all the details"},{"lineNumber":1075,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1076,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |easily make ad hoc calculations |perform simple payment calculations without disrupting my workflow"},{"lineNumber":1077,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1078,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |view customer or transaction statistics |make informed decisions or get relevant information about customers or transactions"},{"lineNumber":1079,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1080,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |rate my customers |know who the most reliable customers are"},{"lineNumber":1081,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1082,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |filter customers by area |make operations, collections and visitations more time and cost efficient"},{"lineNumber":1083,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1084,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |hide my application quickly |prevent unwanted eyes from confidential data and the activities of the syndicate"},{"lineNumber":1085,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1086,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |view information about a customer\u0027s collateral (family members, relatives, property)  |nalyse possible courses of action against recalcitrant customers who do not pay up"},{"lineNumber":1087,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1088,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |view a compact status view of customers using small symbols or pictorial representations |see general status information about customers at a glance"},{"lineNumber":1089,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1090,"author":{"gitID":"jonleeyz"},"content":"|`* * *` |user |view different configurations of one or more routes, all together encompassing a given set of customers\u0027 locations |find the optimal route in terms of cost, time and effort that can be taken to collect from a given set of customers"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"jonleeyz"},"content":"|`* *` |user |export data of customers and runners |view the data in another format or on another platform"},{"lineNumber":1095,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":1096,"author":{"gitID":"jonleeyz"},"content":"|`* *` |user |view a route encompassing a given set of customers\u0027 locations |access the cost, time and effort involved in collecting from a set of customers"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"melvintzw"},"content":"|`**` |user | enter commands with aliases | type commands faster and improve speed of using the application"},{"lineNumber":1099,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1100,"author":{"gitID":"jonleeyz"},"content":"|`*` |user |export my current view to another format |view specific information in another format or print out a hardcopy and pass the information to subordinates"},{"lineNumber":1101,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1102,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1132,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1135,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1144,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1145,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"melvintzw"},"content":"*LoanShark Tycoon*"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"melvintzw"},"content":"Author:"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1168,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1173,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1188,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1194,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1204,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1206,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1208,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"zhangriqi":81,"jonleeyz":85,"melvintzw":137,"-":916}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonleeyz"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"jonleeyz"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jonleeyz"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"},{"lineNumber":18,"author":{"gitID":"jonleeyz"},"content":"            new NewResultAvailableEvent(\"Stub\", true);"},{"lineNumber":19,"author":{"gitID":"jonleeyz"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"},{"lineNumber":20,"author":{"gitID":"jonleeyz"},"content":"            new NewResultAvailableEvent(\"Stub\", false);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jonleeyz"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"jonleeyz"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":24,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":34,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":35,"author":{"gitID":"jonleeyz"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":36,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":37,"author":{"gitID":"jonleeyz"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":38,"author":{"gitID":"jonleeyz"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":46,"author":{"gitID":"jonleeyz"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jonleeyz"},"content":"        // receiving new results"},{"lineNumber":49,"author":{"gitID":"jonleeyz"},"content":"        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"},{"lineNumber":50,"author":{"gitID":"jonleeyz"},"content":"        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"},{"lineNumber":51,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":53,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"jonleeyz"},"content":"     * Posts the {@code event} to the {@code EventsCentre}, then verifies that \u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"jonleeyz"},"content":"     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"jonleeyz"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"},{"lineNumber":57,"author":{"gitID":"jonleeyz"},"content":"     *      - {@code errorStyleOfResultDisplay} otherwise."},{"lineNumber":58,"author":{"gitID":"jonleeyz"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jonleeyz"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":60,"author":{"gitID":"jonleeyz"},"content":"        postNow(event);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":62,"author":{"gitID":"jonleeyz"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful()"},{"lineNumber":63,"author":{"gitID":"jonleeyz"},"content":"                ? defaultStyleOfResultDisplay"},{"lineNumber":64,"author":{"gitID":"jonleeyz"},"content":"                : errorStyleOfResultDisplay;"},{"lineNumber":65,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":66,"author":{"gitID":"jonleeyz"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":67,"author":{"gitID":"jonleeyz"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":35,"-":34}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":34,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":43,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"melvintzw"},"content":"        /* Case: find phone number of person in address book -\u003e 1 persons found */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 3 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"melvintzw"},"content":"        /* Case: find email of person in address book -\u003e 1 persons found */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"melvintzw"},"content":"        /* Case: find tags of person in address book -\u003e 6 persons found */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":178,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":182,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":201,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":2,"melvintzw":8,"-":194}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jonleeyz"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonleeyz"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"jonleeyz"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"jonleeyz"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"jonleeyz"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":33,"author":{"gitID":"jonleeyz"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":44,"author":{"gitID":"jonleeyz"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":47,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonleeyz"},"content":"     * Returns the colour style for {@code tagName}\u0027s label. The tag colour is determined by looking up the colour in"},{"lineNumber":49,"author":{"gitID":"jonleeyz"},"content":"     * {@code PersonCard#TAG_COLOUR_STYLES}, using an index generated by {@code hashcode()} of the tag\u0027s content."},{"lineNumber":50,"author":{"gitID":"jonleeyz"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"jonleeyz"},"content":"     * @see PersonCard#getTagColourStyleFor(String)"},{"lineNumber":52,"author":{"gitID":"jonleeyz"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jonleeyz"},"content":"    private static String getTagColourStyleFor(String tagName) {"},{"lineNumber":54,"author":{"gitID":"jonleeyz"},"content":"        switch (tagName) {"},{"lineNumber":55,"author":{"gitID":"jonleeyz"},"content":"        case \"classmates\":"},{"lineNumber":56,"author":{"gitID":"jonleeyz"},"content":"        case \"owesMoney\":"},{"lineNumber":57,"author":{"gitID":"jonleeyz"},"content":"            return \"teal\";"},{"lineNumber":58,"author":{"gitID":"jonleeyz"},"content":"        case \"colleagues\":"},{"lineNumber":59,"author":{"gitID":"jonleeyz"},"content":"        case \"neighbours\":"},{"lineNumber":60,"author":{"gitID":"jonleeyz"},"content":"            return \"yellow\";"},{"lineNumber":61,"author":{"gitID":"jonleeyz"},"content":"        case \"family\":"},{"lineNumber":62,"author":{"gitID":"jonleeyz"},"content":"        case \"friend\":"},{"lineNumber":63,"author":{"gitID":"jonleeyz"},"content":"            return \"orange\";"},{"lineNumber":64,"author":{"gitID":"jonleeyz"},"content":"        case \"friends\":"},{"lineNumber":65,"author":{"gitID":"jonleeyz"},"content":"            return \"brown\";"},{"lineNumber":66,"author":{"gitID":"jonleeyz"},"content":"        case \"husband\":"},{"lineNumber":67,"author":{"gitID":"jonleeyz"},"content":"            return \"grey\";"},{"lineNumber":68,"author":{"gitID":"jonleeyz"},"content":"        default:"},{"lineNumber":69,"author":{"gitID":"jonleeyz"},"content":"            fail(tagName + \"does not have a colour assigned.\");"},{"lineNumber":70,"author":{"gitID":"jonleeyz"},"content":"            return \"\";"},{"lineNumber":71,"author":{"gitID":"jonleeyz"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":74,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jonleeyz"},"content":"     * Asserts that the tags in {@code actualCard} matches all tags in {@code expectedPerson} with correct colours."},{"lineNumber":76,"author":{"gitID":"jonleeyz"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jonleeyz"},"content":"    public static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":78,"author":{"gitID":"jonleeyz"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags()"},{"lineNumber":79,"author":{"gitID":"jonleeyz"},"content":"                .stream()"},{"lineNumber":80,"author":{"gitID":"jonleeyz"},"content":"                .map(tag -\u003e tag.tagName)"},{"lineNumber":81,"author":{"gitID":"jonleeyz"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"jonleeyz"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":83,"author":{"gitID":"jonleeyz"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColourStyleFor(tag)),  // why two args in asList?"},{"lineNumber":84,"author":{"gitID":"jonleeyz"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":48,"-":71}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jonleeyz"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jonleeyz"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"jonleeyz"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"jonleeyz"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"jonleeyz"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jonleeyz"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"jonleeyz"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"jonleeyz"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":144,"author":{"gitID":"jonleeyz"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"},{"lineNumber":145,"author":{"gitID":"jonleeyz"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":146,"author":{"gitID":"jonleeyz"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":147,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"jonleeyz"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":160,"author":{"gitID":"jonleeyz"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"},{"lineNumber":161,"author":{"gitID":"jonleeyz"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":162,"author":{"gitID":"jonleeyz"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":163,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":18,"-":157}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":79,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jonleeyz"},"content":"        // Test fails when prefix is edited to \"t: \" from \"t:\"."},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":254,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"jonleeyz"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":3,"-":280}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"zhangriqi"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":55,"author":{"gitID":"zhangriqi"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":67,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":68,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"zhangriqi"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":90,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":94,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":98,"author":{"gitID":"zhangriqi"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":99,"author":{"gitID":"-"},"content":"            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":121,"author":{"gitID":"zhangriqi"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":146,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":148,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":158,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":159,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":160,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":165,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":172,"author":{"gitID":"zhangriqi"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":184,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"zhangriqi"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"zhangriqi"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":196,"author":{"gitID":"zhangriqi"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":41,"-":172}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.TagsContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"melvintzw"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":26,"author":{"gitID":"melvintzw"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"    public void parse_invalidSpecifier_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"        //\"-e\""},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":"        assertParseFailure(parser, \"-z Alice Bob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":45,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":46,"author":{"gitID":"melvintzw"},"content":"        //-all specifier"},{"lineNumber":47,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":48,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-all Alice Bob\", expectedFindCommand);"},{"lineNumber":49,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":50,"author":{"gitID":"melvintzw"},"content":"        //-n specifier"},{"lineNumber":51,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":52,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-n Alice Bob\", expectedFindCommand);"},{"lineNumber":53,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":54,"author":{"gitID":"melvintzw"},"content":"        //-p specifier"},{"lineNumber":55,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":56,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-p Alice Bob\", expectedFindCommand);"},{"lineNumber":57,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":58,"author":{"gitID":"melvintzw"},"content":"        //-a specifier"},{"lineNumber":59,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":60,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-a Alice Bob\", expectedFindCommand);"},{"lineNumber":61,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":62,"author":{"gitID":"melvintzw"},"content":"        //-t specifier"},{"lineNumber":63,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":64,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-t Alice Bob\", expectedFindCommand);"},{"lineNumber":65,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":66,"author":{"gitID":"melvintzw"},"content":"        //-e specifier"},{"lineNumber":67,"author":{"gitID":"melvintzw"},"content":"        expectedFindCommand \u003d new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"alice@example.com\","},{"lineNumber":68,"author":{"gitID":"melvintzw"},"content":"                \"bob@example.com\")));"},{"lineNumber":69,"author":{"gitID":"melvintzw"},"content":"        assertParseSuccess(parser, \"-e alice@example.com bob@example.com\", expectedFindCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"melvintzw":39,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"melvintzw"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"melvintzw"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        PersonContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        PersonContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":67,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":68,"author":{"gitID":"melvintzw"},"content":"        String arguments \u003d \" \";"},{"lineNumber":69,"author":{"gitID":"melvintzw"},"content":"        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":70,"author":{"gitID":"melvintzw"},"content":"        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":72,"author":{"gitID":"melvintzw"},"content":"        FindCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":78,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":79,"author":{"gitID":"melvintzw"},"content":"        //test FindCommand object that uses the PersonContainsKeyWordsPredicate"},{"lineNumber":80,"author":{"gitID":"melvintzw"},"content":"        String arguments \u003d \"carl daniel elle\";"},{"lineNumber":81,"author":{"gitID":"melvintzw"},"content":"        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":82,"author":{"gitID":"melvintzw"},"content":"        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":84,"author":{"gitID":"melvintzw"},"content":"        FindCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"},{"lineNumber":85,"author":{"gitID":"melvintzw"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"},{"lineNumber":86,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":87,"author":{"gitID":"melvintzw"},"content":"        //test FindCommand object that uses the NameContainsKeyWordsPredicate"},{"lineNumber":88,"author":{"gitID":"melvintzw"},"content":"        arguments \u003d \"carl daniel elle\";"},{"lineNumber":89,"author":{"gitID":"melvintzw"},"content":"        splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"melvintzw"},"content":"        list \u003d Arrays.asList(splitArguments);"},{"lineNumber":91,"author":{"gitID":"melvintzw"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":92,"author":{"gitID":"melvintzw"},"content":"        command \u003d prepareCommand(new NameContainsKeywordsPredicate(list));"},{"lineNumber":93,"author":{"gitID":"melvintzw"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"},{"lineNumber":94,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":95,"author":{"gitID":"melvintzw"},"content":"        //test Command object that uses the PhoneContainsKeyWordsPredicate"},{"lineNumber":96,"author":{"gitID":"melvintzw"},"content":"        arguments \u003d \"95352563 87652533 9482224\";"},{"lineNumber":97,"author":{"gitID":"melvintzw"},"content":"        splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":98,"author":{"gitID":"melvintzw"},"content":"        list \u003d Arrays.asList(splitArguments);"},{"lineNumber":99,"author":{"gitID":"melvintzw"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":100,"author":{"gitID":"melvintzw"},"content":"        command \u003d prepareCommand(new PhoneContainsKeywordsPredicate(list));"},{"lineNumber":101,"author":{"gitID":"melvintzw"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"},{"lineNumber":102,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":103,"author":{"gitID":"melvintzw"},"content":"        //test FindCommand object that uses the EmailContainsKeyWordsPredicate"},{"lineNumber":104,"author":{"gitID":"melvintzw"},"content":"        arguments \u003d \"heinz@example.com cornelia@example.com werner@example.com\";"},{"lineNumber":105,"author":{"gitID":"melvintzw"},"content":"        splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":106,"author":{"gitID":"melvintzw"},"content":"        list \u003d Arrays.asList(splitArguments);"},{"lineNumber":107,"author":{"gitID":"melvintzw"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":108,"author":{"gitID":"melvintzw"},"content":"        command \u003d prepareCommand(new EmailContainsKeywordsPredicate(list));"},{"lineNumber":109,"author":{"gitID":"melvintzw"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"},{"lineNumber":110,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":111,"author":{"gitID":"melvintzw"},"content":"        //test FindCommand object that uses the AddressContainsKeyWordsPredicate"},{"lineNumber":112,"author":{"gitID":"melvintzw"},"content":"        arguments \u003d \"wall 10th michegan\";"},{"lineNumber":113,"author":{"gitID":"melvintzw"},"content":"        splitArguments \u003d arguments.split(\"\\\\s+\");"},{"lineNumber":114,"author":{"gitID":"melvintzw"},"content":"        list \u003d Arrays.asList(splitArguments);"},{"lineNumber":115,"author":{"gitID":"melvintzw"},"content":"        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":116,"author":{"gitID":"melvintzw"},"content":"        command \u003d prepareCommand(new AddressContainsKeywordsPredicate(list));"},{"lineNumber":117,"author":{"gitID":"melvintzw"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"melvintzw"},"content":"    private FindCommand prepareCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":125,"author":{"gitID":"melvintzw"},"content":"                new FindCommand(predicate);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"melvintzw":52,"-":92}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonleeyz"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":25,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jonleeyz"},"content":"     * Returns the list of style clases in the result display."},{"lineNumber":27,"author":{"gitID":"jonleeyz"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jonleeyz"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"jonleeyz"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":9,"-":22}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":72,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jonleeyz"},"content":"     * Gets the style class for a given tag"},{"lineNumber":74,"author":{"gitID":"jonleeyz"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"jonleeyz"},"content":"     * IllegalArgumentException is thrown if tag cannot be found"},{"lineNumber":76,"author":{"gitID":"jonleeyz"},"content":"     * Every Label with the same tag content should have the same style class"},{"lineNumber":77,"author":{"gitID":"jonleeyz"},"content":"    **/"},{"lineNumber":78,"author":{"gitID":"jonleeyz"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":81,"author":{"gitID":"jonleeyz"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":82,"author":{"gitID":"jonleeyz"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":83,"author":{"gitID":"jonleeyz"},"content":"                .findFirst()"},{"lineNumber":84,"author":{"gitID":"jonleeyz"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag\"));"},{"lineNumber":85,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":13,"-":73}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"jonleeyz"},"content":"            if (commandTextField.getText().equals(\"\")) {"},{"lineNumber":105,"author":{"gitID":"jonleeyz"},"content":"                return;"},{"lineNumber":106,"author":{"gitID":"jonleeyz"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"jonleeyz"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":120,"author":{"gitID":"jonleeyz"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), false));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":5,"-":149}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"jonleeyz"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jonleeyz"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"jonleeyz"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":41,"author":{"gitID":"jonleeyz"},"content":"            displayed.setValue(event.message);"},{"lineNumber":42,"author":{"gitID":"jonleeyz"},"content":"            if (event.isSuccessful()) {"},{"lineNumber":43,"author":{"gitID":"jonleeyz"},"content":"                setStyleToIndicateCommandSuccess();"},{"lineNumber":44,"author":{"gitID":"jonleeyz"},"content":"            } else {"},{"lineNumber":45,"author":{"gitID":"jonleeyz"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":46,"author":{"gitID":"jonleeyz"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"jonleeyz"},"content":"        });"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jonleeyz"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":51,"author":{"gitID":"jonleeyz"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":52,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":54,"author":{"gitID":"jonleeyz"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":55,"author":{"gitID":"jonleeyz"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":56,"author":{"gitID":"jonleeyz"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":57,"author":{"gitID":"jonleeyz"},"content":"            return;"},{"lineNumber":58,"author":{"gitID":"jonleeyz"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jonleeyz"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":60,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":21,"-":40}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"jonleeyz"},"content":"    private static final String[] TAG_COLOUR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"jonleeyz"},"content":"        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":52,"author":{"gitID":"jonleeyz"},"content":"        initTags(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jonleeyz"},"content":"    // given a tagName, returns the String representation of a colour style"},{"lineNumber":56,"author":{"gitID":"jonleeyz"},"content":"    private String getTagColourStyleFor(String tagName) {"},{"lineNumber":57,"author":{"gitID":"jonleeyz"},"content":"        // hash code of tag name used to generate random colour"},{"lineNumber":58,"author":{"gitID":"jonleeyz"},"content":"        // colour of tags changes between different runs of the application"},{"lineNumber":59,"author":{"gitID":"jonleeyz"},"content":"        // might want to tweak this behaviour in the LoanShark Tycoon context"},{"lineNumber":60,"author":{"gitID":"jonleeyz"},"content":"        return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"},{"lineNumber":61,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":63,"author":{"gitID":"jonleeyz"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"jonleeyz"},"content":"     * Creates the Labels fot a given {@code Person}."},{"lineNumber":65,"author":{"gitID":"jonleeyz"},"content":"     *  1. Creates a new Label object for each tag, initialised with the respective tag."},{"lineNumber":66,"author":{"gitID":"jonleeyz"},"content":"     *  2. Adds a style colour attribute to each Label based on its tag."},{"lineNumber":67,"author":{"gitID":"jonleeyz"},"content":"     *  3. Adds each properly initialised Label to the containing FlowPane object."},{"lineNumber":68,"author":{"gitID":"jonleeyz"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"jonleeyz"},"content":"    private void initTags(Person person) {"},{"lineNumber":70,"author":{"gitID":"jonleeyz"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"jonleeyz"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"jonleeyz"},"content":"            tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));    // getStyleClass(): Node class method"},{"lineNumber":73,"author":{"gitID":"jonleeyz"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"jonleeyz"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":25,"-":69}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"zhangriqi"},"content":"    private static BrowserPanel browserPanel \u003d new BrowserPanel();"},{"lineNumber":31,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":96,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":97,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":107,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":199,"author":{"gitID":"zhangriqi"},"content":"    public static void loadUrl(String url) {"},{"lineNumber":200,"author":{"gitID":"zhangriqi"},"content":"        browserPanel.loadPage(url);"},{"lineNumber":201,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":6,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"zhangriqi"},"content":"import seedu.address.commons.events.ui.LocateRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"zhangriqi"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"zhangriqi"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and display the location on Google Map."},{"lineNumber":67,"author":{"gitID":"zhangriqi"},"content":"     * @param event"},{"lineNumber":68,"author":{"gitID":"zhangriqi"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"zhangriqi"},"content":"    private void locate(int index) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Platform.runLater(()-\u003e {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":72,"author":{"gitID":"zhangriqi"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"zhangriqi"},"content":"    @Subscribe"},{"lineNumber":81,"author":{"gitID":"zhangriqi"},"content":"    private void handleLocateRequestEvent(LocateRequestEvent event) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":83,"author":{"gitID":"zhangriqi"},"content":"        locate(event.targetInex);"},{"lineNumber":84,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":12,"-":91}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"jonleeyz"},"content":"    private final boolean isSuccessful;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jonleeyz"},"content":"    public NewResultAvailableEvent(String message, boolean isSuccessful) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"jonleeyz"},"content":"        this.isSuccessful \u003d isSuccessful;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jonleeyz"},"content":"    public boolean isSuccessful() {"},{"lineNumber":19,"author":{"gitID":"jonleeyz"},"content":"        return isSuccessful;"},{"lineNumber":20,"author":{"gitID":"jonleeyz"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"jonleeyz"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":7,"-":20}},{"path":"src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":"        PersonContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"        PersonContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"melvintzw"},"content":"                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"melvintzw"},"content":"    public void test_personContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"melvintzw"},"content":"        PersonContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"melvintzw"},"content":"                new PersonContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Bob Street\").build()));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Carol Street\").build()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"melvintzw"},"content":"    public void test_personDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"melvintzw":10,"-":74}},{"path":"src/main/java/seedu/address/commons/events/ui/LocateRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"zhangriqi"},"content":" * Indicates a request to locate the list of persons"},{"lineNumber":8,"author":{"gitID":"zhangriqi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"zhangriqi"},"content":"public class LocateRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":11,"author":{"gitID":"zhangriqi"},"content":"    public final int targetInex;"},{"lineNumber":12,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":13,"author":{"gitID":"zhangriqi"},"content":"    public LocateRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"zhangriqi"},"content":"        this.targetInex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"zhangriqi"},"content":"}"}],"authorContributionMap":{"zhangriqi":10,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"jonleeyz"},"content":"        // problem is here: works with a/ but not a:"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":1,"-":65}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"zhangriqi"},"content":"    T parse(String userInput) throws ParseException, ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"zhangriqi"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitID":"zhangriqi"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"zhangriqi"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"zhangriqi"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"zhangriqi"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"zhangriqi"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"zhangriqi"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"zhangriqi"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"zhangriqi"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"zhangriqi"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"zhangriqi"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"zhangriqi"},"content":"        case LocateCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"zhangriqi"},"content":"        case LocateCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"zhangriqi"},"content":"            return new LocateCommandParser().parse(arguments);"},{"lineNumber":101,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":15,"-":92}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"jonleeyz"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n:\");"},{"lineNumber":10,"author":{"gitID":"jonleeyz"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p:\");"},{"lineNumber":11,"author":{"gitID":"jonleeyz"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e:\");"},{"lineNumber":12,"author":{"gitID":"jonleeyz"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a:\");"},{"lineNumber":13,"author":{"gitID":"jonleeyz"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t:\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonleeyz":5,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.AddressContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.EmailContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.PhoneContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.TagsContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":34,"author":{"gitID":"melvintzw"},"content":"        String[] keywords;"},{"lineNumber":35,"author":{"gitID":"melvintzw"},"content":"        //check arguments[0] for specifier"},{"lineNumber":36,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":37,"author":{"gitID":"melvintzw"},"content":"        if (arguments[0].matches(\"\\\\p{Alnum}+.++\")) {"},{"lineNumber":38,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"},{"lineNumber":39,"author":{"gitID":"melvintzw"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":41,"author":{"gitID":"melvintzw"},"content":"        switch (arguments[0]) {"},{"lineNumber":42,"author":{"gitID":"melvintzw"},"content":"        case \"-all\":"},{"lineNumber":43,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":44,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":45,"author":{"gitID":"melvintzw"},"content":"        case \"-n\":"},{"lineNumber":46,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":47,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":48,"author":{"gitID":"melvintzw"},"content":"        case \"-p\":"},{"lineNumber":49,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":50,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":51,"author":{"gitID":"melvintzw"},"content":"        case \"-e\":"},{"lineNumber":52,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":53,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":54,"author":{"gitID":"melvintzw"},"content":"        case \"-a\":"},{"lineNumber":55,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":56,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":57,"author":{"gitID":"melvintzw"},"content":"        case \"-t\":"},{"lineNumber":58,"author":{"gitID":"melvintzw"},"content":"            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"},{"lineNumber":59,"author":{"gitID":"melvintzw"},"content":"            return new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":60,"author":{"gitID":"melvintzw"},"content":"        default:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"melvintzw"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"melvintzw":35,"-":31}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/LocateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"zhangriqi"},"content":"import seedu.address.logic.commands.LocateCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"zhangriqi"},"content":" * Parse input arguments and create a new LocateCommand object"},{"lineNumber":12,"author":{"gitID":"zhangriqi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"zhangriqi"},"content":"public class LocateCommandParser implements Parser\u003cLocateCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"zhangriqi"},"content":"    public LocateCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"zhangriqi"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"zhangriqi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"zhangriqi"},"content":"            return new LocateCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"zhangriqi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"zhangriqi"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":30,"author":{"gitID":"zhangriqi"},"content":"}"},{"lineNumber":31,"author":{"gitID":"zhangriqi"},"content":""}],"authorContributionMap":{"zhangriqi":14,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"melvintzw"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":5,"author":{"gitID":"melvintzw"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"melvintzw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose fields contain any of \""},{"lineNumber":17,"author":{"gitID":"melvintzw"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"melvintzw"},"content":"            + \"Valid specifiers are -all, -n, -p, -e, -a, -t, for ALL, NAME, PHONE, EMAIL, ADDRESS and TAGS\""},{"lineNumber":19,"author":{"gitID":"melvintzw"},"content":"            + \" respectively \\n\""},{"lineNumber":20,"author":{"gitID":"melvintzw"},"content":"            + \"Parameters: [SPECIFIER] KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":"            + \"Example: \" + COMMAND_WORD + \" -n alice bob charlie\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"melvintzw"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":26,"author":{"gitID":"melvintzw"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate));"},{"lineNumber":40,"author":{"gitID":"melvintzw"},"content":"        // state check"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"melvintzw":15,"-":26}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":208,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":209,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":210,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":236}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zhangriqi":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/LocateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"zhangriqi"},"content":"import seedu.address.commons.events.ui.LocateRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"zhangriqi"},"content":"import seedu.address.ui.MainWindow;"},{"lineNumber":12,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":13,"author":{"gitID":"zhangriqi"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"zhangriqi"},"content":" * Display the place identified using its las displayed index from the address book"},{"lineNumber":15,"author":{"gitID":"zhangriqi"},"content":" */"},{"lineNumber":16,"author":{"gitID":"zhangriqi"},"content":"public class LocateCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_WORD \u003d \"locate\";"},{"lineNumber":18,"author":{"gitID":"zhangriqi"},"content":"    public static final String COMMAND_ALIAS \u003d \"lo\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"zhangriqi"},"content":"            + \": Display the place on Google Map identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"zhangriqi"},"content":"    public static final String MESSAGE_LOCATE_SUCCESS \u003d \"Locate: %1$s\";"},{"lineNumber":25,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":26,"author":{"gitID":"zhangriqi"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":28,"author":{"gitID":"zhangriqi"},"content":"    public LocateCommand (Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"zhangriqi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":41,"author":{"gitID":"zhangriqi"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":43,"author":{"gitID":"zhangriqi"},"content":"        Person location \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":45,"author":{"gitID":"zhangriqi"},"content":"        // Open Google Map on BrowserPanel"},{"lineNumber":46,"author":{"gitID":"zhangriqi"},"content":"        MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""},{"lineNumber":47,"author":{"gitID":"zhangriqi"},"content":"                + location.getAddress().toString());"},{"lineNumber":48,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":49,"author":{"gitID":"zhangriqi"},"content":"        EventsCenter.getInstance().post(new LocateRequestEvent(targetIndex));"},{"lineNumber":50,"author":{"gitID":"zhangriqi"},"content":"        return new CommandResult(String.format(MESSAGE_LOCATE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":51,"author":{"gitID":"zhangriqi"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"zhangriqi"},"content":"                || (other instanceof LocateCommand // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"zhangriqi"},"content":"                \u0026\u0026 this.targetIndex.equals(((LocateCommand) other).targetIndex)); //start check"},{"lineNumber":59,"author":{"gitID":"zhangriqi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"zhangriqi"},"content":"}"}],"authorContributionMap":{"zhangriqi":33,"-":27}},{"path":"src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"melvintzw"},"content":"    //test existence of keywords in person\u0027s full name, address and tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String stringOfTags \u003d getStringOfTags(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"},{"lineNumber":27,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword))"},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"                || keywords.stream()"},{"lineNumber":34,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String getStringOfTags(Person person) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String stringOfTags \u003d \"\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (Tag x : person.getTags()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return stringOfTags.trim();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"melvintzw":8,"-":45}},{"path":"src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"melvintzw"},"content":"public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"melvintzw"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":18,"author":{"gitID":"melvintzw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"melvintzw"},"content":"    //test existence of keywords in person\u0027s address."},{"lineNumber":20,"author":{"gitID":"melvintzw"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"}"}],"authorContributionMap":{"melvintzw":18,"-":15}},{"path":"src/main/java/seedu/address/model/person/TagsContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":15,"author":{"gitID":"melvintzw"},"content":"    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //test existence of keywords in person\u0027s full name and tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String stringOfTags \u003d getStringOfTags(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":26,"author":{"gitID":"melvintzw"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String getStringOfTags(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String stringOfTags \u003d \"\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        for (Tag x : person.getTags()) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return stringOfTags.trim();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"melvintzw"},"content":"                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":43,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":45,"author":{"gitID":"melvintzw"},"content":"}"}],"authorContributionMap":{"melvintzw":10,"-":35}},{"path":"src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"melvintzw"},"content":"public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"melvintzw"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":18,"author":{"gitID":"melvintzw"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"melvintzw"},"content":"    //test existence of keywords in person\u0027s phone."},{"lineNumber":20,"author":{"gitID":"melvintzw"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"}"}],"authorContributionMap":{"melvintzw":18,"-":15}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"melvintzw"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    //test existence of keywords in person\u0027s full name and tags."},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"}"}],"authorContributionMap":{"melvintzw":11,"-":22}},{"path":"src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"melvintzw"},"content":"public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"melvintzw"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":14,"author":{"gitID":"melvintzw"},"content":"    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    //test existence of keywords in person\u0027s full name and tags."},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"melvintzw"},"content":"        //TODO: write helper method here or in Email class to extract values before \u0027@\u0027 symbol in email address."},{"lineNumber":22,"author":{"gitID":"melvintzw"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"melvintzw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"melvintzw"},"content":"                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"melvintzw"},"content":"                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"melvintzw"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"melvintzw"},"content":""},{"lineNumber":33,"author":{"gitID":"melvintzw"},"content":"}"}],"authorContributionMap":{"melvintzw":12,"-":21}}]
