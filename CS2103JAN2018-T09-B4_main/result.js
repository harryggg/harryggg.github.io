var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d _NUSCouples_ - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team T09-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"Welcome to the User Guide for _NUSCouples_!"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"_NUSCouples_ is a desktop app *specially made for you*, couples from National University of Singapore (NUS),"},{"lineNumber":21,"author":{"gitID":"-"},"content":"to create and remember memories with ease amid our *hectic school term*. Imagine what it would be like to be able"},{"lineNumber":22,"author":{"gitID":"-"},"content":"identify common breaks, schedule meetings and view important dates with your partner, and record your thoughts or"},{"lineNumber":23,"author":{"gitID":"-"},"content":"feelings, *all in the same application* mere keystrokes away. Best of all, *everything* can be controlled from the"},{"lineNumber":24,"author":{"gitID":"-"},"content":"handy Command Line Interface (CLI). Experience the *clarity* that comes with a Graphical User Interface (GUI), with"},{"lineNumber":25,"author":{"gitID":"-"},"content":"none of the *pain* of searching for and remembering where each button is. Interested yet? Jump to \u003c\u003cQuick Start\u003e\u003e to"},{"lineNumber":26,"author":{"gitID":"-"},"content":"get started. Enjoy!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Download the latest `NUSCouples.jar` link:{repoURL}/releases[here]."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for _NUSCouples_."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The app window should appear in a few seconds."},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` :"},{"lineNumber":47,"author":{"gitID":"-"},"content":" adds a partner named `John Doe` to _NUSCouples_."},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Some commands have an alias, which you can also use to execute the command e.g. to add your partner to"},{"lineNumber":61,"author":{"gitID":"-"},"content":"_NUSCouples_, you can type either `add n/John Doe` or `a n/John Doe`."},{"lineNumber":62,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a"},{"lineNumber":63,"author":{"gitID":"-"},"content":" parameter which can be used as `add n/John Doe`."},{"lineNumber":64,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":65,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can"},{"lineNumber":66,"author":{"gitID":"-"},"content":"be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":67,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"`p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d General Features"},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":75,"author":{"gitID":"-"},"content":"Alias: `hlp`"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding your partner: `add`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Adds your partner to _NUSCouples_. +"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL [t/TAG]...` +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Alias: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL [t/TAG]...`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"****"},{"lineNumber":84,"author":{"gitID":"-"},"content":"* Your partner can have any number of tags (including 0)."},{"lineNumber":85,"author":{"gitID":"-"},"content":"* The timetable url provided has to be a valid https://nusmods.com[NUSMods] short URL."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* You can only have one partner in _NUSCouples_ at any one time."},{"lineNumber":87,"author":{"gitID":"-"},"content":"****"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 tt/http://modsn.us/IO4n5`"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 tt/http://modsn.us/wNuIW t/criminal`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing your partner : `edit`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Edits your existing partner in _NUSCouples_. +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Format: `edit [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL] [t/TAG]...` +"},{"lineNumber":98,"author":{"gitID":"-"},"content":"Alias: `ed [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL] [t/TAG]...`"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"****"},{"lineNumber":101,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of your partner will be removed i.e adding of tags is not cumulative."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* You can remove all tags of your partner by typing `t/` without specifying any tags after it."},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `edit p/91234567 e/johndoe@example.com` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Edits the phone number and email address of your partner to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `edit n/Betsy Crower t/` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"Edits the name of your partner to be `Betsy Crower` and clears all existing tags."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting your partner : `delete`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Deletes your partner from _NUSCouples_. +"},{"lineNumber":118,"author":{"gitID":"-"},"content":"Format: `delete` +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Alias: `d`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"****"},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Deletes your partner."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Format: `history` +"},{"lineNumber":130,"author":{"gitID":"-"},"content":"Alias: `hist`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":134,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":138,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"Restores _NUSCouples_ to the state before the previous \"undoable command\" was executed. +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"Format: `undo` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Alias: `u`"},{"lineNumber":142,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify _NUSCouples_ content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"* `select` +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"`help` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"* `edit n/John Doe` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"`delete` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":161,"author":{"gitID":"-"},"content":"`undo` (reverses the `edit n/John Doe` command) +"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"Format: `redo` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Alias: `r`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":170,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":172,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete` command) +"},{"lineNumber":174,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":177,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"* `edit n/John Doe` +"},{"lineNumber":180,"author":{"gitID":"-"},"content":"`delete` +"},{"lineNumber":181,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete` command) +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"`undo` (reverses the `edit n/John Doe` command) +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"`redo` (reapplies the `edit n/John Doe` command) +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete` command) +"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"NUSCouples data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"Format: `exit` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Alias: `ex` +"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding your partner\u0027s timetable"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cAdding your partner: `add`\u003e\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing your partner\u0027s timetable : `tview`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Shows the current saved timetable of your partner. +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Format: `tview` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Alias: `tv`"},{"lineNumber":209,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Comparing timetable : `tcompare`"},{"lineNumber":211,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"Displays the common breaks shared by the given timetable and your partner\u0027s timetable in a timetable format. +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Format: `tcompare tt/TIMETABLE_URL` +"},{"lineNumber":214,"author":{"gitID":"-"},"content":"Alias: `tc tt/TIMETABLE_URL`"},{"lineNumber":215,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"****"},{"lineNumber":217,"author":{"gitID":"-"},"content":"* The timetable url provided has to be a valid https://nusmods.com[NUSMods] short URL."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* Your partner must exist in _NUSCouples_ before this command can be executed."},{"lineNumber":219,"author":{"gitID":"-"},"content":"****"},{"lineNumber":220,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":222,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* `tcompare tt/http://modsn.us/IO4n5`"},{"lineNumber":224,"author":{"gitID":"-"},"content":"* `tc tt/http://modsn.us/wNuIW` +"},{"lineNumber":225,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":227,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar"},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing current calendar : `cview`"},{"lineNumber":230,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"View Google calendar. +"},{"lineNumber":232,"author":{"gitID":"traceurgan"},"content":"Format: `cview` +"},{"lineNumber":233,"author":{"gitID":"traceurgan"},"content":"Alias: `cv`"},{"lineNumber":234,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding new event to Google calendar : `cadd`"},{"lineNumber":236,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"Adds new event to Google calendar. +"},{"lineNumber":238,"author":{"gitID":"traceurgan"},"content":"Format: `cadd` +"},{"lineNumber":239,"author":{"gitID":"traceurgan"},"content":"Alias: `ca`"},{"lineNumber":240,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting event from Google calendar: `cdelete`"},{"lineNumber":242,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":243,"author":{"gitID":"traceurgan"},"content":"Delete specified event from Google calendar. +"},{"lineNumber":244,"author":{"gitID":"traceurgan"},"content":"Format: `cdelete` +"},{"lineNumber":245,"author":{"gitID":"traceurgan"},"content":"Alias: `cd`"},{"lineNumber":246,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing event on Google calendar : `cedit`"},{"lineNumber":248,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"Edit event on Google calendar. +"},{"lineNumber":250,"author":{"gitID":"traceurgan"},"content":"Format: `cedit` +"},{"lineNumber":251,"author":{"gitID":"traceurgan"},"content":"Alias: `ce`"},{"lineNumber":252,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":254,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Journal"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing all journal entries : `jview`"},{"lineNumber":257,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":258,"author":{"gitID":"traceurgan"},"content":"View all journal entries. +"},{"lineNumber":259,"author":{"gitID":"traceurgan"},"content":"Format: `jview` +"},{"lineNumber":260,"author":{"gitID":"traceurgan"},"content":"Alias: `jv`"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Creating a new journal entry : `jnew`"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"Creates a new window that allows the user to input and save journal entries. The journal entry is identified by"},{"lineNumber":265,"author":{"gitID":"-"},"content":"the date it was created in the format `yyyymmdd`. If an entry with that date already exists, it will open"},{"lineNumber":266,"author":{"gitID":"-"},"content":"that entry in the new window. Saving not required as the journal entry will be automatically saved when the"},{"lineNumber":267,"author":{"gitID":"-"},"content":"journal window is closed. +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"Format: `jnew` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Alias: `jn`"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a journal entry : `jdelete`"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Deletes a journal entry in the specified index. +"},{"lineNumber":274,"author":{"gitID":"traceurgan"},"content":"Format: `jdelete` +"},{"lineNumber":275,"author":{"gitID":"traceurgan"},"content":"Alias: `jd`"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Location"},{"lineNumber":280,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding building location : `location`"},{"lineNumber":281,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":282,"author":{"gitID":"traceurgan"},"content":"Shows the location (by building) of the entered classroom name. +"},{"lineNumber":283,"author":{"gitID":"traceurgan"},"content":"Format: `location` +"},{"lineNumber":284,"author":{"gitID":"traceurgan"},"content":"Alias: `loc`"},{"lineNumber":285,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":287,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d `Coming in v2.0`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":293,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Archiving journal entries `[coming in v2.0]`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"traceurgan"},"content":"_{explain how the user can export old journal entries to another storage location in their computer}_"},{"lineNumber":298,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Send Google Maps location to phone `[coming in v2.0]`"},{"lineNumber":300,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":301,"author":{"gitID":"traceurgan"},"content":"_{explain how the user can use their phones to navigate to a location in NUS by sending the location to the user\u0027s phone from the Google Maps API}_"},{"lineNumber":302,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Filtering journal entries by date `[coming in v2.0]`"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"Filters journal entries by the specified interval. +"},{"lineNumber":306,"author":{"gitID":"traceurgan"},"content":"Format: `jfilter` +"},{"lineNumber":307,"author":{"gitID":"traceurgan"},"content":"Alias: `jf`"},{"lineNumber":308,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":314,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous NUSCouples folder."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"10%,\u003c20%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":322,"author":{"gitID":"-"},"content":"|Command |Description |Format| Example"},{"lineNumber":323,"author":{"gitID":"-"},"content":"|add, a |Add your partner |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS tt/TIMETABLE_URL [t/TAG]...` |"},{"lineNumber":324,"author":{"gitID":"-"},"content":"`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 tt/http://modsn.us/IO4n5`"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"|edit, ed |Edit your partner | `edit [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [tt/TIMETABLE_URL] [t/TAG]…` |"},{"lineNumber":327,"author":{"gitID":"-"},"content":"`edit n/John Doe e/johnd@example.com`"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"|delete, d |Delete your partner |`delete` |"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"|select, s |Select your partner |`select` |"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"|history, hist |View command history |`history` |"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"|undo, u |Undo the previous undoable command |`undo` |"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"|redo, r |Reverses the most recent undo command |`redo` |"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"|tview, tv |View your partner\u0027s timetable |`tview` |"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"|jview, jv |View your journal |`jview` |"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"|jnew, jn |Create a new journal entry |`jnew` |"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"|jdelete, jd |Delete a journal entry |`jdelete` |"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"|cview, cv |Viewing your current calendar |`cview` |"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"|cadd, ca |Adding a new event to your current calendar |`cadd` |"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"|cdelete, cd |Deleting an event from your current calendar |`cdelete` |"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"|cedit, ce |Editing an event from your current calendar |`cedit` |"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"|location, loc |Finding building location |`location` |"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"|exit, ex |Exits _NUSCouples_ |`exit` |"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e  +"},{"lineNumber":362,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"traceurgan":50,"-":312}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d NUSCouples - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B4/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team T09-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Welcome to the developer guide for _NUSCouples_!"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"_NUSCouples_ is a command-line desktop application targeted at couples studying at the National University of Singapore (NUS)."},{"lineNumber":20,"author":{"gitID":"-"},"content":"It aims to help these couples create and remember new memories during their time in NUS."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"This developer guide contains information that can help you to get started as a contributor to _NUSCouples_, as well as more about"},{"lineNumber":23,"author":{"gitID":"-"},"content":"the software architecture and feature implementation of _NUSCouples_."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":60,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":110,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":115,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":142,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":172,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":183,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":184,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":193,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":200,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":203,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":204,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":205,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":219,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":237,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":244,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":271,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"----"},{"lineNumber":273,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":282,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":284,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":"}"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"},{"lineNumber":299,"author":{"gitID":"-"},"content":"----"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":330,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":360,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":370,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":371,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":373,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":381,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":382,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":384,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":403,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":409,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":410,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":411,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Calendar Viewer Feature"},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":425,"author":{"gitID":"-"},"content":"The Calendar Viewer mechanism is facilitated by `Google Calendar API` and reside in the `ModelManager`."},{"lineNumber":426,"author":{"gitID":"-"},"content":"It supports viewing/add/editing/deleting capability that modifies the state of _NUSCouples_."},{"lineNumber":427,"author":{"gitID":"-"},"content":"Firstly, it uses OAuth 2.0 endpoints to allow users to share specific data with the application while keeping their usernames, passwords, and other information private. For example, an application can use OAuth 2.0 to obtain permission from users to store files in their Google Drives which sync to the calendar."},{"lineNumber":428,"author":{"gitID":"-"},"content":"This implementation requires the user to connect to the internet because _NUSCouples_ needs to open the system browser and supply a local redirect URI to handle responses from Google\u0027s authorization server."},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"*Basic steps*"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"All applications follow a basic pattern when accessing a Google API using OAuth 2.0. At a high level, this are the four steps:"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"1. Obtain OAuth 2.0 credentials from the Google API Console."},{"lineNumber":435,"author":{"gitID":"-"},"content":"Visit the Google API Console to obtain OAuth 2.0 credentials such as a client ID and client secret that are known to both Google and your application. The set of values varies based on what type of application you are building. For example, a JavaScript application does not require a secret, but a web server application does."},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"2. Obtain an access token from the Google Authorization Server."},{"lineNumber":438,"author":{"gitID":"-"},"content":"Before your application can access private data using a Google API, it must obtain an access token that grants access to that API. A single access token can grant varying degrees of access to multiple APIs. A variable parameter called scope controls the set of resources and operations that an access token permits. During the access-token request, your application sends one or more values in the scope parameter."},{"lineNumber":439,"author":{"gitID":"-"},"content":"There are several ways to make this request, and they vary based on the type of application you are building. For example, a JavaScript application might request an access token using a browser redirect to Google, while an application installed on a device that has no browser uses web service requests."},{"lineNumber":440,"author":{"gitID":"-"},"content":"Some requests require an authentication step where the user logs in with their Google account. After logging in, the user is asked whether they are willing to grant the permissions that your application is requesting. This process is called user consent."},{"lineNumber":441,"author":{"gitID":"-"},"content":"If the user grants the permission, the Google Authorization Server sends your application an access token (or an authorization code that your application can use to obtain an access token). If the user does not grant the permission, the server returns an error."},{"lineNumber":442,"author":{"gitID":"-"},"content":"It is generally a best practice to request scopes incrementally, at the time access is required, rather than up front. For example, an app that wants to support purchases should not request Google Wallet access until the user presses the “buy” button; see Incremental authorization."},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"3. Send the access token to an API."},{"lineNumber":445,"author":{"gitID":"-"},"content":"After an application obtains an access token, it sends the token to a Google API in an HTTP authorization header. It is possible to send tokens as URI query-string parameters, but we don\u0027t recommend it, because URI parameters can end up in log files that are not completely secure. Also, it is good REST practice to avoid creating unnecessary URI parameter names."},{"lineNumber":446,"author":{"gitID":"-"},"content":"Access tokens are valid only for the set of operations and resources described in the scope of the token request. For example, if an access token is issued for the Google+ API, it does not grant access to the Google Contacts API. You can, however, send that access token to the Google+ API multiple times for similar operations."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"4. Refresh the access token, if necessary."},{"lineNumber":449,"author":{"gitID":"-"},"content":"Access tokens have limited lifetimes. If your application needs access to a Google API beyond the lifetime of a single access token, it can obtain a refresh token. A refresh token allows your application to obtain new access tokens"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Logic` Component for Outh 2.0 endpoints:"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"image::viewCalendarSeqDiagram.png[width\u003d\"850\"]"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of view Calendar feature"},{"lineNumber":457,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Display only current month event."},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and Neater rather than displaying more than 1 mth."},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Cons: Need to input cmd to filter through other month."},{"lineNumber":460,"author":{"gitID":"-"},"content":"* **Alternative 2:** Don\u0027t display any month until user defines."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Pros: More interaction."},{"lineNumber":462,"author":{"gitID":"-"},"content":"** Cons: The UI will be blank at initial stage which is ugly."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Using Open-source or proprietary Calendar API"},{"lineNumber":465,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Using Google API (open source)"},{"lineNumber":466,"author":{"gitID":"-"},"content":"** Pros: I will learnt more even if I failed at the end of the project and Google API is more versatile"},{"lineNumber":467,"author":{"gitID":"-"},"content":"** Cons: Tedious to implement it."},{"lineNumber":468,"author":{"gitID":"-"},"content":"* **Alternative 2:** Using Restful API (proprietary)"},{"lineNumber":469,"author":{"gitID":"-"},"content":"** Pros: Easier to implement due to everything is assisted."},{"lineNumber":470,"author":{"gitID":"-"},"content":"** Cons: Restrictive, need more money for more features to add on."},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Timetable Viewer feature"},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":476,"author":{"gitID":"-"},"content":"The Timetable Viewer feature is implemented by `Timetable`, which will reside in `ModelManager`."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Users are able to add a shortened https://nusmods.com/[NUSMods] timetable URL to their existing partner in _NUSCouples_. +"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":" Sample shortened NUSMods URL: http://modsn.us/wNuIW"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"We pass the shortened URL through a `HttpURLConnection` to get the expanded URL. +"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":" Sample expanded NUSMods URL: https://nusmods.com/timetable/sem-2/share?CS2101\u003dSEC:C01\u0026CS2103T\u003dTUT:C01\u0026…"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"The expanded NUSMods URL can be generalised and represented in the format"},{"lineNumber":487,"author":{"gitID":"-"},"content":"`…/timetable/sem-[SEM_NUM]/share?[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026…`"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"We can parse this expanded NUSMods URL to get the `SEM_NUM`, as well as the"},{"lineNumber":490,"author":{"gitID":"-"},"content":"`MODULE_CODE`, `LESSON_TYPE` and `CLASS_NUM` for each of the modules in the timetable."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"Using http://api.nusmods.com/[NUSMods API], we can get the `WEEK_TEXT`, `DAY_TEXT`, `START_TIME`, `END_TIME` and"},{"lineNumber":493,"author":{"gitID":"-"},"content":"`VENUE` of each module."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"The sequence diagram below shows interactions within the `Logic` Component for the `execute(\"tadd http://modsn.us/wNuIW\")`"},{"lineNumber":496,"author":{"gitID":"-"},"content":"API call."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"image::AddTimetableSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of add NUSMods timetable URL"},{"lineNumber":502,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Accept short URLs only"},{"lineNumber":503,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":504,"author":{"gitID":"-"},"content":"** Cons: Less user friendly as users can only add one type of URL."},{"lineNumber":505,"author":{"gitID":"-"},"content":"* **Alternative 2:** Accept both short URLs and expanded URLs"},{"lineNumber":506,"author":{"gitID":"-"},"content":"** Pros: More user friendly as users have the choice to add either short or expanded URLs."},{"lineNumber":507,"author":{"gitID":"-"},"content":"** Cons: Difficult to check if given expanded NUSMods URL is a valid."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to support implementation of Timetable"},{"lineNumber":510,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store information by days of the week"},{"lineNumber":511,"author":{"gitID":"-"},"content":"** Pros: Easy to add new functions on top of this implementation such as compare timetables by days."},{"lineNumber":512,"author":{"gitID":"-"},"content":"** Cons: Have to sort information by day during parsing which can be tedious."},{"lineNumber":513,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store information by modules taken"},{"lineNumber":514,"author":{"gitID":"-"},"content":"** Pros: Easier to implement due to how NUSMods API is structured."},{"lineNumber":515,"author":{"gitID":"-"},"content":"** Cons: Difficult to extract out information for a particular time slot on a particular day."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Journal feature"},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"The journal feature is facilitated by an `ObservableList of \u003cJournalEntry\u003e` in Journal, which resides inside"},{"lineNumber":523,"author":{"gitID":"-"},"content":"`ModelManager`. It allows the user to create and save journal entries in xml format. A `JournalEntry` contains only two"},{"lineNumber":524,"author":{"gitID":"-"},"content":"variables, a String corresponding to the `date` the entry was created and a String containing its `text` contents. +"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application for the first time. The `Journal` will be empty at the"},{"lineNumber":527,"author":{"gitID":"-"},"content":"beginning. On the `jnew` command, the app will check if the journal contains a `JournalEntry` corresponding to the"},{"lineNumber":528,"author":{"gitID":"-"},"content":"current local date in the form (yyyymmdd). If it exists, its data (date and text) is read from the `JournalEntry` and a"},{"lineNumber":529,"author":{"gitID":"-"},"content":"copy of it is opened in a new `JournalWindow`. If it does not exist, a new `JournalWindow` is created. When the window"},{"lineNumber":530,"author":{"gitID":"-"},"content":"is closed, a `handleJournalClose` method is called. If the `TextArea` is not empty, a `SaveEntryEvent` is raised. This"},{"lineNumber":531,"author":{"gitID":"-"},"content":"event will pass the data from the `JournalWindow` in the form of a `JournalEntry` to the event handler."},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"Currently, the `LogicManager` will handle the SaveEntryEvent` by adding the `JournalEntry` to the `Journal`. If a"},{"lineNumber":534,"author":{"gitID":"-"},"content":"`JournalEntry` with the same date exits, it will overwrite the text."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":537,"author":{"gitID":"-"},"content":"The user cannot choose to save the `JournalEntry` under a different date. The same applies to editing past"},{"lineNumber":538,"author":{"gitID":"-"},"content":"journal entries. The reason why this is implemented in this was is because a journal is a record of your thoughts and"},{"lineNumber":539,"author":{"gitID":"-"},"content":"feelings in this moment. If you change your mind, that is your thoughts and feelings in a different moment. Thus, in"},{"lineNumber":540,"author":{"gitID":"-"},"content":"order for the journal to be an accurate record of your thoughts and feelings each day, we have chosen to only allow"},{"lineNumber":541,"author":{"gitID":"-"},"content":"the user to edit the journal corresponding to the current date."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the newJournal operation works:"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"image::NewJournalSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `JournalWindow`"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use javafx to directly make a new window."},{"lineNumber":552,"author":{"gitID":"-"},"content":"** Pros: Easy to implement. Only requires a few lines of code in one or two files."},{"lineNumber":553,"author":{"gitID":"-"},"content":"** Cons: Not consistent with the rest of the app. Needs more effort to maintain when changes are made."},{"lineNumber":554,"author":{"gitID":"-"},"content":"* **Alternative 2:** Make use of the UI framework."},{"lineNumber":555,"author":{"gitID":"-"},"content":"** Pros: Consistent with rest of app."},{"lineNumber":556,"author":{"gitID":"-"},"content":"** Cons: Harder to implement. Requires understanding of the UI component. Required minor edits in many files."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Naming of journal entries"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Automatically uses current date \"YYYYMMDD\" as file name."},{"lineNumber":561,"author":{"gitID":"-"},"content":"** Pros: No need to worry about duplicate names. Easy to implement filtering (can filter by value easily)."},{"lineNumber":562,"author":{"gitID":"-"},"content":"** Cons: Lack of personalisation. Hard to distinguish between files."},{"lineNumber":563,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow user to name journal entries."},{"lineNumber":564,"author":{"gitID":"-"},"content":"** Pros: User can distinguish between files easily."},{"lineNumber":565,"author":{"gitID":"-"},"content":"** Cons: If duplicate names are allowed, we need to distinguish them with another method. If duplicate names are not allowed, user may struggle to find unique names for every entry."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":574,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":579,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":592,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":593,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":594,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":597,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":609,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":614,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":621,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":634,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":635,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":636,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":637,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":638,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":639,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":640,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":641,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":642,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":646,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":649,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":668,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":675,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":676,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":677,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":682,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":683,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"Return to \u003c\u003ctoc,Table of Contents\u003e\u003e"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"traceurgan"},"content":"*Target user profile:*"},{"lineNumber":691,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"* is currently a student in a relationship with another student in NUS"},{"lineNumber":693,"author":{"gitID":"-"},"content":"* needs to remember special dates and moments"},{"lineNumber":694,"author":{"gitID":"-"},"content":"* needs to schedule meetings to find a good time to meet"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":696,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":697,"author":{"gitID":"-"},"content":"* prefer typing over mouse input"},{"lineNumber":698,"author":{"gitID":"-"},"content":"* are reasonably comfortable using CLI apps"},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"traceurgan"},"content":"*Value proposition:* all-in-one desktop app to help NUS couples make and remember memories with each other"},{"lineNumber":701,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":702,"author":{"gitID":"traceurgan"},"content":"*Feature contribution:*"},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":706,"author":{"gitID":"-"},"content":"|Assignee |Major|Minor"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"|Chen Xing"},{"lineNumber":709,"author":{"gitID":"-"},"content":"|Scheduler: This app allows user to schedule/edit/delete/view planned meetings"},{"lineNumber":710,"author":{"gitID":"-"},"content":"|Notifications: Allows user to receive notification about important dates from scheduled meetings"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"|Marlene"},{"lineNumber":713,"author":{"gitID":"-"},"content":"|Timetable viewer: To help couples identify common breaks during school term so they can plan meetings during their free time"},{"lineNumber":714,"author":{"gitID":"-"},"content":"|Data encryption: To protect data and prevent people from accessing and reading plaintext files"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"|Samuel"},{"lineNumber":717,"author":{"gitID":"-"},"content":"|Journal: Allow couples to record their thoughts and feelings to remember the time spent with their partner"},{"lineNumber":718,"author":{"gitID":"-"},"content":"|Tag (emotions) : Add/delete tags to journal entries (happy, sad, angry, funny)"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"|Daniel"},{"lineNumber":721,"author":{"gitID":"-"},"content":"|Location Finder: To allow the user to find the venue of a particular lesson of interest from their own timetable using"},{"lineNumber":722,"author":{"gitID":"-"},"content":"a Google Maps search result"},{"lineNumber":723,"author":{"gitID":"-"},"content":"|Communication with Google API: Can communicate with different certain external APIs from Google such as Google Maps API"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":729,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":735,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":736,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"|`* * *` |pair of NUS students in a relationship |add/view my partner\u0027s NUS timetable for the week |keep track of my partner\u0027s free time"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"|`* * *` |person in a relationship |add,edit,delete and view special events/ meetings (e.g. Valentine\u0027s day) in the same month |better plan for these dates"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"traceurgan"},"content":"|`* * *` |person in a relationship |add/view Journal entries |remember special memories"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"|`* * *` |pair of NUS students in a relationship |locate my partner from his NUS timetable |easily meet up with my partner on campus"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"|`* *` |user who values their privacy |encrypt _NUSCouples_ save data |prevent strangers from reading personal information such as my journal entries"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"|`* *` |As a part of a couple in NUS |encrypt _NUSCouples_ save data |prevent strangers from reading personal information such as my journal entries"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"traceurgan"},"content":"|`*`|user who likes to customize things |change the theme or customize text color |"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"|`*` |experienced user |have shortcut keys| do the same thing in a shorter time"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"|`*` |user |receive notification of upcoming scheduled events| so i can get notified and prepare earlier"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"traceurgan"},"content":"(For all use cases below, the *System* is the `NUSCouples` app and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Authenticate User with Google"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"1. User are required to generate and download their credential from google API credentials: https://console.developers.google.com/apis/dashboard?[Google Dashboard] and import into project resource directory."},{"lineNumber":775,"author":{"gitID":"-"},"content":"2. NusCouples use the credential to authenticate with Google API using Auth2.0."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"+"},{"lineNumber":778,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"* 1a. The partner already has an existing google calendar hosted in google."},{"lineNumber":784,"author":{"gitID":"-"},"content":"+"},{"lineNumber":785,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":786,"author":{"gitID":"-"},"content":"** 1a1. NUSCouples redirects to google calendar account to authenticate using the user credential."},{"lineNumber":787,"author":{"gitID":"-"},"content":"** 1a2. User confirms change."},{"lineNumber":788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":789,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"* 1b. The given credential is invalid."},{"lineNumber":792,"author":{"gitID":"-"},"content":"+"},{"lineNumber":793,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"** 1b1. NUSCouples shows an error message and close."},{"lineNumber":795,"author":{"gitID":"-"},"content":"+"},{"lineNumber":796,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Calendar of User"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"1.User inside browser panel enter\u0027s the command to view calendar."},{"lineNumber":804,"author":{"gitID":"-"},"content":"2.NUSCouple redirects to google Calendar to retrieve data and display the UI accordingly."},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":807,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":812,"author":{"gitID":"-"},"content":"* 1a. The partner already has an existing google calendar hosted in google."},{"lineNumber":813,"author":{"gitID":"-"},"content":"+"},{"lineNumber":814,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":815,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ redirects to google calendar account to authenticate using the user credential."},{"lineNumber":816,"author":{"gitID":"-"},"content":"** 1a2. User confirms change."},{"lineNumber":817,"author":{"gitID":"-"},"content":"** 1a3. _NUSCouples_ list the calendar in browser panel."},{"lineNumber":818,"author":{"gitID":"-"},"content":"+"},{"lineNumber":819,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"* 1b. The given credential is invalid."},{"lineNumber":822,"author":{"gitID":"-"},"content":"+"},{"lineNumber":823,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"** 1b1. _NUSCouples_ shows an error message and close."},{"lineNumber":825,"author":{"gitID":"-"},"content":"+"},{"lineNumber":826,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":829,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Timetable of Partner"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"1.  User requests to view timetable of his/her partner."},{"lineNumber":834,"author":{"gitID":"-"},"content":"2.  _NUSCouples_ displays the timetable."},{"lineNumber":835,"author":{"gitID":"-"},"content":"+"},{"lineNumber":836,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":841,"author":{"gitID":"-"},"content":"* 1a. The specified person does not have a timetable."},{"lineNumber":842,"author":{"gitID":"-"},"content":"+"},{"lineNumber":843,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":844,"author":{"gitID":"-"},"content":"** 1a1. _NUSCouples_ shows an error message."},{"lineNumber":845,"author":{"gitID":"-"},"content":"+"},{"lineNumber":846,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add New Journal Entry"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"1.  User requests to create new journal entry."},{"lineNumber":854,"author":{"gitID":"-"},"content":"2.  _NUSCouples_ opens new journal window."},{"lineNumber":855,"author":{"gitID":"-"},"content":"3.  User enters text and closes journal window."},{"lineNumber":856,"author":{"gitID":"-"},"content":"4.  _NUSCouples_ saves new journal entry in journal."},{"lineNumber":857,"author":{"gitID":"-"},"content":"+"},{"lineNumber":858,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"* 1a. Journal entry with the current local date exists."},{"lineNumber":863,"author":{"gitID":"-"},"content":"** 1a.1 _NUSCouples_ reads data and a new copy of the journal entry is opened in a journal window. +"},{"lineNumber":864,"author":{"gitID":"-"},"content":"      Use case resumes at step 3."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"* 3a. Journal entry with the current local date exists."},{"lineNumber":867,"author":{"gitID":"-"},"content":"** 3a.1 _NUSCouples_ overwrites journal entry in journal. +"},{"lineNumber":868,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":874,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":875,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":876,"author":{"gitID":"-"},"content":".  Should be usable by a novice after reading the \u003c\u003cUserGuide#, User Guide\u003e\u003e."},{"lineNumber":877,"author":{"gitID":"-"},"content":".  Should be able to handle any invalid inputs."},{"lineNumber":878,"author":{"gitID":"-"},"content":".  Should respond to user inputs within 2 seconds."},{"lineNumber":879,"author":{"gitID":"-"},"content":".  Should be able to work on both 32-bit and 64-bit environments."},{"lineNumber":880,"author":{"gitID":"-"},"content":".  Should have commands that are intuitive and easy to remember."},{"lineNumber":881,"author":{"gitID":"-"},"content":".  Should be able to control almost everything from the CLI."},{"lineNumber":882,"author":{"gitID":"-"},"content":".  The application should be connected to the internet."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":886,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":887,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X, NUSMods, Google Calendar"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":890,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":902,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":907,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":910,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":915,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":922,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":923,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":928,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":929,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":938,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":939,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":940,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":941,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":942,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":943,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"traceurgan":8,"-":945}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_AMY \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_BOB \u003d \"http://modsn.us/q7cLP\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_TIMETABLE_DESC \u003d \" \" + PREFIX_TIMETABLE"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            + \"www.google.com\"; // host should be modsn.us"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withTimetable(VALID_TIMETABLE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withTimetable(VALID_TIMETABLE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":108,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":1,"-":163}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyJournal;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void addJournalEntry(JournalEntry journalEntry) throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public ReadOnlyJournal getJournal() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"traceurgan"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"traceurgan"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":5,"-":185}},{"path":"src/test/java/seedu/address/model/person/timetable/TimetableUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"public class TimetableUtilTest {"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    private final String validLongUrl \u003d \"https://nusmods.com/timetable/sem-2/\""},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"            + \"share?CS2101\u003dSEC:C01\u0026CS2103T\u003dTUT:C01\u0026CS3230\u003dLEC:1,TUT:4\u0026\""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"            + \"CS3241\u003dLAB:3,LEC:1,TUT:3\u0026CS3247\u003dLAB:1,LEC:1\u0026GES1021\u003dLEC:SL1\";"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    private final String validShortUrl \u003d \"http://modsn.us/wNuIW\";"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    private final String invalidShortUrl \u003d \"http://modsn.us/123\";"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, TimetableModule\u003e expectedListOfModules;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules \u003d new HashMap\u003cString, TimetableModule\u003e();"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, String\u003e tempLessonPair;"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Sectional Teaching\", \"C01\");"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS2101\", new TimetableModule(\"CS2101\","},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"C01\");"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS2103T\", new TimetableModule(\"CS2103T\","},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"4\");"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3230\", new TimetableModule(\"CS3230\","},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Laboratory\", \"3\");"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Tutorial\", \"3\");"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3241\", new TimetableModule(\"CS3241\","},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Laboratory\", \"1\");"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"1\");"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"CS3247\", new TimetableModule(\"CS3247\","},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        tempLessonPair.put(\"Lecture\", \"SL1\");"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        expectedListOfModules.put(\"GES1021\", new TimetableModule(\"GES1021\","},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"                tempLessonPair));"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_invalidShortUrl_throwsIllegalArgumentException() {"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"\")))); // empty string"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"www.google.com\")))); // invalid host"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.facebook.com\")))); // invalid host"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/\")))); // invalid host"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/q7cLP\")))); // invalid host"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl("},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"                        new Timetable((\"http://www.modsn.us/\")))); // code-part needs at least 1 character"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_validUrl() throws ParseException {"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(validShortUrl);"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setAndExpandShortTimetableUrl(timetable);"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(timetable.getExpandedUrl(), validLongUrl);"},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"    public void expandShortTimetableUrl_invalidUrl_throwsParseException() {"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"                TimetableUtil.setAndExpandShortTimetableUrl(new Timetable(invalidShortUrl)));"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"    public void splitLongTimetableUrl () {"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":"        Timetable timetable \u003d new Timetable(validShortUrl);"},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"        timetable.setExpandedUrl(validLongUrl);"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.splitLongTimetableUrl(timetable);"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedListOfModules, timetable.getListOfModules());"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"    public void setAndExpandShortTimetableUrl() {"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"        Timetable expectedTimetable \u003d new Timetable(validShortUrl);"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetable.setExpandedUrl(validLongUrl);"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"        Timetable actualTimetable \u003d new Timetable(validShortUrl);"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertDoesNotThrow(() -\u003e TimetableUtil.setAndExpandShortTimetableUrl(actualTimetable));"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetable.getExpandedUrl(), actualTimetable.getExpandedUrl());"},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"    public void setSemNumFromExpandedUrl() {"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"        Timetable expectedTimetable \u003d new Timetable(validShortUrl);"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"        expectedTimetable.setCurrentSemester(2);"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"        Timetable actualTimetable \u003d new Timetable(validShortUrl);"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setSemNumFromExpandedUrl(actualTimetable);"},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":125,"author":{"gitID":"marlenekoh"},"content":"        assertEquals(expectedTimetable.getCurrentSemester(), actualTimetable.getCurrentSemester());"},{"lineNumber":126,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":115,"-":12}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"traceurgan"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":27,"author":{"gitID":"traceurgan"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"            .withPerson(AMY).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"traceurgan"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":82,"author":{"gitID":"traceurgan"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":83,"author":{"gitID":"traceurgan"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":84,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":85,"author":{"gitID":"traceurgan"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":86,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":87,"author":{"gitID":"traceurgan"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":88,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":90,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"traceurgan"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":92,"author":{"gitID":"traceurgan"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":93,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":94,"author":{"gitID":"traceurgan"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":95,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":96,"author":{"gitID":"traceurgan"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":97,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":99,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"traceurgan"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":101,"author":{"gitID":"traceurgan"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":102,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":103,"author":{"gitID":"traceurgan"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":104,"author":{"gitID":"traceurgan"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":105,"author":{"gitID":"traceurgan"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":106,"author":{"gitID":"traceurgan"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":40,"-":94}},{"path":"src/test/java/seedu/address/model/person/timetable/TimetableTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"public class TimetableTest {"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Timetable(null));"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    public void constructor_invalidTimetable_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"        String invalidTimetable \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Timetable(invalidTimetable));"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    public void isValidTimetable() {"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"        // null address"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Timetable.isValidTimetable(null));"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"        // invalid timetables"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"www.google.com\")); // invalid host"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.facebook.com\")); // invalid host"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.modsn.us/\")); // invalid host"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://www.modsn.us/q7cLP\")); // invalid host"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"        assertFalse(Timetable.isValidTimetable(\"http://modsn.us/\")); // code-part needs at least 1 character"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"        // valid timetables"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(Timetable.isValidTimetable(\"http://modsn.us/wNuIW\"));"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"        assertTrue(Timetable.isValidTimetable(\"http://modsn.us/q7cLP\")); // code-part can be alphanumeric"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":33,"-":9}},{"path":"src/test/java/seedu/address/testutil/Assert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import junit.framework.AssertionFailedError;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class Assert {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expected} Exception."},{"lineNumber":12,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertThrows(expected, null, callable);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                                    VoidCallable callable) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            callable.call();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String errorMessage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            if (!actualException.getClass().isAssignableFrom(expectedException)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        expectedException.getName(), actualException.getClass().getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format("},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                return;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        throw new AssertionFailedError(String.format("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Represents a function which does not return anything and may throw an exception."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public interface VoidCallable {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        void call() throws Exception;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"    //@@author marlenekoh"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"     * Asserts that the {@code callable} does not throw any exception."},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    public static void assertDoesNotThrow(VoidCallable callable) {"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"            callable.call();"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        } catch (Throwable unexpectedException) {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"            String errorMessage \u003d String.format(\"Expected nothing thrown, however %s thrown\","},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"                    unexpectedException.getMessage());"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":14,"-":54}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"traceurgan"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"traceurgan"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":21,"author":{"gitID":"traceurgan"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"traceurgan"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":36,"author":{"gitID":"traceurgan"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Journal journal \u003d new Journal();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, journal, userPrefs);"},{"lineNumber":41,"author":{"gitID":"traceurgan"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":42,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(addressBook, journal, userPrefs), modelManager);"},{"lineNumber":44,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":46,"author":{"gitID":"traceurgan"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Journal journal \u003d new Journal();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, journal, userPrefs);"},{"lineNumber":53,"author":{"gitID":"traceurgan"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":54,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":55,"author":{"gitID":"traceurgan"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":56,"author":{"gitID":"traceurgan"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"traceurgan"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":58,"author":{"gitID":"traceurgan"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":59,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new ModelManager(expectedAddressBook, journal, userPrefs), modelManager);"},{"lineNumber":61,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Journal journal \u003d new Journal();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, journal, userPrefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, journal, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, journal, userPrefs)));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, journal, differentUserPrefs)));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":28,"-":67}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Returns true if a given string is a valid person\u0027s address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"HEARTOFAL1ON":1}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableModule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":" * Represents a module from NUSMods timetable."},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"public class TimetableModule {"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"    private final String moduleCode;"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, String\u003e listOfLessons; // Key is lesson type, Value is class type"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    public TimetableModule(String moduleCode, HashMap\u003cString, String\u003e listOfLessons) {"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"        this.listOfLessons \u003d listOfLessons;"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"    public String getModuleCode() {"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"        return moduleCode;"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"    public HashMap\u003cString, String\u003e getListOfLessons() {"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"        return listOfLessons;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"        return (other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"                || (other instanceof TimetableModule // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.moduleCode.equals(((TimetableModule) other).moduleCode)"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.listOfLessons.equals(((TimetableModule) other).listOfLessons))); // state check"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":29,"-":4}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableModuleSlot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":4,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"marlenekoh"},"content":" * Represents the module information of one module slot in one day"},{"lineNumber":6,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":7,"author":{"gitID":"marlenekoh"},"content":"public class TimetableModuleSlot implements Comparable\u003cTimetableModuleSlot\u003e {"},{"lineNumber":8,"author":{"gitID":"marlenekoh"},"content":"    private String moduleCode;"},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"    private String lessonType;"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"    private String classType;"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":"    private String weekFreq;"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":"    private String day;"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"    private String venue;"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    private String startTime;"},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"    private String endTime;"},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"    public TimetableModuleSlot(String moduleCode, String lessonType, String classType, String weekFreq, String day,"},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"                               String venue, String startTime, String endTime) {"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"        this.lessonType \u003d lessonType;"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"        this.classType \u003d classType;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":"        this.weekFreq \u003d weekFreq;"},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"        this.day \u003d day;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":"        this.venue \u003d venue;"},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    public int compareTo(TimetableModuleSlot other) {"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"        return this.startTime.compareTo(other.startTime);"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"    public String getModuleCode() {"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"        return moduleCode;"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    public String getLessonType() {"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"        return lessonType;"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    public String getClassType() {"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"        return classType;"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"    public String getWeekFreq() {"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"        return weekFreq;"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    public String getDay() {"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"        return day;"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"    public String getVenue() {"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"        return venue;"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    public String getStartTime() {"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"        return startTime;"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"    public String getEndTime() {"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"        return endTime;"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":63,"-":2}},{"path":"src/main/java/seedu/address/model/person/timetable/Timetable.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":10,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"marlenekoh"},"content":" * Represents the NUSMODS timetable of the partner"},{"lineNumber":12,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"marlenekoh"},"content":"public class Timetable {"},{"lineNumber":14,"author":{"gitID":"marlenekoh"},"content":"    public static final String MESSAGE_TIMETABLE_CONSTRAINTS \u003d \"Short NUSMods timetable URL should be of the format \""},{"lineNumber":15,"author":{"gitID":"marlenekoh"},"content":"            + \"http://modsn.us/code-part \""},{"lineNumber":16,"author":{"gitID":"marlenekoh"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":17,"author":{"gitID":"marlenekoh"},"content":"            + \"1. The URL should start with http://modsn.us/\\n\""},{"lineNumber":18,"author":{"gitID":"marlenekoh"},"content":"            + \"2. The code-part should only contain alphanumeric characters.\";"},{"lineNumber":19,"author":{"gitID":"marlenekoh"},"content":"    private static final String SHORT_NUSMODS_URL_REGEX \u003d \"http://modsn.us/\";"},{"lineNumber":20,"author":{"gitID":"marlenekoh"},"content":"    private static final String CODE_PART_REGEX \u003d \"[\\\\w]+\";"},{"lineNumber":21,"author":{"gitID":"marlenekoh"},"content":"    public static final String TIMETABLE_VALIDATION_REGEX \u003d SHORT_NUSMODS_URL_REGEX + CODE_PART_REGEX;"},{"lineNumber":22,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":23,"author":{"gitID":"marlenekoh"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":25,"author":{"gitID":"marlenekoh"},"content":"    private int currentSemester;"},{"lineNumber":26,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e listOfDays; // HashMap of \u003cDay, TimetableModuleSlots\u003e"},{"lineNumber":27,"author":{"gitID":"marlenekoh"},"content":"    private HashMap\u003cString, TimetableModule\u003e listOfModules; // HashMap of \u003cmodule code, TimetableModule\u003e"},{"lineNumber":28,"author":{"gitID":"marlenekoh"},"content":"    private String expandedUrl;"},{"lineNumber":29,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":30,"author":{"gitID":"marlenekoh"},"content":"    public Timetable(String timetableUrl) {"},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetableUrl);"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"        checkArgument(isValidTimetable(timetableUrl), MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":"        this.value \u003d timetableUrl;"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":"        TimetableUtil.setUpTimetableInfo(this);"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"    public String getExpandedUrl() {"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"        return expandedUrl;"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    public void setExpandedUrl(String expandedUrl) {"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"        this.expandedUrl \u003d expandedUrl;"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"    public void setListOfModules(HashMap\u003cString, TimetableModule\u003e listOfModules) {"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"        this.listOfModules \u003d listOfModules;"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"    public HashMap\u003cString, TimetableModule\u003e getListOfModules() {"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"        return listOfModules;"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"    public int getCurrentSemester() {"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"        return currentSemester;"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"    public void setCurrentSemester(int currentSemester) {"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"        this.currentSemester \u003d currentSemester;"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    public void setListOfDays(HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e listOfDays) {"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"        this.listOfDays \u003d listOfDays;"},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"     * Returns if a given string is a valid short NUSMods timetable URL."},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"    public static boolean isValidTimetable(String test) {"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"        return test.matches(TIMETABLE_VALIDATION_REGEX);"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"    public String toString() {"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"        return value;"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"                || (other instanceof Timetable // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"                \u0026\u0026 this.value.equals(((Timetable) other).value)); // state check"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":75,"-":8}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":115,"author":{"gitID":"traceurgan"},"content":"        removeUnusedTags();"},{"lineNumber":116,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":118,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"traceurgan"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":120,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"traceurgan"},"content":"    private void removeUnusedTags() {"},{"lineNumber":122,"author":{"gitID":"traceurgan"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":123,"author":{"gitID":"traceurgan"},"content":"                .map(Person::getTags)"},{"lineNumber":124,"author":{"gitID":"traceurgan"},"content":"                .flatMap(Set::stream)"},{"lineNumber":125,"author":{"gitID":"traceurgan"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":126,"author":{"gitID":"traceurgan"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":147,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getTimetable(),"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                correctTagReferences);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"traceurgan"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":171,"author":{"gitID":"traceurgan"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":172,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"traceurgan"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":174,"author":{"gitID":"traceurgan"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":175,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":176,"author":{"gitID":"traceurgan"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":177,"author":{"gitID":"traceurgan"},"content":"            return;"},{"lineNumber":178,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":180,"author":{"gitID":"traceurgan"},"content":"        Person newPerson \u003d"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                        person.getTimetable(), newTags);"},{"lineNumber":183,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":184,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"traceurgan"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":186,"author":{"gitID":"traceurgan"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":187,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"Removing a person\u0027s tags should not result in a duplicate. \""},{"lineNumber":188,"author":{"gitID":"traceurgan"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":189,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":192,"author":{"gitID":"traceurgan"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"traceurgan"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":194,"author":{"gitID":"traceurgan"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"traceurgan"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":196,"author":{"gitID":"traceurgan"},"content":"        try {"},{"lineNumber":197,"author":{"gitID":"traceurgan"},"content":"            for (Person person : persons) {"},{"lineNumber":198,"author":{"gitID":"traceurgan"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":199,"author":{"gitID":"traceurgan"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"traceurgan"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":201,"author":{"gitID":"traceurgan"},"content":"            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"},{"lineNumber":202,"author":{"gitID":"traceurgan"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":227,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":46,"-":190}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.JournalChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Journal journal;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyJournal journal, UserPrefs userPrefs) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, journal, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.journal \u003d new Journal(journal);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new Journal(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the address book model has changed */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the journal model has changed */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void indicateJournalChanged() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        raise(new JournalChangedEvent(journal));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public ReadOnlyJournal getJournal() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return journal;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public synchronized void addJournalEntry(JournalEntry journalEntry) throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        journal.addJournalEntry(journalEntry);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        logger.info(\"journal entry added\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        journal.getList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateJournalChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"traceurgan"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"traceurgan"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":109,"author":{"gitID":"traceurgan"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":110,"author":{"gitID":"traceurgan"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":6,"-":141}},{"path":"src/main/java/seedu/address/model/locationfinder/LocationQuery.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.model.locationfinder;"},{"lineNumber":2,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":3,"author":{"gitID":"HEARTOFAL1ON"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":5,"author":{"gitID":"HEARTOFAL1ON"},"content":"//@@author HEARTOFAL1ON"},{"lineNumber":6,"author":{"gitID":"HEARTOFAL1ON"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"HEARTOFAL1ON"},"content":" * Represents a location query to the Google Maps http server which helps to get a location result"},{"lineNumber":8,"author":{"gitID":"HEARTOFAL1ON"},"content":" */"},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class LocationQuery {"},{"lineNumber":10,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private String locationQuery;"},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private HashMap\u003cString, String\u003e locationResult; // Key is locationQuery type, Value is locationResult type"},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":14,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public LocationQuery(String locationQuery, HashMap\u003cString, String\u003e locationResult) {"},{"lineNumber":15,"author":{"gitID":"HEARTOFAL1ON"},"content":"        this.locationQuery \u003d locationQuery;"},{"lineNumber":16,"author":{"gitID":"HEARTOFAL1ON"},"content":"        this.locationResult \u003d locationResult;"},{"lineNumber":17,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public String getLocationQuery() {"},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return locationQuery;"},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public HashMap\u003cString, String\u003e getLocationResult() {"},{"lineNumber":24,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return locationResult;"},{"lineNumber":25,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":27,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return (other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"HEARTOFAL1ON"},"content":"                || (other instanceof LocationQuery // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"HEARTOFAL1ON"},"content":"                \u0026\u0026 this.locationQuery.equals(((LocationQuery) other).locationQuery)"},{"lineNumber":32,"author":{"gitID":"HEARTOFAL1ON"},"content":"                \u0026\u0026 this.locationResult.equals(((LocationQuery) other).locationResult))); // state check"},{"lineNumber":33,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"HEARTOFAL1ON":35}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.journalentry.JournalEntry;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"traceurgan"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the Journal */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ReadOnlyJournal getJournal();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void addJournalEntry(JournalEntry journalEntry) throws Exception;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"traceurgan"},"content":"    /** Removes the given {@code tag} from all {@code Person}s. */"},{"lineNumber":48,"author":{"gitID":"traceurgan"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":49,"author":{"gitID":"traceurgan"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"traceurgan":4,"-":55}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.ProtocolException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.json.simple.JSONArray;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.json.simple.JSONObject;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.json.simple.parser.JSONParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"marlenekoh"},"content":"//@@author marlenekoh"},{"lineNumber":32,"author":{"gitID":"marlenekoh"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"marlenekoh"},"content":" * A class containing utility methods for Timetable"},{"lineNumber":34,"author":{"gitID":"marlenekoh"},"content":" */"},{"lineNumber":35,"author":{"gitID":"marlenekoh"},"content":"public class TimetableUtil {"},{"lineNumber":36,"author":{"gitID":"marlenekoh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":37,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_QUESTION_MARK \u003d \"\\\\?\";"},{"lineNumber":38,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_AMPERSAND \u003d \"\u0026\";"},{"lineNumber":39,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_EQUALS \u003d \"\u003d\";"},{"lineNumber":40,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_COMMA \u003d \",\";"},{"lineNumber":41,"author":{"gitID":"marlenekoh"},"content":"    private static final String SPLIT_COLON \u003d \":\";"},{"lineNumber":42,"author":{"gitID":"marlenekoh"},"content":"    private static final String REPLACE_NON_DIGIT_CHARACTERS \u003d \"[^0-9]\";"},{"lineNumber":43,"author":{"gitID":"marlenekoh"},"content":"    private static final String INVALID_SHORT_URL_RESULT \u003d \"http://modsn.us\";"},{"lineNumber":44,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_SHORT_URL \u003d \"Invalid short NUSMods URL provided.\";"},{"lineNumber":45,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_CLASS_TYPE \u003d \"Invalid class type\";"},{"lineNumber":46,"author":{"gitID":"marlenekoh"},"content":"    private static final String MESSAGE_INVALID_DAY_TYPE \u003d \"Invalid day type\";"},{"lineNumber":47,"author":{"gitID":"marlenekoh"},"content":"    private static final String HTTP_METHOD_GET \u003d \"GET\";"},{"lineNumber":48,"author":{"gitID":"marlenekoh"},"content":"    private static final int HTTP_METHOD_RESPONSE_OK \u003d 200;"},{"lineNumber":49,"author":{"gitID":"marlenekoh"},"content":"    private static final int SEM_NUMBER_INDEX \u003d 0;"},{"lineNumber":50,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_INFORMATION_INDEX \u003d 1;"},{"lineNumber":51,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_CODE_INDEX \u003d 0;"},{"lineNumber":52,"author":{"gitID":"marlenekoh"},"content":"    private static final int MODULE_CODE_REMAINING_INDEX \u003d 1;"},{"lineNumber":53,"author":{"gitID":"marlenekoh"},"content":"    private static final int LESSON_TYPE_INDEX \u003d 0;"},{"lineNumber":54,"author":{"gitID":"marlenekoh"},"content":"    private static final int CLASS_TYPE_INDEX \u003d 1;"},{"lineNumber":55,"author":{"gitID":"marlenekoh"},"content":"    private static final int MONDAY_INDEX \u003d 0;"},{"lineNumber":56,"author":{"gitID":"marlenekoh"},"content":"    private static final int TUESDAY_INDEX \u003d 1;"},{"lineNumber":57,"author":{"gitID":"marlenekoh"},"content":"    private static final int WEDNESDAY_INDEX \u003d 2;"},{"lineNumber":58,"author":{"gitID":"marlenekoh"},"content":"    private static final int THURSDAY_INDEX \u003d 3;"},{"lineNumber":59,"author":{"gitID":"marlenekoh"},"content":"    private static final int FRIDAY_INDEX \u003d 4;"},{"lineNumber":60,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":61,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"marlenekoh"},"content":"     * Sets up attributes of a given {@code Timetable}."},{"lineNumber":63,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable Timetable to be set up"},{"lineNumber":64,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"marlenekoh"},"content":"    public static void setUpTimetableInfo(Timetable timetable) {"},{"lineNumber":66,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"marlenekoh"},"content":"            setAndExpandShortTimetableUrl(timetable);"},{"lineNumber":68,"author":{"gitID":"marlenekoh"},"content":"            setSemNumFromExpandedUrl(timetable);"},{"lineNumber":69,"author":{"gitID":"marlenekoh"},"content":"            splitLongTimetableUrl(timetable);"},{"lineNumber":70,"author":{"gitID":"marlenekoh"},"content":"            getModuleInfoFromApi(timetable);"},{"lineNumber":71,"author":{"gitID":"marlenekoh"},"content":"        } catch (ParseException e) {"},{"lineNumber":72,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(MESSAGE_INVALID_SHORT_URL);"},{"lineNumber":73,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":76,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"marlenekoh"},"content":"     * Expands short NUSMods timetable URL to a long NUSMods timetable URL from {@timetable}."},{"lineNumber":78,"author":{"gitID":"marlenekoh"},"content":"     * Sets the expanded URL for {@code timetable}."},{"lineNumber":79,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"marlenekoh"},"content":"    public static void setAndExpandShortTimetableUrl(Timetable timetable) throws ParseException {"},{"lineNumber":81,"author":{"gitID":"marlenekoh"},"content":"        String timetableUrl \u003d timetable.value;"},{"lineNumber":82,"author":{"gitID":"marlenekoh"},"content":"        checkArgument(Timetable.isValidTimetable(timetableUrl), Timetable.MESSAGE_TIMETABLE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d null;"},{"lineNumber":84,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"marlenekoh"},"content":"            final URL shortUrl \u003d new URL(timetableUrl);"},{"lineNumber":86,"author":{"gitID":"marlenekoh"},"content":"            final HttpURLConnection urlConnection \u003d (HttpURLConnection) shortUrl.openConnection();"},{"lineNumber":87,"author":{"gitID":"marlenekoh"},"content":"            urlConnection.setInstanceFollowRedirects(false);"},{"lineNumber":88,"author":{"gitID":"marlenekoh"},"content":"            expandedUrl \u003d urlConnection.getHeaderField(\"location\");"},{"lineNumber":89,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":90,"author":{"gitID":"marlenekoh"},"content":"            if (expandedUrl.equals(INVALID_SHORT_URL_RESULT)) {"},{"lineNumber":91,"author":{"gitID":"marlenekoh"},"content":"                throw new ParseException(MESSAGE_INVALID_SHORT_URL);"},{"lineNumber":92,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"marlenekoh"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":94,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"URL provided is malformed\");"},{"lineNumber":95,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Failed to open connection\");"},{"lineNumber":97,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"marlenekoh"},"content":"        timetable.setExpandedUrl(expandedUrl);"},{"lineNumber":99,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":101,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"marlenekoh"},"content":"     * Parses for {@code currentSemester} from expandedUrl and sets it for {@code timetable}"},{"lineNumber":103,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose {@code currentSemester} is to be set"},{"lineNumber":104,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"marlenekoh"},"content":"    public static void setSemNumFromExpandedUrl(Timetable timetable) {"},{"lineNumber":106,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d timetable.getExpandedUrl();"},{"lineNumber":107,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(expandedUrl);"},{"lineNumber":108,"author":{"gitID":"marlenekoh"},"content":"        String[] moduleInformation \u003d expandedUrl.split(SPLIT_QUESTION_MARK);"},{"lineNumber":109,"author":{"gitID":"marlenekoh"},"content":"        timetable.setCurrentSemester(Integer.valueOf(moduleInformation[SEM_NUMBER_INDEX]"},{"lineNumber":110,"author":{"gitID":"marlenekoh"},"content":"                .replaceAll(REPLACE_NON_DIGIT_CHARACTERS, \"\")));"},{"lineNumber":111,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":113,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"marlenekoh"},"content":"     * Splits expanded NUSMods timetable URL into the different {@code TimetableModule}s."},{"lineNumber":115,"author":{"gitID":"marlenekoh"},"content":"     * Sets listOfModules in {@code timetable}"},{"lineNumber":116,"author":{"gitID":"marlenekoh"},"content":"     * Expanded timetable URL is in the format ...?[MODULE_CODE]\u003d[LESSON_TYPE]:[CLASS_NUM]\u0026..."},{"lineNumber":117,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable whose long url is to be split"},{"lineNumber":118,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"marlenekoh"},"content":"    public static void splitLongTimetableUrl(Timetable timetable) {"},{"lineNumber":120,"author":{"gitID":"marlenekoh"},"content":"        String expandedUrl \u003d timetable.getExpandedUrl();"},{"lineNumber":121,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(expandedUrl);"},{"lineNumber":122,"author":{"gitID":"marlenekoh"},"content":"        String[] moduleInformation \u003d expandedUrl.split(SPLIT_QUESTION_MARK);"},{"lineNumber":123,"author":{"gitID":"marlenekoh"},"content":"        String[] modules \u003d moduleInformation[MODULE_INFORMATION_INDEX].split(SPLIT_AMPERSAND);"},{"lineNumber":124,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":125,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, TimetableModule\u003e listOfModules \u003d new  HashMap\u003cString, TimetableModule\u003e();"},{"lineNumber":126,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, String\u003e listOfLessons;"},{"lineNumber":127,"author":{"gitID":"marlenekoh"},"content":"        String moduleCode;"},{"lineNumber":128,"author":{"gitID":"marlenekoh"},"content":"        String lessonType;"},{"lineNumber":129,"author":{"gitID":"marlenekoh"},"content":"        String classType;"},{"lineNumber":130,"author":{"gitID":"marlenekoh"},"content":"        String[] lessons;"},{"lineNumber":131,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":132,"author":{"gitID":"marlenekoh"},"content":"        for (String currentModule : modules) {"},{"lineNumber":133,"author":{"gitID":"marlenekoh"},"content":"            listOfLessons \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":134,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":135,"author":{"gitID":"marlenekoh"},"content":"            moduleCode \u003d currentModule.split(SPLIT_EQUALS)[MODULE_CODE_INDEX];"},{"lineNumber":136,"author":{"gitID":"marlenekoh"},"content":"            lessons \u003d currentModule.split(SPLIT_EQUALS)[MODULE_CODE_REMAINING_INDEX].split(SPLIT_COMMA);"},{"lineNumber":137,"author":{"gitID":"marlenekoh"},"content":"            for (String currLesson : lessons) {"},{"lineNumber":138,"author":{"gitID":"marlenekoh"},"content":"                lessonType \u003d currLesson.split(SPLIT_COLON)[LESSON_TYPE_INDEX];"},{"lineNumber":139,"author":{"gitID":"marlenekoh"},"content":"                classType \u003d currLesson.split(SPLIT_COLON)[CLASS_TYPE_INDEX];"},{"lineNumber":140,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":141,"author":{"gitID":"marlenekoh"},"content":"                try {"},{"lineNumber":142,"author":{"gitID":"marlenekoh"},"content":"                    listOfLessons.put(convertLessonType(lessonType), classType);"},{"lineNumber":143,"author":{"gitID":"marlenekoh"},"content":"                } catch (IllegalValueException e) {"},{"lineNumber":144,"author":{"gitID":"marlenekoh"},"content":"                    logger.warning(\"Unable to convert lesson type\");"},{"lineNumber":145,"author":{"gitID":"marlenekoh"},"content":"                }"},{"lineNumber":146,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"marlenekoh"},"content":"            listOfModules.put(moduleCode, new TimetableModule(moduleCode, listOfLessons));"},{"lineNumber":148,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"marlenekoh"},"content":"        timetable.setListOfModules(listOfModules);"},{"lineNumber":150,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":152,"author":{"gitID":"marlenekoh"},"content":"    public static void getModuleInfoFromApi(Timetable timetable) {"},{"lineNumber":153,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetable.getListOfModules());"},{"lineNumber":154,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":155,"author":{"gitID":"marlenekoh"},"content":"        String currentModuleInfo;"},{"lineNumber":156,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e allTimetableModuleSlots \u003d null;"},{"lineNumber":157,"author":{"gitID":"marlenekoh"},"content":"        Set entrySet \u003d timetable.getListOfModules().entrySet();"},{"lineNumber":158,"author":{"gitID":"marlenekoh"},"content":"        Iterator it \u003d entrySet.iterator();"},{"lineNumber":159,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":160,"author":{"gitID":"marlenekoh"},"content":"        while (it.hasNext()) {"},{"lineNumber":161,"author":{"gitID":"marlenekoh"},"content":"            Map.Entry currentModule \u003d (Map.Entry) it.next();"},{"lineNumber":162,"author":{"gitID":"marlenekoh"},"content":"            currentModuleInfo \u003d getJsonContentsFromNusModsApi(\"2017-2018\","},{"lineNumber":163,"author":{"gitID":"marlenekoh"},"content":"                    Integer.toString(timetable.getCurrentSemester()), currentModule.getKey().toString());"},{"lineNumber":164,"author":{"gitID":"marlenekoh"},"content":"            allTimetableModuleSlots \u003d getAllTimetableModuleSlots(currentModuleInfo, timetable,"},{"lineNumber":165,"author":{"gitID":"marlenekoh"},"content":"                    currentModule.getKey().toString());"},{"lineNumber":166,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"marlenekoh"},"content":"        timetable.setListOfDays(sortModuleSlotsByDay(allTimetableModuleSlots));"},{"lineNumber":168,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":170,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"marlenekoh"},"content":"     * Retrieves json file from NUSMods api and converts to String"},{"lineNumber":172,"author":{"gitID":"marlenekoh"},"content":"     * @param acadYear String representing academic year"},{"lineNumber":173,"author":{"gitID":"marlenekoh"},"content":"     * @param semNum String representing semester number"},{"lineNumber":174,"author":{"gitID":"marlenekoh"},"content":"     * @param moduleCode String representing module code"},{"lineNumber":175,"author":{"gitID":"marlenekoh"},"content":"     * Format: http://api.nusmods.com/[acadYear]/[semNum]/modules/[moduleCode].json"},{"lineNumber":176,"author":{"gitID":"marlenekoh"},"content":"     * e.g. http://api.nusmods.com/2017-2018/2/modules/CS3241.json"},{"lineNumber":177,"author":{"gitID":"marlenekoh"},"content":"     * @return String containing contents of json file"},{"lineNumber":178,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"marlenekoh"},"content":"    public static String getJsonContentsFromNusModsApi(String acadYear, String semNum, String moduleCode) {"},{"lineNumber":180,"author":{"gitID":"marlenekoh"},"content":"        String contents \u003d null;"},{"lineNumber":181,"author":{"gitID":"marlenekoh"},"content":"        String nusmodsApiUrlString \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semNum + \"/modules/\" + moduleCode"},{"lineNumber":182,"author":{"gitID":"marlenekoh"},"content":"                + \".json\";"},{"lineNumber":183,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"marlenekoh"},"content":"            URL nusmodsApiUrl \u003d new URL(nusmodsApiUrlString);"},{"lineNumber":185,"author":{"gitID":"marlenekoh"},"content":"            HttpURLConnection urlConnection \u003d (HttpURLConnection) nusmodsApiUrl.openConnection();"},{"lineNumber":186,"author":{"gitID":"marlenekoh"},"content":"            urlConnection.setRequestMethod(HTTP_METHOD_GET);"},{"lineNumber":187,"author":{"gitID":"marlenekoh"},"content":"            int responseCode \u003d urlConnection.getResponseCode();"},{"lineNumber":188,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":189,"author":{"gitID":"marlenekoh"},"content":"            if (responseCode \u003d\u003d HTTP_METHOD_RESPONSE_OK) {"},{"lineNumber":190,"author":{"gitID":"marlenekoh"},"content":"                contents \u003d readStream(urlConnection.getInputStream());"},{"lineNumber":191,"author":{"gitID":"marlenekoh"},"content":"            } else {"},{"lineNumber":192,"author":{"gitID":"marlenekoh"},"content":"                contents \u003d \"Error in accessing API - \" + readStream(urlConnection.getErrorStream());"},{"lineNumber":193,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":194,"author":{"gitID":"marlenekoh"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":195,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"URL provided is malformed\");"},{"lineNumber":196,"author":{"gitID":"marlenekoh"},"content":"        } catch (ProtocolException e) {"},{"lineNumber":197,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Protocol exception\");"},{"lineNumber":198,"author":{"gitID":"marlenekoh"},"content":"        } catch (IOException e) {"},{"lineNumber":199,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Failed to open connection\");"},{"lineNumber":200,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"marlenekoh"},"content":"        return contents;"},{"lineNumber":202,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":204,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"marlenekoh"},"content":"     * Read the responded result"},{"lineNumber":206,"author":{"gitID":"marlenekoh"},"content":"     * @param inputStream from nusmods api"},{"lineNumber":207,"author":{"gitID":"marlenekoh"},"content":"     * @return string containing contents of nusmods api"},{"lineNumber":208,"author":{"gitID":"marlenekoh"},"content":"     * @throws IOException from readLine()"},{"lineNumber":209,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"marlenekoh"},"content":"    public static String readStream(InputStream inputStream) throws IOException {"},{"lineNumber":211,"author":{"gitID":"marlenekoh"},"content":"        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(inputStream));"},{"lineNumber":212,"author":{"gitID":"marlenekoh"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":213,"author":{"gitID":"marlenekoh"},"content":"        String inputLine;"},{"lineNumber":214,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":215,"author":{"gitID":"marlenekoh"},"content":"        while ((inputLine \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":216,"author":{"gitID":"marlenekoh"},"content":"            stringBuilder.append(inputLine);"},{"lineNumber":217,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"marlenekoh"},"content":"        reader.close();"},{"lineNumber":219,"author":{"gitID":"marlenekoh"},"content":"        return stringBuilder.toString();"},{"lineNumber":220,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":222,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"marlenekoh"},"content":"     * Parses contents of json file contents result from {@code readStream()}"},{"lineNumber":224,"author":{"gitID":"marlenekoh"},"content":"     * @param contents contents of json file in String"},{"lineNumber":225,"author":{"gitID":"marlenekoh"},"content":"     * @param timetable timetable to set list of modules slots"},{"lineNumber":226,"author":{"gitID":"marlenekoh"},"content":"     * @param moduleCode current module"},{"lineNumber":227,"author":{"gitID":"marlenekoh"},"content":"     * @return all TimetableModuleSlots for the timetable"},{"lineNumber":228,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"marlenekoh"},"content":"    public static ArrayList\u003cTimetableModuleSlot\u003e getAllTimetableModuleSlots(String contents, Timetable timetable,"},{"lineNumber":230,"author":{"gitID":"marlenekoh"},"content":"                                                               String moduleCode) {"},{"lineNumber":231,"author":{"gitID":"marlenekoh"},"content":"        requireNonNull(timetable.getListOfModules());"},{"lineNumber":232,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":233,"author":{"gitID":"marlenekoh"},"content":"        JSONObject jsonObject \u003d null;"},{"lineNumber":234,"author":{"gitID":"marlenekoh"},"content":"        JSONParser parser \u003d new JSONParser();"},{"lineNumber":235,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":236,"author":{"gitID":"marlenekoh"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"marlenekoh"},"content":"            Object obj \u003d parser.parse(contents);"},{"lineNumber":238,"author":{"gitID":"marlenekoh"},"content":"            jsonObject \u003d (JSONObject) obj;"},{"lineNumber":239,"author":{"gitID":"marlenekoh"},"content":"        } catch (Exception e) {"},{"lineNumber":240,"author":{"gitID":"marlenekoh"},"content":"            logger.warning(\"Exception caught in parsing JSONObject\");"},{"lineNumber":241,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":243,"author":{"gitID":"marlenekoh"},"content":"        JSONArray arrOfClassInformation \u003d null;"},{"lineNumber":244,"author":{"gitID":"marlenekoh"},"content":"        Object object \u003d jsonObject.get(\"Timetable\");"},{"lineNumber":245,"author":{"gitID":"marlenekoh"},"content":"        arrOfClassInformation \u003d (JSONArray) object;"},{"lineNumber":246,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":247,"author":{"gitID":"marlenekoh"},"content":"        String tempLessonType;"},{"lineNumber":248,"author":{"gitID":"marlenekoh"},"content":"        String tempClassType;"},{"lineNumber":249,"author":{"gitID":"marlenekoh"},"content":"        String tempWeekFreq;"},{"lineNumber":250,"author":{"gitID":"marlenekoh"},"content":"        String tempDay;"},{"lineNumber":251,"author":{"gitID":"marlenekoh"},"content":"        String tempStartTime;"},{"lineNumber":252,"author":{"gitID":"marlenekoh"},"content":"        String tempEndTime;"},{"lineNumber":253,"author":{"gitID":"marlenekoh"},"content":"        String tempVenue;"},{"lineNumber":254,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":255,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, TimetableModule\u003e listOfModules \u003d timetable.getListOfModules();"},{"lineNumber":256,"author":{"gitID":"marlenekoh"},"content":"        TimetableModule timetableModule \u003d listOfModules.get(moduleCode);"},{"lineNumber":257,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, String\u003e listOfLessons \u003d timetableModule.getListOfLessons();"},{"lineNumber":258,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":259,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cTimetableModuleSlot\u003e listOfModuleSlots \u003d new ArrayList\u003cTimetableModuleSlot\u003e();"},{"lineNumber":260,"author":{"gitID":"marlenekoh"},"content":"        for (Object t : arrOfClassInformation) {"},{"lineNumber":261,"author":{"gitID":"marlenekoh"},"content":"            tempLessonType \u003d ((JSONObject) t).get(\"LessonType\").toString();"},{"lineNumber":262,"author":{"gitID":"marlenekoh"},"content":"            tempClassType \u003d ((JSONObject) t).get(\"ClassNo\").toString();"},{"lineNumber":263,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":264,"author":{"gitID":"marlenekoh"},"content":"            if (listOfLessons.get(tempLessonType).equals(tempClassType)) {"},{"lineNumber":265,"author":{"gitID":"marlenekoh"},"content":"                tempWeekFreq \u003d ((JSONObject) t).get(\"WeekText\").toString();"},{"lineNumber":266,"author":{"gitID":"marlenekoh"},"content":"                tempDay \u003d ((JSONObject) t).get(\"DayText\").toString();"},{"lineNumber":267,"author":{"gitID":"marlenekoh"},"content":"                tempStartTime \u003d ((JSONObject) t).get(\"StartTime\").toString();"},{"lineNumber":268,"author":{"gitID":"marlenekoh"},"content":"                tempEndTime \u003d ((JSONObject) t).get(\"EndTime\").toString();"},{"lineNumber":269,"author":{"gitID":"marlenekoh"},"content":"                tempVenue \u003d ((JSONObject) t).get(\"Venue\").toString();"},{"lineNumber":270,"author":{"gitID":"marlenekoh"},"content":"                listOfModuleSlots.add(new TimetableModuleSlot(moduleCode, tempLessonType, tempClassType,"},{"lineNumber":271,"author":{"gitID":"marlenekoh"},"content":"                        tempWeekFreq, tempDay, tempVenue, tempStartTime, tempEndTime));"},{"lineNumber":272,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":273,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"marlenekoh"},"content":"        return listOfModuleSlots;"},{"lineNumber":275,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":277,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"marlenekoh"},"content":"     * Sorts TimetableModuleSlots"},{"lineNumber":279,"author":{"gitID":"marlenekoh"},"content":"     * @return HashMap of {@code Day}, {@code list of TimetableModuleSlots sorted by time}"},{"lineNumber":280,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"marlenekoh"},"content":"    public static HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortModuleSlotsByDay("},{"lineNumber":282,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e unsortedTimetableModuleSlots) {"},{"lineNumber":283,"author":{"gitID":"marlenekoh"},"content":"        ArrayList\u003cArrayList\u003cTimetableModuleSlot\u003e\u003e listOfDays \u003d new ArrayList\u003cArrayList\u003cTimetableModuleSlot\u003e\u003e();"},{"lineNumber":284,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":285,"author":{"gitID":"marlenekoh"},"content":"        // add ArrayList for Monday to Friday"},{"lineNumber":286,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":287,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":288,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":289,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":290,"author":{"gitID":"marlenekoh"},"content":"        listOfDays.add(new ArrayList\u003cTimetableModuleSlot\u003e());"},{"lineNumber":291,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":292,"author":{"gitID":"marlenekoh"},"content":"        for (TimetableModuleSlot t : unsortedTimetableModuleSlots) {"},{"lineNumber":293,"author":{"gitID":"marlenekoh"},"content":"            try {"},{"lineNumber":294,"author":{"gitID":"marlenekoh"},"content":"                listOfDays.get(convertDayToInteger(t.getDay())).add(t);"},{"lineNumber":295,"author":{"gitID":"marlenekoh"},"content":"            } catch (IllegalValueException e) {"},{"lineNumber":296,"author":{"gitID":"marlenekoh"},"content":"                logger.warning(\"Invalid day entered\");"},{"lineNumber":297,"author":{"gitID":"marlenekoh"},"content":"            }"},{"lineNumber":298,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":300,"author":{"gitID":"marlenekoh"},"content":"        for (ArrayList\u003cTimetableModuleSlot\u003e t : listOfDays) {"},{"lineNumber":301,"author":{"gitID":"marlenekoh"},"content":"            t \u003d sortModuleSlotsByTime(t);"},{"lineNumber":302,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":304,"author":{"gitID":"marlenekoh"},"content":"        HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e sortedTimetableModuleSlots \u003d"},{"lineNumber":305,"author":{"gitID":"marlenekoh"},"content":"                new HashMap\u003cString, ArrayList\u003cTimetableModuleSlot\u003e\u003e();"},{"lineNumber":306,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(\"MONDAY\", listOfDays.get(MONDAY_INDEX));"},{"lineNumber":307,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(\"TUESDAY\", listOfDays.get(TUESDAY_INDEX));"},{"lineNumber":308,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(\"WEDNESDAY\", listOfDays.get(WEDNESDAY_INDEX));"},{"lineNumber":309,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(\"THURSDAY\", listOfDays.get(THURSDAY_INDEX));"},{"lineNumber":310,"author":{"gitID":"marlenekoh"},"content":"        sortedTimetableModuleSlots.put(\"FRIDAY\", listOfDays.get(FRIDAY_INDEX));"},{"lineNumber":311,"author":{"gitID":"marlenekoh"},"content":"        return sortedTimetableModuleSlots;"},{"lineNumber":312,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":314,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"marlenekoh"},"content":"     * Sorts Module Slots by Time"},{"lineNumber":316,"author":{"gitID":"marlenekoh"},"content":"     * @param timetableModuleSlots"},{"lineNumber":317,"author":{"gitID":"marlenekoh"},"content":"     * @return"},{"lineNumber":318,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"marlenekoh"},"content":"    public static ArrayList\u003cTimetableModuleSlot\u003e sortModuleSlotsByTime("},{"lineNumber":320,"author":{"gitID":"marlenekoh"},"content":"            ArrayList\u003cTimetableModuleSlot\u003e timetableModuleSlots) {"},{"lineNumber":321,"author":{"gitID":"marlenekoh"},"content":"        Collections.sort(timetableModuleSlots);"},{"lineNumber":322,"author":{"gitID":"marlenekoh"},"content":"        return timetableModuleSlots;"},{"lineNumber":323,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":325,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"marlenekoh"},"content":"     * Converts shortened lesson type from URL to long lesson type in API"},{"lineNumber":327,"author":{"gitID":"marlenekoh"},"content":"     * @param lessonType shortened lesson type from URL"},{"lineNumber":328,"author":{"gitID":"marlenekoh"},"content":"     * @return long lesson type in API"},{"lineNumber":329,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":330,"author":{"gitID":"marlenekoh"},"content":"    public static String convertLessonType(String lessonType) throws IllegalValueException {"},{"lineNumber":331,"author":{"gitID":"marlenekoh"},"content":"        switch (lessonType) {"},{"lineNumber":332,"author":{"gitID":"marlenekoh"},"content":"        case \"LEC\":"},{"lineNumber":333,"author":{"gitID":"marlenekoh"},"content":"            return \"Lecture\";"},{"lineNumber":334,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":335,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT\":"},{"lineNumber":336,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial\";"},{"lineNumber":337,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":338,"author":{"gitID":"marlenekoh"},"content":"        case \"LAB\":"},{"lineNumber":339,"author":{"gitID":"marlenekoh"},"content":"            return \"Laboratory\";"},{"lineNumber":340,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":341,"author":{"gitID":"marlenekoh"},"content":"        case \"SEM\":"},{"lineNumber":342,"author":{"gitID":"marlenekoh"},"content":"            return \"Seminar-Style Module Class\";"},{"lineNumber":343,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":344,"author":{"gitID":"marlenekoh"},"content":"        case \"SEC\":"},{"lineNumber":345,"author":{"gitID":"marlenekoh"},"content":"            return \"Sectional Teaching\";"},{"lineNumber":346,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":347,"author":{"gitID":"marlenekoh"},"content":"        case \"REC\":"},{"lineNumber":348,"author":{"gitID":"marlenekoh"},"content":"            return \"Recitation\";"},{"lineNumber":349,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":350,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT2\":"},{"lineNumber":351,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial Type 2\";"},{"lineNumber":352,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":353,"author":{"gitID":"marlenekoh"},"content":"        case \"TUT3\":"},{"lineNumber":354,"author":{"gitID":"marlenekoh"},"content":"            return \"Tutorial Type 3\";"},{"lineNumber":355,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":356,"author":{"gitID":"marlenekoh"},"content":"        default:"},{"lineNumber":357,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_CLASS_TYPE);"},{"lineNumber":358,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":361,"author":{"gitID":"marlenekoh"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"marlenekoh"},"content":"     * Converts {@code Day} to Integer for comparative purposes"},{"lineNumber":363,"author":{"gitID":"marlenekoh"},"content":"     * @param day in String"},{"lineNumber":364,"author":{"gitID":"marlenekoh"},"content":"     * @return int representing day"},{"lineNumber":365,"author":{"gitID":"marlenekoh"},"content":"     */"},{"lineNumber":366,"author":{"gitID":"marlenekoh"},"content":"    public static int convertDayToInteger(String day) throws IllegalValueException {"},{"lineNumber":367,"author":{"gitID":"marlenekoh"},"content":"        switch (day.toLowerCase()) {"},{"lineNumber":368,"author":{"gitID":"marlenekoh"},"content":"        case \"monday\":"},{"lineNumber":369,"author":{"gitID":"marlenekoh"},"content":"            return 0;"},{"lineNumber":370,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":371,"author":{"gitID":"marlenekoh"},"content":"        case \"tuesday\":"},{"lineNumber":372,"author":{"gitID":"marlenekoh"},"content":"            return 1;"},{"lineNumber":373,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":374,"author":{"gitID":"marlenekoh"},"content":"        case \"wednesday\":"},{"lineNumber":375,"author":{"gitID":"marlenekoh"},"content":"            return 2;"},{"lineNumber":376,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":377,"author":{"gitID":"marlenekoh"},"content":"        case \"thursday\":"},{"lineNumber":378,"author":{"gitID":"marlenekoh"},"content":"            return 3;"},{"lineNumber":379,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":380,"author":{"gitID":"marlenekoh"},"content":"        case \"friday\":"},{"lineNumber":381,"author":{"gitID":"marlenekoh"},"content":"            return 4;"},{"lineNumber":382,"author":{"gitID":"marlenekoh"},"content":""},{"lineNumber":383,"author":{"gitID":"marlenekoh"},"content":"        default:"},{"lineNumber":384,"author":{"gitID":"marlenekoh"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DAY_TYPE);"},{"lineNumber":385,"author":{"gitID":"marlenekoh"},"content":"        }"},{"lineNumber":386,"author":{"gitID":"marlenekoh"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"marlenekoh"},"content":"}"}],"authorContributionMap":{"marlenekoh":357,"-":30}},{"path":"src/main/java/seedu/address/model/locationfinder/LocationFinder.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.model.locationfinder;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"HEARTOFAL1ON"},"content":"//@@author HEARTOFAL1ON"},{"lineNumber":7,"author":{"gitID":"HEARTOFAL1ON"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"HEARTOFAL1ON"},"content":" * Represents a Google Maps location search query"},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":" */"},{"lineNumber":10,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class LocationFinder {"},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static final String MESSAGE_LOCATION_FINDER_CONSTRAINTS \u003d \"A Google Maps location search query\""},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \" should be of the following format https://www.google.com/maps/search/?api\u003d1\u0026query\u003d and\""},{"lineNumber":14,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \" adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \"1. The URL should start with https://www.google.com/maps/search/?api\u003d1\u0026query\u003d\\n\""},{"lineNumber":16,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \"2. The part after that can take any values, and it should not be blank. It also has to be a\""},{"lineNumber":17,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \" URL-escaped string but Java API has a dedicated URLEncoder class which contains methods to\""},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + \" convert a string into HTML format.\";"},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private static final String GOOGLE_MAPS_SEARCH_URL_REGEX \u003d \"https://www.google.com/maps/search/?api\u003d1\u0026query\u003d\";"},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /*"},{"lineNumber":22,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * The first character of the parameters must not be a whitespace,"},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":24,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private static final String QUERY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":26,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":27,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static final String LOCATION_FINDER_VALIDATION_REGEX \u003d GOOGLE_MAPS_SEARCH_URL_REGEX"},{"lineNumber":28,"author":{"gitID":"HEARTOFAL1ON"},"content":"            + QUERY_VALIDATION_REGEX;"},{"lineNumber":29,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public final String value;"},{"lineNumber":30,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private String url;"},{"lineNumber":31,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":32,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Constructs an {@code Address}."},{"lineNumber":34,"author":{"gitID":"HEARTOFAL1ON"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * @param locationQuery A valid locationQuery."},{"lineNumber":36,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public LocationFinder(String locationQuery) {"},{"lineNumber":38,"author":{"gitID":"HEARTOFAL1ON"},"content":"        requireNonNull(locationQuery);"},{"lineNumber":39,"author":{"gitID":"HEARTOFAL1ON"},"content":"        checkArgument(isValidLocationQuery(locationQuery), MESSAGE_LOCATION_FINDER_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"HEARTOFAL1ON"},"content":"        this.value \u003d locationQuery;"},{"lineNumber":41,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":43,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public String getLocationFinderUrl() {"},{"lineNumber":44,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return url;"},{"lineNumber":45,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":47,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public void setLocationFinderUrl(String url) {"},{"lineNumber":48,"author":{"gitID":"HEARTOFAL1ON"},"content":"        this.url \u003d url;"},{"lineNumber":49,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":51,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Returns true if a given string is a valid location query."},{"lineNumber":53,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static boolean isValidLocationQuery(String test) {"},{"lineNumber":55,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return test.matches(LOCATION_FINDER_VALIDATION_REGEX);"},{"lineNumber":56,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":58,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return value;"},{"lineNumber":61,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":63,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"HEARTOFAL1ON"},"content":"                || (other instanceof LocationFinder // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"HEARTOFAL1ON"},"content":"                \u0026\u0026 this.value.equals(((LocationFinder) other).value)); // state check"},{"lineNumber":68,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":70,"author":{"gitID":"HEARTOFAL1ON"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return value.hashCode();"},{"lineNumber":73,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":75,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"-":4,"HEARTOFAL1ON":71}},{"path":"src/main/java/seedu/address/model/locationfinder/LocationFinderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"HEARTOFAL1ON"},"content":"package seedu.address.model.locationfinder;"},{"lineNumber":2,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitID":"HEARTOFAL1ON"},"content":"import java.net.URLEncoder;"},{"lineNumber":10,"author":{"gitID":"HEARTOFAL1ON"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":12,"author":{"gitID":"HEARTOFAL1ON"},"content":"import javax.net.ssl.HttpsURLConnection;"},{"lineNumber":13,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":18,"author":{"gitID":"HEARTOFAL1ON"},"content":"//@@author HEARTOFAL1ON"},{"lineNumber":19,"author":{"gitID":"HEARTOFAL1ON"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"HEARTOFAL1ON"},"content":" * A class containing utility methods for LocationFinder"},{"lineNumber":21,"author":{"gitID":"HEARTOFAL1ON"},"content":" */"},{"lineNumber":22,"author":{"gitID":"HEARTOFAL1ON"},"content":"public class LocationFinderUtil {"},{"lineNumber":23,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":24,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":25,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private static final String INVALID_URL_RESULT \u003d \"https://www.google.com/maps/search/?api\u003d1\u0026query\u003d\";"},{"lineNumber":26,"author":{"gitID":"HEARTOFAL1ON"},"content":"    private static final String MESSAGE_INVALID_URL \u003d \"Invalid Google Maps search query URL provided.\";"},{"lineNumber":27,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":28,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Sets up attributes of a given {@code LocationFinder}."},{"lineNumber":30,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * @param locationFinder LocationFinder to be set up"},{"lineNumber":31,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static void setUpTimetableInfo(LocationFinder locationFinder) {"},{"lineNumber":33,"author":{"gitID":"HEARTOFAL1ON"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"HEARTOFAL1ON"},"content":"            setLocationFinderUrl(locationFinder);"},{"lineNumber":35,"author":{"gitID":"HEARTOFAL1ON"},"content":"            setLocationFinderUrl(locationFinder);"},{"lineNumber":36,"author":{"gitID":"HEARTOFAL1ON"},"content":"            getResultFromApi(locationFinder);"},{"lineNumber":37,"author":{"gitID":"HEARTOFAL1ON"},"content":"        } catch (ParseException e) {"},{"lineNumber":38,"author":{"gitID":"HEARTOFAL1ON"},"content":"            logger.warning(MESSAGE_INVALID_URL);"},{"lineNumber":39,"author":{"gitID":"HEARTOFAL1ON"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":42,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Sets the URL for {@code locationFinder}."},{"lineNumber":44,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static void setLocationFinderUrl(LocationFinder locationFinder) throws ParseException {"},{"lineNumber":46,"author":{"gitID":"HEARTOFAL1ON"},"content":"        String locationFinderUrl \u003d locationFinder.value;"},{"lineNumber":47,"author":{"gitID":"HEARTOFAL1ON"},"content":"        String finalUrl \u003d null;"},{"lineNumber":48,"author":{"gitID":"HEARTOFAL1ON"},"content":"        checkArgument(LocationFinder.isValidLocationQuery(locationFinderUrl),"},{"lineNumber":49,"author":{"gitID":"HEARTOFAL1ON"},"content":"                LocationFinder.MESSAGE_LOCATION_FINDER_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":51,"author":{"gitID":"HEARTOFAL1ON"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"HEARTOFAL1ON"},"content":"            URLEncoder.encode(locationFinderUrl);"},{"lineNumber":53,"author":{"gitID":"HEARTOFAL1ON"},"content":"            final URL lFUrl \u003d new URL(locationFinderUrl);"},{"lineNumber":54,"author":{"gitID":"HEARTOFAL1ON"},"content":"            final HttpsURLConnection urlConnection \u003d (HttpsURLConnection) lFUrl.openConnection();"},{"lineNumber":55,"author":{"gitID":"HEARTOFAL1ON"},"content":"            urlConnection.setInstanceFollowRedirects(false);"},{"lineNumber":56,"author":{"gitID":"HEARTOFAL1ON"},"content":"            finalUrl \u003d urlConnection.getHeaderField(\"address\");"},{"lineNumber":57,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":58,"author":{"gitID":"HEARTOFAL1ON"},"content":"            if (finalUrl.equals(INVALID_URL_RESULT)) {"},{"lineNumber":59,"author":{"gitID":"HEARTOFAL1ON"},"content":"                throw new ParseException(MESSAGE_INVALID_URL);"},{"lineNumber":60,"author":{"gitID":"HEARTOFAL1ON"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"HEARTOFAL1ON"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":62,"author":{"gitID":"HEARTOFAL1ON"},"content":"            logger.warning(\"URL provided is malformed\");"},{"lineNumber":63,"author":{"gitID":"HEARTOFAL1ON"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitID":"HEARTOFAL1ON"},"content":"            logger.warning(\"Failed to open connection\");"},{"lineNumber":65,"author":{"gitID":"HEARTOFAL1ON"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"HEARTOFAL1ON"},"content":"        locationFinder.setLocationFinderUrl(finalUrl);"},{"lineNumber":67,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":69,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static void getResultFromApi(LocationFinder locationFinder) {"},{"lineNumber":70,"author":{"gitID":"HEARTOFAL1ON"},"content":"        // dummy method"},{"lineNumber":71,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":73,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Retrieves json file from Google Maps API and converts to String"},{"lineNumber":75,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static String getJsonContentsFromNusModsApi() {"},{"lineNumber":77,"author":{"gitID":"HEARTOFAL1ON"},"content":"        // dummy method"},{"lineNumber":78,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return null;"},{"lineNumber":79,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":81,"author":{"gitID":"HEARTOFAL1ON"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * Read the responded result"},{"lineNumber":83,"author":{"gitID":"HEARTOFAL1ON"},"content":"     * @throws IOException from readLine()"},{"lineNumber":84,"author":{"gitID":"HEARTOFAL1ON"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"HEARTOFAL1ON"},"content":"    public static String readStream(InputStream inputStream) throws IOException {"},{"lineNumber":86,"author":{"gitID":"HEARTOFAL1ON"},"content":"        // dummy method"},{"lineNumber":87,"author":{"gitID":"HEARTOFAL1ON"},"content":"        return null;"},{"lineNumber":88,"author":{"gitID":"HEARTOFAL1ON"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"HEARTOFAL1ON"},"content":""},{"lineNumber":90,"author":{"gitID":"HEARTOFAL1ON"},"content":"}"}],"authorContributionMap":{"-":9,"HEARTOFAL1ON":81}}]
