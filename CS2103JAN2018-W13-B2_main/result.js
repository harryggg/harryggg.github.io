var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":"Event Planning Isn\u0027t Complicated (EPIC) was developed by the https://github.com/CS2103JAN2018-W13-B2[W13-B2] team"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"as part of our CS2103T Software Engineering project +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d Bay Wei Heng"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"image::bayweiheng.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"{empty}[https://github.com/bayweiheng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"Roles: Documentation, Scheduling and Tracking, Third-Party Tools +"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"Responsibilities: Logic"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Jiang Yue"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"image::jiangyue12392.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"{empty}[http://github.com/jiangyue12392[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"Role: Developer, Deliverables and Deadline, Code Quality +"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"Responsibilities: Storage"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Gan Wei Liang"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"image::william6364.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"{empty}[http://github.com/william6364[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"Role: Developer, Testing, IntelliJ expert +"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"Responsibilities: Model"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"\u003d\u003d\u003d Raynold Ng"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"image::raynoldng.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"{empty}[http://github.com/raynoldng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"Responsibilities: Dev Ops, UI, Integration"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"bayweiheng":7,"william6364":5,"jiangyue12392":5,"-":28,"raynoldng":4}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"\u003d Event Planning isn\u0027t Complicated (EPIC)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"image:https://travis-ci.org/CS2103JAN2018-W13-B2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103JAN2018-W13-B2/main\"]"},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"https://ci.appveyor.com/project/bayweiheng/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/cg7fn8xpqohspy9k?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":"https://coveralls.io/github/CS2103JAN2018-W13-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W13-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"* This is a desktop application facilitating planning for large events in schools. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"* It is a Java application *written in OOP fashion*."},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"* It has support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"* The code was modified from the https://github.com/se-edu/addressbook-level4[AddressBook-Level4 project], created by the https://github.com/se-edu/[SE-EDU initiative]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"bayweiheng":9,"-":27}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"public class SampleDataTest extends EventPlannerSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    protected EventPlanner getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":3,"-":48}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"\u003d Event Planning isn’t Complicated (EPIC) - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"By: `Team W13-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"Event Planning isn’t Complicated (EPIC) is a desktop application used for *event planning and registration for large organisations*."},{"lineNumber":21,"author":{"gitID":"-"},"content":"EPIC is *optimized for event planners who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":22,"author":{"gitID":"-"},"content":"If you can type fast, EPIC can get your event planning tasks and registration processes for events done faster than traditional GUI apps or pen and paper registration."},{"lineNumber":23,"author":{"gitID":"-"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"This section walks you through setting up EPIC on your computer, and goes through some example commands you can try."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":".  Download the latest `EPIC.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":".  Copy the file to the folder you want to use as the home folder for your Event Planner."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Event Planner."},{"lineNumber":47,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Layout]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Layout"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"This section details the layout of the GUI, and common ways to interact with it."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"* The top of the GUI is the command box, where you can see commands as you are typing them."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* The main part of the GUI is split into three panes."},{"lineNumber":61,"author":{"gitID":"-"},"content":"** In the leftmost pane, a list of persons in your organisation is displayed."},{"lineNumber":62,"author":{"gitID":"-"},"content":"** In the middle pane, a list of events is displayed."},{"lineNumber":63,"author":{"gitID":"-"},"content":"** In the rightmost pane, a list of registered persons for the selected event is displayed."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":66,"author":{"gitID":"-"},"content":"The lists displayed in the panes can be filtered using the `find` or `find-event` commands!"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"* Clicking on an event in the middle pane selects that event, allowing you to see all persons registered for that event in the rightmost pane,"},{"lineNumber":69,"author":{"gitID":"-"},"content":"as well as perform actions such as toggling attendance. This can also be done with the `select` command in the command box."},{"lineNumber":70,"author":{"gitID":"-"},"content":"* Clicking on the tick/cross symbol next to a person\u0027s details in the rightmost pane allows you to toggle the attendance of the person for the currently selected event."},{"lineNumber":71,"author":{"gitID":"-"},"content":"This can also be done with the `toggle` command."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"This section details the various features EPIC supports."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":83,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"This command opens the help screen in a separate window."},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"Adds a person to the event planner +"},{"lineNumber":96,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":99,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":104,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Shows a list of all persons in the event planner on the left pane. +"},{"lineNumber":109,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"Edits an existing person in the event planner. +"},{"lineNumber":114,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"****"},{"lineNumber":117,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`."},{"lineNumber":118,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the leftmost pane."},{"lineNumber":119,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Finds persons in your organisation whose names contain any of the given keywords. +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Persons matching *at least* one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"Deletes the specified person from the event planner. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX` shown."},{"lineNumber":160,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the leftmost pane."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":167,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"Deletes the 2nd person in the event planner."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":170,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select` [Deprecated]"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"****"},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Selects the person."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":181,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the leftmost pane."},{"lineNumber":182,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":183,"author":{"gitID":"-"},"content":"****"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"Selects the 2nd person in the event planner."},{"lineNumber":190,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Adding an event: `add-event` [Since v1.2]"},{"lineNumber":195,"author":{"gitID":"william6364"},"content":""},{"lineNumber":196,"author":{"gitID":"william6364"},"content":"Adds an event to the event planner. +"},{"lineNumber":197,"author":{"gitID":"william6364"},"content":"Format: `add-event n/NAME [t/TAG]...`"},{"lineNumber":198,"author":{"gitID":"william6364"},"content":""},{"lineNumber":199,"author":{"gitID":"william6364"},"content":"[TIP]"},{"lineNumber":200,"author":{"gitID":"william6364"},"content":"An event can have any number of tags (including 0)"},{"lineNumber":201,"author":{"gitID":"william6364"},"content":""},{"lineNumber":202,"author":{"gitID":"william6364"},"content":"Examples:"},{"lineNumber":203,"author":{"gitID":"william6364"},"content":""},{"lineNumber":204,"author":{"gitID":"william6364"},"content":"* `add-event n/AY201718 Graduation t/Graduation`"},{"lineNumber":205,"author":{"gitID":"william6364"},"content":"* `add-event n/Computing Seminar`"},{"lineNumber":206,"author":{"gitID":"william6364"},"content":""},{"lineNumber":207,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Listing all events: `list-events` [Since v1.2]"},{"lineNumber":208,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Shows a list of all events in the event planner in the middle pane. +"},{"lineNumber":210,"author":{"gitID":"jiangyue12392"},"content":"Format: `list-events`"},{"lineNumber":211,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":212,"author":{"gitID":"raynoldng"},"content":"\u003d\u003d\u003d Selecting an event: `select-event` [Since v1.4]"},{"lineNumber":213,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":214,"author":{"gitID":"raynoldng"},"content":"Selects the event identified by the index number used in the last event listing."},{"lineNumber":215,"author":{"gitID":"raynoldng"},"content":"Attendance panel will show person registered for the selected event."},{"lineNumber":216,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":217,"author":{"gitID":"raynoldng"},"content":"Format: `select-event INDEX`"},{"lineNumber":218,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":219,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":220,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":221,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Editing an event : `edit-event` [Since v1.2]"},{"lineNumber":222,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":223,"author":{"gitID":"jiangyue12392"},"content":"Edits an existing event in the event planner. +"},{"lineNumber":224,"author":{"gitID":"william6364"},"content":"Format: `edit-event INDEX [n/NAME] [t/TAG]...`"},{"lineNumber":225,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":226,"author":{"gitID":"jiangyue12392"},"content":"****"},{"lineNumber":227,"author":{"gitID":"-"},"content":"* Edits the event at the specified `INDEX`. The index refers to the index number shown in middle pane."},{"lineNumber":228,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":231,"author":{"gitID":"jiangyue12392"},"content":"* When editing tags, the existing tags of the event will be removed i.e adding of tags is not cumulative."},{"lineNumber":232,"author":{"gitID":"jiangyue12392"},"content":"* You can remove all the event\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":233,"author":{"gitID":"jiangyue12392"},"content":"****"},{"lineNumber":234,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":235,"author":{"gitID":"jiangyue12392"},"content":"Examples:"},{"lineNumber":236,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":237,"author":{"gitID":"william6364"},"content":"* `edit-event 1 n/IoT Talk t/talk` +"},{"lineNumber":238,"author":{"gitID":"jiangyue12392"},"content":"Edits the name and tag of the 1st event to be `IoT Talk` and `talk` respectively."},{"lineNumber":239,"author":{"gitID":"william6364"},"content":"* `edit-event 2 n/Graduation Day t/` +"},{"lineNumber":240,"author":{"gitID":"jiangyue12392"},"content":"Edits the name of the 2nd event to be `Graduation Day` and clears all existing tags."},{"lineNumber":241,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":242,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Locating events by name: `find-event` [Since v1.2]"},{"lineNumber":243,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":244,"author":{"gitID":"jiangyue12392"},"content":"Finds events whose names contain any of the given keywords. +"},{"lineNumber":245,"author":{"gitID":"jiangyue12392"},"content":"Format: `find-event KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":246,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":247,"author":{"gitID":"jiangyue12392"},"content":"****"},{"lineNumber":248,"author":{"gitID":"jiangyue12392"},"content":"* The search is case insensitive. e.g `talks` will match `Talks`"},{"lineNumber":249,"author":{"gitID":"jiangyue12392"},"content":"* The order of the keywords does not matter. e.g. `Food Talk` will match `Talk Food`"},{"lineNumber":250,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":251,"author":{"gitID":"jiangyue12392"},"content":"* Only full words will be matched e.g. `Talk` will not match `Talks`"},{"lineNumber":252,"author":{"gitID":"jiangyue12392"},"content":"* Events matching at least one keyword will be returned (i.e. `OR` search). e.g. `Talk` will return `Food Talk`, `IoT Talk`"},{"lineNumber":253,"author":{"gitID":"jiangyue12392"},"content":"****"},{"lineNumber":254,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":255,"author":{"gitID":"jiangyue12392"},"content":"Examples:"},{"lineNumber":256,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":257,"author":{"gitID":"william6364"},"content":"* `find-event Talk` +"},{"lineNumber":258,"author":{"gitID":"jiangyue12392"},"content":"Returns `Talk` and `Food Talk`"},{"lineNumber":259,"author":{"gitID":"william6364"},"content":"* `find-event Talk Competition` +"},{"lineNumber":260,"author":{"gitID":"jiangyue12392"},"content":"Returns any event having name `Talk`, or `Competition`"},{"lineNumber":261,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":262,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Deleting an event : `delete-event` [Since v1.2]"},{"lineNumber":263,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":264,"author":{"gitID":"jiangyue12392"},"content":"Deletes the specified event from the event planner. +"},{"lineNumber":265,"author":{"gitID":"william6364"},"content":"Format: `delete-event INDEX`"},{"lineNumber":266,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":267,"author":{"gitID":"jiangyue12392"},"content":"****"},{"lineNumber":268,"author":{"gitID":"jiangyue12392"},"content":"* Deletes the event at the specified `INDEX`."},{"lineNumber":269,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the middle pane."},{"lineNumber":270,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":271,"author":{"gitID":"-"},"content":"****"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"jiangyue12392"},"content":"* `list-events` +"},{"lineNumber":276,"author":{"gitID":"jiangyue12392"},"content":"`delete-event 2` +"},{"lineNumber":277,"author":{"gitID":"jiangyue12392"},"content":"Deletes the 2nd event in the event planner."},{"lineNumber":278,"author":{"gitID":"jiangyue12392"},"content":"* `find-event Talk` +"},{"lineNumber":279,"author":{"gitID":"jiangyue12392"},"content":"`delete-event 1` +"},{"lineNumber":280,"author":{"gitID":"jiangyue12392"},"content":"Deletes the 1st event in the results of the `find-event` command."},{"lineNumber":281,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":282,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Registering a person to an event: `register` [Since v1.2]"},{"lineNumber":283,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":284,"author":{"gitID":"bayweiheng"},"content":"Registers the specified person to an event in the event planner. +"},{"lineNumber":285,"author":{"gitID":"bayweiheng"},"content":"Format: `register INDEX EVENT_NAME`"},{"lineNumber":286,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":287,"author":{"gitID":"bayweiheng"},"content":"****"},{"lineNumber":288,"author":{"gitID":"bayweiheng"},"content":"* Registers the person at the specified `INDEX`."},{"lineNumber":289,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the leftmost pane."},{"lineNumber":290,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":291,"author":{"gitID":"bayweiheng"},"content":"* `EVENT_NAME` must match the name of an event in the EventPlanner exactly."},{"lineNumber":292,"author":{"gitID":"bayweiheng"},"content":"****"},{"lineNumber":293,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":294,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":295,"author":{"gitID":"bayweiheng"},"content":"Examples:"},{"lineNumber":296,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":297,"author":{"gitID":"bayweiheng"},"content":"* `list` +"},{"lineNumber":298,"author":{"gitID":"bayweiheng"},"content":"`register 2 AY201718 Graduation` +"},{"lineNumber":299,"author":{"gitID":"bayweiheng"},"content":"Registers the 2nd person in the event planner to AY201718 Graduation."},{"lineNumber":300,"author":{"gitID":"bayweiheng"},"content":"* `find Betsy` +"},{"lineNumber":301,"author":{"gitID":"bayweiheng"},"content":"`register 1 Computing Seminar` +"},{"lineNumber":302,"author":{"gitID":"bayweiheng"},"content":"Registers the 1st person in the results of the `find` command to Computing Seminar."},{"lineNumber":303,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":304,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Deregistering a person from an event: `deregister` [Since v1.2]"},{"lineNumber":305,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":306,"author":{"gitID":"bayweiheng"},"content":"Deregisters the specified person from an event in the event planner. +"},{"lineNumber":307,"author":{"gitID":"bayweiheng"},"content":"Format: `deregister INDEX EVENT_NAME`"},{"lineNumber":308,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":309,"author":{"gitID":"bayweiheng"},"content":"****"},{"lineNumber":310,"author":{"gitID":"bayweiheng"},"content":"* Deregisters the person at the specified `INDEX`."},{"lineNumber":311,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the leftmost pane."},{"lineNumber":312,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":313,"author":{"gitID":"bayweiheng"},"content":"* `EVENT_NAME` must match the name of an event in the EventPlanner exactly."},{"lineNumber":314,"author":{"gitID":"bayweiheng"},"content":"* The person to be deregistered must be already in the event."},{"lineNumber":315,"author":{"gitID":"bayweiheng"},"content":"****"},{"lineNumber":316,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":317,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":318,"author":{"gitID":"bayweiheng"},"content":"Examples:"},{"lineNumber":319,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":320,"author":{"gitID":"bayweiheng"},"content":"* `list` +"},{"lineNumber":321,"author":{"gitID":"bayweiheng"},"content":"`deregister 2 AY201718 Graduation` +"},{"lineNumber":322,"author":{"gitID":"bayweiheng"},"content":"Deregisters the 2nd person in the event planner from AY201718 Graduation."},{"lineNumber":323,"author":{"gitID":"bayweiheng"},"content":"* `find Betsy` +"},{"lineNumber":324,"author":{"gitID":"bayweiheng"},"content":"`deregister 1 Computing Seminar` +"},{"lineNumber":325,"author":{"gitID":"bayweiheng"},"content":"Deregisters the 1st person in the results of the `find` command to Computing Seminar."},{"lineNumber":326,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":327,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d Listing all persons registered in an event: `list-registered` [Since v1.2]"},{"lineNumber":328,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":329,"author":{"gitID":"bayweiheng"},"content":"Lists all persons registered for the specified event. +"},{"lineNumber":330,"author":{"gitID":"bayweiheng"},"content":"Format: `list-registered EVENT_NAME`"},{"lineNumber":331,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":332,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Toggle attendance for event participant : `toggle` [Since v1.4]"},{"lineNumber":333,"author":{"gitID":"william6364"},"content":""},{"lineNumber":334,"author":{"gitID":"william6364"},"content":"Toggles the attendance of a participant to an event from attended to not attended and vice versa. +"},{"lineNumber":335,"author":{"gitID":"william6364"},"content":"Format: `toggle INDEX`"},{"lineNumber":336,"author":{"gitID":"william6364"},"content":""},{"lineNumber":337,"author":{"gitID":"william6364"},"content":"****"},{"lineNumber":338,"author":{"gitID":"william6364"},"content":"* Toggles the attendance of the participant at the specified `INDEX`."},{"lineNumber":339,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the rightmost pane."},{"lineNumber":340,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":341,"author":{"gitID":"william6364"},"content":"****"},{"lineNumber":342,"author":{"gitID":"william6364"},"content":""},{"lineNumber":343,"author":{"gitID":"william6364"},"content":"Examples:"},{"lineNumber":344,"author":{"gitID":"william6364"},"content":""},{"lineNumber":345,"author":{"gitID":"william6364"},"content":"* `find-event AY201718 Graduation` +"},{"lineNumber":346,"author":{"gitID":"william6364"},"content":"`select-event 1` +"},{"lineNumber":347,"author":{"gitID":"william6364"},"content":"`toggle 1` +"},{"lineNumber":348,"author":{"gitID":"william6364"},"content":"Toggles the attendance of the 1st person attendee in the attendance list of"},{"lineNumber":349,"author":{"gitID":"william6364"},"content":"AY201718 Graduation."},{"lineNumber":350,"author":{"gitID":"william6364"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":357,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":358,"author":{"gitID":"-"},"content":"Pressing the up and down arrows will display the previous and next input respectively in the command box."},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"jiangyue12392"},"content":"Restores the event planner to the state before the previous _undoable_ command was executed. +"},{"lineNumber":365,"author":{"gitID":"-"},"content":"There is no guarantee that relative ordering of persons/events will be maintained after the undoing"},{"lineNumber":366,"author":{"gitID":"-"},"content":"of a `delete` or `delete-event` command. +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":371,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the event planner\u0027s content."},{"lineNumber":372,"author":{"gitID":"-"},"content":"To see the full list of undoable commands, refer to \u003c\u003cList of undoable commands\u003e\u003e"},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":378,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":379,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":384,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":399,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":403,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":404,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":407,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":408,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":410,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":412,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"jiangyue12392"},"content":"Clears all entries from the event planner. +"},{"lineNumber":417,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":422,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"jiangyue12392"},"content":"Event planner data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":427,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Exporting contact information to a csv file : `export` [coming in v2.0]"},{"lineNumber":430,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":431,"author":{"gitID":"bayweiheng"},"content":"Exports the list of all persons in the event planner to a csv file. +"},{"lineNumber":432,"author":{"gitID":"bayweiheng"},"content":"Format: `export FILE_NAME`"},{"lineNumber":433,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":434,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Importing contact information from a csv file : `import` [coming in v2.0]"},{"lineNumber":435,"author":{"gitID":"william6364"},"content":""},{"lineNumber":436,"author":{"gitID":"bayweiheng"},"content":"Imports a list of persons from a csv file and adds them to the event planner. +"},{"lineNumber":437,"author":{"gitID":"bayweiheng"},"content":"Format: `import FILE_NAME`"},{"lineNumber":438,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":439,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Adding feedback for an event from a participant : `add-feedback` [coming in v2.0]"},{"lineNumber":440,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":441,"author":{"gitID":"bayweiheng"},"content":"Adds feedback for an event from a participant of the event. +"},{"lineNumber":442,"author":{"gitID":"bayweiheng"},"content":"Format: `add-feedback INDEX EVENT-NAME FEEDBACK`"},{"lineNumber":443,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":444,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Exporting event details to a csv file : `export-event` [coming in v2.0]"},{"lineNumber":445,"author":{"gitID":"william6364"},"content":""},{"lineNumber":446,"author":{"gitID":"bayweiheng"},"content":"Exports event details for a single event into a csv file. +"},{"lineNumber":447,"author":{"gitID":"bayweiheng"},"content":"Format: `export-event EVENT_NAME FILE_NAME`"},{"lineNumber":448,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":449,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Registering all persons with a particular tag to an event : `register-by-tag` [coming in v2.0]"},{"lineNumber":450,"author":{"gitID":"william6364"},"content":""},{"lineNumber":451,"author":{"gitID":"bayweiheng"},"content":"Registers all persons with a particular tag to an event in the event planner. +"},{"lineNumber":452,"author":{"gitID":"bayweiheng"},"content":"Format: `register-by-tag TAG EVENT_NAME`"},{"lineNumber":453,"author":{"gitID":"william6364"},"content":""},{"lineNumber":454,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Adding automatic email reminder to event participants : `add-reminder` [coming in v2.0]"},{"lineNumber":455,"author":{"gitID":"william6364"},"content":""},{"lineNumber":456,"author":{"gitID":"bayweiheng"},"content":"Adds an automatic email reminder at the stipulated time to all event participants. +"},{"lineNumber":457,"author":{"gitID":"bayweiheng"},"content":"Format: `add-reminder DAYS_OFFSET EVENT_NAME`"},{"lineNumber":458,"author":{"gitID":"william6364"},"content":""},{"lineNumber":459,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Adding hotkeys for commands : `add-hotkey` [coming in v2.0]"},{"lineNumber":460,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":461,"author":{"gitID":"bayweiheng"},"content":"Adds a hotkey for a command. +"},{"lineNumber":462,"author":{"gitID":"bayweiheng"},"content":"Format: `add-hotkey HOTKEY COMMAND_NAME`"},{"lineNumber":463,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":464,"author":{"gitID":"jiangyue12392"},"content":"// end::automatedemailreminder[]"},{"lineNumber":465,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":469,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the data file of your previous Event Planner."},{"lineNumber":470,"author":{"gitID":"-"},"content":"By default, this file is in data/addressbook.xml."},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"william6364"},"content":"* *Add Event* `add-event n/NAME [t/TAG]...` +"},{"lineNumber":475,"author":{"gitID":"william6364"},"content":"e.g. `add-event n/AY201718 Graduation t/Graduation`"},{"lineNumber":476,"author":{"gitID":"william6364"},"content":"* *Add Person* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":477,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":478,"author":{"gitID":"william6364"},"content":"* *Clear Persons and Events* : `clear`"},{"lineNumber":479,"author":{"gitID":"william6364"},"content":"* *Delete Event* : `delete-event INDEX` +"},{"lineNumber":480,"author":{"gitID":"william6364"},"content":"e.g. `delete-event 3`"},{"lineNumber":481,"author":{"gitID":"william6364"},"content":"* *Delete Person* : `delete INDEX` +"},{"lineNumber":482,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":483,"author":{"gitID":"william6364"},"content":"* *Deregister Person* : `deregister INDEX EVENT_NAME` +"},{"lineNumber":484,"author":{"gitID":"william6364"},"content":"e.g. `deregister 1 Computing Seminar`"},{"lineNumber":485,"author":{"gitID":"william6364"},"content":"* *Edit Event* : `edit-event INDEX [n/NAME] [t/TAG]...` +"},{"lineNumber":486,"author":{"gitID":"william6364"},"content":"e.g. `edit-event 1 n/IoT Talk t/talk`"},{"lineNumber":487,"author":{"gitID":"william6364"},"content":"* *Edit Person* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":489,"author":{"gitID":"william6364"},"content":"* *Find Event* : `find-event KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":490,"author":{"gitID":"william6364"},"content":"e.g. `find-event Talk Competition`"},{"lineNumber":491,"author":{"gitID":"william6364"},"content":"* *Find Person* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":492,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":493,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":494,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":495,"author":{"gitID":"william6364"},"content":"* *List Events* : `list-events`"},{"lineNumber":496,"author":{"gitID":"william6364"},"content":"* *List Persons* : `list`"},{"lineNumber":497,"author":{"gitID":"bayweiheng"},"content":"* *List Registered Persons* : `list-registered`"},{"lineNumber":498,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":499,"author":{"gitID":"william6364"},"content":"* *Register Person* : `register INDEX EVENT_NAME` +"},{"lineNumber":500,"author":{"gitID":"william6364"},"content":"e.g. `register 1 Computing Seminar`"},{"lineNumber":501,"author":{"gitID":"william6364"},"content":"* *Select Person* : `select INDEX` +"},{"lineNumber":502,"author":{"gitID":"william6364"},"content":"e.g.`select 2`"},{"lineNumber":503,"author":{"gitID":"william6364"},"content":"* *Toggle Attendance* : `toggle INDEX` +"},{"lineNumber":504,"author":{"gitID":"william6364"},"content":"e.g. `toggle 1`"},{"lineNumber":505,"author":{"gitID":"william6364"},"content":"* *Undo* : `undo`"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":508,"author":{"gitID":"-"},"content":"\u003d\u003d List of undoable commands"},{"lineNumber":509,"author":{"gitID":"-"},"content":"* `add` +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"* `delete` +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"* `add-event` +"},{"lineNumber":512,"author":{"gitID":"-"},"content":"* `delete-event` +"},{"lineNumber":513,"author":{"gitID":"-"},"content":"* `edit` +"},{"lineNumber":514,"author":{"gitID":"-"},"content":"* `edit-event` +"},{"lineNumber":515,"author":{"gitID":"-"},"content":"* `register` +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"* `deregister` +"},{"lineNumber":517,"author":{"gitID":"william6364"},"content":"* `toggle` +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"* `clear` +"}],"authorContributionMap":{"bayweiheng":61,"william6364":73,"jiangyue12392":72,"-":302,"raynoldng":10}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"public class ClearCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"        // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"        /**"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"        // Case: undo clearing address book -\u003e original address book restored"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"        // Case: redo clearing address book -\u003e cleared"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"        // Case: selects first card in person list and clears address book -\u003e cleared and no card selected"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        // Case: filters the person list before clearing -\u003e entire address book cleared"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"        */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":12,"william6364":5,"-":88}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"public class HelpCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"        //        getBrowserPanel().click();"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        //        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        //        assertHelpWindowNotOpen();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"        //        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        executeCommand(DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        //assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":2,"-":84,"raynoldng":6}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyEventPlanner\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":71}},{"path":"src/test/java/systemtests/EventPlannerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"import guitests.guihandles.EpicEventListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListEventCommand;"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListPersonCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.SelectEventCommand;"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.TypicalEpicEvents;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":" * A system test class for EventPlanner, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"public abstract class EventPlannerSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        //        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"    protected EventPlanner getInitialData() {"},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"        return TypicalEpicEvents.getTypicalEventPlanner();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"    public EpicEventListPanelHandle getEventListPanel() {"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"        return mainWindowHandle.getEventListPanel();"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"raynoldng"},"content":"    //    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":117,"author":{"gitID":"raynoldng"},"content":"    //        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":118,"author":{"gitID":"raynoldng"},"content":"    //    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"raynoldng"},"content":"        //    waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"william6364"},"content":"     * Displays all persons in the event planner."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"        executeCommand(ListPersonCommand.COMMAND_WORD);"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"        assertEquals(getModel().getEventPlanner().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"        executeCommand(FindPersonCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":"        assertTrue(getModel().getFilteredPersonList().size()"},{"lineNumber":157,"author":{"gitID":"william6364"},"content":"                \u003c getModel().getEventPlanner().getPersonList().size());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"william6364"},"content":"     * Clear the event planner."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"william6364"},"content":"    protected void clearEventPlanner() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"        assertEquals(0, getModel().getEventPlanner().getPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"william6364"},"content":"     * Displays all events in the event planner."},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"william6364"},"content":"    protected void showAllEvents() {"},{"lineNumber":181,"author":{"gitID":"william6364"},"content":"        executeCommand(ListEventCommand.COMMAND_WORD);"},{"lineNumber":182,"author":{"gitID":"william6364"},"content":"        assertEquals(getModel().getEventPlanner().getEventList().size(), getModel().getFilteredEventList().size());"},{"lineNumber":183,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"william6364"},"content":"     * Displays all events with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":186,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"william6364"},"content":"    protected void showEventsWithName(String keyword) {"},{"lineNumber":188,"author":{"gitID":"william6364"},"content":"        executeCommand(FindEventCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":189,"author":{"gitID":"william6364"},"content":"        assertTrue(getModel().getFilteredEventList().size()"},{"lineNumber":190,"author":{"gitID":"william6364"},"content":"                \u003c getModel().getEventPlanner().getEventList().size());"},{"lineNumber":191,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"william6364"},"content":""},{"lineNumber":193,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"william6364"},"content":"     * Selects the event at {@code index} of the displayed list."},{"lineNumber":195,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"william6364"},"content":"    protected void selectEvent(Index index) {"},{"lineNumber":197,"author":{"gitID":"william6364"},"content":"        executeCommand(SelectEventCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":198,"author":{"gitID":"william6364"},"content":"        assertEquals(index.getZeroBased(), getEventListPanel().getSelectedCardIndex());"},{"lineNumber":199,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"william6364"},"content":""},{"lineNumber":201,"author":{"gitID":"william6364"},"content":"    //@@author"},{"lineNumber":202,"author":{"gitID":"william6364"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":213,"author":{"gitID":"william6364"},"content":"        assertEquals(expectedModel.getEventPlanner(), testApp.readStorageAddressBook());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"william6364"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle}, {@code EventListPanelHandle}"},{"lineNumber":219,"author":{"gitID":"william6364"},"content":"     * and {@code StatusBarFooterHandle} to remember their current state."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":223,"author":{"gitID":"raynoldng"},"content":"        //    getBrowserPanel().rememberUrl();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":227,"author":{"gitID":"william6364"},"content":"        getEventListPanel().rememberSelectedEpicEventCard();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":236,"author":{"gitID":"raynoldng"},"content":"        //    assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":238,"author":{"gitID":"william6364"},"content":"        assertFalse(getEventListPanel().isAnyCardSelected());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"raynoldng"},"content":"        //    assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":266,"author":{"gitID":"raynoldng"},"content":"        //    assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":279,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":296,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":313,"author":{"gitID":"william6364"},"content":"            //        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER"},{"lineNumber":314,"author":{"gitID":"william6364"},"content":"            //        + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":324,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":57,"jiangyue12392":2,"-":260,"raynoldng":9}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Event Planning isn\u0027t Complicated (EPIC) - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":":xrefstyle: short"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B2/main/blob/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W13-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"EPIC is an event planning tool for large organisations hosting many large-scale events (e.g. schools which host competitions,"},{"lineNumber":20,"author":{"gitID":"-"},"content":"award and graduation ceremonies, seminars and talks). It is targeted at and optimised for event planners who are comfortable with using a Command Line Interface (CLI)."},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"This section details the set-up process for working on the codebase on your computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"Please ensure that you have the following installed on your machine:"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project on your computer"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"Please follow these steps to set up the project on your computer:"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":". Click `Import Project`."},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":". Click `Open as Project`."},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":". Click `OK` to accept the default settings."},{"lineNumber":57,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":63,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"After forking the repo, links in the documentation will still point to the `CS3103JAN2018-W13-B2/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W13-B2/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":91,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":103,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"bayweiheng"},"content":"The *_Architecture Diagram_* given below explains the high-level design of the App."},{"lineNumber":111,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":112,"author":{"gitID":"bayweiheng"},"content":"[#architecture-diagram]"},{"lineNumber":113,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":114,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"bayweiheng"},"content":"Below is a quick overview of each component."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. This class has two main responsibilities:"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"* At app launch, it initialises the components in the correct sequence, and connects them up with each other."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* Upon exit, it shuts down the components and invokes cleanup method where necessary."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of these classes play important roles at the architecture level."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"bayweiheng"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":129,"author":{"gitID":"bayweiheng"},"content":"* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI component is responsible for interfacing with the user."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The Logic component is responsible for the parsing and execution of commands."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The Model component is responsible for holding application data in-memory."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The Storage component is responsible for persisting application data on the hard disk."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"Each of the four components:"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the component."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{COMPONENT NAME}Manager` class."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"defines its API in the `Logic.java` interface and exposes its functionality"},{"lineNumber":145,"author":{"gitID":"-"},"content":"using the `LogicManager.java` class."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the interaction between the components after the user issues the command `delete 1`."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":"Note how the `Model` simply raises a `EventPlannerChangedEvent` when the Event Planner data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"which eventually results in the updates being saved to the hard disk and the"},{"lineNumber":160,"author":{"gitID":"-"},"content":"status bar of the UI reflecting the \u0027Last Updated\u0027 time."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":166,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":174,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework."},{"lineNumber":181,"author":{"gitID":"-"},"content":"The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."},{"lineNumber":182,"author":{"gitID":"-"},"content":"For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"The `UI` component:"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":194,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":198,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":201,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"When a command is entered into the command box, the following steps take place:"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"william6364"},"content":".  `Logic` uses the `EventPlannerParser` class to parse the user command."},{"lineNumber":206,"author":{"gitID":"-"},"content":".  A `Command` object is returned by the parser, which is passed to the `LogicManager` to execute."},{"lineNumber":207,"author":{"gitID":"-"},"content":".  The command execution may affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":208,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"The Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call is shown below."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":213,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":219,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":226,"author":{"gitID":"william6364"},"content":"* stores the Event Planner data."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* exposes three unmodifiable `ObservableLists`, one each for `Person`, `EpicEvent` and `Attendance`."},{"lineNumber":228,"author":{"gitID":"-"},"content":"The UI can be bound to any of these lists so that it automatically updates when the data in the list changes."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"The Model does not depend on any of the other three components. This reduces coupling between components."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":235,"author":{"gitID":"jiangyue12392"},"content":"The figure below depicts the classes used for storage."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":238,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and reconstruct the Model from a file of this format."},{"lineNumber":245,"author":{"gitID":"-"},"content":"* can save the Event Planner data in xml format and reconstruct the Model from a file of this format."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d Edit Person/Event feature"},{"lineNumber":257,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d\u003d Previous Implementation"},{"lineNumber":258,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"In https://github.com/se-edu/addressbook-level4[AddressBook-Level4], the `edit` command was performed by creating a new `Person` and passing it to a `UniquePersonList` in the model, which would then replace the to-be-edited `Person` with it."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":262,"author":{"gitID":"-"},"content":"----"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    int index \u003d internalList.indexOf(personToEdit);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    Person editedPerson \u003d new Person(name, ...);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    internalList.set(index, editedPerson);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"----"},{"lineNumber":267,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"bayweiheng"},"content":"In EPIC, the `edit` and `edit-event` commands are now implemented in a mutable manner - instead of replacing the to-be-edited `Person/EpicEvent` with the new one, we edit the details of the to-be-edited `Person/EpicEvent` directly."},{"lineNumber":271,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"----"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    int index \u003d internalList.indexOf(personToEdit);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    Person editedPerson \u003d new Person(name, ...);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    internalList.get(index).setPerson(editedPerson); // setPerson edits internal details using those of the supplied Person"},{"lineNumber":277,"author":{"gitID":"-"},"content":"----"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `edit`"},{"lineNumber":282,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":283,"author":{"gitID":"bayweiheng"},"content":"* **Alternative 1 (current choice):** Edit in a mutable manner"},{"lineNumber":284,"author":{"gitID":"bayweiheng"},"content":"** Pros: Since EPIC has both `EpicEvent` and `Person` objects, which maintain references to one another, editing a `Person/EpicEvent` in this manner automatically updates the `EpicEvent/Person` objects that is associated with it."},{"lineNumber":285,"author":{"gitID":"bayweiheng"},"content":"** Cons: Implementation of `undo` will be more difficult."},{"lineNumber":286,"author":{"gitID":"bayweiheng"},"content":"* **Alternative 2:** Edit in an immutable manner"},{"lineNumber":287,"author":{"gitID":"bayweiheng"},"content":"** Pros: Implementation of `undo` is easier, since we can just replace the current `EventPlanner` with the previous one."},{"lineNumber":288,"author":{"gitID":"bayweiheng"},"content":"** Cons: Editing a `Person/EpicEvent` will require passing a copy of the newly-created `Person/EpicEvent` to all objects associated with the to-be-edited version, introducing significant overhead"},{"lineNumber":289,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":291,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"bayweiheng"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the event planner (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead."},{"lineNumber":297,"author":{"gitID":"-"},"content":"The following diagram shows the class diagram for commands:"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":".Class Diagram for the Logic Component"},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such"},{"lineNumber":303,"author":{"gitID":"-"},"content":"as generating the opposite command before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm"},{"lineNumber":304,"author":{"gitID":"-"},"content":"in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":307,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"----"},{"lineNumber":309,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"},{"lineNumber":315,"author":{"gitID":"-"},"content":"----"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":318,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":319,"author":{"gitID":"-"},"content":"----"},{"lineNumber":320,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"-"},"content":"}"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":"}"},{"lineNumber":335,"author":{"gitID":"-"},"content":"----"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the event planner."},{"lineNumber":340,"author":{"gitID":"-"},"content":"The current state of the event planner is saved before the `delete 5` command executes."},{"lineNumber":341,"author":{"gitID":"-"},"content":"The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":".How a delete command modifies the UndoRedoStack"},{"lineNumber":344,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute"},{"lineNumber":347,"author":{"gitID":"-"},"content":"`add n/David ...` to add a new person."},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":".How an add command modifies the UndoRedoStack"},{"lineNumber":350,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":356,"author":{"gitID":"-"},"content":"The `oppositeCommands` for the `AddPersonCommand` and `DeletePersonCommand` above are different! The former is a `DeletePersonCommand`"},{"lineNumber":357,"author":{"gitID":"-"},"content":"while the latter is an `AddPersonCommand`."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"bayweiheng"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the event planner to the state before the `add` command is executed."},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":".How an undo command utilises the UndoRedoStack"},{"lineNumber":364,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":367,"author":{"gitID":"bayweiheng"},"content":"If the `undoStack` is empty, there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":".Sequence Diagram for the undo command"},{"lineNumber":372,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and performs the intention of the original command)."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":380,"author":{"gitID":"-"},"content":"redo() does not simply execute the `Command` with the previous parameters! This would cause indexing issues with"},{"lineNumber":381,"author":{"gitID":"-"},"content":"commands like `delete` if `filteredPersons` had been altered by a `find` or other view command."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":".How a clear command modifies the UndoRedoStack"},{"lineNumber":386,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":".A list command does not modify the UndoRedoStack"},{"lineNumber":391,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"bayweiheng"},"content":"The following activity diagram summarizes what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":".Activity Diagram for command execution"},{"lineNumber":396,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changes from previous implementation [major enhancement, in progress]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"Instead of saving the entire event planner each time we execute an `UndoableCommand`, each `UndoableCommand` knows how to `undo/redo` itself."},{"lineNumber":401,"author":{"gitID":"-"},"content":"Each `UndoableCommand` has an `oppositeCommand` field, which is another `UndoableCommand` that, when executed, reverses the changes made by the original command."},{"lineNumber":402,"author":{"gitID":"-"},"content":"The sequence diagram for the new `undo()` implementation is shown below."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"image::UndoSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"The `oppositeCommand` is generated in the `execute()` method, after `preprocessUndoableCommand()`. This is because generating the `oppositeCommand`"},{"lineNumber":407,"author":{"gitID":"-"},"content":"requires knowledge of the actual `Person/EpicEvent` objects to be modified. For example, the `oppositeCommand` for a `deletePersonCommand` is an `addPersonCommand`,"},{"lineNumber":408,"author":{"gitID":"-"},"content":"but we only know the person to be deleted after the pre-processing step."},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":411,"author":{"gitID":"-"},"content":"Each `UndoableCommand` now requires its individual `generateOppositeCommand()` implementation. Hence, this method is made abstract in"},{"lineNumber":412,"author":{"gitID":"-"},"content":"the abstract class `UndoableCommand`"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"There was no `Command` that could easily reverse the changes of a `ClearCommand`, hence a new `Command` `RestoreCommand` had to be created. Since the sole purpose"},{"lineNumber":415,"author":{"gitID":"-"},"content":"of this command is be the `oppositeCommand` of a `ClearCommand`. This command is not directly accessible to the user, and can only be executed when"},{"lineNumber":416,"author":{"gitID":"-"},"content":"the user undoes a `ClearCommand`."},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":423,"author":{"gitID":"bayweiheng"},"content":"** Pros: Undo/redo functionality will now be part of the default behaviour. Classes that deal with `Command` will not have to know that `executeUndoableCommand()` exist."},{"lineNumber":424,"author":{"gitID":"bayweiheng"},"content":"** Cons: New developers will find the template pattern difficult to understand."},{"lineNumber":425,"author":{"gitID":"-"},"content":"* **Alternative 2:** Override `execute()`"},{"lineNumber":426,"author":{"gitID":"bayweiheng"},"content":"** Pros: New developers will not have to learn the above template pattern"},{"lineNumber":427,"author":{"gitID":"bayweiheng"},"content":"** Cons: Command classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to be undone/redone."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store the minimal knowledge required to undo each command inside itself."},{"lineNumber":432,"author":{"gitID":"bayweiheng"},"content":"** Pros: Significantly less memory is used (e.g. for `delete`, just save the person being deleted). Compatible with mutable commands."},{"lineNumber":433,"author":{"gitID":"bayweiheng"},"content":"** Cons: Implementation is more complicated."},{"lineNumber":434,"author":{"gitID":"-"},"content":"* **Alternative 2:** Save the entire event planner after every undoable command."},{"lineNumber":435,"author":{"gitID":"bayweiheng"},"content":"** Pros: Implementation is easy."},{"lineNumber":436,"author":{"gitID":"bayweiheng"},"content":"** Cons: Performance issues may result due to high memory usage. Also, this is incompatible with the mutable `edit` and `edit-event` implementations."},{"lineNumber":437,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modify the event planner (`add`, `clear`, `edit`)."},{"lineNumber":442,"author":{"gitID":"bayweiheng"},"content":"** Pros: Only commands that cannot be easily reverted need to be implemented (the view can easily be re-modified as no data is * lost)."},{"lineNumber":443,"author":{"gitID":"bayweiheng"},"content":"** Cons: User might mistakenly think that undo also applies to view modification (e.g. filtering)."},{"lineNumber":444,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":445,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":446,"author":{"gitID":"-"},"content":"** Cons: User has no way of skipping such commands if he or she just want to reset the state of the event planner and not the view."},{"lineNumber":447,"author":{"gitID":"bayweiheng"},"content":"**Additional Info:** See the discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":453,"author":{"gitID":"bayweiheng"},"content":"** Pros: Easy to understand for new Computer Science undergraduates to understand, who are likely to be *  new incoming developers of our project."},{"lineNumber":454,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":455,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":457,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":458,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"william6364"},"content":"// tag::markattendance[]"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Register/Deregister persons for/from events"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"The EpicEvent-Person association is unidirectional i.e. an `EpicEvent` maintains references to `Person` objects registered for it, but a `Person` does not"},{"lineNumber":465,"author":{"gitID":"-"},"content":"maintain references to `EpicEvent` objects he/she has registered for. This implementation was chosen to reduce overhead and complications in implementation,"},{"lineNumber":466,"author":{"gitID":"-"},"content":"since all commands v2.0 supports will not require the backward association."},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"The references are maintained using a `UniquePersonList` inside each `EpicEvent`"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d List registered persons for an event"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"This is done by creating a `Predicate` that tests whether a `Person` is in an `EpicEvent`, then passing it to `updateFilteredPersonList()`"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d Toggling Attendance"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"william6364"},"content":"The proposed implementation is to use a class called `Attendance`."},{"lineNumber":479,"author":{"gitID":"william6364"},"content":"An instance of `Attendance` is created every time a person registers to an event and"},{"lineNumber":480,"author":{"gitID":"william6364"},"content":"it is stored inside the `EpicEvent`. The instance stores the corresponding `EpicEvent` and `Person`"},{"lineNumber":481,"author":{"gitID":"william6364"},"content":"and stores a `boolean` representing whether the person has attended the event."},{"lineNumber":482,"author":{"gitID":"william6364"},"content":"This reduces coupling between the `Person` and `EpicEvent` class and allows the event"},{"lineNumber":483,"author":{"gitID":"william6364"},"content":"to have access to all its attendees so that adding, removing and listing attendees is"},{"lineNumber":484,"author":{"gitID":"william6364"},"content":"easy to implement."},{"lineNumber":485,"author":{"gitID":"william6364"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Location of instances of `Attendance` objects"},{"lineNumber":489,"author":{"gitID":"william6364"},"content":""},{"lineNumber":490,"author":{"gitID":"william6364"},"content":"* **Alternative 1 (current choice):** Store in `EpicEvent` object"},{"lineNumber":491,"author":{"gitID":"william6364"},"content":"** Pros: Reduces coupling between `Person` and `EpicEvent and makes it easy for event to keep track of attendance list and easy"},{"lineNumber":492,"author":{"gitID":"william6364"},"content":"for UI to display the attendance list."},{"lineNumber":493,"author":{"gitID":"william6364"},"content":"** Cons: Makes it difficult for `EventPlanner` to track which events a person is registered for so deleting a person requires"},{"lineNumber":494,"author":{"gitID":"william6364"},"content":"checking through all the events to delete a person properly."},{"lineNumber":495,"author":{"gitID":"william6364"},"content":"* **Alternative 2:** Store in `EventPlanner` object"},{"lineNumber":496,"author":{"gitID":"william6364"},"content":"** Pros: Makes it easy `EventPlanner` to track which events a person is registered to and thus making"},{"lineNumber":497,"author":{"gitID":"william6364"},"content":"some person commands such as delete persons easier."},{"lineNumber":498,"author":{"gitID":"william6364"},"content":"** Cons: Requires `EpicEvent` to search through entire list of `Attendance` of objects in `EventPlanner` to find out"},{"lineNumber":499,"author":{"gitID":"william6364"},"content":"which persons are registered to itself. This can be very slow if the number of `Attendance` objects is very large."},{"lineNumber":500,"author":{"gitID":"william6364"},"content":""},{"lineNumber":501,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d\u003d Aspect: Mutability of `Attendance` objects, specifically when marking attendance"},{"lineNumber":502,"author":{"gitID":"william6364"},"content":""},{"lineNumber":503,"author":{"gitID":"william6364"},"content":"* **Alternative 1 (current choice):** Make `Attendance` objects immutable"},{"lineNumber":504,"author":{"gitID":"william6364"},"content":"** Pros: Makes it easier to track changes in `Attendance` objects as changes can be detected by a replacement of the"},{"lineNumber":505,"author":{"gitID":"william6364"},"content":"`Attendance` object in the attendance list."},{"lineNumber":506,"author":{"gitID":"william6364"},"content":"** Cons: Makes it more difficult to implement since the entire object has to be replaced whenever"},{"lineNumber":507,"author":{"gitID":"william6364"},"content":"a change needs to be made, such as when marking attendance."},{"lineNumber":508,"author":{"gitID":"william6364"},"content":"* **Alternative 2:** Make `Attendance` objects mutable"},{"lineNumber":509,"author":{"gitID":"william6364"},"content":"** Pros: Makes it easier to implement marking of attendance since the `hasAttended` property"},{"lineNumber":510,"author":{"gitID":"william6364"},"content":"inside the object can be directly mutated."},{"lineNumber":511,"author":{"gitID":"william6364"},"content":"** Cons: Makes it more difficult to track the changes since mutating the object does not directly"},{"lineNumber":512,"author":{"gitID":"william6364"},"content":"trigger any events."},{"lineNumber":513,"author":{"gitID":"william6364"},"content":""},{"lineNumber":514,"author":{"gitID":"william6364"},"content":"\u003d\u003d\u003d\u003d Aspect: Method of marking attendance"},{"lineNumber":515,"author":{"gitID":"william6364"},"content":""},{"lineNumber":516,"author":{"gitID":"william6364"},"content":"* **Alternative 1 (current choice):** Have one command to toggle attendance from attended to not attended and vice versa"},{"lineNumber":517,"author":{"gitID":"william6364"},"content":"** Pros: Makes it easier to undo the command since toggling is always valid while marking a participant"},{"lineNumber":518,"author":{"gitID":"william6364"},"content":"has attended may not always be valid since that person may have already been marked as attended so undoing"},{"lineNumber":519,"author":{"gitID":"william6364"},"content":"the command has to account for that."},{"lineNumber":520,"author":{"gitID":"william6364"},"content":"** Cons: Makes it less intuitive for the user since the result of toggling"},{"lineNumber":521,"author":{"gitID":"william6364"},"content":"depends on the current state of the attendance."},{"lineNumber":522,"author":{"gitID":"william6364"},"content":"* **Alternative 2:** Have two separate commands: one for marking participant as attended and one for marking"},{"lineNumber":523,"author":{"gitID":"william6364"},"content":"as not attended"},{"lineNumber":524,"author":{"gitID":"william6364"},"content":"** Pros: Makes it more intuitive for the user since marking as attended and not attended is a direct action."},{"lineNumber":525,"author":{"gitID":"william6364"},"content":"** Cons: Makes it harder to undo the command since the command may not be successful if for example the participant"},{"lineNumber":526,"author":{"gitID":"william6364"},"content":"has already been marked as attended when the user tries to mark the participant as attended."},{"lineNumber":527,"author":{"gitID":"william6364"},"content":"// end::markattendance[]"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"raynoldng"},"content":"\u003d\u003d\u003d [Proposed] 3 Pane UI"},{"lineNumber":530,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":531,"author":{"gitID":"raynoldng"},"content":"The proposed new UI is a 3 pane UI consisting of list of persons, events, and attendees for the selected event. Being able to view all three panes will allow the user to read off the desired command parameters without having to switch between lists."},{"lineNumber":532,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"raynoldng"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g. `CommandBox`, `ResultDisplay`, `PersonListPanel`, `EpicEventListPanel` and `AttendeeListPanel`. The `ListPanel` s forms the bulk of the UI."},{"lineNumber":536,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":537,"author":{"gitID":"raynoldng"},"content":"As you can see from the UI component diagram, the three lists extend from the `ListPanel` class. `ListPanel` is a vetically scrollable collection of `Cards`. It is an adapter view that does not know the details, such as type and contents, of the view it contains."},{"lineNumber":538,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":539,"author":{"gitID":"raynoldng"},"content":"In addition, we define a `ListPanelAdapter` class that acts as the bridge between `ListPanel` and data behind the list."},{"lineNumber":540,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":541,"author":{"gitID":"raynoldng"},"content":"The sequence diagram below shows how `PersonListPanel` is initialised. `EventsListPanel` and `AttendeeListPanel` are initialised in a similar manner."},{"lineNumber":542,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":".Sequence Diagram for Panel initialisation"},{"lineNumber":544,"author":{"gitID":"raynoldng"},"content":"image::CreatePersonListPanelSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":545,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":546,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":547,"author":{"gitID":"raynoldng"},"content":"[NOTE]"},{"lineNumber":548,"author":{"gitID":"raynoldng"},"content":"If no  `EpicEvent` has been selected, `AttendeeList` will be empty"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"raynoldng"},"content":"When deciding on the UI, the following aspects of user experience were considered."},{"lineNumber":553,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":554,"author":{"gitID":"raynoldng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Overall UI Design"},{"lineNumber":555,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":556,"author":{"gitID":"raynoldng"},"content":"- *Alternative 1 (current choice)*: A 3 pane UI consisting of list of persons, events, and attendees for selected event"},{"lineNumber":557,"author":{"gitID":"raynoldng"},"content":"    * Pros: The user can view all 3 lists at the same time. He would know what arguments to supply when typing commands as he can read them off the list."},{"lineNumber":558,"author":{"gitID":"raynoldng"},"content":"    * Cons: The UI might become too cluttered as there are too many UI elements. However, given that EPIC is meant for modern computers with large displays, this should not be an issue."},{"lineNumber":559,"author":{"gitID":"raynoldng"},"content":"- *Alternative 2 (previous choice)*: 2 pane UI where the left pane is a 2 tab pane consistings of list of persons and events, and the right pane is the list of attendees."},{"lineNumber":560,"author":{"gitID":"raynoldng"},"content":"    * Pros: Merging the horizontal space for list of persons and events will create more space for list of attendees. The user is likely to be more interested in the attendees details."},{"lineNumber":561,"author":{"gitID":"raynoldng"},"content":"    * Cons: If the user needs to access data for some tabbed pane that is not in focus to fill out a command, this would break his workflow. The user will have to delete his current command, execute a command to set focus to the desired tab, memorize the required details and reenter his previous command."},{"lineNumber":562,"author":{"gitID":"raynoldng"},"content":"- *Alternative 3*: A common list that can display either list of persons, events or attendees for selected event"},{"lineNumber":563,"author":{"gitID":"raynoldng"},"content":"    * Pros: We only have to make minimal changes to the UI layout."},{"lineNumber":564,"author":{"gitID":"raynoldng"},"content":"    * Cons: Events, persons, and attendees must be displayed using the same `Card` class. This would result in tight coupling of the display graphics logic  for the three lists."},{"lineNumber":565,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":566,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d [proposed] Export an Event"},{"lineNumber":567,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":568,"author":{"gitID":"jiangyue12392"},"content":"The proposed export command exports the name of the attendees, their phone number, their email address, their home address and their attendance information of a particular event to a csv file into a file path specified by the user. Having the attendance of a particular event in a csv file would enable the users to analyse the data with other platforms."},{"lineNumber":569,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":570,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d\u003d [proposed] Implementation"},{"lineNumber":571,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":572,"author":{"gitID":"jiangyue12392"},"content":"The `export-event` command input is first parsed in `EventPlannerParser` to create an `ExportEventCommand`. The execution of it then calls the respective storage components. The subsequent export mechanism is handled by a `CsvEventPlannerStorage` which is a kind of `EventPlannerStorage`. The event data is parsed by `CsvUtil` and then exported as file through `CsvFileStorage` using the file path specified by the user."},{"lineNumber":573,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":574,"author":{"gitID":"jiangyue12392"},"content":"The sequence diagram below shows how the csv event export is processed in the storage component."},{"lineNumber":575,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":".Sequence Diagram for csv export"},{"lineNumber":577,"author":{"gitID":"jiangyue12392"},"content":"image::ExportEventSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"jiangyue12392"},"content":"When deciding on the export option, the following aspects of user experience are considered."},{"lineNumber":582,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":583,"author":{"gitID":"jiangyue12392"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data to be Exported"},{"lineNumber":584,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":585,"author":{"gitID":"jiangyue12392"},"content":"- *Alternative 1 (current choice)*: Name of the attendees, their phone number, their email address, their home address and their attendance information for the event"},{"lineNumber":586,"author":{"gitID":"jiangyue12392"},"content":"    * Pros: The information includes almost all the data users need for an event. The parsing of the data is straight forward."},{"lineNumber":587,"author":{"gitID":"jiangyue12392"},"content":"    * Cons: The tags of the attendees are not exported."},{"lineNumber":588,"author":{"gitID":"jiangyue12392"},"content":"- *Alternative 2*: All information for attendees including their tags"},{"lineNumber":589,"author":{"gitID":"jiangyue12392"},"content":"    * Pros: More information for users as compared to current implementation."},{"lineNumber":590,"author":{"gitID":"jiangyue12392"},"content":"    * Cons: The attendees may have zero or multiple tags. The uncertainty in the number of tags make parsing messy."},{"lineNumber":591,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":592,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":598,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":599,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":604,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":605,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":606,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":609,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":623,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":636,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":637,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":638,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":641,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":651,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":656,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":663,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":676,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":677,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":678,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":679,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":680,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":681,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":682,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":683,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":684,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":688,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":691,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":708,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":715,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":716,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":717,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":718,"author":{"gitID":"-"},"content":""},{"lineNumber":719,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"bayweiheng"},"content":"A project often depends on third-party libraries. For example, EPIC depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":722,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":723,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":726,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":"* has to plan school events with a large attendance size"},{"lineNumber":731,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":732,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":733,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":734,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"*Value proposition*: streamline attendance taking and registration of event participants, far superior to traditional pen and paper registration"},{"lineNumber":737,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":738,"author":{"gitID":"william6364"},"content":"*Feature Contribution*:"},{"lineNumber":739,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":740,"author":{"gitID":"william6364"},"content":"* Raynold Ng:"},{"lineNumber":741,"author":{"gitID":"william6364"},"content":"** Minor: Creating a pane view for EpicEvent list and implementing the `list-events` command. This allows the user to view the list of events."},{"lineNumber":742,"author":{"gitID":"william6364"},"content":"** Major: Three pane view (persons, events, and event participant). The user should be able to view persons, events and attendees of an event at the same time. That would also allow the user to execute event administration commands as he can view both events and contacts at the same time."},{"lineNumber":743,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":744,"author":{"gitID":"william6364"},"content":"* Wei Liang:"},{"lineNumber":745,"author":{"gitID":"william6364"},"content":"** Minor: Adding of EpicEvent class to keep track of events and a command to add an event. This facilitates the implementation of the other commands to manipulate events."},{"lineNumber":746,"author":{"gitID":"william6364"},"content":"** Major: Toggling of attendance for each event participant. This facilitates the attendance portion of the event planner."},{"lineNumber":747,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":748,"author":{"gitID":"william6364"},"content":"* Jiang Yue:"},{"lineNumber":749,"author":{"gitID":"jiangyue12392"},"content":"** Minor: Persistent storage. The user should be able to have their data retained after the app is closed so that they can continue their edits when they open the app next time."},{"lineNumber":750,"author":{"gitID":"jiangyue12392"},"content":"** Major: Adding commands to modify EpicEvents in the eventlist. The commands implemented include `delete-event`, `find-event` and `edit-event`. The commands allow user to locate an event with `find-event` and then to modify the located event by deleting the event or editing the information of the event with `delete-event` and `edit-event` respectively."},{"lineNumber":751,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":752,"author":{"gitID":"william6364"},"content":"* Wei Heng:"},{"lineNumber":753,"author":{"gitID":"william6364"},"content":"** Minor: Adding commands for Person-EpicEvents interactions, which includes adding new fields/methods to the EpicEvent class. The commands implemented include `register`, `deregister` and `list-registered`. The commands allow user to register/deregister a person to/from an event, as well as list an event\u0027s register in the UI."},{"lineNumber":754,"author":{"gitID":"william6364"},"content":"** Major: Revamp of undo/redo feature. Currently, the entire EventPlanner is saved every time an UndoableCommand is executed, which is a huge drain on memory and violates important non-functional requirements relating to capacity of EventPlanner. Each UndoableCommand will have an UndoableCommand oppositeCommand, which it will execute to reverse the changes made by the original command. This will also allow edit\u0027s behavior to be mutable, so we may modify an event/person directly without passing a new copy to every single person/event that is in it/it is in."},{"lineNumber":755,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":756,"author":{"gitID":"william6364"},"content":"[appendix]"},{"lineNumber":757,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":762,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":763,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":764,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"|`* * *`|new user |see an onboarding guide |familiarize myself with the application"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"|`* * *` |event planner |add a new participant |"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"|`* * *` |event planner |delete a participant |remove a participant that has withdrawn from the event"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"|`* * *` |event planner |list all participants for the event |"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"|`* * *` |event planner |edit a participant’s details |update a participant’s details upon request"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"|`* * *` |event planner |mark attendance for a participant |know who attended the event"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"|`* * *` |event planner |find a participant by name |locate a participant without going through the entire list of participants"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"|`* * *` |event planner |have all participant’s data in persistent storage |close the program without losing my data"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"|`* *` |event planner |set privacy settings |meet PDPA guideline"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"|`* *` |event planner |create multiple events|"},{"lineNumber":785,"author":{"gitID":"-"},"content":""},{"lineNumber":786,"author":{"gitID":"-"},"content":"|`* *` |event planner |add the same user to multiple events |use the same, stored information across multiple events"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"|`* *` |event planner managing large events |import participant contact information from csv |quickly add participants without manual typing"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"|`* *` |event planner managing large events |export participant contact information as csv |use the data for other applications (e.g. presentation, data analysis)"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"bayweiheng"},"content":"|`* *` |event planner managing many participants |find a participant by his/her initials |find persons quickly"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"|`* *` |event planner |manage participants based on tags |mass register/delete participants belonging to a certain group"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"|`*` |participant |mark my attendance by scanning a QR code |make the process of marking attendance quicker"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"|`*` |participant |mark my attendance by scanning a card with an RFID chip |make the process of marking attendance quicker"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"|`*` |event planner |fuzzy search contacts |find the relevant contact even if I do not know his/her complete name"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"|`*` |participant |mark my attendance by scanning an NFC tag |make the process of marking attendance quicker"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"|`*` |participant |see where I should be seated at the venue when I mark my attendance |find my seating location quicker"},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"|`*` |event planner |synchronize application data across multiple devices |collaboratively edit participant information"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"|`*` |participant |add feedback for the event |"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"|`*` |event planner |send out a mass email to all participants |send out information such as event details and QR codes quickly"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"|`*` |event planner |make my edits synchronized in real time across all devices |parallelize the registration and attendance taking process"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"|`*` |event planner |automatically email a reminder to all participants near the event date |ensure participants do not accidentally forget about the event"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"|`*` |event planner |type commands in natural language |do without memorising the syntax for every command"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"|`*` |tech-savvy event planner |set hotkeys for commands |shorten frequently used commands"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"|`*` |event planner |export event details (attendance rate, feedback etc) in a presentable format |do an after action review of the event"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"|`*` |event planner |conduct a lucky draw for event participants |"},{"lineNumber":823,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"bayweiheng"},"content":"(For all use cases below, the *System* is the `EventPlanner` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":831,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d Use case: Find person by name"},{"lineNumber":832,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":833,"author":{"gitID":"bayweiheng"},"content":"*MSS*"},{"lineNumber":834,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":835,"author":{"gitID":"bayweiheng"},"content":"1.  User requests to find persons with a particular name"},{"lineNumber":836,"author":{"gitID":"bayweiheng"},"content":"2.  EventPlanner shows a list of persons with entered name"},{"lineNumber":837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":838,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":843,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":844,"author":{"gitID":"bayweiheng"},"content":"** 2a1. EventPlanner alerts the user that there is no such person with name"},{"lineNumber":845,"author":{"gitID":"bayweiheng"},"content":"+"},{"lineNumber":846,"author":{"gitID":"bayweiheng"},"content":"Use case ends."},{"lineNumber":847,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":848,"author":{"gitID":"bayweiheng"},"content":"[discrete]"},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":854,"author":{"gitID":"bayweiheng"},"content":"2.  EventPlanner shows a list of persons"},{"lineNumber":855,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":856,"author":{"gitID":"bayweiheng"},"content":"4.  EventPlanner deletes the person"},{"lineNumber":857,"author":{"gitID":"-"},"content":"+"},{"lineNumber":858,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":863,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":864,"author":{"gitID":"-"},"content":"+"},{"lineNumber":865,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":868,"author":{"gitID":"-"},"content":"+"},{"lineNumber":869,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":870,"author":{"gitID":"bayweiheng"},"content":"** 3a1. EventPlanner shows an error message."},{"lineNumber":871,"author":{"gitID":"-"},"content":"+"},{"lineNumber":872,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"bayweiheng"},"content":"[discrete]"},{"lineNumber":875,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d Use case: Edit person"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"1. User requests to list persons"},{"lineNumber":880,"author":{"gitID":"bayweiheng"},"content":"2. EventPlanner shows a list of persons"},{"lineNumber":881,"author":{"gitID":"bayweiheng"},"content":"3. User requests to edit a specific person in the list"},{"lineNumber":882,"author":{"gitID":"bayweiheng"},"content":"4. EventPlanner edits the person’s details"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":889,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":890,"author":{"gitID":"-"},"content":"+"},{"lineNumber":891,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":894,"author":{"gitID":"-"},"content":"+"},{"lineNumber":895,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":896,"author":{"gitID":"bayweiheng"},"content":"** 3a1. EventPlanner shows an error message."},{"lineNumber":897,"author":{"gitID":"bayweiheng"},"content":"+"},{"lineNumber":898,"author":{"gitID":"bayweiheng"},"content":"Use case resumes at step 2."},{"lineNumber":899,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":900,"author":{"gitID":"bayweiheng"},"content":"* 3b. The edit string following the command is invalid."},{"lineNumber":901,"author":{"gitID":"bayweiheng"},"content":"+"},{"lineNumber":902,"author":{"gitID":"bayweiheng"},"content":"[none]"},{"lineNumber":903,"author":{"gitID":"bayweiheng"},"content":"** 3b1. EventPlanner shows an error message."},{"lineNumber":904,"author":{"gitID":"-"},"content":"+"},{"lineNumber":905,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"bayweiheng"},"content":"[discrete]"},{"lineNumber":908,"author":{"gitID":"bayweiheng"},"content":"\u003d\u003d\u003d Use case: Mark event attendee\u0027s attendance"},{"lineNumber":909,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":910,"author":{"gitID":"bayweiheng"},"content":"*MSS*"},{"lineNumber":911,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":912,"author":{"gitID":"bayweiheng"},"content":"1. User requests to find persons by name"},{"lineNumber":913,"author":{"gitID":"bayweiheng"},"content":"2. EventPlanner shows a list of persons"},{"lineNumber":914,"author":{"gitID":"bayweiheng"},"content":"3. User requests to mark the attendance of that person"},{"lineNumber":915,"author":{"gitID":"bayweiheng"},"content":"4. EventPlanner marks the attendance of that person"},{"lineNumber":916,"author":{"gitID":"-"},"content":"+"},{"lineNumber":917,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":922,"author":{"gitID":"bayweiheng"},"content":"* 2a. No persons are found."},{"lineNumber":923,"author":{"gitID":"-"},"content":"+"},{"lineNumber":924,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":927,"author":{"gitID":"-"},"content":"+"},{"lineNumber":928,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":929,"author":{"gitID":"bayweiheng"},"content":"** 3a1. EventPlanner shows an error message."},{"lineNumber":930,"author":{"gitID":"-"},"content":"+"},{"lineNumber":931,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":934,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":937,"author":{"gitID":"bayweiheng"},"content":".  Should be able to hold up to 50000 persons."},{"lineNumber":938,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":939,"author":{"gitID":"-"},"content":".  Should come with automated unit tests and open source code."},{"lineNumber":940,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":941,"author":{"gitID":"-"},"content":".  Should respond to any command within one second"},{"lineNumber":942,"author":{"gitID":"-"},"content":".  Should be able to be used by programmers and non-programmers alike"},{"lineNumber":943,"author":{"gitID":"-"},"content":".  Should not result in a large binary (more than 5mb)"},{"lineNumber":944,"author":{"gitID":"bayweiheng"},"content":".  Packaging should take care of dependencies"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"[[cli]] Command Line Interface (CLI) :: Means of interacting with a computer program where the user issues commands to the program in the form of typed text"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"[[csv]] Comma Separated Values (CSV) :: A file that stores tabular data in plain text"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"[[fuzzy-search]] Fuzzy Search :: process that locates terms that are likely to be relevant to a search argument even when the argument does not exactly correspond to the desired information"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"[[hotkeys]] Hotkeys :: A combination of keys that what pressed together, executes a command"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":958,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"[[natural-language]] Natural Language :: any language that has evolved naturally in humans through use and repetition without conscious planning or premeditation"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"[[nfc]] NFC (Near-Field Communication) :: Radio communication technology standard to send data over short distances"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":"[[pdpa]] PDPA (Personal Data Protection Act) ::"},{"lineNumber":965,"author":{"gitID":"-"},"content":"A Singapore law that governs collection, use and disclosure of personal data by all private organisations"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":968,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"[[qr-code]] Quick Response (QR) code:: A machine-readable matrix (or two-dimensional barcode) that contains information about the item to which it is attached"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"[[rfid]] Radio-frequency identification (RFID) :: A technology to record the presence of an object using radio signals"},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":975,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"*Guestday*"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"Author: Tinkertanker Pte Ltd"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"Website: https://guestday.com"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"* Fast Contextual Search"},{"lineNumber":986,"author":{"gitID":"-"},"content":"** Search for guests by name, table, department, or any other parameter of your choosing."},{"lineNumber":987,"author":{"gitID":"-"},"content":"* Quick, easy check-in"},{"lineNumber":988,"author":{"gitID":"-"},"content":"** Effortlessly check the guest in with a simple swipe. Guests can also find out where they’re seated and whom they’re seated with. Display custom data to aid your receptionists, such as information on VIP attendees."},{"lineNumber":989,"author":{"gitID":"-"},"content":"* Even faster: QR scanning"},{"lineNumber":990,"author":{"gitID":"-"},"content":"** Send out QR codes on physical invitation cards or by email, and guests can simply wave their codes at the iPad camera to check in."},{"lineNumber":991,"author":{"gitID":"-"},"content":"* Synchronization across multiple devices"},{"lineNumber":992,"author":{"gitID":"-"},"content":"** Multiple devices can be setup to parallelize the registration process and increase the efficiency of the reception"},{"lineNumber":993,"author":{"gitID":"-"},"content":"* Elegant and easy to use interface"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"bayweiheng"},"content":"* Requires specific hardware (iPads loaned out by the company)."},{"lineNumber":999,"author":{"gitID":"bayweiheng"},"content":"* Expensive, and not reusable (payment for each event)."},{"lineNumber":1000,"author":{"gitID":"bayweiheng"},"content":"* Proprietary software, not open source."},{"lineNumber":1001,"author":{"gitID":"bayweiheng"},"content":"* Participant contact information cannot be reused across multiple events - has to be re-entered."},{"lineNumber":1002,"author":{"gitID":"bayweiheng"},"content":"* Editing guest list has to go through the company and hence is slow and a large hassle."},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1017,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1023,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1033,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1035,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1037,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1049,"author":{"gitID":"bayweiheng"},"content":""}],"authorContributionMap":{"bayweiheng":111,"william6364":65,"jiangyue12392":25,"-":809,"raynoldng":39}},{"path":"src/test/java/systemtests/DeletePersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"public class DeletePersonCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"        String command \u003d \"     \" + DeletePersonCommand.COMMAND_WORD + \"      \""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"        // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"        /**"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        // Case: undo deleting the last person in the list -\u003e last person restored"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"        // Case: redo deleting the last person in the list -\u003e last person deleted again"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":"        */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        int invalidIndex \u003d getModel().getEventPlanner().getPersonList().size();"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"                getModel().getEventPlanner().getPersonList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d DeletePersonCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(DeletePersonCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(DeletePersonCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeletePersonCommand} using {@code toDelete}"},{"lineNumber":135,"author":{"gitID":"jiangyue12392"},"content":"     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":"     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":157,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":"     * @see DeletePersonCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":167,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":174,"author":{"gitID":"raynoldng"},"content":"        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":176,"author":{"gitID":"raynoldng"},"content":"        /* TODO fix failing test case"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"raynoldng"},"content":"        */"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":185,"author":{"gitID":"raynoldng"},"content":"        //assertCommandBoxShowsDefaultStyle();"},{"lineNumber":186,"author":{"gitID":"raynoldng"},"content":"        //assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":197,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":204,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":205,"author":{"gitID":"raynoldng"},"content":"        //assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":7,"william6364":7,"jiangyue12392":17,"-":168,"raynoldng":11}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"public class SelectCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        int invalidIndex \u003d getModel().getEventPlanner().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        clearEventPlanner();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":8,"-":145}},{"path":"src/test/java/systemtests/FindPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"public class FindPersonCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"        String command \u003d \"   \" + FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        executeCommand(DeletePersonCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":"        // assertFalse(getModel().getEventPlanner().getPersonList().contains(BENSON));"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":139,"author":{"gitID":"raynoldng"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getFullName().name));"},{"lineNumber":140,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"        clearEventPlanner();"},{"lineNumber":147,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":163,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":166,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test case"},{"lineNumber":174,"author":{"gitID":"raynoldng"},"content":"        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":183,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":186,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":5,"jiangyue12392":22,"-":165,"raynoldng":5}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"public class ErrorDialogGuiTest extends EventPlannerSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":33}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"    private static final JumpToPersonListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"            new JumpToPersonListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":56,"raynoldng":3}},{"path":"src/test/java/seedu/address/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":" * A GUI unit test class for EventPlanner."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":37}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListPersonCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListPersonCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":155}},{"path":"src/test/java/systemtests/EditPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"public class EditPersonCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"        String command \u003d \" \" + EditPersonCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_PERSON_NAME_BOB).withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        //command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"        //String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"        //command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        //expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"        //model.updatePerson("},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"        //        getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"        //assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"        int invalidIndex \u003d getModel().getEventPlanner().getPersonList().size();"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":125,"author":{"gitID":"bayweiheng"},"content":"        //showAllPersons();"},{"lineNumber":126,"author":{"gitID":"bayweiheng"},"content":"        //index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":127,"author":{"gitID":"bayweiheng"},"content":"        //selectPerson(index);"},{"lineNumber":128,"author":{"gitID":"bayweiheng"},"content":"        //command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"bayweiheng"},"content":"        //        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":132,"author":{"gitID":"bayweiheng"},"content":"        //assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":146,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"                EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":171,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"        assertTrue(getModel().getEventPlanner().getPersonList().contains(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":182,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":183,"author":{"gitID":"jiangyue12392"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":196,"author":{"gitID":"jiangyue12392"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"jiangyue12392"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditPersonCommand}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":208,"author":{"gitID":"jiangyue12392"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":215,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":223,"author":{"gitID":"jiangyue12392"},"content":"                String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":229,"author":{"gitID":"jiangyue12392"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":245,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":271,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":21,"william6364":8,"jiangyue12392":50,"-":204}},{"path":"src/test/java/seedu/address/ui/EpicEventListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEvents;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertEpicEventCardDisplaysEpicEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertEpicEventCardEquals;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"import guitests.guihandles.EpicEventCardHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.EpicEventListPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"//@@ author raynoldng"},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class EpicEventListPanelTest extends GuiUnitTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cEpicEvent\u003e TYPICAL_EVENTS \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalEvents());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final JumpToEventListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new JumpToEventListRequestEvent(INDEX_SECOND_EVENT);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private EpicEventListPanelHandle epicEventListPanelHandle;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EpicEventListPanel epicEventListPanel \u003d new EpicEventListPanel(TYPICAL_EVENTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(epicEventListPanel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        epicEventListPanelHandle \u003d new EpicEventListPanelHandle(getChildNode(epicEventListPanel.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                EpicEventListPanelHandle.EPIC_EVENT_LIST_VIEW_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_EVENTS.size(); i++) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            epicEventListPanelHandle.navigateToCard(TYPICAL_EVENTS.get(i));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            EpicEvent expectedEpicEvent \u003d TYPICAL_EVENTS.get(i);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            EpicEventCardHandle actualCard \u003d epicEventListPanelHandle.getEpicEventCardHandle(i);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            assertEpicEventCardDisplaysEpicEvent(expectedEpicEvent, actualCard);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        EpicEventCardHandle expectedCard \u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                epicEventListPanelHandle.getEpicEventCardHandle(INDEX_SECOND_EVENT.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EpicEventCardHandle selectedCard \u003d epicEventListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEpicEventCardEquals(expectedCard, selectedCard);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":1,"-":63,"raynoldng":4}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import guitests.guihandles.EpicEventCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    //@@ author raynoldng"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualEpicEventCard} displays the same values as {@code expectedEpicEventCard}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void assertEpicEventCardEquals(EpicEventCardHandle expectedCard, EpicEventCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        assertEquals(expectedPerson.getFullName().name, actualCard.getName());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"     * Asserts that {@code actualEpicEventCard} displays the details of {@code expectedEpicEvent}."},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"    public static void assertEpicEventCardDisplaysEpicEvent(EpicEvent expectedEpicEvent,"},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"                                                            EpicEventCardHandle actualCard) {"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":"        assertEquals(expectedEpicEvent.getName().name, actualCard.getName());"},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"        /* Tags in events are not displayed for now"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"        assertEquals(expectedEpicEvent.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"                actualCard.getTags());"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"        */"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":82,"raynoldng":16}},{"path":"src/test/java/systemtests/AddPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"//import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"public class AddPersonCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":"        String command \u003d \"   \" + AddPersonCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"        // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        /**"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"        // Case: undo adding Amy to the list -\u003e Amy deleted"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        // Case: redo adding Amy to the list -\u003e Amy added again"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"        */"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_PERSON_NAME_BOB).withPhone(VALID_PERSON_PHONE_AMY)"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_AMY).withAddress(VALID_PERSON_ADDRESS_AMY)"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_PERSON_NAME_AMY).withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_AMY).withAddress(VALID_PERSON_ADDRESS_AMY)"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_PERSON_NAME_AMY).withPhone(VALID_PERSON_PHONE_AMY)"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_AMY)"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":105,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_PERSON_NAME_AMY).withPhone(VALID_PERSON_PHONE_AMY)"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_AMY).withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":118,"author":{"gitID":"william6364"},"content":"        clearEventPlanner();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":123,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":146,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":151,"author":{"gitID":"william6364"},"content":"        // EventPlanner#addPerson(Person)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":153,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":177,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":187,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":192,"author":{"gitID":"raynoldng"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"raynoldng"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"raynoldng"},"content":"     * Executes the {@code AddPersonCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"raynoldng"},"content":"     * 3. Result display box displays the success message of executing {@code AddPersonCommand} with the details of"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":212,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":222,"author":{"gitID":"raynoldng"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"raynoldng"},"content":"        String expectedResultMessage \u003d String.format(AddPersonCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"raynoldng"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":260,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":7,"william6364":7,"jiangyue12392":21,"-":205,"raynoldng":32}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getFullName().name.replaceAll(\" \", \"%20\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"        // TODO fix failing test cases"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        //waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        //assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":44,"raynoldng":4}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.storage.XmlSerializableEventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    protected Supplier\u003cReadOnlyEventPlanner\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"    public TestApp(Supplier\u003cReadOnlyEventPlanner\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"            createDataFileWithData(new XmlSerializableEventPlanner(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"    public EventPlanner readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"            return new EventPlanner(storage.readEventPlanner().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"            throw new AssertionError(\"Data is not in the EventPlanner format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        return storage.getEventPlannerFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"        Model copy \u003d new ModelManager((model.getEventPlanner()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":11,"-":112}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    private static final EventPlannerChangedEvent EVENT_STUB \u003d new EventPlannerChangedEvent(new EventPlanner());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":3,"-":72}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.storage.XmlSerializableEventPlanner;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EventPlannerBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    private static final int VALID_NUMBEROFEVENTS \u003d 0;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        XmlUtil.getDataFromFile(null, EventPlanner.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, EventPlanner.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, EventPlanner.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        EventPlanner dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE,"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"                XmlSerializableEventPlanner.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"        assertEquals(0, dataFromFile.getPersonTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"        XmlUtil.saveDataToFile(null, new EventPlanner());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new EventPlanner());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"        XmlSerializableEventPlanner dataToWrite \u003d new XmlSerializableEventPlanner(new EventPlanner());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":"        XmlSerializableEventPlanner dataFromFile \u003d"},{"lineNumber":131,"author":{"gitID":"william6364"},"content":"                XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableEventPlanner.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"        EventPlannerBuilder builder \u003d new EventPlannerBuilder(new EventPlanner());"},{"lineNumber":135,"author":{"gitID":"william6364"},"content":"        dataToWrite \u003d new XmlSerializableEventPlanner("},{"lineNumber":136,"author":{"gitID":"william6364"},"content":"                builder.withPerson(new PersonBuilder().build()).withPersonTag(\"Friends\").build());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":139,"author":{"gitID":"william6364"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableEventPlanner.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":18,"jiangyue12392":4,"-":127}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListPersonCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        String listCommand \u003d ListPersonCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(listCommand, ListPersonCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":4,"-":120}},{"path":"src/test/java/seedu/address/ui/EpicEventCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertEpicEventCardDisplaysEpicEvent;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import guitests.guihandles.EpicEventCardHandle;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventBuilder;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"public class EpicEventCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"    public void display() {"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"        // no tags"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"        EpicEvent eventWithoutTags \u003d new EpicEventBuilder().withTags(new String[0]).build();"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"        EpicEventCard eventCard \u003d new EpicEventCard(eventWithoutTags, 1);"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"        uiPartRule.setUiPart(eventCard);"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"        assertEpicEventCardDisplay(eventCard, eventWithoutTags, 1);"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"        // with tags"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"        EpicEvent eventWithTags \u003d new EpicEventBuilder().build();"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"        eventCard \u003d new EpicEventCard(eventWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"        uiPartRule.setUiPart(eventCard);"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"        assertEpicEventCardDisplay(eventCard, eventWithTags, 2);"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"        EpicEvent event \u003d new EpicEventBuilder().build();"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"        EpicEventCard eventCard \u003d new EpicEventCard(event, 0);"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"        // same event, same index -\u003e return true"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        EpicEventCard copy \u003d new EpicEventCard(event, 0);"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"        assertTrue(eventCard.equals(eventCard));"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        assertTrue(eventCard.equals(eventCard));"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        assertFalse(eventCard.equals(null));"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"        // different types -\u003e return false"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"        assertFalse(eventCard.equals(0));"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        // different card, same index -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"        EpicEvent differentEvent \u003d new EpicEventBuilder().withName(\"differentEvent\").build();"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"        assertFalse(eventCard.equals(new EpicEventCard(differentEvent, 0)));"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"        // same event, different index -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"        assertFalse(eventCard.equals(new EpicEventCard(event, 1)));"},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"     * {@code expectedId}."},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"    private void assertEpicEventCardDisplay(EpicEventCard eventCard, EpicEvent expectedEvent, int expectedId) {"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":"        EpicEventCardHandle epicCardHandle \u003d new EpicEventCardHandle(eventCard.getRoot());"},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"        // verify id is displayed correctly"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", epicCardHandle.getId());"},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":"        // verify person details are displayed correctly"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        assertEpicEventCardDisplaysEpicEvent(expectedEvent, epicCardHandle);"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"william6364":1,"raynoldng":70,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":" * Test scope: similar to {@code DeletePersonCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":" * @see DeletePersonCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"public class AddPersonCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_PERSON_NAME_BOB).withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_PERSON_NAME_BOB)"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"                .withPhone(VALID_PERSON_PHONE_BOB).withEmail(VALID_PERSON_EMAIL_BOB)"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"                .withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND, VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"raynoldng"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleTags));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_PERSON_NAME_AMY).withPhone(VALID_PERSON_PHONE_AMY)"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_AMY).withAddress(VALID_PERSON_ADDRESS_AMY).withTags().build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":94,"author":{"gitID":"raynoldng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, VALID_PERSON_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PERSON_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_PERSON_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_PERSON_ADDRESS_BOB,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, VALID_PERSON_NAME_BOB + VALID_PERSON_PHONE_BOB + VALID_PERSON_EMAIL_BOB"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"                        + VALID_PERSON_ADDRESS_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"                + INVALID_TAG_DESC + VALID_PERSON_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":147,"author":{"gitID":"raynoldng"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"jiangyue12392":26,"-":110,"raynoldng":11}},{"path":"src/test/java/seedu/address/logic/parser/SelectEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.SelectEventCommand;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":" * Test scope: similar to {@code DeletePersonCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":" * @see DeletePersonCommandParserTest"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"public class SelectEventCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"    private SelectEventCommandParser parser \u003d new SelectEventCommandParser();"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"    public void parse_validArgs_returnsSelectEventCommand() {"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"        assertParseSuccess(parser, \"1\", new SelectEventCommand(INDEX_FIRST_EVENT));"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"                SelectEventCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":31}},{"path":"src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"public class DeletePersonCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"                DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":8,"-":25}},{"path":"src/test/java/systemtests/AddEventCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"william6364"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GRADUATION;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SEMINAR;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADUATION;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SEMINAR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalEpicEvents.CAREERTALK;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalEpicEvents.GRADUATION;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalEpicEvents.MATHOLYMPIAD;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalEpicEvents.ORIENTATION;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalEpicEvents.SEMINAR;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.Name;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventUtil;"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":""},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"public class AddEventCommandSystemTest extends EventPlannerSystemTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"        /* Case: add an event without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"         * -\u003e added"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        EpicEvent toAdd \u003d GRADUATION;"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        String command \u003d \"   \" + AddEventCommand.COMMAND_WORD + \"  \" + NAME_DESC_GRADUATION + \" \" + TAG_DESC_GRADUATION;"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":""},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        // Case: undo adding Graduation to the list -\u003e Graduation deleted"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        // Case: redo adding Graduation to the list -\u003e Graduation added again"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"        model.addEvent(toAdd);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":""},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        /* Case: add an event with a different name -\u003e added */"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(SEMINAR);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"        clearEventPlanner();"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(MATHOLYMPIAD);"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":""},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        /* Case: add an event with tags, command with parameters in reverse order -\u003e added */"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        toAdd \u003d SEMINAR;"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + TAG_DESC_SEMINAR + NAME_DESC_SEMINAR;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(ORIENTATION);"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":""},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        /* ------------------------ Perform add operation while an event card is selected --------------------------- */"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":""},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        /* Case: selects first card in the event list, add an event -\u003e added, card selection remains unchanged */"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"        selectEvent(Index.fromOneBased(1));"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(CAREERTALK);"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":""},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":""},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"        /* Case: add a duplicate event -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        command \u003d EpicEventUtil.getAddEventCommand(SEMINAR);"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":""},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"        /* Case: add a duplicate event except with different tags -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"        // \"graduation\" is an existing tag used in the default model, see TypicalEpicEvents#GRADUATION"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"        // EventPlanner#addEvent(EpicEvent)"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"        command \u003d EpicEventUtil.getAddEventCommand(ORIENTATION) + \" \" + PREFIX_TAG.getPrefix() + \"graduation\";"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":""},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + TAG_DESC_GRADUATION;"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":""},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"        command \u003d \"adds \" + EpicEventUtil.getEventDetails(toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + INVALID_NAME_DESC;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + NAME_DESC_GRADUATION + INVALID_TAG_DESC;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"     * Executes the {@code AddEventCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"     * 3. Result display box displays the success message of executing {@code AddEventCommand} with the details of"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EventListPanel} equal to the corresponding components in"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"    private void assertCommandSuccess(EpicEvent toAdd) {"},{"lineNumber":123,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(EpicEventUtil.getAddEventCommand(toAdd), toAdd);"},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":""},{"lineNumber":126,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"william6364"},"content":"     * Performs the same verification as {@code assertCommandSuccess(EpicEvent)}. Executes {@code command}"},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"     * instead."},{"lineNumber":129,"author":{"gitID":"william6364"},"content":"     * @see AddEventCommandSystemTest#assertCommandSuccess(EpicEvent)"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"william6364"},"content":"    private void assertCommandSuccess(String command, EpicEvent toAdd) {"},{"lineNumber":132,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":133,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"            expectedModel.addEvent(toAdd);"},{"lineNumber":135,"author":{"gitID":"william6364"},"content":"        } catch (DuplicateEventException dpe) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"william6364"},"content":"        String expectedResultMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"william6364"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, EpicEvent)} except asserts that"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"     * 2. {@code Model}, {@code Storage} and {@code EventListPanel} equal to the corresponding components in"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"william6364"},"content":"     * @see AddEventCommandSystemTest#assertCommandSuccess(String, EpicEvent)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"william6364"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EventListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":167,"author":{"gitID":"william6364"},"content":"     * {@code EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"william6364"},"content":"     * @see EventPlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":97,"jiangyue12392":2,"-":80}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"william6364"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GRADUATION;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SEMINAR;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_GRADUATION;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SEMINAR;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_GRADUATION;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_GRADUATION;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_SEMINAR;"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventBuilder;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":""},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        EpicEvent expectedEvent \u003d new EpicEventBuilder().withName(VALID_EVENT_NAME_GRADUATION)"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"                .withTags(VALID_EVENT_TAG_GRADUATION).build();"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":""},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        // whitespace only preamble"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_GRADUATION + TAG_DESC_GRADUATION,"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":""},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        // multiple names - last name accepted"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        assertParseSuccess(parser, NAME_DESC_SEMINAR + NAME_DESC_GRADUATION + TAG_DESC_GRADUATION,"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":""},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        // multiple tags - all accepted"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        EpicEvent expectedEventMultipleTags \u003d new EpicEventBuilder().withName(VALID_EVENT_NAME_GRADUATION)"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"                .withTags(VALID_EVENT_TAG_SEMINAR, VALID_EVENT_TAG_GRADUATION).build();"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        assertParseSuccess(parser, NAME_DESC_GRADUATION + TAG_DESC_SEMINAR + TAG_DESC_GRADUATION,"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"                new AddEventCommand(expectedEventMultipleTags));"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":""},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        // zero tags"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        EpicEvent expectedEvent \u003d new EpicEventBuilder().withName(VALID_EVENT_NAME_GRADUATION).withTags().build();"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        assertParseSuccess(parser, NAME_DESC_GRADUATION , new AddEventCommand(expectedEvent));"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":""},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":""},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"        // missing name prefix"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, VALID_PERSON_NAME_BOB, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":""},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"        // invalid name"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + TAG_DESC_SEMINAR + TAG_DESC_GRADUATION,"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":""},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"        // invalid tag"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, NAME_DESC_GRADUATION + INVALID_TAG_DESC + VALID_EVENT_TAG_GRADUATION,"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":""},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_TAG_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":""},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"        // non-empty preamble"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_GRADUATION + TAG_DESC_SEMINAR"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"                + TAG_DESC_GRADUATION, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":""},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":76,"jiangyue12392":4,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"                FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"                new FindPersonCommand(new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":10,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/EventPlannerParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListPersonCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"public class EventPlannerParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"    private final EventPlannerParser parser \u003d new EventPlannerParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(new FindPersonCommand(new PersonNameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD) instanceof ListPersonCommand);"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD + \" 3\") instanceof ListPersonCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":5,"jiangyue12392":19,"-":118,"raynoldng":2}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":245}},{"path":"src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"public class EditPersonCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, VALID_PERSON_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        // invalid address"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PERSON_ADDRESS_AMY"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"                + VALID_PERSON_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_AMY)"},{"lineNumber":119,"author":{"gitID":"jiangyue12392"},"content":"                .withPhone(VALID_PERSON_PHONE_BOB).withEmail(VALID_PERSON_EMAIL_AMY)"},{"lineNumber":120,"author":{"gitID":"jiangyue12392"},"content":"                .withAddress(VALID_PERSON_ADDRESS_AMY)"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_HUSBAND, VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":133,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_AMY).build();"},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_AMY).build();"},{"lineNumber":145,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PERSON_PHONE_AMY).build();"},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":156,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_PERSON_EMAIL_AMY).build();"},{"lineNumber":157,"author":{"gitID":"jiangyue12392"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_PERSON_ADDRESS_AMY).build();"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":169,"author":{"gitID":"jiangyue12392"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":181,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":182,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_FRIEND, VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":183,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":193,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PERSON_PHONE_BOB).build();"},{"lineNumber":194,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":200,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":201,"author":{"gitID":"jiangyue12392"},"content":"                .withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_BOB).build();"},{"lineNumber":202,"author":{"gitID":"jiangyue12392"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":212,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":54,"-":161}},{"path":"src/test/java/seedu/address/logic/parser/ToggleAttendanceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ATTENDANCE;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":""},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":""},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ToggleAttendanceCommand;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":""},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":""},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":" * Test scope: similar to {@code SelectCommandParserTest}."},{"lineNumber":16,"author":{"gitID":"william6364"},"content":" * @see SelectCommandParserTest"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"public class ToggleAttendanceCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":""},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"    private ToggleAttendanceCommandParser parser \u003d new ToggleAttendanceCommandParser();"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":""},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    public void parse_validArgs_returnsToggleAttendanceCommand() {"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"        assertParseSuccess(parser, \"1\", new ToggleAttendanceCommand(INDEX_FIRST_ATTENDANCE));"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"                ToggleAttendanceCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":27,"-":5}},{"path":"src/test/java/seedu/address/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoableCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"bayweiheng"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"bayweiheng"},"content":"        protected void generateOppositeCommand() {}"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":2,"-":247}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"public class AddPersonCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"        new AddPersonCommand(null);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"        thrown.expectMessage(AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"raynoldng"},"content":"     * Generates a new AddPersonCommand with the details of the given person."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":"    private AddPersonCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"            return new EventPlanner();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"        public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":120,"author":{"gitID":"william6364"},"content":"            return new EventPlanner();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":6,"-":108,"raynoldng":10}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":""},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":""},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventBuilder;"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":""},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"public class AddEventCommandTest {"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":""},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        new AddEventCommand(null);"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":""},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        EpicEvent validEvent \u003d new EpicEventBuilder().build();"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":""},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        CommandResult commandResult \u003d getAddEventCommandForEpicEvent(validEvent, modelStub).execute();"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":""},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":""},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"        EpicEvent validEvent \u003d new EpicEventBuilder().build();"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":""},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":""},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        getAddEventCommandForEpicEvent(validEvent, modelStub).execute();"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":""},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    public void equals() {"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        EpicEvent eventA \u003d new EpicEventBuilder().withName(\"Event A\").build();"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"        EpicEvent eventB \u003d new EpicEventBuilder().withName(\"Event B\").build();"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        AddEventCommand addEventACommand \u003d new AddEventCommand(eventA);"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        AddEventCommand addEventBCommand \u003d new AddEventCommand(eventB);"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":""},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"        // same object -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"        assertTrue(addEventACommand.equals(addEventACommand));"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":""},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        // same values -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"        AddEventCommand addEventACommandCopy \u003d new AddEventCommand(eventA);"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        assertTrue(addEventACommand.equals(addEventACommandCopy));"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":""},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"        assertFalse(addEventACommand.equals(1));"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":""},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"        // null -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        assertFalse(addEventACommand.equals(null));"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":""},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"        // different person -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        assertFalse(addEventACommand.equals(addEventBCommand));"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":""},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"     * Generates a new AddEventCommand with the details of the given event."},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"    private AddEventCommand getAddEventCommandForEpicEvent(EpicEvent event, Model model) {"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        return command;"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":""},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"     * A Model stub that always throw a DuplicateEventException when trying to add a event."},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"    private class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"        public void addEvent(EpicEvent person) throws DuplicateEventException {"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"            throw new DuplicateEventException();"},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":""},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"        public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"            return new EventPlanner();"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":""},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"        final ArrayList\u003cEpicEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":""},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"william6364"},"content":"        public void addEvent(EpicEvent event) throws DuplicateEventException {"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"            requireNonNull(event);"},{"lineNumber":117,"author":{"gitID":"william6364"},"content":"            eventsAdded.add(event);"},{"lineNumber":118,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":""},{"lineNumber":120,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"            return new EventPlanner();"},{"lineNumber":123,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":121,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventBuilder;"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":""},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":" * Contains integration tests (interaction with the Model) for {@code AddEventCommand}."},{"lineNumber":21,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"public class AddEventCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":""},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":""},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":""},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    public void execute_newEvent_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        EpicEvent validEvent \u003d new EpicEventBuilder().build();"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":""},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"        expectedModel.addEvent(validEvent);"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":""},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(prepareCommand(validEvent, model), model,"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":""},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        EpicEvent validEvent \u003d new EpicEventBuilder().build();"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        model.addEvent(validEvent);"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":""},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"        EpicEvent eventInList \u003d model.getEventPlanner().getEventList().get(0);"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        assertCommandFailure(prepareCommand(eventInList, model), model, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":""},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"     * Generates a new {@code AddEventCommand} which upon execution, adds {@code event} into the {@code model}."},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"    private AddEventCommand prepareCommand(EpicEvent event, Model model) {"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":45,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/EditEventDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GRADUATION;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_SEMINAR;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_SEMINAR;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_SEMINAR;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"public class EditEventDescriptorTest {"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"        // same values -\u003e returns true"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor descriptorWithSameValues \u003d new EditEventDescriptor(DESC_GRADUATION);"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(DESC_GRADUATION.equals(descriptorWithSameValues));"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(DESC_GRADUATION.equals(DESC_GRADUATION));"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(DESC_GRADUATION.equals(null));"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(DESC_GRADUATION.equals(5));"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        // different values -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(DESC_GRADUATION.equals(DESC_SEMINAR));"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"        // different name -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor editedGraduation \u003d new EditEventDescriptorBuilder(DESC_GRADUATION)"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"                .withName(VALID_EVENT_NAME_SEMINAR).build();"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(DESC_GRADUATION.equals(editedGraduation));"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"        // different tags -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"        editedGraduation \u003d new EditEventDescriptorBuilder(DESC_GRADUATION).withTags(VALID_EVENT_TAG_SEMINAR).build();"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(DESC_GRADUATION.equals(editedGraduation));"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":2,"jiangyue12392":41,"-":2}},{"path":"src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"//import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":" * {@code DeletePersonCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"public class DeletePersonCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"    // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommand.execute();"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(deletePersonCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"        // execution failed -\u003e deletePersonCommand not pushed into undoRedoStack"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":137,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommand.execute();"},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(deletePersonCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"bayweiheng"},"content":"        // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":146,"author":{"gitID":"bayweiheng"},"content":"        /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":154,"author":{"gitID":"bayweiheng"},"content":"         */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"     * Returns a {@code DeletePersonCommand} with the parameter {@code index}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"jiangyue12392"},"content":"    private DeletePersonCommand prepareCommand(Index index) {"},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(index);"},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"        return deletePersonCommand;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":7,"william6364":5,"jiangyue12392":29,"-":159}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EventNameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_PERSON_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_EVENT_NAME_GRADUATION \u003d \"AY201718 Graduation\";"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_EVENT_NAME_SEMINAR \u003d \"Seminar\";"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_EVENT_TAG_GRADUATION \u003d \"graduation\";"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"    public static final String VALID_EVENT_TAG_SEMINAR \u003d \"seminar\";"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_PERSON_NAME_AMY;"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_PERSON_NAME_BOB;"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"    public static final String NAME_DESC_GRADUATION \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_GRADUATION;"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"    public static final String NAME_DESC_SEMINAR \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_SEMINAR;"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PERSON_PHONE_AMY;"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PERSON_PHONE_BOB;"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_PERSON_EMAIL_AMY;"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_PERSON_EMAIL_BOB;"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_PERSON_ADDRESS_AMY;"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_PERSON_TAG_FRIEND;"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"    public static final String TAG_DESC_GRADUATION \u003d \" \" + PREFIX_TAG + VALID_EVENT_TAG_GRADUATION;"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"    public static final String TAG_DESC_SEMINAR \u003d \" \" + PREFIX_TAG + VALID_EVENT_TAG_SEMINAR;"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_GRADUATION;"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"    public static final EditEventCommand.EditEventDescriptor DESC_SEMINAR;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_AMY)"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"                .withPhone(VALID_PERSON_PHONE_AMY).withEmail(VALID_PERSON_EMAIL_AMY)"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"                .withAddress(VALID_PERSON_ADDRESS_AMY).withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB)"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"                .withPhone(VALID_PERSON_PHONE_BOB).withEmail(VALID_PERSON_EMAIL_BOB)"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"                .withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_HUSBAND, VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"        DESC_GRADUATION \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_GRADUATION)"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_EVENT_TAG_GRADUATION).build();"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"        DESC_SEMINAR \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_SEMINAR)"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_EVENT_TAG_SEMINAR).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"        EventPlanner expectedEventPlanner \u003d new EventPlanner(actualModel.getEventPlanner());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":127,"author":{"gitID":"william6364"},"content":"            assertEquals(expectedEventPlanner, actualModel.getEventPlanner());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"raynoldng"},"content":"        final String[] splitName \u003d person.getFullName().name.split(\"\\\\s+\");"},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"        model.updateFilteredPersonList(new PersonNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetIndex} in the"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"     * {@code model}\u0027s event planner."},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"    public static void showEventAtIndex(Model model, Index targetIndex) {"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"        //TODO: Change implementation so that the event is truly shown by index instead of finding the first name"},{"lineNumber":164,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEventList().size());"},{"lineNumber":165,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent event \u003d model.getFilteredEventList().get(targetIndex.getZeroBased());"},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"        final String[] splitName \u003d event.getName().name.split(\"\\\\s+\");"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":169,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":170,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(1, model.getFilteredEventList().size());"},{"lineNumber":171,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":4,"jiangyue12392":64,"-":121,"raynoldng":1}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY)"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"                .withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PERSON_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_PERSON_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_PERSON_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":12,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/RegisterPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"/** Contains unit tests for RegisterPersonCommand */"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"public class RegisterPersonCommandTest {"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"    private Model duplicatedModel \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"    //TODO: Re-code tests after architecture stable"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"    /*@Test"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"        Person personToRegister \u003d duplicatedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"        EpicEvent eventToRegisterFor \u003d duplicatedModel.getFilteredEventList()"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"                .get(INDEX_SECOND_EVENT.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"        String eventName \u003d model.getFilteredEventList()"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"                .get(INDEX_SECOND_EVENT.getZeroBased()).getFullName().toString();"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, eventName);"},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"        String expectedMessage \u003d String.format(RegisterPersonCommand.MESSAGE_SUCCESS,"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"                personToRegister, eventName);"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"        ModelManager expectedModel \u003d new ModelManager(duplicatedModel.getEventPlanner(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"        expectedModel.registerPersonForEvent(personToRegister, eventToRegisterFor);"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"        //assertCommandSuccess(registerPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"    }*/"},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"        assertCommandFailure(registerPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getPersonList().size());"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"        assertCommandFailure(registerPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"    public void equals() throws Exception {"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON,"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerThirdCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(registerFirstCommand.equals(registerFirstCommand));"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(registerFirstCommand.equals(registerFirstCommandCopy));"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":"        registerFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(registerFirstCommand.equals(registerFirstCommandCopy));"},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"        // different types -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(registerFirstCommand.equals(1));"},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":99,"author":{"gitID":"bayweiheng"},"content":"        // null -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(registerFirstCommand.equals(null));"},{"lineNumber":101,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":"        // different person -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(registerFirstCommand.equals(registerSecondCommand));"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":"        // different event -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(registerFirstCommand.equals(registerThirdCommand));"},{"lineNumber":107,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":109,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"bayweiheng"},"content":"     * Returns a {@code RegisterEventCommand} with parameters {@code index}, {@code eventName}."},{"lineNumber":111,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"bayweiheng"},"content":"    private RegisterPersonCommand prepareCommand(Index index, String eventName) {"},{"lineNumber":113,"author":{"gitID":"bayweiheng"},"content":"        RegisterPersonCommand registerPersonCommand \u003d new RegisterPersonCommand(index, eventName);"},{"lineNumber":114,"author":{"gitID":"bayweiheng"},"content":"        registerPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"bayweiheng"},"content":"        return registerPersonCommand;"},{"lineNumber":116,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":118,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"bayweiheng"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":120,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"bayweiheng"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":122,"author":{"gitID":"bayweiheng"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":123,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":124,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":125,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":127,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":109,"jiangyue12392":2,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"public class FindPersonCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"     * Parses {@code userInput} into a {@code FindPersonCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"    private FindPersonCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        FindPersonCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"                new FindPersonCommand(new PersonNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"     *     - the {@code EventPlanner} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"    private void assertCommandSuccess(FindPersonCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"        EventPlanner expectedEventPlanner \u003d new EventPlanner(model.getEventPlanner());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"        assertEquals(expectedEventPlanner, model.getEventPlanner());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":4,"jiangyue12392":17,"-":77}},{"path":"src/test/java/seedu/address/logic/commands/DeregisterPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"/** Contains unit tests for DeregisterPersonCommand */"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"public class DeregisterPersonCommandTest {"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(),"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"            new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"        assertCommandFailure(deregisterPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getPersonList().size());"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"        assertCommandFailure(deregisterPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"    public void equals() throws Exception {"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON,"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterThirdCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_SECOND_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        // same object -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(deregisterFirstCommand.equals(deregisterFirstCommand));"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"        // same values -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand registerFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"                model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()).getName().toString());"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(deregisterFirstCommand.equals(registerFirstCommandCopy));"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"        registerFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(deregisterFirstCommand.equals(registerFirstCommandCopy));"},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(deregisterFirstCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(deregisterFirstCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(deregisterFirstCommand.equals(deregisterSecondCommand));"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"        // different event -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"        assertFalse(deregisterFirstCommand.equals(deregisterThirdCommand));"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":"     * Returns a {@code RegisterEventCommand} with parameters {@code index}, {@code eventName}."},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":"    private DeregisterPersonCommand prepareCommand(Index index, String eventName) {"},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":"        DeregisterPersonCommand deregisterPersonCommand \u003d new DeregisterPersonCommand(index, eventName);"},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":"        deregisterPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"        return deregisterPersonCommand;"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":99,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"bayweiheng"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":101,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":90,"jiangyue12392":2,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/FindEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EVENTS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalEpicEvents.FOODSEMINAR;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalEpicEvents.IOTSEMINAR;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalEpicEvents.MATHOLYMPIAD;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalEpicEvents.PHYSICSOLYMPIAD;"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EventNameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":" * Contains integration tests (interaction with the Model) for {@code FindEventCommand}."},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"public class FindEventCommandTest {"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"        EventNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"        EventNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"                new EventNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"        // different event -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_zeroKeywords_noEventFound() {"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_multipleKeywords_multipleEventsFound() {"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 4);"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand command \u003d prepareCommand(\"seminar olympiad\");"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(command, expectedMessage,"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"                Arrays.asList(FOODSEMINAR, IOTSEMINAR, MATHOLYMPIAD, PHYSICSOLYMPIAD));"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"     * Parses {@code userInput} into a {@code FindEventCommand}."},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"    private FindEventCommand prepareCommand(String userInput) {"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"        FindEventCommand command \u003d"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"                new FindEventCommand(new EventNameContainsKeywordsPredicate("},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"                        Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"        return command;"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"     *     - the {@code FilteredList\u003cEvent\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"     *     - the {@code EventPlanner} in model remains the same after executing the {@code command}"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"    private void assertCommandSuccess(FindEventCommand command, String expectedMessage, List\u003cEpicEvent\u003e expectedList) {"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"        EventPlanner expectedEventPlanner \u003d new EventPlanner(model.getEventPlanner());"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(expectedList, model.getFilteredEventList());"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        assertEquals(expectedEventPlanner, model.getEventPlanner());"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"william6364":1,"jiangyue12392":83,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"//import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":" * for EditPersonCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"public class EditPersonCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        Person editedPerson \u003d personInList.withName(VALID_PERSON_NAME_BOB).withPhone(VALID_PERSON_PHONE_BOB)"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB)"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"                .withPhone(VALID_PERSON_PHONE_BOB).withTags(VALID_PERSON_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB).build());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        Person personInList \u003d model.getEventPlanner().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":149,"author":{"gitID":"jiangyue12392"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB).build());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":164,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"        editPersonCommand.execute();"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(editPersonCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":185,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":"        // execution failed -\u003e editPersonCommand not pushed into undoRedoStack"},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"bayweiheng"},"content":"    }*/"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":203,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":211,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":212,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":217,"author":{"gitID":"jiangyue12392"},"content":"        editPersonCommand.execute();"},{"lineNumber":218,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(editPersonCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":227,"author":{"gitID":"bayweiheng"},"content":"    }*/"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":231,"author":{"gitID":"jiangyue12392"},"content":"        final EditPersonCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":235,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":255,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"jiangyue12392"},"content":"     * Returns an {@code EditPersonCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"jiangyue12392"},"content":"    private EditPersonCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":262,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(index, descriptor);"},{"lineNumber":263,"author":{"gitID":"jiangyue12392"},"content":"        editPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":264,"author":{"gitID":"jiangyue12392"},"content":"        return editPersonCommand;"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":8,"william6364":9,"jiangyue12392":54,"-":195}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"//import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"//import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"//import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"    // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"                Arrays.asList(deletePersonCommandOne, deletePersonCommandTwo), Collections.emptyList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandOne.execute();"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandTwo.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"    */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":10,"jiangyue12392":7,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"public class AddPersonCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        Person personInList \u003d model.getEventPlanner().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"     * Generates a new {@code AddPersonCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"    private AddPersonCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":46,"raynoldng":7}},{"path":"src/test/java/seedu/address/logic/commands/SelectEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EVENT;"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectEventCommand}."},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"public class SelectEventCommandTest {"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"    private Model model;"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        Index lastEpicEventIndex \u003d Index.fromOneBased(model.getFilteredEventList().size());"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"        assertExecutionSuccess(INDEX_FIRST_EVENT);"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"        assertExecutionSuccess(INDEX_THIRD_EVENT);"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        assertExecutionSuccess(lastEpicEventIndex);"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"        assertExecutionSuccess(INDEX_FIRST_EVENT);"},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_EVENT;"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getEventPlanner().getEventList().size());"},{"lineNumber":75,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":79,"author":{"gitID":"raynoldng"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"raynoldng"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectFirstEventCommand \u003d new SelectEventCommand(INDEX_FIRST_EVENT);"},{"lineNumber":82,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectSecondEventCommand \u003d new SelectEventCommand(INDEX_SECOND_EVENT);"},{"lineNumber":83,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":84,"author":{"gitID":"raynoldng"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":"        assertTrue(selectFirstEventCommand.equals(selectFirstEventCommand));"},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":87,"author":{"gitID":"raynoldng"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectFirstEventCommandCopy \u003d new SelectEventCommand(INDEX_FIRST_EVENT);"},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"        assertTrue(selectFirstEventCommand.equals(selectFirstEventCommandCopy));"},{"lineNumber":90,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":91,"author":{"gitID":"raynoldng"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"raynoldng"},"content":"        assertFalse(selectFirstEventCommand.equals(1));"},{"lineNumber":93,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":94,"author":{"gitID":"raynoldng"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"raynoldng"},"content":"        assertFalse(selectFirstEventCommand.equals(null));"},{"lineNumber":96,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":97,"author":{"gitID":"raynoldng"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitID":"raynoldng"},"content":"        assertFalse(selectFirstEventCommand.equals(selectSecondEventCommand));"},{"lineNumber":99,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":101,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"raynoldng"},"content":"     * Executes a {@code SelectEventCommand} with the given {@code index}, and checks that"},{"lineNumber":103,"author":{"gitID":"raynoldng"},"content":"     * {@code JumpToListRequestEvent} is raised with the correct index."},{"lineNumber":104,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"raynoldng"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":106,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectEventCommand \u003d prepareCommand(index);"},{"lineNumber":107,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":108,"author":{"gitID":"raynoldng"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"raynoldng"},"content":"            CommandResult commandResult \u003d selectEventCommand.execute();"},{"lineNumber":110,"author":{"gitID":"raynoldng"},"content":"            assertEquals(String.format(SelectEventCommand.MESSAGE_SELECT_EVENT_SUCCESS, index.getOneBased()),"},{"lineNumber":111,"author":{"gitID":"raynoldng"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"raynoldng"},"content":"        } catch (CommandException ce) {"},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":114,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":116,"author":{"gitID":"raynoldng"},"content":"        JumpToEventListRequestEvent lastEvent \u003d (JumpToEventListRequestEvent)"},{"lineNumber":117,"author":{"gitID":"raynoldng"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":118,"author":{"gitID":"raynoldng"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":119,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"raynoldng"},"content":"     * Executes a {@code SelectEventCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":122,"author":{"gitID":"raynoldng"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":123,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"raynoldng"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":125,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectEventCommand \u003d prepareCommand(index);"},{"lineNumber":126,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":127,"author":{"gitID":"raynoldng"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"raynoldng"},"content":"            selectEventCommand.execute();"},{"lineNumber":129,"author":{"gitID":"raynoldng"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":130,"author":{"gitID":"raynoldng"},"content":"        } catch (CommandException ce) {"},{"lineNumber":131,"author":{"gitID":"raynoldng"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":132,"author":{"gitID":"raynoldng"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":133,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":136,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"raynoldng"},"content":"     * Returns a {@code SelectEventCommand} with parameters {@code index}."},{"lineNumber":138,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"raynoldng"},"content":"    private SelectEventCommand prepareCommand(Index index) {"},{"lineNumber":140,"author":{"gitID":"raynoldng"},"content":"        SelectEventCommand selectEventCommand \u003d new SelectEventCommand(index);"},{"lineNumber":141,"author":{"gitID":"raynoldng"},"content":"        selectEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":142,"author":{"gitID":"raynoldng"},"content":"        return selectEventCommand;"},{"lineNumber":143,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":144}},{"path":"src/test/java/seedu/address/logic/commands/ListPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPersonCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"public class ListPersonCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"    private ListPersonCommand listPersonCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        listPersonCommand \u003d new ListPersonCommand();"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        listPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(listPersonCommand, model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        assertCommandSuccess(listPersonCommand, model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":8,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"        deletePersonCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"                Collections.emptyList(), Arrays.asList(deletePersonCommandTwo, deletePersonCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":7,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"    // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"        @Override"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"        protected void generateOppositeCommand() {}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":5,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getEventPlanner().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":"        JumpToPersonListRequestEvent lastEvent \u003d (JumpToPersonListRequestEvent)"},{"lineNumber":114,"author":{"gitID":"raynoldng"},"content":"                eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":138,"raynoldng":3}},{"path":"src/test/java/seedu/address/logic/commands/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"bayweiheng"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":"public class ModelStub implements Model {"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    public void resetData(ReadOnlyEventPlanner newData) {"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":""},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        return null;"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":""},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"    public void addEvent(EpicEvent event) throws DuplicateEventException {"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":""},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    public void updateEvent(EpicEvent targetEvent, EpicEvent editedEvent)"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"            throws DuplicateEventException {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":""},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":""},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"    public void deleteEvent(EpicEvent targetEvent) throws EventNotFoundException {"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":""},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"    public void registerPersonForEvent(Person person, EpicEvent event) throws EventNotFoundException,"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"            DuplicateAttendanceException {"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"    public void deregisterPersonFromEvent(Person person, EpicEvent event) throws EventNotFoundException,"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"            PersonNotFoundInEventException {"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person, EpicEvent event) throws EventNotFoundException,"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"            PersonNotFoundInEventException {"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"    public void deletePerson(Person targetPerson) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":""},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e getFilteredEventList() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e getEventList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"    public void updateFilteredEventList(Predicate\u003cEpicEvent\u003e predicate) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public ObservableEpicEvent getSelectedEpicEvent() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void setSelectedEpicEvent(int index) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void setSelectedEpicEvent(EpicEvent epicEvent) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":17,"william6364":45,"jiangyue12392":7,"-":59,"raynoldng":1}},{"path":"src/test/java/seedu/address/logic/commands/ToggleAttendanceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ATTENDANCE;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ATTENDANCE;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ATTENDANCE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":" * Contains integration tests (interaction with the Model) for {@code ToggleAttendanceCommand}."},{"lineNumber":32,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"public class ToggleAttendanceCommandTest {"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":""},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":""},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        model.setSelectedEpicEvent(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":""},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"    public void execute_validIndex_success() {"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"        Index lastAttendanceIndex \u003d Index.fromOneBased(model.getSelectedEpicEvent().getEpicEvent()"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"                .getAttendanceList().size());"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"        assertExecutionSuccess(INDEX_FIRST_ATTENDANCE);"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"        assertExecutionSuccess(INDEX_THIRD_ATTENDANCE);"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        assertExecutionSuccess(lastAttendanceIndex);"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":""},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getSelectedEpicEvent().getEpicEvent()"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"                .getAttendanceList().size() + 1);"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommand \u003d prepareCommand(outOfBoundsIndex);"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":""},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        assertExecutionFailure(toggleAttendanceCommand, Messages.MESSAGE_INVALID_ATTENDANCE_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":""},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"    public void execute_invalidEvent_failure() {"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommand \u003d prepareCommand(INDEX_FIRST_ATTENDANCE);"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"            toggleAttendanceCommand.preprocessUndoableCommand();"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"            model.deleteEvent(model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"        } catch (EventNotFoundException e) {"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"            throw new AssertionError(\"Deleting of event should not fail\");"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"            toggleAttendanceCommand.executeUndoableCommand();"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"            assertEquals(Messages.MESSAGE_EVENT_NOT_FOUND, ce.getMessage());"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":""},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"    public void execute_invalidPerson_failure() {"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommand \u003d prepareCommand(INDEX_FIRST_ATTENDANCE);"},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"            toggleAttendanceCommand.preprocessUndoableCommand();"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"            model.deregisterPersonFromEvent(model.getSelectedEpicEvent().getEpicEvent().getAttendanceList()"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"                    .get(INDEX_FIRST_ATTENDANCE.getZeroBased()).getPerson(),"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"                    model.getSelectedEpicEvent().getEpicEvent());"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        } catch (EventNotFoundException | PersonNotFoundInEventException e) {"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"            throw new AssertionError("},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"                    \"Deregistering of person should not fail\");"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"            toggleAttendanceCommand.executeUndoableCommand();"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"            assertEquals(Messages.MESSAGE_PERSON_NOT_IN_EVENT, ce.getMessage());"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":""},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"    public void equals() {"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommandA \u003d new ToggleAttendanceCommand(INDEX_FIRST_ATTENDANCE);"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommandB \u003d new ToggleAttendanceCommand(INDEX_SECOND_ATTENDANCE);"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":""},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"        // same object -\u003e returns true"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"        assertTrue(toggleAttendanceCommandA.equals(toggleAttendanceCommandA));"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":""},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"        // same values -\u003e returns true"},{"lineNumber":115,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommandCopy \u003d new ToggleAttendanceCommand(INDEX_FIRST_ATTENDANCE);"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"        assertTrue(toggleAttendanceCommandA.equals(toggleAttendanceCommandCopy));"},{"lineNumber":117,"author":{"gitID":"william6364"},"content":""},{"lineNumber":118,"author":{"gitID":"william6364"},"content":"        // different types -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"        assertFalse(toggleAttendanceCommandA.equals(1));"},{"lineNumber":120,"author":{"gitID":"william6364"},"content":""},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        // null -\u003e returns false"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"        assertFalse(toggleAttendanceCommandA.equals(null));"},{"lineNumber":123,"author":{"gitID":"william6364"},"content":""},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"        // different index -\u003e returns false"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":"        assertFalse(toggleAttendanceCommandA.equals(toggleAttendanceCommandB));"},{"lineNumber":126,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"william6364"},"content":""},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"william6364"},"content":"     * Executes a {@code ToggleAttendanceCommand} with the given {@code index},"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":"     * and checks that the attendance is correctly toggled"},{"lineNumber":131,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"william6364"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":133,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommand \u003d prepareCommand(index);"},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"        boolean initialHasAttended \u003d model.getSelectedEpicEvent().getEpicEvent()"},{"lineNumber":135,"author":{"gitID":"william6364"},"content":"                .getAttendanceList().get(index.getZeroBased()).hasAttended();"},{"lineNumber":136,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"william6364"},"content":"            CommandResult commandResult \u003d toggleAttendanceCommand.execute();"},{"lineNumber":138,"author":{"gitID":"william6364"},"content":"            assertEquals(String.format(ToggleAttendanceCommand.MESSAGE_SUCCESS,"},{"lineNumber":139,"author":{"gitID":"william6364"},"content":"                    toggleAttendanceCommand.getAttendanceToToggle().getPerson().getFullName(),"},{"lineNumber":140,"author":{"gitID":"william6364"},"content":"                    toggleAttendanceCommand.getAttendanceToToggle().getEvent().getName()),"},{"lineNumber":141,"author":{"gitID":"william6364"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":142,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":143,"author":{"gitID":"william6364"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":144,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"william6364"},"content":""},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"        // check if the correct attendance object was toggled"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"        assertTrue(toggleAttendanceCommand.getAttendanceToToggle().equals(model.getSelectedEpicEvent().getEpicEvent()"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"                .getAttendanceList().get(index.getZeroBased())));"},{"lineNumber":149,"author":{"gitID":"william6364"},"content":""},{"lineNumber":150,"author":{"gitID":"william6364"},"content":"        // check if the toggling occurred correctly"},{"lineNumber":151,"author":{"gitID":"william6364"},"content":"        assertTrue(initialHasAttended !\u003d model.getSelectedEpicEvent().getEpicEvent()"},{"lineNumber":152,"author":{"gitID":"william6364"},"content":"                .getAttendanceList().get(index.getZeroBased()).hasAttended());"},{"lineNumber":153,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"william6364"},"content":""},{"lineNumber":155,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":"     * Executes a {@code ToggleAttendanceCommand} and checks that a {@code CommandException}"},{"lineNumber":157,"author":{"gitID":"william6364"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":158,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"william6364"},"content":"    private void assertExecutionFailure(ToggleAttendanceCommand toggleAttendanceCommand, String expectedMessage) {"},{"lineNumber":160,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"william6364"},"content":"            toggleAttendanceCommand.execute();"},{"lineNumber":162,"author":{"gitID":"william6364"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":163,"author":{"gitID":"william6364"},"content":"        } catch (CommandException ce) {"},{"lineNumber":164,"author":{"gitID":"william6364"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":165,"author":{"gitID":"william6364"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":166,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"william6364"},"content":""},{"lineNumber":169,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"william6364"},"content":"     * Returns a {@code ToggleAttendanceCommand} with parameters {@code index}."},{"lineNumber":171,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"william6364"},"content":"    private ToggleAttendanceCommand prepareCommand(Index index) {"},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"        ToggleAttendanceCommand toggleAttendanceCommand \u003d new ToggleAttendanceCommand(index);"},{"lineNumber":174,"author":{"gitID":"william6364"},"content":"        toggleAttendanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":175,"author":{"gitID":"william6364"},"content":"        return toggleAttendanceCommand;"},{"lineNumber":176,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"william6364":158,"-":18}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"    private static final String VALID_NAME \u003d BENSON.getFullName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    private static final int VALID_NUMBEROFEVENTS \u003d BENSON.getNumberOfEventsRegisteredFor();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"                        VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"                        VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"                        VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"                        VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"                VALID_NUMBEROFEVENTS, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"                        VALID_NUMBEROFEVENTS, invalidTags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":19,"-":99,"raynoldng":1}},{"path":"src/test/java/seedu/address/logic/commands/EditEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"//import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GRADUATION;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_SEMINAR;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_SEMINAR;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_SEMINAR;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.testutil.EditEventDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EpicEventBuilder;"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":" * for EditEventCommand."},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"public class EditEventCommandTest {"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent editedEvent \u003d new EpicEventBuilder().build();"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(editedEvent).build();"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT, descriptor);"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.updateEvent(model.getFilteredEventList().get(0), editedEvent);"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        Index indexLastEvent \u003d Index.fromOneBased(model.getFilteredEventList().size());"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent lastEvent \u003d model.getFilteredEventList().get(indexLastEvent.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        EpicEventBuilder eventInList \u003d new EpicEventBuilder(lastEvent);"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent editedEvent \u003d eventInList.withName(VALID_EVENT_NAME_SEMINAR)"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_EVENT_TAG_SEMINAR).build();"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_SEMINAR)"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"                .withTags(VALID_EVENT_TAG_SEMINAR).build();"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(indexLastEvent, descriptor);"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.updateEvent(lastEvent, editedEvent);"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT, new EditEventDescriptor());"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent editedEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventInFilteredList \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent editedEvent \u003d new EpicEventBuilder(eventInFilteredList).withName(VALID_EVENT_NAME_SEMINAR).build();"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT,"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"                new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_SEMINAR).build());"},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(EditEventCommand.MESSAGE_EDIT_EVENT_SUCCESS, editedEvent);"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.updateEvent(model.getFilteredEventList().get(0), editedEvent);"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(editEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_duplicateEventUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent firstEvent \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder(firstEvent).build();"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(INDEX_SECOND_EVENT, descriptor);"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_duplicateEventFilteredList_failure() {"},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":119,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":120,"author":{"gitID":"jiangyue12392"},"content":"        // edit event in filtered list into a duplicate in address book"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventInList \u003d model.getEventPlanner().getEventList().get(INDEX_SECOND_EVENT.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT,"},{"lineNumber":123,"author":{"gitID":"jiangyue12392"},"content":"                new EditEventDescriptorBuilder(eventInList).build());"},{"lineNumber":124,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":125,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editEventCommand, model, EditEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":128,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_invalidEventIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"jiangyue12392"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor descriptor \u003d new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_SEMINAR).build();"},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":137,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":139,"author":{"gitID":"jiangyue12392"},"content":"     * but smaller than size of address book"},{"lineNumber":140,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_invalidEventIndexFilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"},{"lineNumber":145,"author":{"gitID":"jiangyue12392"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":146,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getEventList().size());"},{"lineNumber":147,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":148,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":149,"author":{"gitID":"jiangyue12392"},"content":"                new EditEventDescriptorBuilder().withName(VALID_EVENT_NAME_SEMINAR).build());"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(editEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":154,"author":{"gitID":"jiangyue12392"},"content":"    //TODO: Undo/Redo Test for editEventCommand"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"jiangyue12392"},"content":"     @Test"},{"lineNumber":157,"author":{"gitID":"jiangyue12392"},"content":"     public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"     UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"     UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"     RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"     Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"     Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":164,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":165,"author":{"gitID":"jiangyue12392"},"content":"     Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"     // edit -\u003e first person edited"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"     editPersonCommand.execute();"},{"lineNumber":169,"author":{"gitID":"jiangyue12392"},"content":"     undoRedoStack.push(editPersonCommand);"},{"lineNumber":170,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":171,"author":{"gitID":"jiangyue12392"},"content":"     // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":172,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":173,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":174,"author":{"gitID":"jiangyue12392"},"content":"     // redo -\u003e same first person edited again"},{"lineNumber":175,"author":{"gitID":"jiangyue12392"},"content":"     expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":176,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"jiangyue12392"},"content":"     }"},{"lineNumber":178,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":179,"author":{"gitID":"jiangyue12392"},"content":"     @Test"},{"lineNumber":180,"author":{"gitID":"jiangyue12392"},"content":"     public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":181,"author":{"gitID":"jiangyue12392"},"content":"     UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":182,"author":{"gitID":"jiangyue12392"},"content":"     UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"jiangyue12392"},"content":"     RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"     Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":185,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_PERSON_NAME_BOB).build();"},{"lineNumber":186,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"     // execution failed -\u003e editPersonCommand not pushed into undoRedoStack"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":190,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":191,"author":{"gitID":"jiangyue12392"},"content":"     // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":192,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":194,"author":{"gitID":"jiangyue12392"},"content":"     }*/"},{"lineNumber":195,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":196,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"jiangyue12392"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":198,"author":{"gitID":"jiangyue12392"},"content":"     * 2. Undo the edit."},{"lineNumber":199,"author":{"gitID":"jiangyue12392"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":200,"author":{"gitID":"jiangyue12392"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":201,"author":{"gitID":"jiangyue12392"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":202,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":204,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"jiangyue12392"},"content":"     @Test"},{"lineNumber":206,"author":{"gitID":"jiangyue12392"},"content":"     public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":207,"author":{"gitID":"jiangyue12392"},"content":"     UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":208,"author":{"gitID":"jiangyue12392"},"content":"     UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":209,"author":{"gitID":"jiangyue12392"},"content":"     RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":210,"author":{"gitID":"jiangyue12392"},"content":"     Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":211,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":212,"author":{"gitID":"jiangyue12392"},"content":"     EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":213,"author":{"gitID":"jiangyue12392"},"content":"     Model expectedModel \u003d new ModelManager(new EventPlanner(model.getEventPlanner()), new UserPrefs());"},{"lineNumber":214,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":215,"author":{"gitID":"jiangyue12392"},"content":"     showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":216,"author":{"gitID":"jiangyue12392"},"content":"     Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":217,"author":{"gitID":"jiangyue12392"},"content":"     // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":218,"author":{"gitID":"jiangyue12392"},"content":"     editPersonCommand.execute();"},{"lineNumber":219,"author":{"gitID":"jiangyue12392"},"content":"     undoRedoStack.push(editPersonCommand);"},{"lineNumber":220,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":221,"author":{"gitID":"jiangyue12392"},"content":"     // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":222,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":224,"author":{"gitID":"jiangyue12392"},"content":"     expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":225,"author":{"gitID":"jiangyue12392"},"content":"     assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":226,"author":{"gitID":"jiangyue12392"},"content":"     // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":227,"author":{"gitID":"jiangyue12392"},"content":"     assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":228,"author":{"gitID":"jiangyue12392"},"content":"     }*/"},{"lineNumber":229,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":230,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"jiangyue12392"},"content":"    public void equals() throws Exception {"},{"lineNumber":232,"author":{"gitID":"jiangyue12392"},"content":"        final EditEventCommand standardCommand \u003d prepareCommand(INDEX_FIRST_EVENT, DESC_GRADUATION);"},{"lineNumber":233,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":234,"author":{"gitID":"jiangyue12392"},"content":"        // same values -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor copyDescriptor \u003d new EditEventDescriptor(DESC_GRADUATION);"},{"lineNumber":236,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_EVENT, copyDescriptor);"},{"lineNumber":237,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":238,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":239,"author":{"gitID":"jiangyue12392"},"content":"        // same object -\u003e returns true"},{"lineNumber":240,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":241,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":242,"author":{"gitID":"jiangyue12392"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"jiangyue12392"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":244,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":245,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":246,"author":{"gitID":"jiangyue12392"},"content":"        // null -\u003e returns false"},{"lineNumber":247,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":248,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":249,"author":{"gitID":"jiangyue12392"},"content":"        // different types -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":251,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":252,"author":{"gitID":"jiangyue12392"},"content":"        // different index -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_SECOND_EVENT, DESC_GRADUATION)));"},{"lineNumber":254,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":255,"author":{"gitID":"jiangyue12392"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(standardCommand.equals(new EditEventCommand(INDEX_FIRST_EVENT, DESC_SEMINAR)));"},{"lineNumber":257,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":259,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"jiangyue12392"},"content":"     * Returns an {@code EditEventCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":261,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"jiangyue12392"},"content":"    private EditEventCommand prepareCommand(Index index, EditEventDescriptor descriptor) {"},{"lineNumber":263,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand editEventCommand \u003d new EditEventCommand(index, descriptor);"},{"lineNumber":264,"author":{"gitID":"jiangyue12392"},"content":"        editEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":265,"author":{"gitID":"jiangyue12392"},"content":"        return editEventCommand;"},{"lineNumber":266,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":5,"william6364":2,"jiangyue12392":245,"-":14,"raynoldng":1}},{"path":"src/test/java/seedu/address/logic/commands/ListRegisteredPersonsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":" * Contains unit tests for ListRegisteredPersonsCommand."},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"public class ListRegisteredPersonsCommandTest {"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"    public void execute() {"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"        EpicEvent mainEvent \u003d model.getEventList().get(1);"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"        for (Person person: model.getFilteredPersonList()) {"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"            try {"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"                model.registerPersonForEvent(person, mainEvent);"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"            } catch (Exception e) {"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"        ListRegisteredPersonsCommand command \u003d prepareCommand(mainEvent.getName().toString());"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"        assertCommandSuccess(command, expectedMessage, model.getFilteredPersonList());"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"     * Parses {@code userInput} into a {@code ListRegisteredPersonsCommand}."},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    private ListRegisteredPersonsCommand prepareCommand(String eventName) {"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        ListRegisteredPersonsCommand command \u003d"},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":"                new ListRegisteredPersonsCommand(eventName);"},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"        return command;"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":"     *     - the {@code EventPlanner} in model remains the same after executing the {@code command}"},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"    private void assertCommandSuccess("},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"            ListRegisteredPersonsCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":"        EventPlanner expectedEventPlanner \u003d new EventPlanner(model.getEventPlanner());"},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"        CommandResult commandResult \u003d null;"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"            commandResult \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"        } catch (CommandException e) {"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        assertEquals(expectedEventPlanner, model.getEventPlanner());"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":63,"william6364":2,"-":10}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        XmlEventPlannerStorage addressBookStorage \u003d new XmlEventPlannerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"         * {@link XmlEventPlannerStorage} class."},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlEventPlannerStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        EventPlanner original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        storageManager.saveEventPlanner(original);"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"        ReadOnlyEventPlanner retrieved \u003d storageManager.readEventPlanner().get();"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"        assertEquals(original, new EventPlanner(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        assertNotNull(storageManager.getEventPlannerFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        Storage storage \u003d new StorageManager(new XmlEventPlannerStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"        storage.handleEventPlannerChangedEvent(new EventPlannerChangedEvent(new EventPlanner()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"    class XmlEventPlannerStorageExceptionThrowingStub extends XmlEventPlannerStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        public XmlEventPlannerStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"        public void saveEventPlanner(ReadOnlyEventPlanner eventPlanner, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":14,"jiangyue12392":2,"-":85}},{"path":"src/test/java/seedu/address/model/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":40}},{"path":"src/test/java/seedu/address/storage/XmlSerializableEventPlannerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"public class XmlSerializableEventPlannerTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableEventPlannerTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        XmlSerializableEventPlanner dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"                XmlSerializableEventPlanner.class);"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        EventPlanner eventPlannerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"        EventPlanner typicalPersonsEventPlanner \u003d TypicalPersons.getTypicalAddressBookWithoutEvents();"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        assertEquals(eventPlannerFromFile, typicalPersonsEventPlanner);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        XmlSerializableEventPlanner dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"                XmlSerializableEventPlanner.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        XmlSerializableEventPlanner dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"                XmlSerializableEventPlanner.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":11,"-":39,"raynoldng":1}},{"path":"src/test/java/seedu/address/storage/XmlEventPlannerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"public class XmlEventPlannerStorageTest {"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlEventPlannerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"    private java.util.Optional\u003cReadOnlyEventPlanner\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        return new XmlEventPlannerStorage(filePath).readEventPlanner(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        EventPlanner original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"        XmlEventPlannerStorage xmlAddressBookStorage \u003d new XmlEventPlannerStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"        xmlAddressBookStorage.saveEventPlanner(original, filePath);"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"        ReadOnlyEventPlanner readBack \u003d xmlAddressBookStorage.readEventPlanner(filePath).get();"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"        assertEquals(original, new EventPlanner(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"        xmlAddressBookStorage.saveEventPlanner(original, filePath);"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        readBack \u003d xmlAddressBookStorage.readEventPlanner(filePath).get();"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"        assertEquals(original, new EventPlanner(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        xmlAddressBookStorage.saveEventPlanner(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"        readBack \u003d xmlAddressBookStorage.readEventPlanner().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"        assertEquals(original, new EventPlanner(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"    private void saveAddressBook(ReadOnlyEventPlanner addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"            new XmlEventPlannerStorage(filePath).saveEventPlanner(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        saveAddressBook(new EventPlanner(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":20,"-":105}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showEventAtIndex;"},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEventPlanner;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":" * {@code DeleteEventCommand}."},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"public class DeleteEventCommandTest {"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"    private Model model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"        model \u003d new ModelManager(getTypicalEventPlanner(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"        System.out.println(getTypicalEventPlanner().getEventList().size());"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"        System.out.println(model.getEventPlanner().getEventList().size());"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"        showNoEvent(expectedModel);"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(deleteEventCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_FIRST_EVENT);"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEventPlanner().getEventList().size());"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"    // TODO: Re-code tests after undo-redo functionality implemented"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"        // delete -\u003e first event deleted"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        deleteEventCommand.execute();"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(deleteEventCommand);"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"        // undo -\u003e reverts event planner back to previous state and filtered event list to show all events"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"        // redo -\u003e same first event deleted again"},{"lineNumber":106,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":119,"author":{"gitID":"jiangyue12392"},"content":"        // execution failed -\u003e deleteEventCommand not pushed into undoRedoStack"},{"lineNumber":120,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(deleteEventCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":123,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":124,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":125,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":127,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jiangyue12392"},"content":"     * 1. Deletes a {@code Event} from a filtered list."},{"lineNumber":129,"author":{"gitID":"jiangyue12392"},"content":"     * 2. Undo the deletion."},{"lineNumber":130,"author":{"gitID":"jiangyue12392"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted event in the"},{"lineNumber":131,"author":{"gitID":"jiangyue12392"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the event object regardless of indexing."},{"lineNumber":133,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"    // TODO: modify undo/redo function to properly undo/redo the deleteEvent command."},{"lineNumber":135,"author":{"gitID":"jiangyue12392"},"content":"    /*@Test"},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameEventDeleted() throws Exception {"},{"lineNumber":137,"author":{"gitID":"jiangyue12392"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":139,"author":{"gitID":"jiangyue12392"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"        Model expectedModel \u003d new ModelManager(model.getEventPlanner(), new UserPrefs());"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"        showEventAtIndex(model, INDEX_SECOND_EVENT);"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent eventToDelete \u003d model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased());"},{"lineNumber":145,"author":{"gitID":"jiangyue12392"},"content":"        // delete -\u003e deletes second event in unfiltered event list / first event in filtered event list"},{"lineNumber":146,"author":{"gitID":"jiangyue12392"},"content":"        deleteEventCommand.execute();"},{"lineNumber":147,"author":{"gitID":"jiangyue12392"},"content":"        undoRedoStack.push(deleteEventCommand);"},{"lineNumber":148,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":149,"author":{"gitID":"jiangyue12392"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":152,"author":{"gitID":"jiangyue12392"},"content":"        expectedModel.deleteEvent(eventToDelete);"},{"lineNumber":153,"author":{"gitID":"jiangyue12392"},"content":"        assertNotEquals(eventToDelete, model.getFilteredEventList().get(INDEX_FIRST_EVENT.getZeroBased()));"},{"lineNumber":154,"author":{"gitID":"jiangyue12392"},"content":"        // redo -\u003e deletes same second event in unfiltered event list"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":156,"author":{"gitID":"jiangyue12392"},"content":"    }*/"},{"lineNumber":157,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"    public void equals() throws Exception {"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_EVENT);"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"        // same object -\u003e returns true"},{"lineNumber":164,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":165,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":"        // same values -\u003e returns true"},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_EVENT);"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":169,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":170,"author":{"gitID":"jiangyue12392"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"jiangyue12392"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":172,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":173,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":174,"author":{"gitID":"jiangyue12392"},"content":"        // different types -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":176,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":177,"author":{"gitID":"jiangyue12392"},"content":"        // null -\u003e returns false"},{"lineNumber":178,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":179,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":180,"author":{"gitID":"jiangyue12392"},"content":"        // different event -\u003e returns false"},{"lineNumber":181,"author":{"gitID":"jiangyue12392"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":182,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"jiangyue12392"},"content":"     * Returns a {@code DeleteEventCommand} with the parameter {@code index}."},{"lineNumber":186,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":"    private DeleteEventCommand prepareCommand(Index index) {"},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(index);"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"        deleteEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":190,"author":{"gitID":"jiangyue12392"},"content":"        return deleteEventCommand;"},{"lineNumber":191,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":193,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"jiangyue12392"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":195,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"jiangyue12392"},"content":"    private void showNoEvent(Model model) {"},{"lineNumber":197,"author":{"gitID":"jiangyue12392"},"content":"        model.updateFilteredEventList(p -\u003e false);"},{"lineNumber":198,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":199,"author":{"gitID":"jiangyue12392"},"content":"        assertTrue(model.getFilteredEventList().isEmpty());"},{"lineNumber":200,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"jiangyue12392":182,"-":18}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.testutil.EventPlannerBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        EventPlanner eventPlanner \u003d new EventPlannerBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        EventPlanner differentEventPlanner \u003d new EventPlanner();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"        ModelManager modelManager \u003d new ModelManager(eventPlanner, userPrefs);"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(eventPlanner, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"        // different eventPlanner -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentEventPlanner, userPrefs)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"        String[] keywords \u003d ALICE.getFullName().name.split(\"\\\\s+\");"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"        modelManager.updateFilteredPersonList(new PersonNameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        assertFalse(modelManager.equals(new ModelManager(eventPlanner, userPrefs)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"        assertTrue(modelManager.equals(new ModelManager(eventPlanner, differentUserPrefs)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":9,"jiangyue12392":2,"-":53,"raynoldng":1}},{"path":"src/test/java/seedu/address/model/UniqueEpicEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.UniqueEpicEventList;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":""},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"public class UniqueEpicEventListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"        UniqueEpicEventList uniqueEpicEventList \u003d new UniqueEpicEventList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"        uniqueEpicEventList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":3,"-":12,"raynoldng":4}},{"path":"src/test/java/seedu/address/model/person/PersonNameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"public class PersonNameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        PersonNameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        predicate \u003d new PersonNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"        predicate \u003d"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"                new PersonNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":17,"-":64}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"        descriptor.setName(person.getFullName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":1,"-":84,"raynoldng":1}},{"path":"src/test/java/seedu/address/model/UniqueAttendanceListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.UniqueAttendanceList;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":""},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"public class UniqueAttendanceListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"        UniqueAttendanceList uniqueAttendanceList \u003d new UniqueAttendanceList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"        uniqueAttendanceList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":7,"-":12}},{"path":"src/test/java/seedu/address/model/EventPlannerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import static seedu.address.testutil.TypicalEpicEvents.GRADUATION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"public class EventPlannerTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    private final EventPlanner eventPlanner \u003d new EventPlanner();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        assertEquals(Collections.emptyList(), eventPlanner.getPersonList());"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        assertEquals(Collections.emptyList(), eventPlanner.getPersonTagList());"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        assertEquals(Collections.emptyList(), eventPlanner.getEventTagList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        eventPlanner.resetData(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        EventPlanner newData \u003d getTypicalAddressBook();"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"        eventPlanner.resetData(newData);"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        assertEquals(newData, eventPlanner);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        List\u003cEpicEvent\u003e newEvents \u003d Arrays.asList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        EventPlannerStub newData \u003d new EventPlannerStub(newPersons, newEvents, newTags, newTags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        eventPlanner.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"    public void resetData_withDuplicateEvents_throwsAssertionError() {"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"        // Repeat GRADUATION twice"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList();"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"        List\u003cEpicEvent\u003e newEvents \u003d Arrays.asList(GRADUATION, GRADUATION);"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(GRADUATION.getTags());"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        EventPlannerStub newData \u003d new EventPlannerStub(newPersons, newEvents, newTags, newTags);"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":""},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"        eventPlanner.resetData(newData);"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":""},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        eventPlanner.getPersonList().remove(0);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":""},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"    public void getEventList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"        eventPlanner.getEventList().remove(0);"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":""},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"    public void getPersonTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        eventPlanner.getPersonTagList().remove(0);"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":""},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"    public void getEventTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        eventPlanner.getEventTagList().remove(0);"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":""},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"     * A stub ReadOnlyEventPlanner whose persons and tags lists can violate interface constraints."},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"    private static class EventPlannerStub implements ReadOnlyEventPlanner {"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"        private final ObservableList\u003cEpicEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"        private final ObservableList\u003cTag\u003e personTags \u003d FXCollections.observableArrayList();"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"        private final ObservableList\u003cTag\u003e eventTags \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":""},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"        EventPlannerStub(Collection\u003cPerson\u003e persons, Collection\u003cEpicEvent\u003e events, Collection\u003c? extends Tag\u003e personTags,"},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"                         Collection\u003c? extends Tag\u003e eventTags) {"},{"lineNumber":115,"author":{"gitID":"william6364"},"content":"            this.persons.setAll(persons);"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"            this.events.setAll(events);"},{"lineNumber":117,"author":{"gitID":"william6364"},"content":"            this.personTags.setAll(personTags);"},{"lineNumber":118,"author":{"gitID":"william6364"},"content":"            this.eventTags.setAll(eventTags);"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"william6364"},"content":""},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":123,"author":{"gitID":"william6364"},"content":"            return persons;"},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":""},{"lineNumber":126,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"william6364"},"content":"        public ObservableList\u003cEpicEvent\u003e getEventList() {"},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"            return events;"},{"lineNumber":129,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":""},{"lineNumber":131,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"william6364"},"content":"        public ObservableList\u003cTag\u003e getPersonTagList() {"},{"lineNumber":133,"author":{"gitID":"william6364"},"content":"            return personTags;"},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"william6364"},"content":""},{"lineNumber":136,"author":{"gitID":"william6364"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"william6364"},"content":"        public ObservableList\u003cTag\u003e getEventTagList() {"},{"lineNumber":138,"author":{"gitID":"william6364"},"content":"            return eventTags;"},{"lineNumber":139,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"william6364"},"content":""},{"lineNumber":142,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":89,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"    public static final Index INDEX_THIRD_EVENT \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"    public static final Index INDEX_FIRST_ATTENDANCE \u003d Index.fromOneBased(1);"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"    public static final Index INDEX_SECOND_ATTENDANCE \u003d Index.fromOneBased(2);"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"    public static final Index INDEX_THIRD_ATTENDANCE \u003d Index.fromOneBased(3);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":3,"jiangyue12392":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"        sb.append(PREFIX_NAME + person.getFullName().name + \" \");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":34,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":35,"raynoldng":3}},{"path":"src/test/java/seedu/address/testutil/EventPlannerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":" * A utility class to help with building Eventplanner objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":" *     {@code EventPlanner ab \u003d new EventPlannerBuilder().withPerson(\"John\", \"Doe\").withPersonTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"public class EventPlannerBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"    private EventPlanner eventPlanner;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"    public EventPlannerBuilder() {"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"        eventPlanner \u003d new EventPlanner();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"    public EventPlannerBuilder(EventPlanner eventPlanner) {"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"        this.eventPlanner \u003d eventPlanner;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"     * Adds a new {@code Person} to the {@code EventPlanner} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    public EventPlannerBuilder withPerson(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"            eventPlanner.addPerson(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code EventPlanner} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"    public EventPlannerBuilder withPersonTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"            eventPlanner.addPersonTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"    //TODO: Allow adding of events and event tags"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":""},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    public EventPlanner build() {"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"        return eventPlanner;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":19,"-":36}},{"path":"src/test/java/seedu/address/testutil/EpicEventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":""},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":" * A utility class to help with building EpicEvent objects."},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"public class EpicEventBuilder {"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    public static final String DEFAULT_NAME \u003d \"MOCK AY201718 Graduation Ceremony\";"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"    public static final String DEFAULT_TAGS \u003d \"graduation\";"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":""},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    private List\u003cPerson\u003e attendees;"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":""},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    public EpicEventBuilder() {"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":""},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"     * Initializes the EpicEventBuilder with the data of {@code eventToCopy}."},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    public EpicEventBuilder(EpicEvent eventToCopy) {"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        name \u003d eventToCopy.getName();"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        tags \u003d new HashSet\u003c\u003e(eventToCopy.getTags());"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":""},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"     * Sets the {@code Name} of the {@code EpicEvent} that we are building."},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"    public EpicEventBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":""},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"     * Sets the {@code attendees} of the {@code EpicEvent} that we are building."},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    public EpicEventBuilder withAttendees(List\u003cPerson\u003e attendees) {"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"        this.attendees \u003d attendees;"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":""},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EpicEvent} that we are building."},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    public EpicEventBuilder withTags(String ... tags) {"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":""},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"     * Builds the {@code EpicEvent} with the {@code Name}, {@code tags}, {@code attendees} set"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"    public EpicEvent build() {"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"        EpicEvent event \u003d new EpicEvent(name, tags);"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        if (attendees !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"            for (Person person : attendees) {"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"                try {"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"                    event.registerPerson(person);"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"                } catch (DuplicateAttendanceException e) {"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"                    throw new AssertionError(\"Same person registered multiple twice\");"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"                }"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"        return event;"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":""},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":76,"-":6}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        return Index.fromOneBased(model.getEventPlanner().getPersonList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        return Index.fromOneBased(model.getEventPlanner().getPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"        return model.getEventPlanner().getPersonList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":3,"-":51}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        name \u003d personToCopy.getFullName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":92,"raynoldng":1}},{"path":"src/test/java/seedu/address/testutil/EpicEventUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"william6364"},"content":""},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":""},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":""},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":" * A utility class for EpicEvent."},{"lineNumber":13,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"public class EpicEventUtil {"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"     * Returns an add command string for adding the {@code event}."},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"    public static String getAddEventCommand(EpicEvent event) {"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":""},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"     * Returns the part of command string for the given {@code event}\u0027s details."},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    public static String getEventDetails(EpicEvent event) {"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"        sb.append(PREFIX_NAME + event.getName().name + \" \");"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        event.getTags().stream().forEach("},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        );"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        return sb.toString();"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":32,"-":2}},{"path":"src/test/java/seedu/address/testutil/TypicalEpicEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_GRADUATION;"},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_SEMINAR;"},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_GRADUATION;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TAG_SEMINAR;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":" * A utility class containing a list of {@code EpicEvent} objects to be used in tests."},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"public class TypicalEpicEvents {"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent GRADUATIONAY18 \u003d new EpicEventBuilder().withName(\"AY201718 Graduation Ceremony\")"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"            .withAttendees(getTypicalPersons()).withTags(\"graduation\").build();"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent FOODSEMINAR \u003d new EpicEventBuilder().withName(\"Food Seminar\")"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"seminar\", \"food\").build();"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent IOTSEMINAR \u003d new EpicEventBuilder().withName(\"IoT Seminar\")"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"seminar\", \"IoT\").build();"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent MATHOLYMPIAD \u003d new EpicEventBuilder().withName(\"Math Olympiad\")"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"competition\", \"math\").build();"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent PHYSICSOLYMPIAD \u003d new EpicEventBuilder().withName(\"Physics Olympiad\")"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"competition\", \"physics\").build();"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent CAREERTALK \u003d new EpicEventBuilder().withName(\"Career Talk\")"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"talk\", \"career\").build();"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent ORIENTATION \u003d new EpicEventBuilder().withName(\"Orientation\").build();"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"    // Manually added"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent SOCORIENTATION \u003d new EpicEventBuilder().withName(\"SOC Orientation\")"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(\"orientation\", \"SOC\").build();"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent IOTTALK \u003d new EpicEventBuilder().withName(\"IoT Talk\").build();"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent GRADUATION \u003d new EpicEventBuilder().withName(VALID_EVENT_NAME_GRADUATION)"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(VALID_EVENT_TAG_GRADUATION).build();"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"    public static final EpicEvent SEMINAR \u003d new EpicEventBuilder().withName(VALID_EVENT_NAME_SEMINAR)"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(VALID_EVENT_TAG_SEMINAR).build();"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"    public static final String KEYWORD_MATCHING_OLYMPIAD \u003d \"Olympiad\"; // A keyword that matches OLYMPIAD"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"    private TypicalEpicEvents() {} // prevents instantiation"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"     * Returns an {@code EventPlanner} with all the typical events."},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    public static EventPlanner getTypicalEventPlanner() {"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"        EventPlanner ep \u003d new EventPlanner();"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"                ep.addPerson(person);"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        for (EpicEvent event : getTypicalEvents()) {"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"            try {"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"                ep.addEvent(event);"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"        return ep;"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"    public static List\u003cEpicEvent\u003e getTypicalEvents() {"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GRADUATIONAY18, FOODSEMINAR, IOTSEMINAR, MATHOLYMPIAD, PHYSICSOLYMPIAD,"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"                CAREERTALK, ORIENTATION));"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"william6364":2,"jiangyue12392":70,"-":7}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalEpicEvents.getTypicalEvents;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_PERSON_NAME_AMY)"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"            .withPhone(VALID_PERSON_PHONE_AMY).withEmail(VALID_PERSON_EMAIL_AMY).withAddress(VALID_PERSON_ADDRESS_AMY)"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_PERSON_NAME_BOB)"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"            .withPhone(VALID_PERSON_PHONE_BOB).withEmail(VALID_PERSON_EMAIL_BOB).withAddress(VALID_PERSON_ADDRESS_BOB)"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"            .withTags(VALID_PERSON_TAG_HUSBAND, VALID_PERSON_TAG_FRIEND).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"     * Returns an {@code EventPlanner} with all the typical persons."},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":"    public static EventPlanner getTypicalAddressBookWithoutEvents() {"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        EventPlanner ab \u003d new EventPlanner();"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"raynoldng"},"content":"                ab.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"raynoldng"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"raynoldng"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"raynoldng"},"content":"        return ab;"},{"lineNumber":81,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"raynoldng"},"content":"    // @@ author"},{"lineNumber":83,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":84,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":"     * Returns an {@code EventPlanner} with all the typical persons."},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"raynoldng"},"content":"    public static EventPlanner getTypicalAddressBook() {"},{"lineNumber":88,"author":{"gitID":"raynoldng"},"content":"        EventPlanner ab \u003d new EventPlanner();"},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":90,"author":{"gitID":"raynoldng"},"content":"            try {"},{"lineNumber":91,"author":{"gitID":"raynoldng"},"content":"                ab.addPerson(person);"},{"lineNumber":92,"author":{"gitID":"raynoldng"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":93,"author":{"gitID":"raynoldng"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":94,"author":{"gitID":"raynoldng"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"raynoldng"},"content":"        for (EpicEvent epicEvent : getTypicalEvents()) {"},{"lineNumber":97,"author":{"gitID":"raynoldng"},"content":"            try {"},{"lineNumber":98,"author":{"gitID":"raynoldng"},"content":"                ab.addEvent(epicEvent);"},{"lineNumber":99,"author":{"gitID":"raynoldng"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":100,"author":{"gitID":"raynoldng"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":101,"author":{"gitID":"raynoldng"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"raynoldng"},"content":"        return ab;"},{"lineNumber":104,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":106,"author":{"gitID":"raynoldng"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":107,"author":{"gitID":"raynoldng"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":108,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"william6364":2,"jiangyue12392":16,"-":47,"raynoldng":43}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"    private final EpicEventListPanelHandle eventListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"    //  private final BrowserPanelHandle browserPanel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"        eventListPanel \u003d new EpicEventListPanelHandle(getChildNode(EpicEventListPanelHandle.EPIC_EVENT_LIST_VIEW_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"        //  browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"    public EpicEventListPanelHandle getEventListPanel() {"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        return eventListPanel;"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"    //    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"    //        return browserPanel;"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"    //    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":6,"-":46,"raynoldng":5}},{"path":"src/test/java/seedu/address/testutil/EditEventDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":" * A utility class to help with building EditEventDescriptor objects."},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"public class EditEventDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"    private EditEventDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditEventDescriptor();"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptorBuilder(EditEventDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"        this.descriptor \u003d new EditEventDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"     * Returns an {@code EditEventDescriptor} with fields containing {@code event}\u0027s details"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptorBuilder(EpicEvent event) {"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"        descriptor \u003d new EditEventDescriptor();"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"        descriptor.setName(event.getName());"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        descriptor.setTags(event.getTags());"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"     * Sets the {@code Name} of the {@code EditEventDescriptor} that we are building."},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptorBuilder withName(String name) {"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEventDescriptor}"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"     * that we are building."},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptorBuilder withTags(String... tags) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventDescriptor build() {"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"        return descriptor;"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"william6364":3,"jiangyue12392":43,"-":11}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        loadPage(SEARCH_PAGE_URL + person.getFullName().name);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"raynoldng":1}},{"path":"src/test/java/guitests/guihandles/EpicEventCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"public class EpicEventCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"    private final Label idLabel;"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"    private final Label nameLabel;"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"    public EpicEventCardHandle(Node cardNode) {"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"        super(cardNode);"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"                .stream()"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"                .map(Label.class::cast)"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"                .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"    public String getId() {"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"        return idLabel.getText();"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"    public String getName() {"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        return nameLabel.getText();"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        return tagLabels"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"                .stream()"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"                .map(Label::getText)"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"                .collect(Collectors.toList());"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":44,"-":7}},{"path":"src/main/java/seedu/address/ui/EpicEventCard.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":" * An UI component that displays information of an {@code EpicEvent}."},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"public class EpicEventCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"    private static final String FXML \u003d \"EpicEventListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EventPlanner level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    public final EpicEvent epicEvent;"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"    private FlowPane tags;"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"    public EpicEventCard(EpicEvent epicEvent, int displayedIndex) {"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        this.epicEvent \u003d epicEvent;"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"        name.setText(epicEvent.getName().name);"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        epicEvent.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"        // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"        if (!(other instanceof EpicEventCard)) {"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"        // state check"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":"        EpicEventCard card \u003d (EpicEventCard) other;"},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"                \u0026\u0026 epicEvent.equals(card.epicEvent);"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":62}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"    public void handleAddressBookChangedEvent(EventPlannerChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":79}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.control.SingleSelectionModel;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.EpicEventPanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"    private EpicEventListPanel epicEventListPanel;"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"    private AttendanceListPanel attendanceListPanel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"    private SingleSelectionModel\u003cTab\u003e tabSingleSelectionModel;"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"    private StackPane epicEventListPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"    private StackPane attendanceListPanelPlaceholder;"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":107,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":117,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"raynoldng"},"content":"        epicEventListPanel \u003d new EpicEventListPanel(logic.getFilteredEventList());"},{"lineNumber":135,"author":{"gitID":"raynoldng"},"content":"        epicEventListPanelPlaceholder.getChildren().add(epicEventListPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        attendanceListPanel \u003d new AttendanceListPanel(logic.getSelectedEpicEvent());"},{"lineNumber":138,"author":{"gitID":"raynoldng"},"content":"        attendanceListPanelPlaceholder.getChildren().add(attendanceListPanel.getRoot());"},{"lineNumber":139,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":209,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":210,"author":{"gitID":"raynoldng"},"content":"    @Subscribe"},{"lineNumber":211,"author":{"gitID":"raynoldng"},"content":"    private void handleEpicEventPanelSelectionChangedEvent(EpicEventPanelSelectionChangedEvent event) {"},{"lineNumber":212,"author":{"gitID":"raynoldng"},"content":"        logic.setSelectedEpicEvent(event.getNewSelection().epicEvent);"},{"lineNumber":213,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":214,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":216,"author":{"gitID":"raynoldng"},"content":"    @Subscribe"},{"lineNumber":217,"author":{"gitID":"raynoldng"},"content":"    private void handleJumpToListRequestEvent(JumpToEventListRequestEvent event) {"},{"lineNumber":218,"author":{"gitID":"raynoldng"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":219,"author":{"gitID":"raynoldng"},"content":"        logic.setSelectedEpicEvent(event.targetIndex);"},{"lineNumber":220,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":221,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"raynoldng"},"content":"    // @@author"},{"lineNumber":223,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":224,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":225,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":188,"raynoldng":38}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"    private void handleJumpToListRequestEvent(JumpToPersonListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":86,"raynoldng":2}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"    protected static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EventPlanner level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        initializeCardDetails(person, displayedIndex);"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"    public PersonCard(Person person, int displayedIndex, String fxml) {"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"        super(fxml);"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"        initializeCardDetails(person, displayedIndex);"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"    /** initilialize card labels **/"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"    private void initializeCardDetails(Person person, int displayedIndex) {"},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":"        name.setText(person.getFullName().name);"},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"    // @@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":61,"raynoldng":21}},{"path":"src/main/java/seedu/address/ui/EpicEventListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.EpicEventPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":" * Panel containing the list of events."},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"public class EpicEventListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    private static final String FXML \u003d \"EpicEventListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EpicEventListPanel.class);"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    private ListView\u003cEpicEventCard\u003e epicEventListView;"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"    public EpicEventListPanel(ObservableList\u003cEpicEvent\u003e epicEventList) {"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"        setConnections(epicEventList);"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"    public ObservableList\u003cAttendance\u003e getEventAttendee(int index) {"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        return epicEventListView.getItems().get(index).epicEvent.getAttendanceList();"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"    private void setConnections(ObservableList\u003cEpicEvent\u003e epicEventList) {"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        ObservableList\u003cEpicEventCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"                epicEventList, (event) -\u003e new EpicEventCard(event, epicEventList.indexOf(event) + 1));"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        epicEventListView.setItems(mappedList);"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        epicEventListView.setCellFactory(listView -\u003e new EventListViewCell());"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        epicEventListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"                        logger.fine(\"Selection in events list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"                        raise(new EpicEventPanelSelectionChangedEvent(newValue));"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"                    }"},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"                });"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"     * Scrolls to the {@code EventCard} at the {@code index} and selects it."},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"    private void scrollTo(int index) {"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"            epicEventListView.scrollTo(index);"},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":"            epicEventListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":"        });"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":"    @Subscribe"},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":"    private void handleJumpToListRequestEvent(JumpToEventListRequestEvent event) {"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":77,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"raynoldng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code EventCard}."},{"lineNumber":79,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"raynoldng"},"content":"    class EventListViewCell extends ListCell\u003cEpicEventCard\u003e {"},{"lineNumber":81,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":82,"author":{"gitID":"raynoldng"},"content":"        @Override"},{"lineNumber":83,"author":{"gitID":"raynoldng"},"content":"        protected void updateItem(EpicEventCard event, boolean empty) {"},{"lineNumber":84,"author":{"gitID":"raynoldng"},"content":"            super.updateItem(event, empty);"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":"            if (empty || event \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"raynoldng"},"content":"                setGraphic(null);"},{"lineNumber":88,"author":{"gitID":"raynoldng"},"content":"                setText(null);"},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"            } else {"},{"lineNumber":90,"author":{"gitID":"raynoldng"},"content":"                setGraphic(event.getRoot());"},{"lineNumber":91,"author":{"gitID":"raynoldng"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":95,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":95}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_INVALID_ATTENDANCE_DISPLAYED_INDEX \u003d"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"            \"The attendance list index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d person(s) listed!\";"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d event(s) listed!\";"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_EVENT_NOT_FOUND \u003d \"The event specified cannot be found\";"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_PERSON_NOT_IN_EVENT \u003d \"This person was not registered for the event\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":4,"jiangyue12392":3,"-":12}},{"path":"src/main/java/seedu/address/ui/AttendanceCard.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.property.IntegerProperty;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.property.SimpleIntegerProperty;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"public class AttendanceCard extends PersonCard {"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"    protected static final String FXML \u003d \"AttendanceListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"    private static final String ICON_ATTENDED_URL \u003d \"/images/green_tick.png\";"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"    private static final String ICON_NOT_ATTENDED_URL \u003d \"/images/red_cross.png\";"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    private static final Image ICON_ATTENDED \u003d new Image(ICON_ATTENDED_URL);"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"    private static final Image ICON_NOT_ATTENDED \u003d new Image(ICON_NOT_ATTENDED_URL);"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"    private static final List\u003cImage\u003e images \u003d Arrays.asList(ICON_ATTENDED, ICON_NOT_ATTENDED);"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"    private ImageView attendanceToggleImage;"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"    private Attendance attendance;"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    private IntegerProperty intValue;"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"    public AttendanceCard(Attendance attendee, int displayedIndex) {"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"        super(attendee.getPerson(), displayedIndex, FXML);"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":"        this.attendance \u003d attendee;"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        intValue \u003d new SimpleIntegerProperty();"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"        intValue.set(attendee.hasAttended() ? 0 : 1);"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"        attendanceToggleImage.imageProperty().bind(Bindings.createObjectBinding(() -\u003e images.get(intValue.getValue())));"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"    public Attendance getAttendance() {"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        return attendance;"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"    public void toggleImage() {"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"        intValue.set(attendance.hasAttended() ? 1 : 0);"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":52}},{"path":"src/main/java/seedu/address/commons/exceptions/DataNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":" * Signals an error caused by accessing data that do not exist."},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"public abstract class DataNotFoundException extends IllegalValueException {"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"    public DataNotFoundException(String message) {"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":10}},{"path":"src/main/java/seedu/address/ui/AttendanceListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Observable;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Observer;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":" * Panel containing the list of persons."},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"public class AttendanceListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"    private static final String FXML \u003d \"AttendanceListPanel.fxml\";"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AttendanceListPanel.class);"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"    private ListView\u003cAttendanceCard\u003e attendanceListView;"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"     * Observer of selectedEpicEvent to update AttendanceListPanel"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"    class EpicEventObserver implements Observer {"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        private ObservableEpicEvent observableEpicEvent;"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"        /**"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"         * Observer that looks for changes to selectedEvent"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"         */"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        public EpicEventObserver(ObservableEpicEvent observableEpicEvent) {"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"            this.observableEpicEvent \u003d observableEpicEvent;"},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        @Override"},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"        public void update(Observable observable, Object o) {"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"            updateConnection();"},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"        public ObservableEpicEvent getObservableEpicEvent() {"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"            return observableEpicEvent;"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":57,"author":{"gitID":"raynoldng"},"content":"    private final EpicEventObserver selectedEpicEventObserver;"},{"lineNumber":58,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":59,"author":{"gitID":"raynoldng"},"content":"    public AttendanceListPanel(ObservableEpicEvent selectedEpicEvent) {"},{"lineNumber":60,"author":{"gitID":"raynoldng"},"content":"        super(FXML);"},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"        selectedEpicEventObserver \u003d new EpicEventObserver(selectedEpicEvent);"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"        selectedEpicEvent.addObserver(selectedEpicEventObserver);"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"        setConnections();"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":"    public void updateConnection() {"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"        setConnections();"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":"    private void setConnections() {"},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"        EpicEvent selectedEpicEvent \u003d selectedEpicEventObserver.getObservableEpicEvent().getEpicEvent();"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"        // Panel auto refresh UI when a perons toggles his attendance or changes his contact info"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"        ObservableList\u003cAttendance\u003e attendanceList \u003d FXCollections.observableArrayList("},{"lineNumber":75,"author":{"gitID":"raynoldng"},"content":"            attendance -\u003e new javafx.beans.Observable[] {attendance.getPerson(),"},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":"                    attendance.getHasAttendedEventProperty()}"},{"lineNumber":77,"author":{"gitID":"raynoldng"},"content":"        );"},{"lineNumber":78,"author":{"gitID":"raynoldng"},"content":"        attendanceList.addAll(selectedEpicEvent.getAttendanceList());"},{"lineNumber":79,"author":{"gitID":"raynoldng"},"content":"        ObservableList\u003cAttendanceCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":80,"author":{"gitID":"raynoldng"},"content":"                attendanceList, (attendee) -\u003e new AttendanceCard(attendee,"},{"lineNumber":81,"author":{"gitID":"raynoldng"},"content":"                        attendanceList.indexOf(attendee) + 1));"},{"lineNumber":82,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":83,"author":{"gitID":"raynoldng"},"content":"        attendanceListView.setItems(mappedList);"},{"lineNumber":84,"author":{"gitID":"raynoldng"},"content":"        attendanceListView.setCellFactory(listView -\u003e new AttendanceListViewCell());"},{"lineNumber":85,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":86,"author":{"gitID":"raynoldng"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":87,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":89,"author":{"gitID":"raynoldng"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":90,"author":{"gitID":"raynoldng"},"content":"        attendanceListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":91,"author":{"gitID":"raynoldng"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":92,"author":{"gitID":"raynoldng"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":93,"author":{"gitID":"raynoldng"},"content":"                        logger.fine(\"Selection in attendance list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":94,"author":{"gitID":"raynoldng"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":95,"author":{"gitID":"raynoldng"},"content":"                    }"},{"lineNumber":96,"author":{"gitID":"raynoldng"},"content":"                });"},{"lineNumber":97,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":99,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"raynoldng"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":101,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"raynoldng"},"content":"    private void scrollTo(int index) {"},{"lineNumber":103,"author":{"gitID":"raynoldng"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":104,"author":{"gitID":"raynoldng"},"content":"            attendanceListView.scrollTo(index);"},{"lineNumber":105,"author":{"gitID":"raynoldng"},"content":"            attendanceListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":106,"author":{"gitID":"raynoldng"},"content":"        });"},{"lineNumber":107,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":109,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"raynoldng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AttendanceCard}."},{"lineNumber":111,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"raynoldng"},"content":"    class AttendanceListViewCell extends ListCell\u003cAttendanceCard\u003e {"},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":114,"author":{"gitID":"raynoldng"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"raynoldng"},"content":"        protected void updateItem(AttendanceCard attendanceCard, boolean empty) {"},{"lineNumber":116,"author":{"gitID":"raynoldng"},"content":"            super.updateItem(attendanceCard, empty);"},{"lineNumber":117,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":118,"author":{"gitID":"raynoldng"},"content":"            if (empty || attendanceCard \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"raynoldng"},"content":"                setGraphic(null);"},{"lineNumber":120,"author":{"gitID":"raynoldng"},"content":"                setText(null);"},{"lineNumber":121,"author":{"gitID":"raynoldng"},"content":"            } else {"},{"lineNumber":122,"author":{"gitID":"raynoldng"},"content":"                setGraphic(attendanceCard.getRoot());"},{"lineNumber":123,"author":{"gitID":"raynoldng"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":127,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"jiangyue12392":1,"raynoldng":116,"-":10}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToPersonListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"public class JumpToPersonListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"    public JumpToPersonListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"raynoldng":2}},{"path":"src/main/java/seedu/address/commons/events/ui/EpicEventPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import seedu.address.ui.EpicEventCard;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":" * Represents a selection change in the Epic Event List Panel"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"public class EpicEventPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"    private final EpicEventCard newSelection;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"    public EpicEventPanelSelectionChangedEvent(EpicEventCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"    public EpicEventCard getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":27}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToEventListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":" * Indicates a request to jump to the list of events"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"public class JumpToEventListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"    public JumpToEventListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":19,"raynoldng":3}},{"path":"src/main/java/seedu/address/commons/events/ui/FocusOnPersonListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":" * Indicates a request to set Person List tab as active"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"public class FocusOnPersonListEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":12,"raynoldng":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    /** Returns an unmodifiable view of the filtered list of events */"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    ObservableList\u003cEpicEvent\u003e getFilteredEventList();"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":""},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"    /** Returns selected EpicEvent **/"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"    ObservableEpicEvent getSelectedEpicEvent();"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    void setSelectedEpicEvent(int index);"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":"    void setSelectedEpicEvent(EpicEvent epicEvent);"},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"    // @@author"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":4,"-":29,"raynoldng":8}},{"path":"src/main/java/seedu/address/commons/events/model/EventPlannerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"/** Indicates the EventPlanner in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"public class EventPlannerChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"    public final ReadOnlyEventPlanner data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"    public EventPlannerChangedEvent(ReadOnlyEventPlanner data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of events \""},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"                + data.getEventList().size() + \", number of person tags \" + data.getPersonTagList().size()"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"                + \", number of event tags \" + data.getEventTagList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":7,"jiangyue12392":1,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/EventPlannerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.DeregisterPersonCommand;"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand;"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.ListEventCommand;"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ListPersonCommand;"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.ListRegisteredPersonsCommand;"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.RegisterPersonCommand;"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.SelectEventCommand;"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ToggleAttendanceCommand;"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"public class EventPlannerParser {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":""},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"        case ListEventCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"            return new ListEventCommand();"},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        case FindEventCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"            return new FindEventCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"        case EditEventCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"            return new EditEventCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":"        case SelectEventCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"raynoldng"},"content":"            return new SelectEventCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"        case RegisterPersonCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"            return new RegisterCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"        case DeregisterPersonCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"            return new DeregisterCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"        case ListRegisteredPersonsCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"            return new ListRegisteredPersonsCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":88,"author":{"gitID":"raynoldng"},"content":"        case AddPersonCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"            return new AddPersonCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"        case EditPersonCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"            return new EditPersonCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"        case DeletePersonCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"            return new DeletePersonCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"        case FindPersonCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"            return new FindPersonCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"        case ListPersonCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"            return new ListPersonCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"        case ToggleAttendanceCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":"            return new ToggleAttendanceCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"william6364"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":12,"william6364":12,"jiangyue12392":34,"-":66,"raynoldng":8}},{"path":"src/main/java/seedu/address/logic/parser/ListRegisteredPersonsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.ListRegisteredPersonsCommand;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":" * Parses input arguments and creates a new ListRegisteredPersonsCommand object"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":"public class ListRegisteredPersonsCommandParser implements Parser\u003cListRegisteredPersonsCommand\u003e {"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"     * Parses the given {@code String} of arguments in the context of the ListRegisteredPersonsCommand"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":"     * and returns an ListRegisteredPersonsCommand object for execution."},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"    public ListRegisteredPersonsCommand parse(String args) {"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"        return new ListRegisteredPersonsCommand(trimmedArgs);"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":19}},{"path":"src/main/java/seedu/address/logic/parser/FindEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindEventCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EventNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an FindPersonCommand object for execution."},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"    public FindEventCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"        return new FindEventCommand(new EventNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":26,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/EditPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new EditPersonCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an EditPersonCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    public EditPersonCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":10,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/EditEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand;"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.EditEventCommand.EditEventDescriptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new EditEventCommand object"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"public class EditEventCommandParser implements Parser\u003cEditEventCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEventCommand"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an EditEventCommand object for execution."},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"        Index index;"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        EditEventDescriptor editEventDescriptor \u003d new EditEventDescriptor();"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editEventDescriptor::setName);"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEventDescriptor::setTags);"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        if (!editEventDescriptor.isAnyFieldEdited()) {"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException(EditEventCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"        return new EditEventCommand(index, editEventDescriptor);"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        assert tags !\u003d null;"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"            return Optional.empty();"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":57,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an FindPersonCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"    public FindPersonCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"        return new FindPersonCommand(new PersonNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":9,"-":24}},{"path":"src/main/java/seedu/address/logic/parser/DeregisterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.DeregisterPersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":" * Parses input arguments and creates a new RegisterPersonCommand object"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"public class DeregisterCommandParser implements Parser\u003cDeregisterPersonCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"     * Parses the given {@code String} of arguments in the context of the RegisterPersonCommand"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"     * and returns an RegisterPersonCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"    public DeregisterPersonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"        String[] indexAndEventName \u003d trimmedArgs.split(\"\\\\s+\", 2);"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"        if (indexAndEventName.length \u003c 2) {"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeregisterPersonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"        String eventName \u003d indexAndEventName[1];"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"            Index index \u003d ParserUtil.parseIndex(indexAndEventName[0]);"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"            return new DeregisterPersonCommand(index, eventName);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeregisterPersonCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":28,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/ToggleAttendanceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.ToggleAttendanceCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":""},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":" * Parses input arguments and creates a new ToggleAttendanceCommand object"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"public class ToggleAttendanceCommandParser implements Parser\u003cToggleAttendanceCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"     * Parses the given {@code String} of arguments in the context of the ToggleAttendanceCommand"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"     * and returns an ToggleAttendanceCommand object for execution."},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    public ToggleAttendanceCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"            return new ToggleAttendanceCommand(index);"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleAttendanceCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":23,"raynoldng":3,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/DeletePersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new DeletePersonCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an DeletePersonCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"            return new DeletePersonCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":8,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":167}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"            return new AddPersonCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":56,"raynoldng":7}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":" * Parses input arguments and creates a new DeleteEventCommand object"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"     * and returns an DeleteEventCommand object for execution."},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"            return new DeleteEventCommand(index);"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":23,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/FocusOnPersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":" * All commands that set the focus of the tab pane to person list"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"public interface FocusOnPersonList {"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":7}},{"path":"src/main/java/seedu/address/logic/parser/SelectEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.SelectEventCommand;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"public class SelectEventCommandParser implements Parser\u003cSelectEventCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectEventCommand"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"    public SelectEventCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"            return new SelectEventCommand(index);"},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectEventCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":31}},{"path":"src/main/java/seedu/address/logic/parser/RegisterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.logic.commands.RegisterPersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":" * Parses input arguments and creates a new RegisterPersonCommand object"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"public class RegisterCommandParser implements Parser\u003cRegisterPersonCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"     * Parses the given {@code String} of arguments in the context of the RegisterPersonCommand"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"     * and returns an RegisterPersonCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"    public RegisterPersonCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"        String[] indexAndEventName \u003d trimmedArgs.split(\"\\\\s+\", 2);"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"        if (indexAndEventName.length \u003c 2) {"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterPersonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"        String eventName \u003d indexAndEventName[1];"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"            Index index \u003d ParserUtil.parseIndex(indexAndEventName[0]);"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"            return new RegisterPersonCommand(index, eventName);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RegisterPersonCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":28,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":""},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":""},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":""},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":""},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"            EpicEvent event \u003d new EpicEvent(name, tagList);"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":""},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"            return new AddEventCommand(event);"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":""},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":""},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":46,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/RestoreCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":"/** Restores the event planner to its previous state."},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":" * Used only to undo a ClearCommand."},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":"public class RestoreCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event planner has been restored!\";"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"    private ReadOnlyEventPlanner previousEventPlanner;"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"    public RestoreCommand(ReadOnlyEventPlanner previousEventPlanner) {"},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"        this.previousEventPlanner \u003d previousEventPlanner;"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"        model.resetData(previousEventPlanner);"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new ClearCommand();"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":28,"william6364":1,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/FocusOnEpicEventsList.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":" * All commands that set the focus of the tab pane to Epic events list"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"public interface FocusOnEpicEventsList {"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":7}},{"path":"src/main/java/seedu/address/logic/commands/ListEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":" * Lists all events in the event planner to the user."},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"public class ListEventCommand extends Command implements FocusOnEpicEventsList {"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"    public static final String COMMAND_WORD \u003d \"list-events\";"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":21}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":""},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":" * Adds an event to the event planner."},{"lineNumber":14,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"    public static final String COMMAND_WORD \u003d \"add-event\";"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":""},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the event planner. \""},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"            + PREFIX_NAME + \"AY201718 Graduation Ceremony \""},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"            + PREFIX_TAG + \"graduation \";"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the event planner\";"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":""},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    private final EpicEvent toAdd;"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":""},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"     * Creates an AddEventCommand to add the specified {@code EpicEvent}"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    public AddEventCommand(EpicEvent event) {"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"        requireNonNull(event);"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        toAdd \u003d event;"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":""},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"            model.addEvent(toAdd);"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":""},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new DeleteEventCommand(toAdd);"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":""},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"bayweiheng":7,"william6364":52,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":" * Clears the event planner."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event planner has been cleared!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"        model.resetData(new EventPlanner());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new RestoreCommand(new EventPlanner(model.getEventPlanner()));"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":8,"william6364":4,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/FindEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EventNameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"public class FindEventCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"    public static final String COMMAND_WORD \u003d \"find-event\";"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all events whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"    private final EventNameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"    public FindEventCommand(EventNameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"        model.updateFilteredEventList(predicate);"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"        return new CommandResult(getMessageForEventListShownSummary(model.getFilteredEventList().size()));"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof FindEventCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.predicate.equals(((FindEventCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":37}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of events."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"     * @return summary message for events displayed"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    public static String getMessageForEventListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"        return String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":8,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/ListRegisteredPersonsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":12,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"/** Lists all registered persons in a given event, regardless of whether their attendance is marked */"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"public class ListRegisteredPersonsCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"    public static final String COMMAND_WORD \u003d \"list-registered\";"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons in %1$s\";"},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_EVENT_NOT_FOUND \u003d \"The event specified cannot be found\";"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"    private final String eventName;"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"    private EpicEvent eventToListRegisteredPersonsFor;"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"    public ListRegisteredPersonsCommand(String eventName) {"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e events \u003d model.getEventList();"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e matchedEvents \u003d events.stream()"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"                .filter(e -\u003e e.getName().toString().equals(eventName))"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"                .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"        if (matchedEvents.isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_EVENT_NOT_FOUND);"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"        eventToListRegisteredPersonsFor \u003d matchedEvents.get(0);"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"        Predicate\u003cPerson\u003e isInEvent \u003d person -\u003e"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"            eventToListRegisteredPersonsFor.hasPerson(person);"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"        model.updateFilteredPersonList(isInEvent);"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":43,"william6364":1,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/SelectEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToEventListRequestEvent;"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":" * Selects a event identified using it\u0027s last displayed index from the event planner."},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"public class SelectEventCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"    public static final String COMMAND_WORD \u003d \"select-event\";"},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"            + \": Selects the event identified by the index number used in the last event listing.\\n\""},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":26,"author":{"gitID":"raynoldng"},"content":"    public static final String MESSAGE_SELECT_EVENT_SUCCESS \u003d \"Selected Event: %1$s\";"},{"lineNumber":27,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":28,"author":{"gitID":"raynoldng"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":30,"author":{"gitID":"raynoldng"},"content":"    public SelectEventCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"raynoldng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"raynoldng"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":37,"author":{"gitID":"raynoldng"},"content":"        List\u003cEpicEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":38,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":39,"author":{"gitID":"raynoldng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"raynoldng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":"        model.setSelectedEpicEvent(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":45,"author":{"gitID":"raynoldng"},"content":"        EventsCenter.getInstance().post(new JumpToEventListRequestEvent(targetIndex));"},{"lineNumber":46,"author":{"gitID":"raynoldng"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_EVENT_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":48,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":50,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"raynoldng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"raynoldng"},"content":"                || (other instanceof SelectEventCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"raynoldng"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectEventCommand) other).targetIndex)); // state check"},{"lineNumber":55,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":56}},{"path":"src/main/java/seedu/address/logic/commands/EditPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":" * Edits the details of an existing person in the event planner."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"public class EditPersonCommand extends UndoableCommand {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the event planner.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private Index index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"     * Used for generating the oppositeCommand of an EditPersonCommand"},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"    public EditPersonCommand(Person personToEdit, Person editedPerson) {"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        this.personToEdit \u003d personToEdit;"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"        this.editedPerson \u003d editedPerson;"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":109,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":111,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new EditPersonCommand(editedPerson, new Person(personToEdit));"},{"lineNumber":112,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"raynoldng"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getFullName());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"jiangyue12392"},"content":"        if (!(other instanceof EditPersonCommand)) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":177,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":216,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":217,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":225,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":226,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":16,"william6364":3,"jiangyue12392":4,"-":229,"raynoldng":1}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"     * Represents the Command to be executed to revert the changes made by the UndoableCommand."},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"     * We mandate that the oppositeCommand of an UndoableCommand be undoable as well."},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"    protected UndoableCommand oppositeCommand;"},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"     * Undoes the intention of the previous command, and updates the person panel"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"     * to show all persons. The relative ordering of Persons/EpicEvents may be altered after undoing of"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"     * a delete command."},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    protected final void undo() {"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(model);"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"            oppositeCommand.executeUndoableCommand();"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"        } catch (CommandException ce) {"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"            throw new AssertionError(\"This command should not fail.\");"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    protected abstract void generateOppositeCommand();"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":"     * Executes the command and updates person panel to show all persons."},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":"    protected final void redo() {"},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"            executeUndoableCommand();"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"        } catch (CommandException ce) {"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":"                    + \"it should not fail now.\");"},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"        generateOppositeCommand();"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand.setData(model, history, undoRedoStack);"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"        return executeUndoableCommand();"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":48,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":" * Adds a person to the event planner."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"public class AddPersonCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the event planner. \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the event planner\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"raynoldng"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new DeletePersonCommand(toAdd);"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":8,"william6364":3,"-":60,"raynoldng":5}},{"path":"src/main/java/seedu/address/logic/commands/DeletePersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":" * Deletes a person identified using it\u0027s last displayed index from the event planner."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"public class DeletePersonCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_STILL_REGISTERED \u003d \"This person is still registered for an event!\""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"            + \" Please deregister the person from all events first\";"},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    public DeletePersonCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"     * Used for generating the oppositeCommand of an AddCommand"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"    public DeletePersonCommand(Person personToDelete) {"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"        this.personToDelete \u003d personToDelete;"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"        this.targetIndex \u003d null;"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"     * Finds the person to delete from the supplied index."},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"     * If the person is still registered for an event, he/she is not allowed to be deleted,"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"     * and an exception will be thrown."},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"        if (personToDelete.getNumberOfEventsRegisteredFor() \u003e 0) {"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_STILL_REGISTERED);"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new AddPersonCommand(personToDelete);"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeletePersonCommand) other).targetIndex) // state check"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeletePersonCommand) other).personToDelete));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":39,"william6364":1,"jiangyue12392":5,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":"import seedu.address.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":" * Selects a person identified using it\u0027s last displayed index from the event planner."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"raynoldng"},"content":"        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":49,"raynoldng":2}},{"path":"src/main/java/seedu/address/logic/commands/RegisterPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":" * Registers a person to an event."},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"public class RegisterPersonCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"    public static final String COMMAND_WORD \u003d \"register\";"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"            + \": Registers the person identified by the index number used in the last person listing\""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"            + \" to a particular event.\\n\""},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"            + \"Parameters: INDEX (must be a positive integer), EVENT_NAME (must match an event\u0027s name\""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"            + \" in EventPlanner exactly\\n\""},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\" + \" AY201718 Graduation\";"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Registered person %1$s for event %2$s\";"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_EVENT_NOT_FOUND \u003d \"The event specified cannot be found\";"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person is already registered for the event\";"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    private Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"    private String eventName;"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"    private Person personToRegister;"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"    private EpicEvent eventToRegisterFor;"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"     * Creates an RegisterPersonCommand to register the Person at targetIndex in the last person"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"     * listing for the EpicEvent with name eventName"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    public RegisterPersonCommand(Index targetIndex, String eventName) {"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(targetIndex, eventName);"},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"    public RegisterPersonCommand(Person personToRegister, EpicEvent eventToRegisterFor) {"},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"        this.personToRegister \u003d personToRegister;"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"        this.eventToRegisterFor \u003d eventToRegisterFor;"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(personToRegister, eventToRegisterFor);"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":"            model.registerPersonForEvent(personToRegister, eventToRegisterFor);"},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"        } catch (EventNotFoundException enfe) {"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"            throw new AssertionError(\"The target event cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        } catch (DuplicateAttendanceException dpe) {"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToRegister, eventName));"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"        personToRegister \u003d lastShownPersonList.get(targetIndex.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e events \u003d model.getEventList();"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e matchedEvents \u003d events.stream()"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"                .filter(e -\u003e e.getName().toString().equals(eventName))"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"                .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"        if (matchedEvents.isEmpty()) {"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_EVENT_NOT_FOUND);"},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"        eventToRegisterFor \u003d matchedEvents.get(0);"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new DeregisterPersonCommand(personToRegister, eventToRegisterFor);"},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":100,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"bayweiheng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"                || (other instanceof RegisterPersonCommand // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 this.targetIndex.equals(((RegisterPersonCommand) other).targetIndex) // state check"},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 Objects.equals(this.personToRegister, ((RegisterPersonCommand) other).personToRegister)"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 this.eventName.equals(((RegisterPersonCommand) other).eventName)"},{"lineNumber":107,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 Objects.equals(this.eventToRegisterFor, ((RegisterPersonCommand) other).eventToRegisterFor));"},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":101,"william6364":1,"jiangyue12392":2,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/FindPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.PersonNameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":" * Finds and lists all persons in event planner whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"public class FindPersonCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"    private final PersonNameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"    public FindPersonCommand(PersonNameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.predicate.equals(((FindPersonCommand) other).predicate)); // state check"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":6,"-":29}},{"path":"src/main/java/seedu/address/logic/commands/ListPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":" * Lists all persons in the event planner to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"public class ListPersonCommand extends Command implements FocusOnPersonList {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"-":18}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.logic.parser.EventPlannerParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    private final EventPlannerParser eventPlannerParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"        eventPlannerParser \u003d new EventPlannerParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"            Command command \u003d eventPlannerParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e getFilteredEventList() {"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"        return model.getFilteredEventList();"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":""},{"lineNumber":61,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":62,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"raynoldng"},"content":"    public ObservableEpicEvent getSelectedEpicEvent() {"},{"lineNumber":64,"author":{"gitID":"raynoldng"},"content":"        return model.getSelectedEpicEvent();"},{"lineNumber":65,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":67,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"    public void setSelectedEpicEvent(int index) {"},{"lineNumber":69,"author":{"gitID":"raynoldng"},"content":"        model.setSelectedEpicEvent(index);"},{"lineNumber":70,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":72,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"raynoldng"},"content":"    public void setSelectedEpicEvent(EpicEvent epicEvent) {"},{"lineNumber":74,"author":{"gitID":"raynoldng"},"content":"        model.setSelectedEpicEvent(epicEvent);"},{"lineNumber":75,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"raynoldng"},"content":"    // @@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":10,"-":55,"raynoldng":17}},{"path":"src/main/java/seedu/address/storage/XmlSerializableEventPlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" * An Immutable EventPlanner that is serializable to XML format"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"@XmlRootElement(name \u003d \"eventplanner\")"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"public class XmlSerializableEventPlanner {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"    private List\u003cXmlAdaptedEpicEvent\u003e epicEvents;"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    private List\u003cXmlAdaptedTag\u003e personTags;"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    private List\u003cXmlAdaptedTag\u003e eventTags;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"     * Creates an empty XmlSerializableEventPlanner."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    public XmlSerializableEventPlanner() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"        epicEvents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"        personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"        eventTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"    public XmlSerializableEventPlanner(ReadOnlyEventPlanner src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        epicEvents.addAll(src.getEventList().stream().map(XmlAdaptedEpicEvent::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"        personTags.addAll(src.getPersonTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        eventTags.addAll(src.getEventTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"     * Finds and replaces the dummy person in attendance list with the person object in the master list"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"    void setPersonForAttendance(UniquePersonList persons, EpicEvent event) {"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        for (Person p : persons) {"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"            event.replace(p);"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"     * Converts this eventplanner into the model\u0027s {@code EventPlanner} object."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"     * {@code XmlAdaptedPerson}, {@code XmlAdaptedEpicEvent} or {@code XmlAdaptedTag}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"    public EventPlanner toModelType() throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        EventPlanner eventPlanner \u003d new EventPlanner();"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"        for (XmlAdaptedTag t : personTags) {"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"            eventPlanner.addPersonTag(t.toModelType());"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        for (XmlAdaptedTag t : eventTags) {"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"            eventPlanner.addEventTag(t.toModelType());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"            eventPlanner.addPerson(p.toModelType());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"        for (XmlAdaptedEpicEvent e: epicEvents) {"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"            EpicEvent newEpicEvent \u003d e.toModelType();"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"            setPersonForAttendance(eventPlanner.getPersonMaseterList(), newEpicEvent);"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":"            eventPlanner.addEvent(newEpicEvent);"},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"        return eventPlanner;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"        if (!(other instanceof XmlSerializableEventPlanner)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        XmlSerializableEventPlanner otherEp \u003d (XmlSerializableEventPlanner) other;"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"        return persons.equals(otherEp.persons) \u0026\u0026 epicEvents.equals(otherEp.epicEvents)"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 eventTags.equals(otherEp.eventTags)"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 personTags.equals(otherEp.personTags);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":24,"jiangyue12392":28,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/EditEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":" * Edits the details of an existing event in the address book."},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"public class EditEventCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    public static final String COMMAND_WORD \u003d \"edit-event\";"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the event identified \""},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"            + \"by the index number used in the last event listing. \""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"            + PREFIX_TAG + \"School Event\";"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book.\";"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"    private Index index;"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"    private EditEventDescriptor editEventDescriptor;"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"    private EpicEvent eventToEdit;"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"    private EpicEvent editedEvent;"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"     * @param index of the event in the filtered event list to edit"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"     * @param editEventDescriptor details to edit the event with"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventCommand(Index index, EditEventDescriptor editEventDescriptor) {"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(index);"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(editEventDescriptor);"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        this.index \u003d index;"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        this.editEventDescriptor \u003d new EditEventDescriptor(editEventDescriptor);"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"    public EditEventCommand(EpicEvent eventToEdit, EpicEvent editedEvent) {"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        this.eventToEdit \u003d eventToEdit;"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        this.editedEvent \u003d editedEvent;"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"            model.updateEvent(eventToEdit, editedEvent);"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"        } catch (DuplicateEventException dee) {"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"        } catch (EventNotFoundException enfe) {"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"            throw new AssertionError(\"The target event cannot be missing\");"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, editedEvent));"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        List\u003cEpicEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"        eventToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"        editedEvent \u003d createEditedEvent(eventToEdit, editEventDescriptor);"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new EditEventCommand(editedEvent, new EpicEvent(eventToEdit));"},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":"     * Creates and returns a {@code EpicEvent} with the details of {@code eventToEdit}"},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"     * edited with {@code editEventDescriptor}."},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"    private static EpicEvent createEditedEvent(EpicEvent eventToEdit, EditEventDescriptor editEventDescriptor) {"},{"lineNumber":106,"author":{"gitID":"jiangyue12392"},"content":"        assert eventToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":"        Name updatedName \u003d editEventDescriptor.getName().orElse(eventToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"        Set\u003cTag\u003e updatedTags \u003d editEventDescriptor.getTags().orElse(eventToEdit.getTags());"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        return new EpicEvent(updatedName, updatedTags);"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        if (!(other instanceof EditEventCommand)) {"},{"lineNumber":123,"author":{"gitID":"jiangyue12392"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":"        // state check"},{"lineNumber":127,"author":{"gitID":"jiangyue12392"},"content":"        EditEventCommand e \u003d (EditEventCommand) other;"},{"lineNumber":128,"author":{"gitID":"jiangyue12392"},"content":"        return index.equals(e.index)"},{"lineNumber":129,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 editEventDescriptor.equals(e.editEventDescriptor)"},{"lineNumber":130,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 Objects.equals(eventToEdit, e.eventToEdit);"},{"lineNumber":131,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":133,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"     * Stores the details to edit the event with. Each non-empty field value will replace the"},{"lineNumber":135,"author":{"gitID":"jiangyue12392"},"content":"     * corresponding field value of the event."},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"jiangyue12392"},"content":"    public static class EditEventDescriptor {"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"        private Name name;"},{"lineNumber":139,"author":{"gitID":"jiangyue12392"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":140,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"        public EditEventDescriptor() {}"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"        /**"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"         * Copy constructor."},{"lineNumber":145,"author":{"gitID":"jiangyue12392"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":146,"author":{"gitID":"jiangyue12392"},"content":"         */"},{"lineNumber":147,"author":{"gitID":"jiangyue12392"},"content":"        public EditEventDescriptor(EditEventDescriptor toCopy) {"},{"lineNumber":148,"author":{"gitID":"jiangyue12392"},"content":"            setName(toCopy.name);"},{"lineNumber":149,"author":{"gitID":"jiangyue12392"},"content":"            setTags(toCopy.tags);"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":152,"author":{"gitID":"jiangyue12392"},"content":"        /**"},{"lineNumber":153,"author":{"gitID":"jiangyue12392"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":154,"author":{"gitID":"jiangyue12392"},"content":"         */"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":156,"author":{"gitID":"jiangyue12392"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.tags);"},{"lineNumber":157,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"        public void setName(Name name) {"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"            this.name \u003d name;"},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":164,"author":{"gitID":"jiangyue12392"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":165,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":167,"author":{"gitID":"jiangyue12392"},"content":"        /**"},{"lineNumber":168,"author":{"gitID":"jiangyue12392"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":169,"author":{"gitID":"jiangyue12392"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":170,"author":{"gitID":"jiangyue12392"},"content":"         */"},{"lineNumber":171,"author":{"gitID":"jiangyue12392"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":172,"author":{"gitID":"jiangyue12392"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":173,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":175,"author":{"gitID":"jiangyue12392"},"content":"        /**"},{"lineNumber":176,"author":{"gitID":"jiangyue12392"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":177,"author":{"gitID":"jiangyue12392"},"content":"         * if modification is attempted."},{"lineNumber":178,"author":{"gitID":"jiangyue12392"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":179,"author":{"gitID":"jiangyue12392"},"content":"         */"},{"lineNumber":180,"author":{"gitID":"jiangyue12392"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":181,"author":{"gitID":"jiangyue12392"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":182,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":184,"author":{"gitID":"jiangyue12392"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"jiangyue12392"},"content":"        public boolean equals(Object other) {"},{"lineNumber":186,"author":{"gitID":"jiangyue12392"},"content":"            // short circuit if same object"},{"lineNumber":187,"author":{"gitID":"jiangyue12392"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":188,"author":{"gitID":"jiangyue12392"},"content":"                return true;"},{"lineNumber":189,"author":{"gitID":"jiangyue12392"},"content":"            }"},{"lineNumber":190,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":191,"author":{"gitID":"jiangyue12392"},"content":"            // instanceof handles nulls"},{"lineNumber":192,"author":{"gitID":"jiangyue12392"},"content":"            if (!(other instanceof EditEventDescriptor)) {"},{"lineNumber":193,"author":{"gitID":"jiangyue12392"},"content":"                return false;"},{"lineNumber":194,"author":{"gitID":"jiangyue12392"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":196,"author":{"gitID":"jiangyue12392"},"content":"            // state check"},{"lineNumber":197,"author":{"gitID":"jiangyue12392"},"content":"            EditEventDescriptor e \u003d (EditEventDescriptor) other;"},{"lineNumber":198,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":199,"author":{"gitID":"jiangyue12392"},"content":"            return getName().equals(e.getName())"},{"lineNumber":200,"author":{"gitID":"jiangyue12392"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":201,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"bayweiheng":5,"william6364":3,"jiangyue12392":177,"-":17,"raynoldng":1}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"public interface Storage extends EventPlannerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"    String getEventPlannerFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    void saveEventPlanner(ReadOnlyEventPlanner eventPlanner) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"     * Saves the current version of the Event Planner to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"    void handleEventPlannerChangedEvent(EventPlannerChangedEvent abce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":6,"jiangyue12392":2,"-":30}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" * Manages storage of EventPlanner data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    private EventPlannerStorage eventPlannerStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    public StorageManager(EventPlannerStorage eventPlannerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        this.eventPlannerStorage \u003d eventPlannerStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EventPlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"    public String getEventPlannerFilePath() {"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"        return eventPlannerStorage.getEventPlannerFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"    public Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        return readEventPlanner(eventPlannerStorage.getEventPlannerFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"    public Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner(String filePath)"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"        return eventPlannerStorage.readEventPlanner(filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"    public void saveEventPlanner(ReadOnlyEventPlanner eventPlanner) throws IOException {"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        saveEventPlanner(eventPlanner, eventPlannerStorage.getEventPlannerFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"    public void saveEventPlanner(ReadOnlyEventPlanner eventPlanner, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        eventPlannerStorage.saveEventPlanner(eventPlanner, filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"    public void handleEventPlannerChangedEvent(EventPlannerChangedEvent event) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"            saveEventPlanner(event.data);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":15,"jiangyue12392":5,"-":73}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":" * Deletes an event identified using it\u0027s last displayed index from the event planner."},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"public class DeleteEventCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"    public static final String COMMAND_WORD \u003d \"delete-event\";"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"            + \": Deletes the event identified by the index number used in the last event listing.\\n\""},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    private EpicEvent eventToDelete;"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    public DeleteEventCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":"     * Used for generating the oppositeCommand of an AddEventCommand"},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"    public DeleteEventCommand(EpicEvent eventToDelete) {"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":"        this.eventToDelete \u003d eventToDelete;"},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"        this.targetIndex \u003d null;"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(eventToDelete);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"            model.deleteEvent(eventToDelete);"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"        } catch (EventNotFoundException enfe) {"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"            throw new AssertionError(\"The target event cannot be missing\");"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        List\u003cEpicEvent\u003e lastShownList \u003d model.getFilteredEventList();"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        eventToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new AddEventCommand(eventToDelete);"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEventCommand) other).targetIndex) // state check"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 Objects.equals(this.eventToDelete, ((DeleteEventCommand) other).eventToDelete));"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"}"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":""}],"authorContributionMap":{"bayweiheng":13,"jiangyue12392":62,"-":10}},{"path":"src/main/java/seedu/address/storage/EventPlannerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":""},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":" * Represents a storage for {@link EventPlanner}."},{"lineNumber":12,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"public interface EventPlannerStorage {"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":""},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"    String getEventPlannerFilePath();"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":""},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"     * Returns EventPlanner data as a {@link ReadOnlyEventPlanner}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":""},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"     * @see #getEventPlannerFilePath()"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":""},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"     * Saves the given {@link ReadOnlyEventPlanner} to the storage."},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"     * @param eventPlanner cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"    void saveEventPlanner(ReadOnlyEventPlanner eventPlanner) throws IOException;"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":""},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"     * @see #saveEventPlanner(ReadOnlyEventPlanner)"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"    void saveEventPlanner(ReadOnlyEventPlanner eventPlanner, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":""},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":32,"jiangyue12392":1,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/DeregisterPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"bayweiheng"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":5,"author":{"gitID":"bayweiheng"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"bayweiheng"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"//@@author bayweiheng"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":" * Registers a person to an event."},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":" */"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"public class DeregisterPersonCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"    public static final String COMMAND_WORD \u003d \"deregister\";"},{"lineNumber":25,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":26,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"bayweiheng"},"content":"            + \": Deregisters the person identified by the index number used in the last person listing\""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"            + \" from a particular event.\\n\""},{"lineNumber":29,"author":{"gitID":"bayweiheng"},"content":"            + \"Parameters: INDEX (must be a positive integer), EVENT_NAME (must match an event\u0027s name\""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"            + \" in EventPlanner exactly\\n\""},{"lineNumber":31,"author":{"gitID":"bayweiheng"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\" + \" AY201718 Graduation\";"},{"lineNumber":32,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":33,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deregistered person %1$s from event %2$s\";"},{"lineNumber":34,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_EVENT_NOT_FOUND \u003d \"The event specified cannot be found\";"},{"lineNumber":35,"author":{"gitID":"bayweiheng"},"content":"    public static final String MESSAGE_PERSON_NOT_IN_EVENT \u003d \"This person was not registered for the event\";"},{"lineNumber":36,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":37,"author":{"gitID":"bayweiheng"},"content":"    private Index targetIndex;"},{"lineNumber":38,"author":{"gitID":"bayweiheng"},"content":"    private String eventName;"},{"lineNumber":39,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":40,"author":{"gitID":"bayweiheng"},"content":"    private Person personToDeregister;"},{"lineNumber":41,"author":{"gitID":"bayweiheng"},"content":"    private EpicEvent eventToDeregisterFor;"},{"lineNumber":42,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":43,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"bayweiheng"},"content":"     * Creates an RegisterPersonCommand to register the Person at targetIndex in the last person"},{"lineNumber":45,"author":{"gitID":"bayweiheng"},"content":"     * listing for the EpicEvent with name eventName"},{"lineNumber":46,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"bayweiheng"},"content":"    public DeregisterPersonCommand(Index targetIndex, String eventName) {"},{"lineNumber":48,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(targetIndex, eventName);"},{"lineNumber":49,"author":{"gitID":"bayweiheng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":50,"author":{"gitID":"bayweiheng"},"content":"        this.eventName \u003d eventName;"},{"lineNumber":51,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":53,"author":{"gitID":"bayweiheng"},"content":"    public DeregisterPersonCommand(Person personToDeregister, EpicEvent eventToDeregisterFor) {"},{"lineNumber":54,"author":{"gitID":"bayweiheng"},"content":"        this.personToDeregister \u003d personToDeregister;"},{"lineNumber":55,"author":{"gitID":"bayweiheng"},"content":"        this.eventToDeregisterFor \u003d eventToDeregisterFor;"},{"lineNumber":56,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":58,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"bayweiheng"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(personToDeregister, eventToDeregisterFor);"},{"lineNumber":61,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"bayweiheng"},"content":"            model.deregisterPersonFromEvent(personToDeregister, eventToDeregisterFor);"},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"        } catch (EventNotFoundException enfe) {"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"            throw new AssertionError(\"The target event cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"        } catch (PersonNotFoundInEventException dpe) {"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_PERSON_NOT_IN_EVENT);"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, personToDeregister, eventName));"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"        personToDeregister \u003d lastShownPersonList.get(targetIndex.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e events \u003d model.getEventList();"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        List\u003cEpicEvent\u003e matchedEvents \u003d events.stream()"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"                .filter(e -\u003e e.getName().toString().equals(eventName))"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"                .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"        if (matchedEvents.isEmpty()) {"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"            throw new CommandException(MESSAGE_EVENT_NOT_FOUND);"},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"        eventToDeregisterFor \u003d matchedEvents.get(0);"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":"        oppositeCommand \u003d new RegisterPersonCommand(personToDeregister, eventToDeregisterFor);"},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":100,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"bayweiheng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"                || (other instanceof DeregisterPersonCommand // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeregisterPersonCommand) other).targetIndex) // state check"},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 Objects.equals(this.personToDeregister, ((DeregisterPersonCommand) other).personToDeregister)"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 this.eventName.equals(((DeregisterPersonCommand) other).eventName)"},{"lineNumber":107,"author":{"gitID":"bayweiheng"},"content":"                \u0026\u0026 Objects.equals(this.eventToDeregisterFor, ((DeregisterPersonCommand) other).eventToDeregisterFor));"},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":102,"jiangyue12392":2,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAttendance.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":" * JAXB-friendly version of the Attendance."},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jiangyue12392"},"content":"public class XmlAdaptedAttendance {"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Attendance\u0027s %s field is missing!\";"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"    private XmlAdaptedPerson attendee;"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"    private boolean hasAttended;"},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"     * Constructs an XmlAdaptedAttendance."},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedAttendance() {}"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"     * Constructs an {@code XmlAdaptedAttendance} with the given Attendance details."},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedAttendance(XmlAdaptedPerson attendee, boolean hasAttended) {"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"        this.attendee \u003d attendee;"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"        this.hasAttended \u003d hasAttended;"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"     * Converts a given Attendance into this class for JAXB use."},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAttendance"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedAttendance(Attendance source) {"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        Objects.requireNonNull(source);"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"        Objects.requireNonNull(source.getPerson());"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        attendee \u003d new XmlAdaptedPerson(source.getPerson());"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"        hasAttended \u003d source.hasAttended();"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"     * Converts this jaxb-friendly adapted Attendance object into the model\u0027s Attendance object."},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Attendance"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    public Attendance toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"        if (this.attendee \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"                    Attendance.class.getSimpleName()));"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"        final Person attendee \u003d this.attendee.toModelType();"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        final boolean hasAttended \u003d this.hasAttended;"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        return new Attendance(attendee, hasAttended);"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"        if (!(other instanceof XmlAdaptedAttendance)) {"},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedAttendance otherAttendance \u003d (XmlAdaptedAttendance) other;"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        return Objects.equals(attendee, otherAttendance.attendee)"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 hasAttended \u003d\u003d otherAttendance.hasAttended;"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":77,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    private int numberOfEventsRegisteredFor;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"                            int numberOfEventsRegisteredFor, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"        this.numberOfEventsRegisteredFor \u003d numberOfEventsRegisteredFor;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        Objects.requireNonNull(source);"},{"lineNumber":68,"author":{"gitID":"raynoldng"},"content":"        name \u003d source.getFullName().name;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        numberOfEventsRegisteredFor \u003d source.getNumberOfEventsRegisteredFor();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"        final int numberOfEventsRegisteredFor \u003d this.numberOfEventsRegisteredFor;"},{"lineNumber":123,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 numberOfEventsRegisteredFor \u003d\u003d otherPerson.numberOfEventsRegisteredFor"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"jiangyue12392":9,"-":135,"raynoldng":1}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":" * Stores eventplanner data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"jiangyue12392"},"content":"     * Saves the given eventplanner data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"    public static void saveDataToFile(File file, XmlSerializableEventPlanner eventPlanner)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"            XmlUtil.saveDataToFile(file, eventPlanner);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"     * Returns event planner in the file or an empty event planner"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    public static XmlSerializableEventPlanner loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableEventPlanner.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":2,"jiangyue12392":5,"-":32}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"import seedu.address.storage.EventPlannerStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"import seedu.address.storage.XmlEventPlannerStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EventPlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        EventPlannerStorage eventPlannerStorage \u003d new XmlEventPlannerStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        storage \u003d new StorageManager(eventPlannerStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s event planner and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"     * The data from the sample event planner will be used instead if {@code storage}\u0027s event planner is not found,"},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s event plannerk."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"        Optional\u003cReadOnlyEventPlanner\u003e eventPlannerOptional;"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"        ReadOnlyEventPlanner initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"            eventPlannerOptional \u003d storage.readEventPlanner();"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"            if (!eventPlannerOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"                logger.info(\"Data file not found. Will be starting with a sample EventPlanner\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"            initialData \u003d eventPlannerOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty EventPlanner\");"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"            initialData \u003d new EventPlanner();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventPlanner\");"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"            initialData \u003d new EventPlanner();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"william6364"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EventPlanner\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"william6364"},"content":"        logger.info(\"Starting EventPlanner \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"william6364"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping EventPlanner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":23,"-":189}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEpicEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.UniqueAttendanceList;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"//@@author jiangyue12392"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":" * JAXB-friendly version of the EpicEvent."},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jiangyue12392"},"content":"public class XmlAdaptedEpicEvent {"},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":24,"author":{"gitID":"jiangyue12392"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"EpicEvent\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":26,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"jiangyue12392"},"content":"    private List\u003cXmlAdaptedAttendance\u003e attendanceList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":32,"author":{"gitID":"jiangyue12392"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"jiangyue12392"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"     * Constructs an XmlAdaptedEpicEvent."},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedEpicEvent() {}"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"     * Constructs an {@code XmlAdaptedEpicEvent} with the given epicEvent details."},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedEpicEvent(String name, List\u003cXmlAdaptedAttendance\u003e attendanceList, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        this.name \u003d name;"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        if (attendanceList !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"            this.attendanceList \u003d new ArrayList\u003c\u003e(attendanceList);"},{"lineNumber":49,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"     * Converts a given EpicEvent into this class for JAXB use."},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEpicEvent"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"    public XmlAdaptedEpicEvent(EpicEvent source) {"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        name \u003d source.getName().name;"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"        attendanceList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"        for (Attendance attendance : source.getAttendanceList()) {"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"            attendanceList.add(new XmlAdaptedAttendance(attendance));"},{"lineNumber":67,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":71,"author":{"gitID":"jiangyue12392"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":72,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":75,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jiangyue12392"},"content":"     * Converts this jaxb-friendly adapted EpicEvent object into the model\u0027s EpicEvent object."},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted epicEvent"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"jiangyue12392"},"content":"    public EpicEvent toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"jiangyue12392"},"content":"        final List\u003cTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"jiangyue12392"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitID":"jiangyue12392"},"content":"            eventTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":86,"author":{"gitID":"jiangyue12392"},"content":"        final UniqueAttendanceList attendances \u003d new UniqueAttendanceList();"},{"lineNumber":87,"author":{"gitID":"jiangyue12392"},"content":"        for (XmlAdaptedAttendance attendance : attendanceList) {"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"            attendances.add(attendance.toModelType());"},{"lineNumber":89,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(eventTags);"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        return new EpicEvent(name, attendances, tags);"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"jiangyue12392"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"jiangyue12392"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitID":"jiangyue12392"},"content":"            return true;"},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"        if (!(other instanceof XmlAdaptedEpicEvent)) {"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"            return false;"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"        XmlAdaptedEpicEvent otherEpicEvent \u003d (XmlAdaptedEpicEvent) other;"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"        return Objects.equals(name, otherEpicEvent.name)"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 attendanceList.equals(otherEpicEvent.attendanceList)"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 tagged.equals(otherEpicEvent.tagged);"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"william6364":4,"jiangyue12392":103,"-":11}},{"path":"src/main/java/seedu/address/model/attendance/Attendance.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.attendance;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"william6364"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":""},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.property.BooleanProperty;"},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.property.SimpleBooleanProperty;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":""},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":" * Represents the attendance of a person to an event in the event planner."},{"lineNumber":13,"author":{"gitID":"william6364"},"content":" * Guarantees: person is immutable and not null"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"public class Attendance {"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"    private Person attendee;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"    private EpicEvent event;"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"    private BooleanProperty hasAttendedEventProperty \u003d new SimpleBooleanProperty();"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"     * Person must be not be null"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"     * @param attendee"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"     * @param event"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    public Attendance(Person attendee, EpicEvent event) {"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(attendee);"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(event);"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"        this.attendee \u003d attendee;"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"        this.event \u003d event;"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        this.hasAttendedEventProperty.set(false);"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":""},{"lineNumber":34,"author":{"gitID":"william6364"},"content":""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":36,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jiangyue12392"},"content":"     * Constructor for reconstruction of data from xmlfile"},{"lineNumber":38,"author":{"gitID":"jiangyue12392"},"content":"     * @param attendee"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"     * @param hasAttended"},{"lineNumber":40,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"jiangyue12392"},"content":"    public Attendance(Person attendee, boolean hasAttended) {"},{"lineNumber":42,"author":{"gitID":"jiangyue12392"},"content":"        Objects.requireNonNull(attendee);"},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"        this.attendee \u003d attendee;"},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"        this.event \u003d null;"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"        this.hasAttendedEventProperty.set(hasAttended);"},{"lineNumber":46,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":""},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"     * Person must be not be null"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"     * @param attendee"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"     * @param event"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"     * @param hasAttended"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    public Attendance(Person attendee, EpicEvent event, boolean hasAttended) {"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(attendee);"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(event);"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"        this.attendee \u003d attendee;"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"        this.event \u003d event;"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        this.hasAttendedEventProperty.set(hasAttended);"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":""},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"    public Person getPerson() {"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(attendee);"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        return attendee;"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":""},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"    public EpicEvent getEvent() {"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"        Objects.requireNonNull(event);"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        return event;"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":""},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"    public boolean hasAttended() {"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        return hasAttendedEventProperty.get();"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":""},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"     * Edits this attendance by transferring the name and tags of the dummyAttendance over"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"    public void setAttendance(Attendance dummyAttendance) {"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        this.attendee \u003d dummyAttendance.getPerson();"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"        this.event \u003d dummyAttendance.getEvent();"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"        this.hasAttendedEventProperty.set(dummyAttendance.hasAttended());"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":""},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"    public BooleanProperty getHasAttendedEventProperty() {"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"        return hasAttendedEventProperty;"},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":""},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":""},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"        if (!(other instanceof Attendance)) {"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":""},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"        Attendance otherAttendance \u003d (Attendance) other;"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        return otherAttendance.getPerson().equals(this.getPerson())"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 otherAttendance.getEvent().equals(this.getEvent());"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":""},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"        return Objects.hash(attendee, event, hasAttendedEventProperty);"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":""},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"        builder.append(\"Person: \").append(attendee.getName()).append(\" Event: \").append(event.getName())"},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"                .append(\" Attendance: \").append(Boolean.toString(hasAttendedEventProperty.get()));"},{"lineNumber":115,"author":{"gitID":"william6364"},"content":"        return builder.toString();"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":103,"jiangyue12392":12,"raynoldng":2}},{"path":"src/main/java/seedu/address/logic/commands/ToggleAttendanceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":""},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":""},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":" * Marks attendance of a participant for an event."},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"public class ToggleAttendanceCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    public static final String COMMAND_WORD \u003d \"toggle\";"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":""},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"            + \": Toggles the attendance of the person identified by the index number used in the last attendee listing\""},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"            + \" for a particular event.\\n\""},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Toggled attendance of person %1$s for event %2$s\";"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":""},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    private Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    private Attendance attendanceToToggle;"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":""},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"    public ToggleAttendanceCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":""},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"    public ToggleAttendanceCommand(Attendance attendanceToToggle) {"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"        this.attendanceToToggle \u003d attendanceToToggle;"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":""},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"    public Attendance getAttendanceToToggle() {"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"        return attendanceToToggle;"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":""},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        requireNonNull(attendanceToToggle);"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":""},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"            model.toggleAttendance(attendanceToToggle.getPerson(), attendanceToToggle.getEvent());"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"        } catch (EventNotFoundException e) {"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"            throw new CommandException(Messages.MESSAGE_EVENT_NOT_FOUND);"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":"        } catch (PersonNotFoundInEventException e) {"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"            throw new CommandException(Messages.MESSAGE_PERSON_NOT_IN_EVENT);"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":""},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, attendanceToToggle.getPerson().getFullName(),"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"                attendanceToToggle.getEvent().getName()));"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":""},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        List\u003cAttendance\u003e lastShownList \u003d model.getSelectedEpicEvent().getEpicEvent().getAttendanceList();"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":""},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ATTENDANCE_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":""},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"        attendanceToToggle \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":""},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"    protected void generateOppositeCommand() {"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"        oppositeCommand \u003d new ToggleAttendanceCommand(attendanceToToggle);"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":""},{"lineNumber":78,"author":{"gitID":"william6364"},"content":""},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"                || (other instanceof ToggleAttendanceCommand // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.targetIndex.equals(((ToggleAttendanceCommand) other).targetIndex) // state check"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 Objects.equals(this.attendanceToToggle, ((ToggleAttendanceCommand) other).attendanceToToggle));"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":79,"-":6,"raynoldng":1}},{"path":"src/main/java/seedu/address/storage/XmlEventPlannerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" * A class to access EventPlanner data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"public class XmlEventPlannerStorage implements EventPlannerStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlEventPlannerStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"    public XmlEventPlannerStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    public String getEventPlannerFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    public Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"        return readEventPlanner(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"     * Similar to {@link #readEventPlanner()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"    public Optional\u003cReadOnlyEventPlanner\u003e readEventPlanner(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"        File eventPlannerFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"        if (!eventPlannerFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"            logger.info(\"EventPlanner file \"  + eventPlannerFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"        XmlSerializableEventPlanner xmlEventPlanner \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"            return Optional.of(xmlEventPlanner.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"            logger.info(\"Illegal values found in \" + eventPlannerFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":"    public void saveEventPlanner(ReadOnlyEventPlanner eventPlanner) throws IOException {"},{"lineNumber":66,"author":{"gitID":"jiangyue12392"},"content":"        saveEventPlanner(eventPlanner, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"     * Similar to {@link #saveEventPlanner(ReadOnlyEventPlanner)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jiangyue12392"},"content":"    public void saveEventPlanner(ReadOnlyEventPlanner eventPlanner, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(eventPlanner);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"jiangyue12392"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableEventPlanner(eventPlanner));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":11,"jiangyue12392":11,"-":60}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Represents a Person\u0027s phone number in the event planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":52}},{"path":"src/main/java/seedu/address/model/attendance/exceptions/DuplicateAttendanceException.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.attendance.exceptions;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":""},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Signals that the operation will result in duplicate Attendance objects."},{"lineNumber":8,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"public class DuplicateAttendanceException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"    public DuplicateAttendanceException() {"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"        super(\"Operation would result in duplicate attendance\");"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":12,"-":1}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Represents a Person\u0027s email in the event planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":66}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import seedu.address.model.EventPlanner;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":8,"author":{"gitID":"william6364"},"content":"import seedu.address.model.ReadOnlyEventPlanner;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":" * Contains utility methods for populating {@code EventPlanner} with sample data."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"    public static ReadOnlyEventPlanner getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"            EventPlanner sampleAb \u003d new EventPlanner();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":6,"-":61}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Represents a Person\u0027s address in the event planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":57}},{"path":"src/main/java/seedu/address/model/person/exceptions/PersonNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.commons.exceptions.DataNotFoundException;"},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"public class PersonNotFoundException extends DataNotFoundException {"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"    public PersonNotFoundException() {"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"        super(\"Operation requires person that do not exist\");"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":7,"-":5}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"        internalList.get(index).setPerson(editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        internalList.set(index, internalList.get(index));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":1,"-":120}},{"path":"src/main/java/seedu/address/model/person/PersonNameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"public class PersonNameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"    public PersonNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getFullName().name, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof PersonNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.keywords.equals(((PersonNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":4,"-":26,"raynoldng":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":" * Represents a Person in the event planner."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":"public class Person extends SimpleObjectProperty {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"bayweiheng"},"content":"    private Name name;"},{"lineNumber":22,"author":{"gitID":"bayweiheng"},"content":"    private Phone phone;"},{"lineNumber":23,"author":{"gitID":"bayweiheng"},"content":"    private Email email;"},{"lineNumber":24,"author":{"gitID":"bayweiheng"},"content":"    private Address address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private int numberOfEventsRegisteredFor \u003d 0;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Person(Person toBeCopied) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(toBeCopied);"},{"lineNumber":44,"author":{"gitID":"raynoldng"},"content":"        this.name \u003d new Name(toBeCopied.getFullName().toString());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(toBeCopied.getPhone().toString());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(toBeCopied.getEmail().toString());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(toBeCopied.getAddress().toString());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(toBeCopied.getTags());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"raynoldng"},"content":"    public Name getFullName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public int getNumberOfEventsRegisteredFor() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return numberOfEventsRegisteredFor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void decrementNumberOfEventsRegisteredFor() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        numberOfEventsRegisteredFor--;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void incrementNumberOfEventsRegisteredFor() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        numberOfEventsRegisteredFor++;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"     * Edits this person by transferring the fields of dummyPerson over."},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"     * Used for mutable edit command"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"    public void setPerson(Person dummyPerson) {"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"        this.name \u003d dummyPerson.getFullName();"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"        this.phone \u003d dummyPerson.getPhone();"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"        this.email \u003d dummyPerson.getEmail();"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"        this.address \u003d dummyPerson.getAddress();"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"        this.tags \u003d new UniqueTagList(dummyPerson.getTags());"},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"        fireValueChangedEvent();"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":113,"author":{"gitID":"raynoldng"},"content":"        return otherPerson.getFullName().equals(this.getFullName())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitID":"raynoldng"},"content":"        builder.append(getFullName())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":19,"william6364":2,"-":113,"raynoldng":6}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        sb.append(\"\\nEventPlanner name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":77}},{"path":"src/main/java/seedu/address/model/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Represents a Person\u0027s or Event\u0027s name in the event planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"            \"Person and Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"    public final String name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        return name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.name.equals(((Name) other).name)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        return name.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":8,"-":51}},{"path":"src/main/java/seedu/address/model/event/ObservableEpicEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"raynoldng"},"content":"// @@author raynoldng"},{"lineNumber":2,"author":{"gitID":"raynoldng"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":4,"author":{"gitID":"raynoldng"},"content":"import java.util.Observable;"},{"lineNumber":5,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":6,"author":{"gitID":"raynoldng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"raynoldng"},"content":" * Wrapper class for EpicEvent to listen for reassignments of selectedEpicEvent"},{"lineNumber":8,"author":{"gitID":"raynoldng"},"content":" */"},{"lineNumber":9,"author":{"gitID":"raynoldng"},"content":"public class ObservableEpicEvent extends Observable {"},{"lineNumber":10,"author":{"gitID":"raynoldng"},"content":"    private EpicEvent epicEvent;"},{"lineNumber":11,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"    public ObservableEpicEvent(EpicEvent epicEvent) {"},{"lineNumber":13,"author":{"gitID":"raynoldng"},"content":"        this.epicEvent \u003d epicEvent;"},{"lineNumber":14,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"    public EpicEvent getEpicEvent() {"},{"lineNumber":17,"author":{"gitID":"raynoldng"},"content":"        return epicEvent;"},{"lineNumber":18,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":20,"author":{"gitID":"raynoldng"},"content":"    public void setEpicEvent(EpicEvent epicEvent) {"},{"lineNumber":21,"author":{"gitID":"raynoldng"},"content":"        this.epicEvent \u003d epicEvent;"},{"lineNumber":22,"author":{"gitID":"raynoldng"},"content":"        setChanged();"},{"lineNumber":23,"author":{"gitID":"raynoldng"},"content":"        notifyObservers();"},{"lineNumber":24,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"raynoldng"},"content":"}"}],"authorContributionMap":{"raynoldng":25}},{"path":"src/main/java/seedu/address/model/EventPlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":16,"author":{"gitID":"raynoldng"},"content":"import seedu.address.model.event.UniqueEpicEventList;"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":18,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":19,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":" * Wraps all data at the event planner level"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"public class EventPlanner implements ReadOnlyEventPlanner {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":34,"author":{"gitID":"raynoldng"},"content":"    private final UniqueEpicEventList events;"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    private final UniqueTagList personTags;"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    private final UniqueTagList eventTags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":47,"author":{"gitID":"raynoldng"},"content":"        events \u003d new UniqueEpicEventList();"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        personTags \u003d new UniqueTagList();"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"        eventTags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"    public EventPlanner() {}"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"     * Creates an EventPlanner using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    public EventPlanner(ReadOnlyEventPlanner toBeCopied) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jiangyue12392"},"content":"    public void setEvents(List\u003cEpicEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":69,"author":{"gitID":"jiangyue12392"},"content":"        this.events.setEvents(events);"},{"lineNumber":70,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"    public void setPersonTags(Set\u003cTag\u003e tags) {"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"        this.personTags.setTags(tags);"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":75,"author":{"gitID":"william6364"},"content":"    public void setEventTags(Set\u003cTag\u003e tags) {"},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        this.eventTags.setTags(tags);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":"     * Resets the existing data of this {@code EventPlanner} with {@code newData}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"    public void resetData(ReadOnlyEventPlanner newData) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"        setPersonTags(new HashSet\u003c\u003e(newData.getPersonTagList()));"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":"        setEventTags(new HashSet\u003c\u003e(newData.getEventTagList()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":88,"author":{"gitID":"jiangyue12392"},"content":"        List\u003cEpicEvent\u003e syncedEventList \u003d newData.getEventList().stream()"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"            throw new AssertionError(\"EventPlanners should not have duplicate persons\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"            setEvents(syncedEventList);"},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"            throw new AssertionError(\"EventPlanners should not have duplicate events\");"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"     * Adds a person to the event planner"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"     * Also checks the new person\u0027s tags and updates {@link #personTags} with any new tags found,"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"     * and updates the Tag objects in the person to point to those in {@link #personTags}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"        Person person \u003d syncPersonWithMasterTagList(p);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the given person {@code targetPerson} in the list with {@code editedPerson}."},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"     * {@code EventPlanner}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":"     * @throws PersonNotFoundException if {@code targetPerson} could not be found in the list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"     * @see #syncPersonWithMasterTagList(Person)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"jiangyue12392"},"content":"    public void updatePerson(Person targetPerson, Person editedPerson)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"        Person syncedEditedPerson \u003d syncPersonWithMasterTagList(editedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"        persons.setPerson(targetPerson, syncedEditedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"    private Person syncPersonWithMasterTagList(Person person) {"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"        final UniqueTagList newPersonTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d updateMasterPersonTagList(newPersonTags);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":152,"author":{"gitID":"william6364"},"content":"        newPersonTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":154,"author":{"gitID":"raynoldng"},"content":"                person.getFullName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"     * Removes {@code personKey} from this {@code EventPlanner}."},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"     * @throws PersonNotFoundException if the {@code personKey} is not in this {@code EventPlanner}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"    public boolean removePerson(Person personKey) throws PersonNotFoundException {"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"        if (persons.remove(personKey)) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"william6364"},"content":"    //// event-level operation"},{"lineNumber":170,"author":{"gitID":"william6364"},"content":""},{"lineNumber":171,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"william6364"},"content":"     * Adds an event to the event planner"},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"     * Also checks the new event\u0027s tags and updates {@link #eventTags} with any new tags found,"},{"lineNumber":174,"author":{"gitID":"william6364"},"content":"     * and updates the Tag objects in the event to point to those in {@link #eventTags}."},{"lineNumber":175,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"jiangyue12392"},"content":"     * @throws DuplicateEventException if an equivalent event already exists."},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"william6364"},"content":"    public void addEvent(EpicEvent e) throws DuplicateEventException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        EpicEvent event \u003d syncEventWithMasterTagList(e);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":181,"author":{"gitID":"william6364"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any event"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // in the event list."},{"lineNumber":183,"author":{"gitID":"-"},"content":"        events.add(event);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        event.setAttendanceList(e.getAttendanceList());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        event.handleAddEvent();"},{"lineNumber":186,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"william6364"},"content":""},{"lineNumber":188,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"william6364"},"content":"     *  Updates the master tag list to include tags in {@code event} that are not in the list."},{"lineNumber":190,"author":{"gitID":"jiangyue12392"},"content":"     *  @return a copy of this {@code event} such that every tag in this event points to a Tag object in the master"},{"lineNumber":191,"author":{"gitID":"william6364"},"content":"     *  list."},{"lineNumber":192,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"william6364"},"content":"    private EpicEvent syncEventWithMasterTagList(EpicEvent event) {"},{"lineNumber":194,"author":{"gitID":"william6364"},"content":"        final UniqueTagList newEventTags \u003d new UniqueTagList(event.getTags());"},{"lineNumber":195,"author":{"gitID":"william6364"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d updateMasterEventTagList(newEventTags);"},{"lineNumber":196,"author":{"gitID":"william6364"},"content":""},{"lineNumber":197,"author":{"gitID":"william6364"},"content":"        // Rebuild the list of event tags to point to the relevant tags in the master tag list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":199,"author":{"gitID":"william6364"},"content":"        newEventTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":200,"author":{"gitID":"jiangyue12392"},"content":"        return new EpicEvent(event.getName(), event.getUniqueAttendanceList(), correctTagReferences);"},{"lineNumber":201,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"william6364"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"william6364"},"content":"     * Removes {@code key} from this {@code EventPlanner}."},{"lineNumber":205,"author":{"gitID":"jiangyue12392"},"content":"     * @throws EventNotFoundException if the {@code eventKey} is not in this {@code EventPlanner}."},{"lineNumber":206,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"jiangyue12392"},"content":"    public boolean removeEvent(EpicEvent eventKey) throws EventNotFoundException {"},{"lineNumber":208,"author":{"gitID":"jiangyue12392"},"content":"        if (events.remove(eventKey)) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            eventKey.handleDeleteEvent();"},{"lineNumber":210,"author":{"gitID":"jiangyue12392"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"jiangyue12392"},"content":"        } else {"},{"lineNumber":212,"author":{"gitID":"jiangyue12392"},"content":"            throw new EventNotFoundException();"},{"lineNumber":213,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":216,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the given event {@code targetEvent} in the list with {@code editedEvent}."},{"lineNumber":218,"author":{"gitID":"jiangyue12392"},"content":"     * {@code EventPlanner}\u0027s tag list will be updated with the tags of {@code editedEvent}."},{"lineNumber":219,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"jiangyue12392"},"content":"     * @throws DuplicateEventException if updating the event\u0027s details causes the event to be equivalent to"},{"lineNumber":221,"author":{"gitID":"jiangyue12392"},"content":"     *      another existing event in the list."},{"lineNumber":222,"author":{"gitID":"jiangyue12392"},"content":"     * @throws EventNotFoundException if {@code targetEvent} could not be found in the list."},{"lineNumber":223,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"jiangyue12392"},"content":"     * @see #syncEventWithMasterTagList(EpicEvent)"},{"lineNumber":225,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"jiangyue12392"},"content":"    public void updateEvent(EpicEvent targetEvent, EpicEvent editedEvent)"},{"lineNumber":227,"author":{"gitID":"jiangyue12392"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":228,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":229,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":230,"author":{"gitID":"jiangyue12392"},"content":"        EpicEvent syncedEditedEvent \u003d syncEventWithMasterTagList(editedEvent);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":234,"author":{"gitID":"jiangyue12392"},"content":"        events.setEvent(targetEvent, syncedEditedEvent);"},{"lineNumber":235,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":239,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"bayweiheng"},"content":"     * Registers a particular person to a particular event"},{"lineNumber":241,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"bayweiheng"},"content":"    public void registerPersonForEvent(Person person, EpicEvent event)"},{"lineNumber":243,"author":{"gitID":"bayweiheng"},"content":"            throws EventNotFoundException, DuplicateAttendanceException {"},{"lineNumber":244,"author":{"gitID":"bayweiheng"},"content":"        events.registerPersonForEvent(person, event);"},{"lineNumber":245,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":247,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"bayweiheng"},"content":"     * Deregisters a particular person from a particular event"},{"lineNumber":249,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"bayweiheng"},"content":"    public void deregisterPersonFromEvent(Person person, EpicEvent event)"},{"lineNumber":251,"author":{"gitID":"bayweiheng"},"content":"            throws EventNotFoundException, PersonNotFoundInEventException {"},{"lineNumber":252,"author":{"gitID":"bayweiheng"},"content":"        events.deregisterPersonFromEvent(person, event);"},{"lineNumber":253,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":255,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":256,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"william6364"},"content":"     * Toggles the attendance of a particular person in a particular event"},{"lineNumber":258,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person, EpicEvent event)"},{"lineNumber":260,"author":{"gitID":"william6364"},"content":"        throws EventNotFoundException, PersonNotFoundInEventException {"},{"lineNumber":261,"author":{"gitID":"william6364"},"content":"        events.toggleAttendance(person, event);"},{"lineNumber":262,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"william6364"},"content":""},{"lineNumber":264,"author":{"gitID":"william6364"},"content":"    //// tag-level operations"},{"lineNumber":265,"author":{"gitID":"william6364"},"content":""},{"lineNumber":266,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"william6364"},"content":"     *  Updates the master person tag list to include tags in {@code objectTags} that are not in the list."},{"lineNumber":268,"author":{"gitID":"william6364"},"content":"     *  @return a mapping of the Tags in the list Tag object in the master list."},{"lineNumber":269,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"william6364"},"content":"    private Map\u003cTag, Tag\u003e updateMasterPersonTagList(UniqueTagList objectTags) {"},{"lineNumber":271,"author":{"gitID":"william6364"},"content":"        personTags.mergeFrom(objectTags);"},{"lineNumber":272,"author":{"gitID":"william6364"},"content":""},{"lineNumber":273,"author":{"gitID":"william6364"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":274,"author":{"gitID":"william6364"},"content":"        // used for checking tag references"},{"lineNumber":275,"author":{"gitID":"william6364"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":276,"author":{"gitID":"william6364"},"content":"        personTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":277,"author":{"gitID":"william6364"},"content":""},{"lineNumber":278,"author":{"gitID":"william6364"},"content":"        return masterTagObjects;"},{"lineNumber":279,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"william6364"},"content":""},{"lineNumber":281,"author":{"gitID":"william6364"},"content":""},{"lineNumber":282,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"william6364"},"content":"     *  Updates the master event tag list to include tags in {@code objectTags} that are not in the list."},{"lineNumber":284,"author":{"gitID":"william6364"},"content":"     *  @return a mapping of the Tags in the list Tag object in the master list."},{"lineNumber":285,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"william6364"},"content":"    private Map\u003cTag, Tag\u003e updateMasterEventTagList(UniqueTagList objectTags) {"},{"lineNumber":287,"author":{"gitID":"william6364"},"content":"        eventTags.mergeFrom(objectTags);"},{"lineNumber":288,"author":{"gitID":"william6364"},"content":""},{"lineNumber":289,"author":{"gitID":"william6364"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":290,"author":{"gitID":"william6364"},"content":"        // used for checking tag references"},{"lineNumber":291,"author":{"gitID":"william6364"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":292,"author":{"gitID":"william6364"},"content":"        eventTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":293,"author":{"gitID":"william6364"},"content":""},{"lineNumber":294,"author":{"gitID":"william6364"},"content":"        return masterTagObjects;"},{"lineNumber":295,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"william6364"},"content":""},{"lineNumber":297,"author":{"gitID":"william6364"},"content":"    public void addPersonTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":298,"author":{"gitID":"william6364"},"content":"        personTags.add(t);"},{"lineNumber":299,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"william6364"},"content":""},{"lineNumber":301,"author":{"gitID":"william6364"},"content":"    public void addEventTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":302,"author":{"gitID":"william6364"},"content":"        eventTags.add(t);"},{"lineNumber":303,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"william6364"},"content":""},{"lineNumber":305,"author":{"gitID":"william6364"},"content":"    //@@author"},{"lineNumber":306,"author":{"gitID":"william6364"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":311,"author":{"gitID":"william6364"},"content":"        return persons.asObservableList().size() + \" persons, \" + personTags.asObservableList().size()"},{"lineNumber":312,"author":{"gitID":"william6364"},"content":"                +  \" person tags, \" + eventTags.asObservableList().size() + \" event tags.\";"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"jiangyue12392"},"content":"    public UniquePersonList getPersonMaseterList() {"},{"lineNumber":322,"author":{"gitID":"jiangyue12392"},"content":"        return persons;"},{"lineNumber":323,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":325,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":326,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e getEventList() {"},{"lineNumber":327,"author":{"gitID":"william6364"},"content":"        return events.asObservableList();"},{"lineNumber":328,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"william6364"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":331,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cTag\u003e getPersonTagList() {"},{"lineNumber":332,"author":{"gitID":"william6364"},"content":"        return personTags.asObservableList();"},{"lineNumber":333,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"william6364"},"content":""},{"lineNumber":335,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":336,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cTag\u003e getEventTagList() {"},{"lineNumber":337,"author":{"gitID":"william6364"},"content":"        return eventTags.asObservableList();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":343,"author":{"gitID":"william6364"},"content":"                || (other instanceof EventPlanner // instanceof handles nulls"},{"lineNumber":344,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.persons.equals(((EventPlanner) other).persons)"},{"lineNumber":345,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.events.equals(((EventPlanner) other).events)"},{"lineNumber":346,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.personTags.equalsOrderInsensitive(((EventPlanner) other).personTags)"},{"lineNumber":347,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.eventTags.equalsOrderInsensitive(((EventPlanner) other).eventTags));"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":353,"author":{"gitID":"william6364"},"content":"        return Objects.hash(persons, events, personTags, eventTags);"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":18,"william6364":129,"jiangyue12392":55,"-":149,"raynoldng":4}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.commons.exceptions.DataNotFoundException;"},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":7,"author":{"gitID":"jiangyue12392"},"content":"public class EventNotFoundException extends DataNotFoundException {"},{"lineNumber":8,"author":{"gitID":"jiangyue12392"},"content":"    public EventNotFoundException() {"},{"lineNumber":9,"author":{"gitID":"jiangyue12392"},"content":"        super(\"Operation requires event that do not exist\");"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"}"}],"authorContributionMap":{"jiangyue12392":11}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.events.model.EventPlannerChangedEvent;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":20,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    private final EventPlanner eventPlanner;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"    private final FilteredList\u003cEpicEvent\u003e filteredEvents;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final ObservableEpicEvent selectedEpicEvent;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"     * Initializes a ModelManager with the given eventPlanner and userPrefs."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    public ModelManager(ReadOnlyEventPlanner eventPlanner, UserPrefs userPrefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(eventPlanner, userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        logger.fine(\"Initializing with event planner: \" + eventPlanner + \" and user prefs \" + userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        this.eventPlanner \u003d new EventPlanner(eventPlanner);"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.eventPlanner.getPersonList());"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.eventPlanner.getEventList());"},{"lineNumber":49,"author":{"gitID":"raynoldng"},"content":"        if (filteredEvents.size() \u003e 0) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            selectedEpicEvent \u003d new ObservableEpicEvent(filteredEvents.get(0));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            selectedEpicEvent \u003d new ObservableEpicEvent(EpicEvent.getDummyEpicEvent());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"        this(new EventPlanner(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    public void resetData(ReadOnlyEventPlanner newData) {"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        eventPlanner.resetData(newData);"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":"    public ReadOnlyEventPlanner getEventPlanner() {"},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"        return eventPlanner;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"    private void indicateEventPlannerChanged() {"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"        raise(new EventPlannerChangedEvent(eventPlanner));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"jiangyue12392"},"content":"    public synchronized void deletePerson(Person targetPerson) throws PersonNotFoundException {"},{"lineNumber":78,"author":{"gitID":"jiangyue12392"},"content":"        eventPlanner.removePerson(targetPerson);"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"        eventPlanner.addPerson(person);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"    public void updatePerson(Person targetPerson, Person editedPerson)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"        requireAllNonNull(targetPerson, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"        eventPlanner.updatePerson(targetPerson, editedPerson);"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Level Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"    public synchronized void addEvent(EpicEvent event) throws DuplicateEventException {"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"        eventPlanner.addEvent(event);"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"william6364"},"content":""},{"lineNumber":107,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":108,"author":{"gitID":"jiangyue12392"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"jiangyue12392"},"content":"    public synchronized void deleteEvent(EpicEvent targetEvent) throws EventNotFoundException {"},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"        eventPlanner.removeEvent(targetEvent);"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":114,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":115,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"bayweiheng"},"content":"    public void updateEvent(EpicEvent targetEvent, EpicEvent editedEvent)"},{"lineNumber":117,"author":{"gitID":"bayweiheng"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":118,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(targetEvent, editedEvent);"},{"lineNumber":119,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":120,"author":{"gitID":"bayweiheng"},"content":"        eventPlanner.updateEvent(targetEvent, editedEvent);"},{"lineNumber":121,"author":{"gitID":"bayweiheng"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":122,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":124,"author":{"gitID":"bayweiheng"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event-Person Interactions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":125,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":126,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"bayweiheng"},"content":"    public void registerPersonForEvent(Person person, EpicEvent event)"},{"lineNumber":128,"author":{"gitID":"bayweiheng"},"content":"            throws EventNotFoundException, DuplicateAttendanceException {"},{"lineNumber":129,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(person, event);"},{"lineNumber":130,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":131,"author":{"gitID":"bayweiheng"},"content":"        eventPlanner.registerPersonForEvent(person, event);"},{"lineNumber":132,"author":{"gitID":"bayweiheng"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":133,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":135,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"bayweiheng"},"content":"    public void deregisterPersonFromEvent(Person person, EpicEvent event)"},{"lineNumber":137,"author":{"gitID":"bayweiheng"},"content":"            throws EventNotFoundException, PersonNotFoundInEventException {"},{"lineNumber":138,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(person, event);"},{"lineNumber":139,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":140,"author":{"gitID":"bayweiheng"},"content":"        eventPlanner.deregisterPersonFromEvent(person, event);"},{"lineNumber":141,"author":{"gitID":"bayweiheng"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":142,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":144,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":145,"author":{"gitID":"william6364"},"content":""},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person, EpicEvent event)"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"        throws EventNotFoundException, PersonNotFoundInEventException {"},{"lineNumber":149,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(person, event);"},{"lineNumber":150,"author":{"gitID":"william6364"},"content":""},{"lineNumber":151,"author":{"gitID":"william6364"},"content":"        eventPlanner.toggleAttendance(person, event);"},{"lineNumber":152,"author":{"gitID":"william6364"},"content":"        indicateEventPlannerChanged();"},{"lineNumber":153,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"william6364"},"content":""},{"lineNumber":155,"author":{"gitID":"william6364"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":161,"author":{"gitID":"william6364"},"content":"     * {@code eventPlanner}"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":175,"author":{"gitID":"william6364"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":176,"author":{"gitID":"william6364"},"content":""},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"william6364"},"content":"     * Returns an unmodifiable view of the filtered list of {@code EpicEvent} backed by the internal list of"},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"     * {@code eventPlanner}"},{"lineNumber":180,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e getFilteredEventList() {"},{"lineNumber":183,"author":{"gitID":"william6364"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":184,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"william6364"},"content":""},{"lineNumber":186,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"william6364"},"content":"    public void updateFilteredEventList(Predicate\u003cEpicEvent\u003e predicate) {"},{"lineNumber":188,"author":{"gitID":"william6364"},"content":"        requireNonNull(predicate);"},{"lineNumber":189,"author":{"gitID":"william6364"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":190,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"william6364"},"content":""},{"lineNumber":192,"author":{"gitID":"raynoldng"},"content":"    //@@author raynoldng"},{"lineNumber":193,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"raynoldng"},"content":"    public void setSelectedEpicEvent(int index) {"},{"lineNumber":195,"author":{"gitID":"raynoldng"},"content":"        selectedEpicEvent.setEpicEvent(filteredEvents.get(index));"},{"lineNumber":196,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":198,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"raynoldng"},"content":"    public void setSelectedEpicEvent(EpicEvent epicEvent) {"},{"lineNumber":200,"author":{"gitID":"raynoldng"},"content":"        selectedEpicEvent.setEpicEvent(epicEvent);"},{"lineNumber":201,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":203,"author":{"gitID":"raynoldng"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"raynoldng"},"content":"    public ObservableEpicEvent getSelectedEpicEvent() {"},{"lineNumber":205,"author":{"gitID":"raynoldng"},"content":"        return selectedEpicEvent;"},{"lineNumber":206,"author":{"gitID":"raynoldng"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":208,"author":{"gitID":"raynoldng"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":212,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"bayweiheng"},"content":"     * Returns an unmodifiable view of the list of {@code EpicEvent} backed by the internal list of"},{"lineNumber":214,"author":{"gitID":"bayweiheng"},"content":"     * {@code eventPlanner}"},{"lineNumber":215,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"bayweiheng"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"bayweiheng"},"content":"    public ObservableList\u003cEpicEvent\u003e getEventList() {"},{"lineNumber":218,"author":{"gitID":"bayweiheng"},"content":"        return FXCollections.unmodifiableObservableList(eventPlanner.getEventList());"},{"lineNumber":219,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":221,"author":{"gitID":"william6364"},"content":""},{"lineNumber":222,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":224,"author":{"gitID":"william6364"},"content":"        // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"william6364"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":226,"author":{"gitID":"william6364"},"content":"            return true;"},{"lineNumber":227,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"william6364"},"content":""},{"lineNumber":229,"author":{"gitID":"william6364"},"content":"        // instanceof handles nulls"},{"lineNumber":230,"author":{"gitID":"william6364"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":231,"author":{"gitID":"william6364"},"content":"            return false;"},{"lineNumber":232,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"william6364"},"content":""},{"lineNumber":234,"author":{"gitID":"william6364"},"content":"        // state check"},{"lineNumber":235,"author":{"gitID":"william6364"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":236,"author":{"gitID":"william6364"},"content":"        return eventPlanner.equals(other.eventPlanner)"},{"lineNumber":237,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":238,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"},{"lineNumber":239,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"william6364"},"content":""},{"lineNumber":241,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"bayweiheng":40,"william6364":86,"jiangyue12392":15,"-":81,"raynoldng":19}},{"path":"src/main/java/seedu/address/model/event/exceptions/PersonNotFoundInEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.commons.exceptions.DataNotFoundException;"},{"lineNumber":3,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":4,"author":{"gitID":"jiangyue12392"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"jiangyue12392"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":" */"},{"lineNumber":7,"author":{"gitID":"bayweiheng"},"content":"public class PersonNotFoundInEventException extends DataNotFoundException {"},{"lineNumber":8,"author":{"gitID":"bayweiheng"},"content":"    public PersonNotFoundInEventException() {"},{"lineNumber":9,"author":{"gitID":"bayweiheng"},"content":"        super(\"Operation requires person that does not exist in event\");"},{"lineNumber":10,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"}"}],"authorContributionMap":{"bayweiheng":5,"jiangyue12392":6}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":""},{"lineNumber":5,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Signals that the operation will result in duplicate EpicEvent objects."},{"lineNumber":8,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"    public DuplicateEventException() {"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"william6364":12,"-":1}},{"path":"src/main/java/seedu/address/model/event/EventNameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jiangyue12392"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jiangyue12392"},"content":"public class EventNameContainsKeywordsPredicate implements Predicate\u003cEpicEvent\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jiangyue12392"},"content":"    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"jiangyue12392"},"content":"    public boolean test(EpicEvent event) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"jiangyue12392"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getName().name, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"jiangyue12392"},"content":"                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"jiangyue12392"},"content":"                \u0026\u0026 this.keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jiangyue12392":7,"-":24}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":" * Represents a Tag in the event planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":1,"-":53}},{"path":"src/main/java/seedu/address/model/ReadOnlyEventPlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"public interface ReadOnlyEventPlanner {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":"     * Returns an unmodifiable view of the events list."},{"lineNumber":21,"author":{"gitID":"william6364"},"content":"     * This list will not contain any duplicate events."},{"lineNumber":22,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":"    ObservableList\u003cEpicEvent\u003e getEventList();"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"     * Returns an unmodifiable view of the person tags list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    ObservableList\u003cTag\u003e getPersonTagList();"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":""},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"     * Returns an unmodifiable view of the event tags list."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    ObservableList\u003cTag\u003e getEventTagList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"william6364":14,"-":23}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.event.ObservableEpicEvent;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":10,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":11,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"jiangyue12392"},"content":"    /** {@code Predicate} that always evaluate to true. */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"jiangyue12392"},"content":"    /** {@code Predicate} that always evaluate to true. */"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":"    Predicate\u003cEpicEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    void resetData(ReadOnlyEventPlanner newData);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jiangyue12392"},"content":"    /** Returns the EventPlanne r. */"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    ReadOnlyEventPlanner getEventPlanner();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jiangyue12392"},"content":"    /** Adds the given person. */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the given person {@code targetPerson} with {@code editedPerson}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":43,"author":{"gitID":"jiangyue12392"},"content":"     * @throws PersonNotFoundException if {@code targetPerson} could not be found in the list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jiangyue12392"},"content":"    void updatePerson(Person targetPerson, Person editedPerson)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jiangyue12392"},"content":"    /** Returns an unmodifiable view of the filtered person list. */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    /** Adds the given event. */"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"    void addEvent(EpicEvent event) throws DuplicateEventException;"},{"lineNumber":59,"author":{"gitID":"william6364"},"content":""},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"    /** Deletes the given event. */"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"    void deleteEvent(EpicEvent targetEvent) throws EventNotFoundException;"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":63,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"bayweiheng"},"content":"     * Registers the given person {@code person} for the given event {@code event}"},{"lineNumber":65,"author":{"gitID":"bayweiheng"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundException if the person could not be found in the list"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"     * @throws EventNotFoundException if the event could not be found in the list"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"     * @throws DuplicatePersonException if the person is already registered for the event"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"    void registerPersonForEvent(Person person, EpicEvent event)"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"            throws EventNotFoundException, DuplicateAttendanceException;"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"     * Deregisters the given person {@code person} from the given event {@code event}"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundException if the person could not be found in the list"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"     * @throws EventNotFoundException if the event could not be found in the list"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundInEventException if the person could not be found in the event"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"    void deregisterPersonFromEvent(Person person, EpicEvent event)"},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"            throws EventNotFoundException, PersonNotFoundInEventException;"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":""},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"     * Toggles the attendance of the given person {@code person} in the given event {@code event}"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundException if the person could not be found in the list"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"     * @throws EventNotFoundException if the event could not be found in the list"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundInEventException if the person could not be found in the event"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"    void toggleAttendance(Person person, EpicEvent event)"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"            throws EventNotFoundException, PersonNotFoundInEventException;"},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the given event {@code targetEvent} with {@code editedEvent}."},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":"     * @throws DuplicateEventException if updating the event\u0027s details causes the event to be equivalent to"},{"lineNumber":97,"author":{"gitID":"jiangyue12392"},"content":"     *      another existing event in the list."},{"lineNumber":98,"author":{"gitID":"jiangyue12392"},"content":"     * @throws EventNotFoundException if {@code targetEvnt} could not be found in the list."},{"lineNumber":99,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"jiangyue12392"},"content":"    void updateEvent(EpicEvent targetEvent, EpicEvent editedEvent)"},{"lineNumber":101,"author":{"gitID":"jiangyue12392"},"content":"            throws DuplicateEventException, EventNotFoundException;"},{"lineNumber":102,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":103,"author":{"gitID":"jiangyue12392"},"content":"    /** Returns an unmodifiable view of the filtered event list. */"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"    ObservableList\u003cEpicEvent\u003e getFilteredEventList();"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":""},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":"    /** Returns an unmodifiable view of the event list. */"},{"lineNumber":107,"author":{"gitID":"bayweiheng"},"content":"    ObservableList\u003cEpicEvent\u003e getEventList();"},{"lineNumber":108,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"    void updateFilteredEventList(Predicate\u003cEpicEvent\u003e predicate);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"raynoldng"},"content":"    // @@author raynoldng"},{"lineNumber":116,"author":{"gitID":"raynoldng"},"content":"    ObservableEpicEvent getSelectedEpicEvent();"},{"lineNumber":117,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":118,"author":{"gitID":"raynoldng"},"content":"    void setSelectedEpicEvent(int index);"},{"lineNumber":119,"author":{"gitID":"raynoldng"},"content":""},{"lineNumber":120,"author":{"gitID":"raynoldng"},"content":"    void setSelectedEpicEvent(EpicEvent epicEvent);"},{"lineNumber":121,"author":{"gitID":"raynoldng"},"content":"    // @@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":27,"william6364":20,"jiangyue12392":24,"-":44,"raynoldng":7}},{"path":"src/main/java/seedu/address/model/event/EpicEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"william6364"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":""},{"lineNumber":12,"author":{"gitID":"raynoldng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"william6364"},"content":"import seedu.address.model.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.attendance.Attendance;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.UniqueAttendanceList;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":17,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":18,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":" * Represents a Event in the event planner."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"public class EpicEvent {"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":""},{"lineNumber":28,"author":{"gitID":"bayweiheng"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":""},{"lineNumber":30,"author":{"gitID":"bayweiheng"},"content":"    private UniqueTagList tags;"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"    private final UniqueAttendanceList attendanceList;"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":""},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"     * Every field must be present and not null."},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    public EpicEvent(Name name, Set\u003cTag\u003e tags) {"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(name, tags);"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        this.attendanceList \u003d new UniqueAttendanceList();"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":""},{"lineNumber":44,"author":{"gitID":"jiangyue12392"},"content":"    public EpicEvent(Name name, UniqueAttendanceList attendanceList, Set\u003cTag\u003e tags) {"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(name, tags);"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitID":"jiangyue12392"},"content":"        this.attendanceList \u003d attendanceList;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":50,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public EpicEvent(EpicEvent toBeCopied) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(toBeCopied);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(toBeCopied.getName().toString());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(toBeCopied.getTags());"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"        this.attendanceList \u003d new UniqueAttendanceList();"},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":""},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"    public Name getName() {"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"        return name;"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static EpicEvent getDummyEpicEvent() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EpicEvent(new Name(\"dummyEvent\"), new HashSet\u003cTag\u003e());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"     * Edits this event by transferring the name and tags of the dummyEvent over"},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"    public void setEvent(EpicEvent dummyEvent) {"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"        this.name \u003d dummyEvent.getName();"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"        this.tags \u003d new UniqueTagList(dummyEvent.getTags());"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"    /** registers person for this event */"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":"    public void registerPerson(Person person) throws DuplicateAttendanceException {"},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        attendanceList.add(person, this);"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"    /** deregisters person from this event */"},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":"    public void deregisterPerson(Person person) throws PersonNotFoundInEventException {"},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"            attendanceList.remove(person, this);"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"        } catch (PersonNotFoundInEventException e) {"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":"            throw new PersonNotFoundInEventException();"},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":90,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":91,"author":{"gitID":"jiangyue12392"},"content":"    /** replace the person in the attendance list with the given person and the event in the attendance list*/"},{"lineNumber":92,"author":{"gitID":"jiangyue12392"},"content":"    public void replace(Person person) {"},{"lineNumber":93,"author":{"gitID":"jiangyue12392"},"content":"        attendanceList.replace(person, this);"},{"lineNumber":94,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"jiangyue12392"},"content":"    //@@author"},{"lineNumber":96,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"    /** toggles the attendance of a person in this event */"},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person) throws PersonNotFoundInEventException {"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"            attendanceList.toggleAttendance(person, this);"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"        } catch (PersonNotFoundInEventException e) {"},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":"            throw new PersonNotFoundInEventException();"},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"     * Decrements all this event\u0027s attendanceList\u0027 numberOfEventsRegisteredFor."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Called only when this event is being deleted"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void handleDeleteEvent() {"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"        attendanceList.handleDeleteEvent();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"     * Increments all this event\u0027s attendanceList\u0027 numberOfEventsRegisteredFor."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Called only when this event is being added."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Required to properly maintain numberOfPersonsRegisteredFor for these persons"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * when an undo of a delete operation is called"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void handleAddEvent() {"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":"        attendanceList.handleAddEvent();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Sets the attendance list using another event\u0027s. Used for undoing deleteEvent"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void setAttendanceList(List\u003cAttendance\u003e dummyRegisteredPersons) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":"            attendanceList.setAttendanceList(dummyRegisteredPersons);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (DuplicateAttendanceException e) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"this should not happen, dummyRegisteredPersons\""},{"lineNumber":133,"author":{"gitID":"-"},"content":"                    + \"is a valid Attendance List from another event\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"raynoldng"},"content":"    public ObservableList\u003cAttendance\u003e getAttendanceList() {"},{"lineNumber":138,"author":{"gitID":"william6364"},"content":"        return attendanceList.asObservableList();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":"    public UniqueAttendanceList getUniqueAttendanceList() {"},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":"        return attendanceList;"},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":145,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":146,"author":{"gitID":"bayweiheng"},"content":"    /** returns true if person is in this event, regardless of whether"},{"lineNumber":147,"author":{"gitID":"bayweiheng"},"content":"     * his attendance has been marked"},{"lineNumber":148,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"bayweiheng"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":150,"author":{"gitID":"bayweiheng"},"content":"        return attendanceList.contains(person, this);"},{"lineNumber":151,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"bayweiheng"},"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"william6364"},"content":"        if (!(other instanceof EpicEvent)) {"},{"lineNumber":169,"author":{"gitID":"william6364"},"content":"            return false;"},{"lineNumber":170,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"william6364"},"content":""},{"lineNumber":172,"author":{"gitID":"william6364"},"content":"        EpicEvent otherEpicEvent \u003d (EpicEvent) other;"},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"        return otherEpicEvent.getName().equals(this.getName());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"        return Objects.hash(name, tags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"bayweiheng":40,"william6364":50,"jiangyue12392":15,"-":84,"raynoldng":2}},{"path":"src/main/java/seedu/address/model/event/UniqueEpicEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"william6364"},"content":""},{"lineNumber":3,"author":{"gitID":"william6364"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jiangyue12392"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"william6364"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"william6364"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":13,"author":{"gitID":"jiangyue12392"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":15,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"william6364"},"content":""},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"william6364"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"william6364"},"content":" *"},{"lineNumber":21,"author":{"gitID":"william6364"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"william6364"},"content":" *"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":" * @see EpicEvent#equals(Object)"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":"public class UniqueEpicEventList {"},{"lineNumber":27,"author":{"gitID":"william6364"},"content":""},{"lineNumber":28,"author":{"gitID":"william6364"},"content":"    private final ObservableList\u003cEpicEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"william6364"},"content":""},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"    public boolean contains(EpicEvent toCheck) {"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"william6364"},"content":""},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"     * Adds an event to the list."},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"     * @throws DuplicateEventException if the event to add is a duplicate of an existing event in the list."},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"    public void add(EpicEvent toAdd) throws DuplicateEventException {"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"            throw new DuplicateEventException();"},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":""},{"lineNumber":51,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":52,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"jiangyue12392"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":54,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"jiangyue12392"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":56,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"jiangyue12392"},"content":"    public boolean remove(EpicEvent eventToRemove) throws EventNotFoundException {"},{"lineNumber":58,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(eventToRemove);"},{"lineNumber":59,"author":{"gitID":"jiangyue12392"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(eventToRemove);"},{"lineNumber":60,"author":{"gitID":"jiangyue12392"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":61,"author":{"gitID":"jiangyue12392"},"content":"            throw new EventNotFoundException();"},{"lineNumber":62,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"jiangyue12392"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":64,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":66,"author":{"gitID":"bayweiheng"},"content":"    //@@author bayweiheng"},{"lineNumber":67,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"bayweiheng"},"content":"     * Registers the person to the event. Updates the person\u0027s numberOfEventsRegisteredFor"},{"lineNumber":69,"author":{"gitID":"bayweiheng"},"content":"     * upon success."},{"lineNumber":70,"author":{"gitID":"bayweiheng"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"bayweiheng"},"content":"     * @throws DuplicateAttendanceException if the person is already registered"},{"lineNumber":72,"author":{"gitID":"bayweiheng"},"content":"     * @throws EventNotFoundException if no such event could be found in the list"},{"lineNumber":73,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"bayweiheng"},"content":"    public void registerPersonForEvent(Person person, EpicEvent eventToRegisterFor)"},{"lineNumber":75,"author":{"gitID":"bayweiheng"},"content":"            throws DuplicateAttendanceException, EventNotFoundException {"},{"lineNumber":76,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(person, eventToRegisterFor);"},{"lineNumber":77,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":78,"author":{"gitID":"bayweiheng"},"content":"        int index \u003d internalList.indexOf(eventToRegisterFor);"},{"lineNumber":79,"author":{"gitID":"bayweiheng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":80,"author":{"gitID":"bayweiheng"},"content":"            throw new EventNotFoundException();"},{"lineNumber":81,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":83,"author":{"gitID":"bayweiheng"},"content":"        eventToRegisterFor.registerPerson(person);"},{"lineNumber":84,"author":{"gitID":"bayweiheng"},"content":"        person.incrementNumberOfEventsRegisteredFor();"},{"lineNumber":85,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":87,"author":{"gitID":"bayweiheng"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"bayweiheng"},"content":"     * Deregisters the person to the event. Updates the person\u0027s numberOfEventsRegisteredFor"},{"lineNumber":89,"author":{"gitID":"bayweiheng"},"content":"     * upon success."},{"lineNumber":90,"author":{"gitID":"bayweiheng"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"bayweiheng"},"content":"     * @throws PersonNotFoundInEventException if person could not be found in event"},{"lineNumber":92,"author":{"gitID":"bayweiheng"},"content":"     * @throws EventNotFoundException if no such event could be found in the list"},{"lineNumber":93,"author":{"gitID":"bayweiheng"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"bayweiheng"},"content":"    public void deregisterPersonFromEvent(Person person, EpicEvent eventToRegisterFor)"},{"lineNumber":95,"author":{"gitID":"bayweiheng"},"content":"            throws PersonNotFoundInEventException, EventNotFoundException {"},{"lineNumber":96,"author":{"gitID":"bayweiheng"},"content":"        requireAllNonNull(person, eventToRegisterFor);"},{"lineNumber":97,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":98,"author":{"gitID":"bayweiheng"},"content":"        int index \u003d internalList.indexOf(eventToRegisterFor);"},{"lineNumber":99,"author":{"gitID":"bayweiheng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":100,"author":{"gitID":"bayweiheng"},"content":"            throw new EventNotFoundException();"},{"lineNumber":101,"author":{"gitID":"bayweiheng"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":103,"author":{"gitID":"bayweiheng"},"content":"        eventToRegisterFor.deregisterPerson(person);"},{"lineNumber":104,"author":{"gitID":"bayweiheng"},"content":"        person.decrementNumberOfEventsRegisteredFor();"},{"lineNumber":105,"author":{"gitID":"bayweiheng"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"bayweiheng"},"content":""},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":"     * Toggles the attendance of the person in the event."},{"lineNumber":110,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"william6364"},"content":"     * @throws PersonNotFoundInEventException if person could not be found in event"},{"lineNumber":112,"author":{"gitID":"william6364"},"content":"     * @throws EventNotFoundException if no such event could be found in the list"},{"lineNumber":113,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person, EpicEvent eventToToggleAttendance)"},{"lineNumber":115,"author":{"gitID":"william6364"},"content":"            throws PersonNotFoundInEventException, EventNotFoundException {"},{"lineNumber":116,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(person, eventToToggleAttendance);"},{"lineNumber":117,"author":{"gitID":"william6364"},"content":""},{"lineNumber":118,"author":{"gitID":"william6364"},"content":"        int index \u003d internalList.indexOf(eventToToggleAttendance);"},{"lineNumber":119,"author":{"gitID":"william6364"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":120,"author":{"gitID":"william6364"},"content":"            throw new EventNotFoundException();"},{"lineNumber":121,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"william6364"},"content":""},{"lineNumber":123,"author":{"gitID":"william6364"},"content":"        eventToToggleAttendance.toggleAttendance(person);"},{"lineNumber":124,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"william6364"},"content":""},{"lineNumber":126,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":127,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the event {@code targetEvent} in the list with {@code editedEvent}."},{"lineNumber":129,"author":{"gitID":"jiangyue12392"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"jiangyue12392"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":131,"author":{"gitID":"jiangyue12392"},"content":"     * @throws EventNotFoundException if {@code targetEvent} could not be found in the list."},{"lineNumber":132,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"jiangyue12392"},"content":"    public void setEvent(EpicEvent targetEvent, EpicEvent editedEvent)"},{"lineNumber":134,"author":{"gitID":"jiangyue12392"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":135,"author":{"gitID":"jiangyue12392"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":136,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":137,"author":{"gitID":"jiangyue12392"},"content":"        int index \u003d internalList.indexOf(targetEvent);"},{"lineNumber":138,"author":{"gitID":"jiangyue12392"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":139,"author":{"gitID":"jiangyue12392"},"content":"            throw new EventNotFoundException();"},{"lineNumber":140,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":142,"author":{"gitID":"jiangyue12392"},"content":"        if (!targetEvent.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":143,"author":{"gitID":"jiangyue12392"},"content":"            throw new DuplicateEventException();"},{"lineNumber":144,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":146,"author":{"gitID":"jiangyue12392"},"content":"        internalList.get(index).setEvent(editedEvent);"},{"lineNumber":147,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":148,"author":{"gitID":"jiangyue12392"},"content":"        // Forces UI to refresh"},{"lineNumber":149,"author":{"gitID":"jiangyue12392"},"content":"        internalList.set(index, internalList.get(index));"},{"lineNumber":150,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":152,"author":{"gitID":"jiangyue12392"},"content":"    public void setEvents(UniqueEpicEventList replacement) {"},{"lineNumber":153,"author":{"gitID":"jiangyue12392"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":154,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":156,"author":{"gitID":"jiangyue12392"},"content":"    public void setEvents(List\u003cEpicEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":157,"author":{"gitID":"jiangyue12392"},"content":"        requireAllNonNull(events);"},{"lineNumber":158,"author":{"gitID":"jiangyue12392"},"content":"        final UniqueEpicEventList replacement \u003d new UniqueEpicEventList();"},{"lineNumber":159,"author":{"gitID":"jiangyue12392"},"content":"        for (final EpicEvent event : events) {"},{"lineNumber":160,"author":{"gitID":"jiangyue12392"},"content":"            replacement.add(event);"},{"lineNumber":161,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"jiangyue12392"},"content":"        setEvents(replacement);"},{"lineNumber":163,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":165,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":166,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitID":"william6364"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":169,"author":{"gitID":"william6364"},"content":"                || (other instanceof UniqueEpicEventList // instanceof handles nulls"},{"lineNumber":170,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEpicEventList) other).internalList));"},{"lineNumber":171,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"william6364"},"content":""},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"william6364"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":175,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cEpicEvent\u003e asObservableList() {"},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":178,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"william6364"},"content":"    public int hashCode() {"},{"lineNumber":181,"author":{"gitID":"william6364"},"content":"        return internalList.hashCode();"},{"lineNumber":182,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"william6364"},"content":""},{"lineNumber":184,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"bayweiheng":43,"william6364":81,"jiangyue12392":56,"-":4}},{"path":"src/main/java/seedu/address/model/attendance/UniqueAttendanceList.java","lines":[{"lineNumber":1,"author":{"gitID":"william6364"},"content":"package seedu.address.model.attendance;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":11,"author":{"gitID":"william6364"},"content":"import seedu.address.model.attendance.exceptions.DuplicateAttendanceException;"},{"lineNumber":12,"author":{"gitID":"william6364"},"content":"import seedu.address.model.event.EpicEvent;"},{"lineNumber":13,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.event.exceptions.PersonNotFoundInEventException;"},{"lineNumber":14,"author":{"gitID":"bayweiheng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"william6364"},"content":""},{"lineNumber":16,"author":{"gitID":"william6364"},"content":"//@@author william6364"},{"lineNumber":17,"author":{"gitID":"william6364"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"william6364"},"content":" * A list of attendance objects that enforces uniqueness between the persons inside the object and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"william6364"},"content":" *"},{"lineNumber":20,"author":{"gitID":"william6364"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"william6364"},"content":" *"},{"lineNumber":22,"author":{"gitID":"william6364"},"content":" * @see Attendance#equals(Object)"},{"lineNumber":23,"author":{"gitID":"william6364"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"william6364"},"content":" */"},{"lineNumber":25,"author":{"gitID":"william6364"},"content":"public class UniqueAttendanceList {"},{"lineNumber":26,"author":{"gitID":"william6364"},"content":""},{"lineNumber":27,"author":{"gitID":"william6364"},"content":"    private final ObservableList\u003cAttendance\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"william6364"},"content":""},{"lineNumber":29,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"william6364"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":31,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"william6364"},"content":"    public boolean contains(Person toCheck, EpicEvent event) {"},{"lineNumber":33,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(toCheck, event);"},{"lineNumber":34,"author":{"gitID":"william6364"},"content":"        return contains(new Attendance(toCheck, event));"},{"lineNumber":35,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"william6364"},"content":""},{"lineNumber":37,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"william6364"},"content":"     * Returns true if the list contains an equivalent attendee as the given argument."},{"lineNumber":39,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"william6364"},"content":"    public boolean contains(Attendance toCheck) {"},{"lineNumber":41,"author":{"gitID":"william6364"},"content":"        requireNonNull(toCheck);"},{"lineNumber":42,"author":{"gitID":"william6364"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":43,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"william6364"},"content":""},{"lineNumber":45,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"william6364"},"content":"     * Adds a person to the attendance list."},{"lineNumber":47,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"william6364"},"content":"     * @throws DuplicateAttendanceException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":49,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"william6364"},"content":"    public void add(Person toAdd, EpicEvent event) throws DuplicateAttendanceException {"},{"lineNumber":51,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(toAdd, event);"},{"lineNumber":52,"author":{"gitID":"william6364"},"content":"        add(new Attendance(toAdd, event));"},{"lineNumber":53,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"william6364"},"content":""},{"lineNumber":55,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"william6364"},"content":"     * Adds an attendance object to the list."},{"lineNumber":57,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"william6364"},"content":"     * @throws DuplicateAttendanceException if the attendee to add is a duplicate of an existing attendee in the list."},{"lineNumber":59,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"william6364"},"content":"    public void add(Attendance toAdd) throws DuplicateAttendanceException {"},{"lineNumber":61,"author":{"gitID":"william6364"},"content":"        requireNonNull(toAdd);"},{"lineNumber":62,"author":{"gitID":"william6364"},"content":"        if (contains(toAdd)) {"},{"lineNumber":63,"author":{"gitID":"william6364"},"content":"            throw new DuplicateAttendanceException();"},{"lineNumber":64,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"william6364"},"content":"        internalList.add(toAdd);"},{"lineNumber":66,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"william6364"},"content":""},{"lineNumber":68,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"william6364"},"content":"     * Toggles the attendance of {@code person} in the list."},{"lineNumber":70,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"william6364"},"content":"     * @throws PersonNotFoundInEventException if {@code person} could not be found in the list."},{"lineNumber":72,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"william6364"},"content":"    public void toggleAttendance(Person person, EpicEvent event) throws PersonNotFoundInEventException {"},{"lineNumber":74,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(person, event);"},{"lineNumber":75,"author":{"gitID":"william6364"},"content":""},{"lineNumber":76,"author":{"gitID":"william6364"},"content":"        int index \u003d internalList.indexOf(new Attendance(person, event));"},{"lineNumber":77,"author":{"gitID":"william6364"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":78,"author":{"gitID":"william6364"},"content":"            throw new PersonNotFoundInEventException();"},{"lineNumber":79,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"william6364"},"content":""},{"lineNumber":81,"author":{"gitID":"william6364"},"content":"        Attendance currentAttendance \u003d internalList.get(index);"},{"lineNumber":82,"author":{"gitID":"william6364"},"content":"        internalList.get(index).setAttendance(new Attendance(currentAttendance.getPerson(),"},{"lineNumber":83,"author":{"gitID":"william6364"},"content":"                currentAttendance.getEvent(), !currentAttendance.hasAttended()));"},{"lineNumber":84,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"william6364"},"content":""},{"lineNumber":86,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"william6364"},"content":"     * Removes the equivalent attendee from the list."},{"lineNumber":88,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"william6364"},"content":"     * @throws PersonNotFoundInEventException if no such attendee could be found in the list."},{"lineNumber":90,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"william6364"},"content":"    public boolean remove(Person toRemove, EpicEvent event) throws PersonNotFoundInEventException {"},{"lineNumber":92,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(toRemove, event);"},{"lineNumber":93,"author":{"gitID":"william6364"},"content":"        return remove(new Attendance(toRemove, event));"},{"lineNumber":94,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"william6364"},"content":""},{"lineNumber":96,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"william6364"},"content":"     * Removes the equivalent attendee from the list."},{"lineNumber":98,"author":{"gitID":"william6364"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"william6364"},"content":"     * @throws PersonNotFoundInEventException if no such attendee could be found in the list."},{"lineNumber":100,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"william6364"},"content":"    public boolean remove(Attendance toRemove) throws PersonNotFoundInEventException {"},{"lineNumber":102,"author":{"gitID":"william6364"},"content":"        requireNonNull(toRemove);"},{"lineNumber":103,"author":{"gitID":"william6364"},"content":"        final boolean attendeeFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":104,"author":{"gitID":"william6364"},"content":"        if (!attendeeFoundAndDeleted) {"},{"lineNumber":105,"author":{"gitID":"william6364"},"content":"            throw new PersonNotFoundInEventException();"},{"lineNumber":106,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"william6364"},"content":"        return attendeeFoundAndDeleted;"},{"lineNumber":108,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"william6364"},"content":""},{"lineNumber":110,"author":{"gitID":"jiangyue12392"},"content":"    //@@author jiangyue12392"},{"lineNumber":111,"author":{"gitID":"jiangyue12392"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"jiangyue12392"},"content":"     * Replaces the person in the attendance list with the given master person list if there is any person that"},{"lineNumber":113,"author":{"gitID":"jiangyue12392"},"content":"     * that is in both the master list and the attendance list"},{"lineNumber":114,"author":{"gitID":"jiangyue12392"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"jiangyue12392"},"content":"    public void replace(Person toReplace, EpicEvent event) {"},{"lineNumber":116,"author":{"gitID":"jiangyue12392"},"content":"        requireAllNonNull(toReplace, event);"},{"lineNumber":117,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":118,"author":{"gitID":"jiangyue12392"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":119,"author":{"gitID":"jiangyue12392"},"content":"            if (toReplace.equals(internalList.get(i).getPerson())) {"},{"lineNumber":120,"author":{"gitID":"jiangyue12392"},"content":"                Attendance currentAttendance \u003d internalList.get(i);"},{"lineNumber":121,"author":{"gitID":"jiangyue12392"},"content":"                internalList.get(i).setAttendance(new Attendance(toReplace, event, currentAttendance.hasAttended()));"},{"lineNumber":122,"author":{"gitID":"jiangyue12392"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"jiangyue12392"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"jiangyue12392"},"content":""},{"lineNumber":125,"author":{"gitID":"jiangyue12392"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"william6364"},"content":"    //@@author william6364"},{"lineNumber":127,"author":{"gitID":"william6364"},"content":""},{"lineNumber":128,"author":{"gitID":"william6364"},"content":"    public void setAttendanceList(UniqueAttendanceList replacement) {"},{"lineNumber":129,"author":{"gitID":"william6364"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":130,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"william6364"},"content":""},{"lineNumber":132,"author":{"gitID":"william6364"},"content":"    public void setAttendanceList(List\u003cAttendance\u003e attendanceList) throws DuplicateAttendanceException {"},{"lineNumber":133,"author":{"gitID":"william6364"},"content":"        requireAllNonNull(attendanceList);"},{"lineNumber":134,"author":{"gitID":"william6364"},"content":"        final UniqueAttendanceList replacement \u003d new UniqueAttendanceList();"},{"lineNumber":135,"author":{"gitID":"william6364"},"content":"        for (final Attendance attendance : attendanceList) {"},{"lineNumber":136,"author":{"gitID":"william6364"},"content":"            replacement.add(attendance);"},{"lineNumber":137,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"william6364"},"content":"        setAttendanceList(replacement);"},{"lineNumber":139,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"william6364"},"content":""},{"lineNumber":141,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"william6364"},"content":"     * Decrements the numberOfEventsRegisteredFor of all Persons in this AttendanceList by 1."},{"lineNumber":143,"author":{"gitID":"william6364"},"content":"     * Called only when the event this AttendanceList belongs to is being deleted"},{"lineNumber":144,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"william6364"},"content":"    public void handleDeleteEvent() {"},{"lineNumber":146,"author":{"gitID":"william6364"},"content":"        for (Attendance attendance: internalList) {"},{"lineNumber":147,"author":{"gitID":"william6364"},"content":"            attendance.getPerson().decrementNumberOfEventsRegisteredFor();"},{"lineNumber":148,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"william6364"},"content":""},{"lineNumber":151,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"william6364"},"content":"     * Decrements the numberOfEventsRegisteredFor of all Persons in this AttendanceList by 1."},{"lineNumber":153,"author":{"gitID":"william6364"},"content":"     * Called only when the event this AttendanceList belongs to is being added."},{"lineNumber":154,"author":{"gitID":"william6364"},"content":"    * Required to properly maintain numberOfPersonsRegisteredFor for these persons"},{"lineNumber":155,"author":{"gitID":"william6364"},"content":"     * when an undo of a delete operation is called"},{"lineNumber":156,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"william6364"},"content":"    public void handleAddEvent() {"},{"lineNumber":158,"author":{"gitID":"william6364"},"content":"        for (Attendance attendance: internalList) {"},{"lineNumber":159,"author":{"gitID":"william6364"},"content":"            attendance.getPerson().incrementNumberOfEventsRegisteredFor();"},{"lineNumber":160,"author":{"gitID":"william6364"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"william6364"},"content":""},{"lineNumber":163,"author":{"gitID":"william6364"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"william6364"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":165,"author":{"gitID":"william6364"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"william6364"},"content":"    public ObservableList\u003cAttendance\u003e asObservableList() {"},{"lineNumber":167,"author":{"gitID":"william6364"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":168,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"william6364"},"content":""},{"lineNumber":170,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"william6364"},"content":"    public boolean equals(Object other) {"},{"lineNumber":172,"author":{"gitID":"william6364"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":173,"author":{"gitID":"william6364"},"content":"                || (other instanceof UniqueAttendanceList // instanceof handles nulls"},{"lineNumber":174,"author":{"gitID":"william6364"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAttendanceList) other).internalList));"},{"lineNumber":175,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"william6364"},"content":""},{"lineNumber":177,"author":{"gitID":"william6364"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"william6364"},"content":"    public int hashCode() {"},{"lineNumber":179,"author":{"gitID":"william6364"},"content":"        return internalList.hashCode();"},{"lineNumber":180,"author":{"gitID":"william6364"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"william6364"},"content":"}"}],"authorContributionMap":{"bayweiheng":2,"william6364":154,"jiangyue12392":16,"-":9}}]
