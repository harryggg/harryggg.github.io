var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F11-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"* *Email us* : You can also reach us at `wu.hao [at] u.nus.edu`"}],"authorContributionMap":{"ZhangYijiong":1,"Wuhao-ooo":1,"-":4}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery was developed by the https://github.com/orgs/CS2103JAN2018-F11-B4/teams/developers[CS2103-F11-B4] team. +"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"The initial source code of this project was based on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Wu Hao"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"image::wuhao-ooo.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"{empty}[https://github.com/Wuhao-ooo[github]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"- Team lead +"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"- Deliverables and deadlines +"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"- Scheduling and tracking +"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"- Git expert +"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"Responsibilities: UI, Model"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Zhang Yijiong"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"image::zhangyijiong.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"{empty}[https://github.com/ZhangYijiong[github]]"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"- Testing +"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"- Code quality +"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"Responsibilities: Storage, Commons"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Zhang Zequn"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"image::zaczequn.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"{empty}[https://github.com/ZacZequn[github]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"- Documentation +"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"- Integration +"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"- Intellij expert +"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"Responsibilities: Logic"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Wuhao-ooo":27,"-":19}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"By: `Team F11-B4`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"Delivery is targeted at restaurants, especially for the small-medium ones, which want to have a system to keep track customers’ orders and delivery."},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"A restaurant can have hundreds of orders a day and it’s extremely troublesome for the restaurant stuff to manually write down all customer information (including their names, contact numbers, addresses, orders and expected time of delivery etc.) and keep track on it."},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"Hence, they need a software to store all the information mentioned above in an organised manner."},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is for those who *prefer to use a desktop app for managing orders*. More importantly, Delivery is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Delivery can manage the orders faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":".  Download the latest `delivery.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":".  Copy the file to the folder you want to use as the home folder for the database of customers\u0027 personal particulars."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"* *`list`* : lists all orders"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"* **`add`**`n/John Doe p/98765432 a/John street, block 123, #01-01 o/chicken rice` : adds an order of chicken rice from customer `John Doe` to the queue."},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"* **`delete`**`3` : deletes the 3rd order shown in the current list"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":"* Each command has an alias as the shortcut for advanced users to execute commands faster. +"},{"lineNumber":59,"author":{"gitID":"Wuhao-ooo"},"content":"   (e.g. for the \"add\" command, you can either type \"add\" or \"a\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":62,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":63,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"If you want to find out all the features, or would like to know how to do a certain command, you can click on the help menu button. You can also enter the command help to access the help window. +"},{"lineNumber":69,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `h` +"},{"lineNumber":70,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Adding an order: `add`"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"Wuhao-ooo"},"content":"Adds an order to the queue +"},{"lineNumber":75,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `a` +"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"Format: `add n/NAME p/PHONE_NUMBER a/ADDRESS o/FOOD_ORDER [h/HALAL] [v/VEGETARIAN] [t/TAG]...`"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":79,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"* `add n/John Doe p/98765432  a/John street, block 123, #01-01 o/Chicken rice h/HALAL v/VEGETARIAN`"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"* `add n/Betsy Crowe t/friend a/Newgate Prison p/1234567 t/criminal o/Chicken chop h/HALAL`"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"* `a n/John Doe p/98765432  a/John street, block 123, #01-01 o/Chicken rice h/HALAL v/VEGETARIAN`"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"* `a n/Betsy Crowe t/friend a/Newgate Prison p/1234567 t/criminal o/Chicken chop h/HALAL`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Listing all orders : `list`"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Wuhao-ooo"},"content":"Shows a list of all orders in the queue. +"},{"lineNumber":91,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `l` +"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Editing an order : `edit`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"Wuhao-ooo"},"content":"Edits an existing order in the queue. +"},{"lineNumber":97,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `e` +"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [t/FOOD_ORDER] [h/HALAL] [v/VEGETARIAN] [t/TAG]...`"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"****"},{"lineNumber":101,"author":{"gitID":"Wuhao-ooo"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the last order listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"* When editing tags, the existing tags of the order will be removed i.e adding of tags is not cumulative."},{"lineNumber":105,"author":{"gitID":"Wuhao-ooo"},"content":"* You can remove all the order\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":106,"author":{"gitID":"-"},"content":"****"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"* `edit 1 p/91234567` +"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"Edits the phone number of the customer from 1st order to be `91234567` respectively."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":113,"author":{"gitID":"Wuhao-ooo"},"content":"Edits the name of the customer from 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"* `e 1 p/91234567` +"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"Edits the phone number of the customer from 1st order to be `91234567` respectively."},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"* `e 2 n/Betsy Crower t/` +"},{"lineNumber":117,"author":{"gitID":"Wuhao-ooo"},"content":"Edits the name of the customer from 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Locating orders by name: `find`"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"Wuhao-ooo"},"content":"Finds orders with their customer names containing any of the given keywords. +"},{"lineNumber":123,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `f` +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":128,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":131,"author":{"gitID":"Wuhao-ooo"},"content":"* Names matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":138,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":139,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":140,"author":{"gitID":"Wuhao-ooo"},"content":"* `f John` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":142,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy Tim John` +"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Deleting an order : `delete`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the specified order from the queue. +"},{"lineNumber":148,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `d` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"****"},{"lineNumber":152,"author":{"gitID":"Wuhao-ooo"},"content":"* Deletes the order at the specified `INDEX`."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":161,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 2nd order in the queue."},{"lineNumber":162,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":164,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 1st order in the results of the `find` command."},{"lineNumber":165,"author":{"gitID":"Wuhao-ooo"},"content":"* `l` +"},{"lineNumber":166,"author":{"gitID":"Wuhao-ooo"},"content":"`d 2` +"},{"lineNumber":167,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 2nd order in the queue."},{"lineNumber":168,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy` +"},{"lineNumber":169,"author":{"gitID":"Wuhao-ooo"},"content":"`d 1` +"},{"lineNumber":170,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 1st order in the results of the `find` command."},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Selecting an order : `select`"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the order identified by the index number used in the last listing. +"},{"lineNumber":175,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `s` +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"****"},{"lineNumber":179,"author":{"gitID":"Wuhao-ooo"},"content":"* Selects the load and loads the Google Map location of the customer from the order at the specified `INDEX`."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":182,"author":{"gitID":"-"},"content":"****"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":188,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 2nd order in the queue."},{"lineNumber":189,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":191,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 1st order in the results of the `find` command."},{"lineNumber":192,"author":{"gitID":"Wuhao-ooo"},"content":"* `l` +"},{"lineNumber":193,"author":{"gitID":"Wuhao-ooo"},"content":"`s 2` +"},{"lineNumber":194,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 2nd order in the queue."},{"lineNumber":195,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy` +"},{"lineNumber":196,"author":{"gitID":"Wuhao-ooo"},"content":"`s 1` +"},{"lineNumber":197,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 1st order in the results of the `find` command."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":203,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `hist` +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":209,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"Wuhao-ooo"},"content":"Restores the queue to the state before the previous _undoable_ command was executed. +"},{"lineNumber":215,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `ud` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitID":"Wuhao-ooo"},"content":"Undoable commands: those commands that modify the queue of orders (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":232,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":235,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":236,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":242,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `rd` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":249,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":252,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":261,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"Wuhao-ooo"},"content":"Clears all orders from the queue. +"},{"lineNumber":266,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `c` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Find Path of an order : `path`"},{"lineNumber":270,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":271,"author":{"gitID":"ZhangYijiong"},"content":"Shows path to the order\u0027s address which is identified by the index number used in the last listing. +"},{"lineNumber":272,"author":{"gitID":"ZhangYijiong"},"content":"Alias: `p` +"},{"lineNumber":273,"author":{"gitID":"ZhangYijiong"},"content":"Format: `path INDEX`"},{"lineNumber":274,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":275,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":276,"author":{"gitID":"ZhangYijiong"},"content":"* Shows path to the order’s address which is identified by the index number used in the last listing, using Google Map."},{"lineNumber":277,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":278,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"****"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":284,"author":{"gitID":"ZhangYijiong"},"content":"`path 2` +"},{"lineNumber":285,"author":{"gitID":"ZhangYijiong"},"content":"Shows path to the 2nd order in the queue."},{"lineNumber":286,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":287,"author":{"gitID":"ZhangYijiong"},"content":"* `find Betsy` +"},{"lineNumber":288,"author":{"gitID":"ZhangYijiong"},"content":"`path 1` +"},{"lineNumber":289,"author":{"gitID":"ZhangYijiong"},"content":"Shows path the 1st order in the results of the `find` command."},{"lineNumber":290,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":291,"author":{"gitID":"ZhangYijiong"},"content":"* `l` +"},{"lineNumber":292,"author":{"gitID":"ZhangYijiong"},"content":"`p 2` +"},{"lineNumber":293,"author":{"gitID":"ZhangYijiong"},"content":"Shows path to the 2nd order in the queue."},{"lineNumber":294,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":295,"author":{"gitID":"ZhangYijiong"},"content":"* `f Betsy` +"},{"lineNumber":296,"author":{"gitID":"ZhangYijiong"},"content":"`p 1` +"},{"lineNumber":297,"author":{"gitID":"ZhangYijiong"},"content":"Shows path to the 1st order in the results of the `find` command."},{"lineNumber":298,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":302,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `ext` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"Wuhao-ooo"},"content":"Customers\u0027 data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":308,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":314,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Count the number of orders a customer has placed in the past `[coming in v2.0]`"},{"lineNumber":317,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":318,"author":{"gitID":"ZacZequn"},"content":"// tag::menu[]"},{"lineNumber":319,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d Menu feature"},{"lineNumber":320,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":321,"author":{"gitID":"ZacZequn"},"content":"// end::menu[]"},{"lineNumber":322,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":326,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"Wuhao-ooo"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS o/FOOD_ORDER [t/TAG]...` +"},{"lineNumber":331,"author":{"gitID":"Wuhao-ooo"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 o/Chicken rice t/friend t/colleague`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":333,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":335,"author":{"gitID":"Wuhao-ooo"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [o/FOOD_ORDER] [t/TAG]...` +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":337,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":338,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":340,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":341,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":342,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":343,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":344,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":345,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"ZacZequn":21,"ZhangYijiong":23,"Wuhao-ooo":72,"-":229}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"https://travis-ci.org/CS2103JAN2018-F11-B4/main[image:https://travis-ci.org/CS2103JAN2018-F11-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"* What\u0027s different from https://github.com/se-edu/addressbook-level3[level 3]:"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"** A more sophisticated GUI that includes a list  panel and an in-built Browser."},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"** More test cases, including automated GUI testing."},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"ZhangYijiong":8,"Wuhao-ooo":2,"-":26}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"                + ORDER_DESC_AMY + \"  \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":93,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withOrder(VALID_ORDER_AMY)"},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":100,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":101,"author":{"gitID":"ZacZequn"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ORDER_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":183,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"ZacZequn"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":32,"-":236}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"            //URL test change to manual testing"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":2,"-":152}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"ZhangYijiong"},"content":"        String selectedAddress \u003d getPersonListPanel().getHandleToSelectedCard().getAddress();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"ZhangYijiong"},"content":"            expectedUrl \u003d new URL(BrowserPanel.GOOGLE_MAP_SEARCH_PAGE + selectedAddress.replaceAll(\" \", \"+\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":2,"-":291}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":":repoURL: https://github.com/CS2103-F11-B4/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"By: `Team F11-B4`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::count[]"},{"lineNumber":389,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Customers’ Orders Count feature"},{"lineNumber":390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":391,"author":{"gitID":"Wuhao-ooo"},"content":"The counting of customers’ past orders can be stored in an additional local database. The data can be kept in a local XmlCustomerStats file."},{"lineNumber":392,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":393,"author":{"gitID":"Wuhao-ooo"},"content":"The data file consists of CustomerStats. It can be implemented using a HashMap since each customer is identified by his / her unique phoneNumber and has a counter numOfOrders keep counting the number of orders. So, the keys of the HashMap are the phone number Strings and the values are the order count integers corresponding to the phone number String."},{"lineNumber":394,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":395,"author":{"gitID":"Wuhao-ooo"},"content":"As you can see from the diagram below, these are the interactions among the components during an “add” command. After the Model component raises an AddressBookChangedEvent to update the content of the AddressBook, it raises another CustomerStatsChangedEvent to update the current customer’s order count."},{"lineNumber":396,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":397,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1a.png[width\u003d\"800\"]"},{"lineNumber":398,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":399,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":400,"author":{"gitID":"Wuhao-ooo"},"content":"The diagram below shows how EventsCenter reacts to the event. It finds the customer in the database using the phoneNumber provided and add 1 to the corresponding numOfOrders value."},{"lineNumber":401,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":402,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1b.png[width\u003d\"800\"]"},{"lineNumber":403,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":404,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":405,"author":{"gitID":"Wuhao-ooo"},"content":"To implement this feature, there are some modifications to the existing Model component and Storage component to support the additional data structure."},{"lineNumber":406,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":407,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1c.png[width\u003d\"800\"]"},{"lineNumber":408,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":409,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":410,"author":{"gitID":"Wuhao-ooo"},"content":"As the diagram shown above, besides AddressBook and UserPref, now ModelManager has an additional CustomerStats class. It consists a Data field which has many Phone numbers and numOfOrders counters. Phone numbers and the numOfOrders counters are 1-1 mapped and each pair represent one customer that has placed at least one order before."},{"lineNumber":411,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":412,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1d.png[width\u003d\"800\"]"},{"lineNumber":413,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":414,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":415,"author":{"gitID":"Wuhao-ooo"},"content":"In the Storage component, there is an additional CustomerStatsStorage interface and it is implemented by a XmlCustomerStatsStorage class to read and write the XML file on local machine."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Identification of customers"},{"lineNumber":420,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":421,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 1 (current choice):** Identify a customer by his/her phone number."},{"lineNumber":422,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Easy to implement."},{"lineNumber":423,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: Customers will lose their past orders count if they change phone number."},{"lineNumber":424,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 2:** Identify customers using individual accounts."},{"lineNumber":425,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Customers can still have the counting kept going on even if they change phone numbers, as long as the account does not change."},{"lineNumber":426,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: It requires additional data structures and a server system. Too hard to implement."},{"lineNumber":427,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":428,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store data for orders count"},{"lineNumber":429,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":430,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 1 (current choice):** Use a HashMap to store the phoneNumber-numOfOrders pair."},{"lineNumber":431,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Efficient to search for a given key and update its value."},{"lineNumber":432,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: Information not fully encapsulated."},{"lineNumber":433,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 2:** Use an ArrayList of Customer objects and each Customer object contains a numOfOrders attribute."},{"lineNumber":434,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Better encapsulation of information"},{"lineNumber":435,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: It takes up more space and it requires a much longer time to find a customer and update the counter."},{"lineNumber":436,"author":{"gitID":"Wuhao-ooo"},"content":"// end::count[]"},{"lineNumber":437,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":438,"author":{"gitID":"ZacZequn"},"content":"// tag::menu[]"},{"lineNumber":439,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d Menu feature"},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":441,"author":{"gitID":"ZacZequn"},"content":"All the dishes can be created as an object and then be stored in an additional local database. The data can be kept in a local XmlMenuStorage file."},{"lineNumber":442,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":443,"author":{"gitID":"ZacZequn"},"content":"The data file consists of all the available dishes and drinks provided by the restaurant. Customers can only order those provided. In the case when anything which is not provided by the restaurant but is ordered by customers, exceptions will be thrown. Notification will be given to inform the user that customers should not order this particular dish or drink."},{"lineNumber":444,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":445,"author":{"gitID":"ZacZequn"},"content":"Users will be able to update the data file by adding or deleting dishes objects inside the database."},{"lineNumber":446,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":447,"author":{"gitID":"Wuhao-ooo"},"content":"As you can see from the diagram below, these are the interactions among the components during an “add” command. After the Model component raises an AddressBookChangedEvent to update the content of the AddressBook, it raises another CustomerStatsChangedEvent to update the current customer’s order count."},{"lineNumber":448,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":449,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1a.png[width\u003d\"800\"]"},{"lineNumber":450,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":451,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":452,"author":{"gitID":"Wuhao-ooo"},"content":"The diagram below shows how EventsCenter reacts to the event. It finds the customer in the database using the phoneNumber provided and add 1 to the corresponding numOfOrders value."},{"lineNumber":453,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":454,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1b.png[width\u003d\"800\"]"},{"lineNumber":455,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":456,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":457,"author":{"gitID":"Wuhao-ooo"},"content":"To implement this feature, there are some modifications to the existing Model component and Storage component to support the additional data structure."},{"lineNumber":458,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":459,"author":{"gitID":"ZacZequn"},"content":"image::menuStorage.png[width\u003d\"800\"]"},{"lineNumber":460,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":461,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":462,"author":{"gitID":"Wuhao-ooo"},"content":"As the diagram shown above, besides AddressBook and UserPref, now ModelManager has an additional CustomerStats class. It consists a Data field which has many Phone numbers and numOfOrders counters. Phone numbers and the numOfOrders counters are 1-1 mapped and each pair represent one customer that has placed at least one order before."},{"lineNumber":463,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":464,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1d.png[width\u003d\"800\"]"},{"lineNumber":465,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":466,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":467,"author":{"gitID":"Wuhao-ooo"},"content":"In the Storage component, there is an additional CustomerStatsStorage interface and it is implemented by a XmlCustomerStatsStorage class to read and write the XML file on local machine."},{"lineNumber":468,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Restriction for ordering"},{"lineNumber":472,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":473,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (current choice):** Allow user to input the indexes for dishes and drinks"},{"lineNumber":474,"author":{"gitID":"ZacZequn"},"content":"** Pros: Easy to implement."},{"lineNumber":475,"author":{"gitID":"ZacZequn"},"content":"** Cons: User needs a index reference. Work needs to be done while maintaining the index reference."},{"lineNumber":476,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Allow user to input the names for dishes and drinks"},{"lineNumber":477,"author":{"gitID":"ZacZequn"},"content":"** Pros: user need not to have a index reference."},{"lineNumber":478,"author":{"gitID":"ZacZequn"},"content":"** Cons: It could be time-consuming for typing all the names. There might be typos which make dishes can not be recognised."},{"lineNumber":479,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":480,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Maintaining the menu"},{"lineNumber":481,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":482,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (current choice):** Use lazy deletion."},{"lineNumber":483,"author":{"gitID":"ZacZequn"},"content":"** Pros: Easy to implement."},{"lineNumber":484,"author":{"gitID":"ZacZequn"},"content":"** Cons: It may take a lot of memory space if there are a lot of dishes updated."},{"lineNumber":485,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Delete the dish object."},{"lineNumber":486,"author":{"gitID":"ZacZequn"},"content":"** Pros: Save memory space"},{"lineNumber":487,"author":{"gitID":"ZacZequn"},"content":"** Cons: While adding back those pre-existing dishes, more work need to be done by programmer."},{"lineNumber":488,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":489,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store menu"},{"lineNumber":490,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":491,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (current choice):** Use a HashMap. Index will be the key, Dishes will be the value."},{"lineNumber":492,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Efficient to search for a given key and update its value."},{"lineNumber":493,"author":{"gitID":"ZacZequn"},"content":"** Cons: A index reference need to be generated beforehand."},{"lineNumber":494,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Use a HashMap. Dishes will be the key, prices will be the value."},{"lineNumber":495,"author":{"gitID":"ZacZequn"},"content":"** Pros: It is easy to retrieve the price for each dishes."},{"lineNumber":496,"author":{"gitID":"ZacZequn"},"content":"** Cons: It could be time-consuming for typing all the names. There might be typos which make dishes can not be recognised."},{"lineNumber":497,"author":{"gitID":"ZacZequn"},"content":"// end::menu[]"},{"lineNumber":498,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":499,"author":{"gitID":"ZhangYijiong"},"content":"// tag::PriorityQueue[]"},{"lineNumber":500,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d PriorityAdd feature"},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":502,"author":{"gitID":"ZhangYijiong"},"content":"Each order has a priority level. When adding an order, the user could use count feature on the current customer to see whether the customer has ordered before. If so, user could decide to assign a higher priority to this customer\u0027s order."},{"lineNumber":503,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":504,"author":{"gitID":"ZhangYijiong"},"content":"User might look at other things and decide to give priority to the current order."},{"lineNumber":505,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":506,"author":{"gitID":"ZhangYijiong"},"content":"Orders are added to a priority queue, implemented using Java PriorityQueue class. Orders are queued inside the queue based on their priority level."},{"lineNumber":507,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":508,"author":{"gitID":"ZhangYijiong"},"content":"As you can see from the diagram below, these are the interactions among the components during an “add” command. The Model component raises an AddressBookChangedEvent to update the content of the AddressBook."},{"lineNumber":509,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":510,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1a.png[width\u003d\"800\"]"},{"lineNumber":511,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":512,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":513,"author":{"gitID":"ZhangYijiong"},"content":"The diagram below shows how EventsCenter reacts to the event."},{"lineNumber":514,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":515,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1b.png[width\u003d\"800\"]"},{"lineNumber":516,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":517,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":518,"author":{"gitID":"Wuhao-ooo"},"content":"To implement this feature, there are some modifications to the existing Model component and Storage component to support the additional data structure."},{"lineNumber":519,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":520,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1c.png[width\u003d\"800\"]"},{"lineNumber":521,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":522,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":523,"author":{"gitID":"Wuhao-ooo"},"content":"image::figure3.5.1d.png[width\u003d\"800\"]"},{"lineNumber":524,"author":{"gitID":"Wuhao-ooo"},"content":"(To be updated)"},{"lineNumber":525,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Determination of priority level"},{"lineNumber":529,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":530,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1 (current choice):** Determined based on the customers\u0027 past order count."},{"lineNumber":531,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Easy to implement."},{"lineNumber":532,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: It is difficult to decide which number should be the benchmark for a customer to given priority."},{"lineNumber":533,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2:** Determined based different things such as past order count, distance, price of the order."},{"lineNumber":534,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: It would be a fairer system to decide priority."},{"lineNumber":535,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: It might requires additional judging system to decide priority level. Difficult to implement."},{"lineNumber":536,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":537,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store data for orders"},{"lineNumber":538,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":539,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1 (current choice):** Use Java PriorityQueue"},{"lineNumber":540,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Efficient to add an order."},{"lineNumber":541,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: Might make edit order command difficult due to abstraction of queue."},{"lineNumber":542,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2:** Use an ArrayList of Order objects and manually maintain their order."},{"lineNumber":543,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Easy to access and edit orders."},{"lineNumber":544,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: It defeats the purposes of having a queue and add command might be difficult as we need to manually find correct position of insertion."},{"lineNumber":545,"author":{"gitID":"ZhangYijiong"},"content":"// end::PriorityQueue[]"},{"lineNumber":546,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":547,"author":{"gitID":"ZhangYijiong"},"content":"// tag::Path[]"},{"lineNumber":548,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Path feature"},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":550,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":551,"author":{"gitID":"ZhangYijiong"},"content":"Path command uses similar implementation as Select command."},{"lineNumber":552,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":553,"author":{"gitID":"ZhangYijiong"},"content":"As you can see from the diagram below, these are the interactions among the components during an “Path” command. The Model component raises a PersonPanelPathChangedEvent."},{"lineNumber":554,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":555,"author":{"gitID":"ZhangYijiong"},"content":"image::figure3.8.1a.png[width\u003d\"800\"]"},{"lineNumber":556,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":557,"author":{"gitID":"ZhangYijiong"},"content":"The diagram below shows how EventsCenter reacts to the event."},{"lineNumber":558,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":559,"author":{"gitID":"ZhangYijiong"},"content":"image::figure3.8.1b.png[width\u003d\"800\"]"},{"lineNumber":560,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":561,"author":{"gitID":"ZhangYijiong"},"content":"To implement this feature, there are some modifications to the existing Model component and UI component."},{"lineNumber":562,"author":{"gitID":"ZhangYijiong"},"content":"// end::Path[]"},{"lineNumber":563,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":569,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":574,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":587,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":588,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":589,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":592,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":602,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":607,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":627,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":628,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":629,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":630,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":632,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":633,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":634,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":635,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":639,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":642,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":659,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":666,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":667,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":668,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":673,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":674,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":677,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":692,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":697,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":700,"author":{"gitID":"-"},"content":"+"},{"lineNumber":701,"author":{"gitID":"-"},"content":"****"},{"lineNumber":702,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":705,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":707,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":708,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":709,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":710,"author":{"gitID":"-"},"content":"****"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":718,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":721,"author":{"gitID":"-"},"content":"+"},{"lineNumber":722,"author":{"gitID":"-"},"content":"****"},{"lineNumber":723,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":724,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":726,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":727,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":728,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":729,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":730,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":731,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":732,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":733,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":734,"author":{"gitID":"-"},"content":"****"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":742,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":746,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":748,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"+"},{"lineNumber":750,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":751,"author":{"gitID":"-"},"content":"+"},{"lineNumber":752,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":753,"author":{"gitID":"-"},"content":"+"},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":758,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":759,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":760,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":761,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":762,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":763,"author":{"gitID":"-"},"content":"****"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":766,"author":{"gitID":"-"},"content":"+"},{"lineNumber":767,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":768,"author":{"gitID":"-"},"content":"+"},{"lineNumber":769,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"+"},{"lineNumber":771,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":772,"author":{"gitID":"-"},"content":"+"},{"lineNumber":773,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":774,"author":{"gitID":"-"},"content":"+"},{"lineNumber":775,"author":{"gitID":"-"},"content":"****"},{"lineNumber":776,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":777,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":779,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":780,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":781,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":782,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":783,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":784,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":785,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":786,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":787,"author":{"gitID":"-"},"content":"****"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":791,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":792,"author":{"gitID":"-"},"content":"+"},{"lineNumber":793,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"+"},{"lineNumber":795,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":796,"author":{"gitID":"-"},"content":"+"},{"lineNumber":797,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":798,"author":{"gitID":"-"},"content":"+"},{"lineNumber":799,"author":{"gitID":"-"},"content":"****"},{"lineNumber":800,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":801,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":802,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":803,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":804,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":805,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":806,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":807,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":808,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":809,"author":{"gitID":"-"},"content":"****"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":817,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":820,"author":{"gitID":"-"},"content":"+"},{"lineNumber":821,"author":{"gitID":"-"},"content":"****"},{"lineNumber":822,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":823,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":824,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":825,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":826,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":827,"author":{"gitID":"-"},"content":"****"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":837,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":838,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":843,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":844,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":845,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":850,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":855,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":860,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":863,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":868,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":869,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":874,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":875,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":876,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":879,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":884,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":891,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":896,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":903,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":908,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":909,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":912,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":923,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":928,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":931,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":942,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":957,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":958,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is targeted at restaurants, especially the small ones,  which want to have a system to keep track customers’ orders of delivery."},{"lineNumber":959,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":960,"author":{"gitID":"Wuhao-ooo"},"content":"A restaurant can have hundreds of orders a day and it’s quite troublesome for the restaurant to manually keep track all customer information, including their names, contact numbers, addresses, orders and expected time of delivery etc."},{"lineNumber":961,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":962,"author":{"gitID":"Wuhao-ooo"},"content":"Hence they need a software to store all personal information and order information in an organised manner."},{"lineNumber":963,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"Wuhao-ooo"},"content":"* Owns a small-medium restaurant which provides delivery services/ big restaurants"},{"lineNumber":968,"author":{"gitID":"Wuhao-ooo"},"content":"* Wants to have a database system for orders of deliveries from their customers"},{"lineNumber":969,"author":{"gitID":"Wuhao-ooo"},"content":"* Not currently cooperating with delivery apps"},{"lineNumber":970,"author":{"gitID":"Wuhao-ooo"},"content":"* Receives orders of food via phone (hotline)"},{"lineNumber":971,"author":{"gitID":"Wuhao-ooo"},"content":"* Knows how to use CLI and prefer typing over using mouse"},{"lineNumber":972,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"Wuhao-ooo"},"content":"*Value proposition*: Help restaurants maintain all the information of customers and a queue for delivery services"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"Wuhao-ooo"},"content":"*Feature contribution*"},{"lineNumber":977,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":978,"author":{"gitID":"Wuhao-ooo"},"content":"* Wu Hao"},{"lineNumber":979,"author":{"gitID":"Wuhao-ooo"},"content":"- Minor enhancement: Add alias to each command +"},{"lineNumber":980,"author":{"gitID":"Wuhao-ooo"},"content":"In case the restaurant has to handle many orders during lunch time, this feature helps restaurant owners to manage"},{"lineNumber":981,"author":{"gitID":"Wuhao-ooo"},"content":"the orders faster using shortcuts for commands."},{"lineNumber":982,"author":{"gitID":"Wuhao-ooo"},"content":"- Minor enhancement: Add a light colour theme +"},{"lineNumber":983,"author":{"gitID":"Wuhao-ooo"},"content":"An yellow-based light colour theme is now available as an alternative to the default dark grey colour theme. This"},{"lineNumber":984,"author":{"gitID":"Wuhao-ooo"},"content":"is to give the users a warm and comfortable feeling when they are doing their busy work in the restaurant."},{"lineNumber":985,"author":{"gitID":"Wuhao-ooo"},"content":"- Major enhancement: Add a customers\u0027 past orders count feature +"},{"lineNumber":986,"author":{"gitID":"Wuhao-ooo"},"content":"The restaurant can identify the frequent and loyal customers to give discounts."},{"lineNumber":987,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":988,"author":{"gitID":"ZacZequn"},"content":"* Zhang Zequn"},{"lineNumber":989,"author":{"gitID":"ZacZequn"},"content":"- Minor enhancement: Add colours to different tags +"},{"lineNumber":990,"author":{"gitID":"ZacZequn"},"content":"Same tags will be assigned the same colours which makes the differentiation of tags clearer."},{"lineNumber":991,"author":{"gitID":"ZacZequn"},"content":"- Minor enhancement: Add Halal/Non-halal and Vegetarian/Non-vegetarian features +"},{"lineNumber":992,"author":{"gitID":"ZacZequn"},"content":"Halal/Non-halal and Vegetarian/Non-vegetarian features now are available for Add command. Since these two features"},{"lineNumber":993,"author":{"gitID":"ZacZequn"},"content":"are optional, if no input is given, the default value is Non-halal and Non-vegetarian."},{"lineNumber":994,"author":{"gitID":"ZacZequn"},"content":"- Major enhancement: Add a menu (storage for all the dishes customers can order) +"},{"lineNumber":995,"author":{"gitID":"ZacZequn"},"content":"The restaurant can modify the menu and customers can only order what are on the menu."},{"lineNumber":996,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":997,"author":{"gitID":"ZhangYijiong"},"content":"* Zhang Yijiong"},{"lineNumber":998,"author":{"gitID":"ZhangYijiong"},"content":"- Minor enhancement: Add back up method in storage +"},{"lineNumber":999,"author":{"gitID":"ZhangYijiong"},"content":"Users are able to back up the address book in a different location."},{"lineNumber":1000,"author":{"gitID":"ZhangYijiong"},"content":"- Minor enhancement: Add find location feature +"},{"lineNumber":1001,"author":{"gitID":"ZhangYijiong"},"content":"When clicking one particular person in the addressbook, the browser on the right will automatically show that person\u0027s"},{"lineNumber":1002,"author":{"gitID":"ZhangYijiong"},"content":"address using google map."},{"lineNumber":1003,"author":{"gitID":"ZhangYijiong"},"content":"- Major enhancement: Implement a priority queue structure to process orders from add method + Create new GUI for add command"},{"lineNumber":1004,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1012,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1013,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |new user |view instructions for commands | get familiar with CLI"},{"lineNumber":1014,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1015,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |retrieve a particular customer’s information | know whether he/she is a regular customer"},{"lineNumber":1016,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1017,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check the current status of a particular customer’s order | answer the customer’s query"},{"lineNumber":1018,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1019,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |record down the customer’s order easily |"},{"lineNumber":1020,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1021,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check how much the customer spend | decide whether should give him/her a promotional price"},{"lineNumber":1022,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1023,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know how many regular customers the restaurant has per day | can know how much ingredients should be prepared"},{"lineNumber":1024,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1025,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know next order to be delivered | send delivery courier to the right place in time"},{"lineNumber":1026,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1027,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |remove an order | complete an order when it’s delivered"},{"lineNumber":1028,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1029,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check how many orders are still yet to be delivered | speed up preparation"},{"lineNumber":1030,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1031,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |cancel an order | no longer need to prepare for that order"},{"lineNumber":1032,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1033,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |edit the order |"},{"lineNumber":1034,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1035,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the courier spoil the order |reorder for the customer"},{"lineNumber":1036,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1037,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know how many orders need to be completed for a day in the future|"},{"lineNumber":1038,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1039,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |update the customer’s delivering address and personal phone number|"},{"lineNumber":1040,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1041,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the customer has exact amount of cash | prepare the change in advance"},{"lineNumber":1042,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1043,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the customer has additional requirements|"},{"lineNumber":1044,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1045,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |get feedback rating from the customer |improve the service next time"},{"lineNumber":1046,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1047,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |see the address of current order in the map|"},{"lineNumber":1048,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1049,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |check customer\u0027s ratings | decide whether should take the order"},{"lineNumber":1050,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1051,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |check revenue and cost of the day | calculate profit"},{"lineNumber":1052,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1053,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know which dishes are more favoured by customers | adjust the menu accordingly"},{"lineNumber":1054,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1055,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the maximum number of orders during the peak hour |know how many delivery couriers should be employed"},{"lineNumber":1056,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1057,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the peak hours everyday| facilitate manpower"},{"lineNumber":1058,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1059,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |retrieve personal information from historical data if the customer has placed an order before |"},{"lineNumber":1060,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1061,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the customer’s frequently-order dishes |create a specialised menu for him/her"},{"lineNumber":1062,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1063,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know when the customer ordered for his/her first time| send gifts for anniversary"},{"lineNumber":1064,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1065,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |see the orders with addresses close to one another |deliver their orders together"},{"lineNumber":1066,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1067,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |see the optimal route the courier can take | assign several orders to a courier so that he can deliver them all within one trip"},{"lineNumber":1068,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1069,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |know the weather condition of an region | inform the customer earlier if the delivery cannot reach destination in time"},{"lineNumber":1070,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1071,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |know the traffic conditions of the region near the customer’s place |inform the customer earlier if the delivery cannot reach destination in time"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Delivery` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1097,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1104,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add an order"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"1.  User request to add an order"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"2.  Delivery adds the offer to the current queue"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"3.  Delivery shows a list of all current orders"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"* 1a. The input phone number is invalid"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an error message indicating the correct phone number format"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"* 1b. The input address cannot be found"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"** 1b1. Delivery shows an error message indicating the current address is invalid"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"* 1c. The food ordered is sold out / not available"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"** 1c1. Delivery shows an error message indicating the food order cannot be placed successfully"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add an order with priority"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"1.  User request to add an order (prioritised)"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"2.  Delivery decides what is the priority"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"3.  Delivery adds the offer to the current queue (cut queue)"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"4.  Delivery shows a list of all current orders"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: delete an order"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"1.  User request to delete an order"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"2.  Check the status of the order e.g. unprepared, preparing or delivering"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"3.  Delivery deletes the offer from the queue containing the order"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"4.  Delivery shows a list of all current orders"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"* 1a. The food ordered is prepared"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an message indicating the customer should be charged for the price of the food ordered"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"* 1b. The food ordered is delivering"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"** 1b1. Delivery shows an message indicating the customer should be charged for the price of the food ordered and the delivery fee"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a specific time"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"1.  User request to query a specific time"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of all orders at that time"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a specific location"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"1.  User request to query a specific location"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of all orders that are going the location"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a customer"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"1.  User request to query a specific customer"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of information of the customer"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query revenue"},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"1.  User request to query revenue of a day"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"2.  Delivery shows the revenue"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"* 1a. The day is sometime in the future"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an message indicating that feature cannot be used on future time."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":".  Should be able to work offline"},{"lineNumber":1228,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 orders in working queue and 5000 persons in historical database"},{"lineNumber":1229,"author":{"gitID":"-"},"content":".  Should be able to remain open for a long period of time while not taking up more than 100MB of RAM"},{"lineNumber":1230,"author":{"gitID":"-"},"content":".  Should cater to both IT proficient people and those who are new to Command Line Interface"},{"lineNumber":1231,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":1232,"author":{"gitID":"-"},"content":".  Should support English system"},{"lineNumber":1233,"author":{"gitID":"-"},"content":".  Should be able to retain information in event of crash or force shutdown."},{"lineNumber":1234,"author":{"gitID":"-"},"content":".  Should respond to user command within 2 seconds."},{"lineNumber":1235,"author":{"gitID":"-"},"content":".  View should fit the screen of any computer screen size."},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[[personal-information]]Personal information::"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"Personal information refers to the personal particulars of a customer, including his/her name, contact number, address and email address."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"[[meal-order]] : Meal order information::"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"Meal order information refers to which dishes are ordered, what time it is ordered, what time it should be delivered, the total money of the dishes"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"[[gui]] GUI::"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"GUI stands for Graphical User Interface. It is a type of user interface that allows user to interact with the software through graphical icons and visualisation."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"[[cli]]CLI::"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"CLI stands for Command-line interface. It is a way for the user to give commands to the computer program in the form of successive lines of text"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1288,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1294,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1304,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1306,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1308,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"ZacZequn":44,"ZhangYijiong":53,"Wuhao-ooo":172,"-":1050}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.GOOGLE_MAP_SEARCH_PAGE"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"                + ALICE.getAddress().getGoogleMapSearchForm());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        //assertEquals(expectedPersonUrl, new URL(browserPanelHandle.getLoadedUrl()"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        //.toString().substring(0, browserPanelHandle.getLoadedUrl().toString().indexOf(\"?\"))));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":4,"-":46}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_ORDER \u003d \"Chicken Rice\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"                null, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"                VALID_NAME, INVALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"                VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":137,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":7,"-":143}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":59,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":60,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":61,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":66,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":73,"author":{"gitID":"Wuhao-ooo"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":82,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":90,"author":{"gitID":"Wuhao-ooo"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":113,"author":{"gitID":"Wuhao-ooo"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":125,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":126,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":127,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":144,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":145,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":163,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":164,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":165,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":177,"author":{"gitID":"Wuhao-ooo"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommandAlias() throws Exception {"},{"lineNumber":189,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommandAlias() throws Exception {"},{"lineNumber":201,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":40,"-":178}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AMY;"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_BOB).withOrder(VALID_ORDER_BOB)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"        // multiple orders - last order accepted"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_AMY + ORDER_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"                .withOrder(VALID_ORDER_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":"                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"        // missing order prefix"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ORDER_BOB + EMAIL_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":127,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ORDER_BOB + VALID_EMAIL_BOB"},{"lineNumber":128,"author":{"gitID":"ZacZequn"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":141,"author":{"gitID":"ZacZequn"},"content":"        // invalid order"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB +  PHONE_DESC_BOB + INVALID_ORDER_DESC + EMAIL_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":158,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ORDER_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"ZacZequn"},"content":"                        + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"ZacZequn"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":59,"-":107}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    public static final String VALID_ORDER_AMY \u003d \"Chicken Rice\";"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public static final String VALID_ORDER_BOB \u003d \"Chicken Rice\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_DESC_AMY \u003d \" \" + PREFIX_ORDER + VALID_ORDER_AMY;"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_DESC_BOB \u003d \" \" + PREFIX_ORDER + VALID_ORDER_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"    public static final String INVALID_ORDER_DESC \u003d \" \" + PREFIX_ORDER; // empty string not allowed for order"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":106,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":6,"-":156}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"        XmlCustomerStatsStorage customerStatsStorage \u003d new XmlCustomerStatsStorage(getTempFilePath(\"cs\"));"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, customerStatsStorage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":80,"author":{"gitID":"Wuhao-ooo"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"), new XmlCustomerStatsStorage(\"dummy\"));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":3,"-":99}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_ORDER \u003d \"Chicken+Rice\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_HALAL \u003d \"Halala\";"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_VEGETARIAN \u003d \"Vegetarian1\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_ORDER \u003d BENSON.getOrder().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_HALAL \u003d BENSON.getHalal().toString();"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_VEGETARIAN \u003d BENSON.getVegetarian().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidOrder_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_ORDER, VALID_EMAIL,"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Order.MESSAGE_ORDER_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullOrder_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_EMAIL,"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":97,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, INVALID_EMAIL,"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, null,"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"                        INVALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":129,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":"                null, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidHalal_throwsIllegalValueException() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, INVALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Halal.MESSAGE_HALAL_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullHalal_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Halal.class.getSimpleName());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidVegetarian_throwsIllegalValueException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":156,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, INVALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullVegetarian_throwsIllegalValueException() {"},{"lineNumber":163,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":164,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, null, VALID_TAGS);"},{"lineNumber":165,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Vegetarian.class.getSimpleName());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":175,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER, VALID_EMAIL,"},{"lineNumber":176,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, invalidTags);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":55,"-":125}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        descriptor.setOrder(person.getOrder());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"    public EditPersonDescriptorBuilder withOrder(String order) {"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        descriptor.setOrder(new Order(order));"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":7,"-":90}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        sb.append(PREFIX_ORDER + person.getOrder().fullOrder + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_ORDER \u003d \"Chicken Rice\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_HALAL \u003d \"Non-halal\";"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_VEGETARIAN \u003d \"Non-vegetarian\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private Order order;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    private Halal halal;"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    private Vegetarian vegetarian;"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        order \u003d new Order(DEFAULT_ORDER);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d new Halal(DEFAULT_HALAL);"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d new Vegetarian(DEFAULT_VEGETARIAN);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"        order \u003d personToCopy.getOrder();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d personToCopy.getHalal();"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d personToCopy.getVegetarian();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Order} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withOrder(String order) {"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d new Order(order);"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Halal} of the {@code Person} that we are building."},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withHalal(String halal) {"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d new Halal(halal);"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Vegetarian} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withVegetarian(String vegetarian) {"},{"lineNumber":126,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d new Vegetarian(vegetarian);"},{"lineNumber":127,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":132,"author":{"gitID":"ZacZequn"},"content":"        return new Person(name, phone, order, email, address, halal, vegetarian, tags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":42,"-":93}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.PersonPanelPathChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String GOOGLE_MAP_SEARCH_PAGE \u003d"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"            \"https://www.google.com.sg/maps/search/\";"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String GOOGLE_MAP_PATH_SEARCH_PAGE \u003d"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"            \"https://www.google.com.sg/maps/dir/\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadGoogleMapAddressPage(Person person) {"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(GOOGLE_MAP_SEARCH_PAGE + person.getAddress().getGoogleMapSearchForm());"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadGoogleMapPathPage(Person person) {"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(GOOGLE_MAP_PATH_SEARCH_PAGE + Address.ADDRESS_USER_OWN"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"                + \"/\" + person.getAddress().getGoogleMapSearchForm());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        loadGoogleMapAddressPage(event.getNewSelection().person);"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"    private void handlePersonPanelPathChangedEvent(PersonPanelPathChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"        loadGoogleMapPathPage(event.getNewSelection().person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":19,"-":68}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"-":86}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"                        PREFIX_HALAL, PREFIX_VEGETARIAN, PREFIX_TAG);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_EMAIL, PREFIX_ADDRESS)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"            Order order \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"            Optional\u003cHalal\u003e halalOptional \u003d ParserUtil.parseHalal(argMultimap.getValue(PREFIX_HALAL));"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"            Halal halal \u003d halalOptional.isPresent() ? halalOptional.get() : new Halal(null);"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"            Optional\u003cVegetarian\u003e vegetarianOptional \u003d"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"                    ParserUtil.parseVegetarian(argMultimap.getValue(PREFIX_VEGETARIAN));"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"            Vegetarian vegetarian \u003d vegetarianOptional.isPresent() ? vegetarianOptional.get() : new Vegetarian(null);"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"            Person person \u003d new Person(name, phone, order, email, address, halal, vegetarian, tagList);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":19,"-":62}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Wuhao-ooo"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Wuhao-ooo"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Wuhao-ooo"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"Wuhao-ooo"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"        case PathCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        case PathCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Wuhao-ooo"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"Wuhao-ooo"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Wuhao-ooo"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"Wuhao-ooo"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"Wuhao-ooo"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Wuhao-ooo"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"Wuhao-ooo"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Wuhao-ooo"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":7,"Wuhao-ooo":12,"-":116}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelPathChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"public class PersonPanelPathChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"    public PersonPanelPathChangedEvent(PersonCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":6,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_HALAL \u003d new Prefix(\"h/\");"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_VEGETARIAN \u003d new Prefix(\"v/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":97,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String order} into a {@code Order}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code order} is invalid."},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"    public static Order parseOrder(String order) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"        String trimmedOrder \u003d order.trim();"},{"lineNumber":106,"author":{"gitID":"ZacZequn"},"content":"        if (!Order.isValidOrder(trimmedOrder)) {"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"ZacZequn"},"content":"        return new Order(trimmedOrder);"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e order} into an {@code Optional\u003cOrder\u003e} if {@code order} is present."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cOrder\u003e parseOrder(Optional\u003cString\u003e order) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        return order.isPresent() ? Optional.of(parseOrder(order.get())) : Optional.empty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String halal} into an {@code Halal}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code halal} is invalid."},{"lineNumber":174,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"ZacZequn"},"content":"    public static Halal parseHalal(String halal) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(halal);"},{"lineNumber":177,"author":{"gitID":"ZacZequn"},"content":"        String trimmedHalal \u003d halal.trim();"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":"        if (!Halal.isValidHalal(trimmedHalal)) {"},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Halal.MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"ZacZequn"},"content":"        return new Halal(trimmedHalal);"},{"lineNumber":182,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":184,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e halal} into an {@code Optional\u003cHalal\u003e} if {@code halal} is present."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cHalal\u003e parseHalal(Optional\u003cString\u003e halal) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(halal);"},{"lineNumber":190,"author":{"gitID":"ZacZequn"},"content":"        return halal.isPresent() ? Optional.of(parseHalal(halal.get())) : Optional.empty();"},{"lineNumber":191,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":193,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String vegetarian} into an {@code Vegetarian}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code vegetarian} is invalid."},{"lineNumber":198,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"ZacZequn"},"content":"    public static Vegetarian parseVegetarian(String vegetarian) throws IllegalValueException {"},{"lineNumber":200,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(vegetarian);"},{"lineNumber":201,"author":{"gitID":"ZacZequn"},"content":"        String trimmedVegetarian \u003d vegetarian.trim();"},{"lineNumber":202,"author":{"gitID":"ZacZequn"},"content":"        if (!Vegetarian.isValidVegetarian(trimmedVegetarian)) {"},{"lineNumber":203,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"ZacZequn"},"content":"        return new Vegetarian(trimmedVegetarian);"},{"lineNumber":206,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":208,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e vegetarian} into an {@code Optional\u003cVegetarian\u003e}"},{"lineNumber":210,"author":{"gitID":"ZacZequn"},"content":"     * if {@code vegetarian} is present."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cVegetarian\u003e parseVegetarian(Optional\u003cString\u003e vegetarian) throws IllegalValueException {"},{"lineNumber":214,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(vegetarian);"},{"lineNumber":215,"author":{"gitID":"ZacZequn"},"content":"        return vegetarian.isPresent() ? Optional.of(parseVegetarian(vegetarian.get())) : Optional.empty();"},{"lineNumber":216,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":64,"-":180}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"                        PREFIX_HALAL, PREFIX_VEGETARIAN, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER)).ifPresent(editPersonDescriptor::setOrder);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseHalal(argMultimap.getValue(PREFIX_HALAL)).ifPresent(editPersonDescriptor::setHalal);"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseVegetarian(argMultimap.getValue(PREFIX_VEGETARIAN)).ifPresent("},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"                    editPersonDescriptor::setVegetarian);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":9,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_ORDER + \"ORDER \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_HALAL + \"HALAL] \""},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_VEGETARIAN + \"VEGETARIAN] \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_ORDER + \"Chicken Rice \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_HALAL + \"Halal \""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_VEGETARIAN + \"Vegetarian \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":9,"Wuhao-ooo":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"rd\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":38}},{"path":"src/main/java/seedu/address/commons/events/model/CustomerStatsChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"/** Indicates the CustomerStats in the model has changed*/"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"public class CustomerStatsChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"    public final ReadOnlyCustomerStats data;"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStatsChangedEvent(ReadOnlyCustomerStats data) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"        HashMap\u003cString, Integer\u003e ordersCount \u003d data.getOrdersCount();"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"        return ordersCount.toString();"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":16,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ext\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_ORDER + \"ORDER] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_HALAL + \"HALAL] \""},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_VEGETARIAN + \"VEGETARIAN] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        Order updatedOrder \u003d editPersonDescriptor.getOrder().orElse(personToEdit.getOrder());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"        Halal updatedHalal \u003d editPersonDescriptor.getHalal().orElse(personToEdit.getHalal());"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"        Vegetarian updatedVegetarian \u003d editPersonDescriptor.getVegetarian().orElse(personToEdit.getVegetarian());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"ZacZequn"},"content":"        return new Person(updatedName, updatedPhone, updatedOrder, updatedEmail, updatedAddress,"},{"lineNumber":126,"author":{"gitID":"ZacZequn"},"content":"                updatedHalal, updatedVegetarian, updatedTags);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"        private Order order;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":158,"author":{"gitID":"ZacZequn"},"content":"        private Halal halal;"},{"lineNumber":159,"author":{"gitID":"ZacZequn"},"content":"        private Vegetarian vegetarian;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":171,"author":{"gitID":"ZacZequn"},"content":"            setOrder(toCopy.order);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":174,"author":{"gitID":"ZacZequn"},"content":"            setHalal(toCopy.halal);"},{"lineNumber":175,"author":{"gitID":"ZacZequn"},"content":"            setVegetarian(toCopy.vegetarian);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":181,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":183,"author":{"gitID":"ZacZequn"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.order, this.email, this.address,"},{"lineNumber":184,"author":{"gitID":"ZacZequn"},"content":"                    this.halal, this.vegetarian, this.tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"ZacZequn"},"content":"        public void setOrder(Order order) {"},{"lineNumber":204,"author":{"gitID":"ZacZequn"},"content":"            this.order \u003d order;"},{"lineNumber":205,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":207,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cOrder\u003e getOrder() {"},{"lineNumber":208,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(order);"},{"lineNumber":209,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"ZacZequn"},"content":"        public void setHalal(Halal halal) {"},{"lineNumber":228,"author":{"gitID":"ZacZequn"},"content":"            this.halal \u003d halal;"},{"lineNumber":229,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":231,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cHalal\u003e getHalal() {"},{"lineNumber":232,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(halal);"},{"lineNumber":233,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":235,"author":{"gitID":"ZacZequn"},"content":"        public void setVegetarian(Vegetarian vegetarian) {"},{"lineNumber":236,"author":{"gitID":"ZacZequn"},"content":"            this.vegetarian \u003d vegetarian;"},{"lineNumber":237,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":239,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cVegetarian\u003e getVegetarian() {"},{"lineNumber":240,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(vegetarian);"},{"lineNumber":241,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":246,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":253,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":254,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":255,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":277,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getOrder().equals(e.getOrder())"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":280,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getHalal().equals(e.getHalal())"},{"lineNumber":281,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getVegetarian().equals(e.getVegetarian())"},{"lineNumber":282,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":50,"Wuhao-ooo":1,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ud\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":36}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, CustomerStatsStorage {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    String getCustomerStatsFilePath();"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the current CustomerStats to the hard disk."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"    void handleCustomerStatsChangedEvent(CustomerStatsChangedEvent csce);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":9,"-":40}},{"path":"src/main/java/seedu/address/logic/parser/PathCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommandParser implements Parser\u003cPathCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the PathCommand"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an PathCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public PathCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PathCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":14,"-":15}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    private String order;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    private String halal;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"    private String vegetarian;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    public XmlAdaptedPerson(String name, String phone, String order, String email, String address,"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"                            String halal, String vegetarian, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d order;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d halal;"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d vegetarian;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"        order \u003d source.getOrder().fullOrder;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d source.getHalal().value;"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d source.getVegetarian().value;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"        if (this.order \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"        if (!Order.isValidOrder(this.order)) {"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"        final Order order \u003d new Order(this.order);"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"        if (this.halal \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Halal.class.getSimpleName()));"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"        if (!Halal.isValidHalal(this.halal)) {"},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Halal.MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        final Halal halal \u003d new Halal(this.halal);"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"        if (this.vegetarian \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"                    Vegetarian.class.getSimpleName()));"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"        if (!Vegetarian.isValidVegetarian(this.vegetarian)) {"},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"        final Vegetarian vegetarian \u003d new Vegetarian(this.vegetarian);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"        return new Person(name, phone, order, email, address, halal, vegetarian, tags);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":39,"-":138}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":" * Stores addressbook data and customerstats data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the given customer stats data to the specified file."},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"    public static void saveCustomerDataToFile(File file, XmlSerializableCustomerStats customerStats)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"            XmlUtil.saveDataToFile(file, customerStats);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns customer stats in the file or an empty address book"},{"lineNumber":53,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Wuhao-ooo"},"content":"    public static XmlSerializableCustomerStats loadCustomerDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"Wuhao-ooo"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableCustomerStats.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":10,"-":53}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":" * Manages storage of AddressBook data and CustomerStats data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    private CustomerStatsStorage customerStatsStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"                          UserPrefsStorage userPrefsStorage,"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"                          CustomerStatsStorage customerStatsStorage) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"        this.customerStatsStorage \u003d customerStatsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void backUpAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        addressBookStorage.backUpAddressBook(addressBook);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Wuhao-ooo"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomerStats methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException {"},{"lineNumber":111,"author":{"gitID":"Wuhao-ooo"},"content":"        saveCustomerStats(customerStats, customerStatsStorage.getCustomerStatsFilePath());"},{"lineNumber":112,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":114,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":117,"author":{"gitID":"Wuhao-ooo"},"content":"        customerStatsStorage.saveCustomerStats(customerStats, filePath);"},{"lineNumber":118,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":120,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"Wuhao-ooo"},"content":"    @Subscribe"},{"lineNumber":122,"author":{"gitID":"Wuhao-ooo"},"content":"    public void handleCustomerStatsChangedEvent(CustomerStatsChangedEvent event) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"Wuhao-ooo"},"content":"            saveCustomerStats(event.data);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":25,"-":105}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.storage.CustomerStatsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.storage.XmlCustomerStatsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":67,"author":{"gitID":"Wuhao-ooo"},"content":"        CustomerStatsStorage customerStatsStorage \u003d new XmlCustomerStatsStorage(userPrefs.getCustomerStatsFilePath());"},{"lineNumber":68,"author":{"gitID":"Wuhao-ooo"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, customerStatsStorage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":138,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":166,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":4,"-":211}},{"path":"src/main/java/seedu/address/model/ReadOnlyCustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":" * Unmodifiable view of customers statistics"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"public interface ReadOnlyCustomerStats {"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns a copy of the data in CustomerStats."},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"     * Modifications on this copy will not affect the original CustomerStats data"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"    HashMap\u003cString, Integer\u003e getOrdersCount();"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":15}},{"path":"src/main/java/seedu/address/logic/commands/PathCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.PersonPanelPathChangedEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"path\";"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"p\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Show the path to the address of the person identified \""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            + \"by the index number used in the last person listing\\n\""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\";"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_PATH_PERSON_SUCCESS \u003d \"Path to Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public PathCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        PersonCard personToFindPath \u003d new PersonCard("},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"                lastShownList.get(targetIndex.getZeroBased()), targetIndex.getOneBased());"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        EventsCenter.getInstance().post(new PersonPanelPathChangedEvent(personToFindPath));"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_PATH_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof PathCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.targetIndex.equals(((PathCommand) other).targetIndex)); // state check"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":26,"-":31}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"), new Email(\"royb@example.com\"),"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":21,"-":55}},{"path":"src/main/java/seedu/address/storage/CustomerStatsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":" * Represents a storage for customers\u0027 orders count."},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"public interface CustomerStatsStorage {"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns the file path of the data file."},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    String getCustomerStatsFilePath();"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the given {@link ReadOnlyCustomerStats} to the storage."},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"     * @param customerStats cannot be null."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException;"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"     * @see #saveCustomerStats(ReadOnlyCustomerStats)"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":24,"-":5}},{"path":"src/main/java/seedu/address/model/dish/exceptions/DishNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish.exceptions;"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":" * Signals that the operation is unable to find the specified dish."},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"public class DishNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":7}},{"path":"src/main/java/seedu/address/storage/XmlSerializableCustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":" * An Immutable CustomerStats that is serializable to XML format"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"@XmlRootElement(name \u003d \"customerstats\")"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"public class XmlSerializableCustomerStats {"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    @XmlElement"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"    private HashMap\u003cString, Integer\u003e orderCount;"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"     * Creates an empty XmlSerializableCustomerStats."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlSerializableCustomerStats() {"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"        orderCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"     * Conversion"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlSerializableCustomerStats(ReadOnlyCustomerStats src) {"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"        this();"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"        orderCount \u003d src.getOrdersCount();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStats toModelType() {"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"        CustomerStats customerStats \u003d new CustomerStats();"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"        customerStats.setOrdersCount(orderCount);"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStats;"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":33,"-":15}},{"path":"src/main/java/seedu/address/storage/XmlCustomerStatsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":" * A class to access CustomerStats data stored as an xml file on the hard disk."},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"public class XmlCustomerStatsStorage implements CustomerStatsStorage {"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlCustomerStatsStorage.class);"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"    private String filePath;"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlCustomerStatsStorage(String filePath) {"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"        return filePath;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException {"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"        saveCustomerStats(customerStats, filePath);"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"     * Similar to {@link #saveCustomerStats(ReadOnlyCustomerStats)}"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException {"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"        requireNonNull(customerStats);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"        XmlFileStorage.saveCustomerDataToFile(file, new XmlSerializableCustomerStats(customerStats));"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":34,"-":13}},{"path":"src/main/java/seedu/address/model/dish/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":" * Represents a Dish\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"            \"Dish names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid dish name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":4,"-":55}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String ADDRESS_USER_OWN \u003d \"NUS\";"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"     * Change address into a form that will be used by Google Map"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    public String getGoogleMapSearchForm() {"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        return this.value.replaceAll(\" \", \"+\");"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":10,"-":58}},{"path":"src/main/java/seedu/address/model/dish/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s price number in the address book."},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"public class Price {"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"            \"Price numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public static final String PRICE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Price}."},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     * @param price A valid price number."},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    public Price(String price) {"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(price);"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"        this.value \u003d price;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid person price number."},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        return test.matches(PRICE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":33,"-":20}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    private final Order order;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    private final Halal halal;"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    private final Vegetarian vegetarian;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    public Person(Name name, Phone phone, Order order, Email email, Address address,"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"                  Halal halal, Vegetarian vegetarian, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name, phone, order, email, address, halal, vegetarian, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d order;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d halal;"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d vegetarian;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"    public Order getOrder() {"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        return order;"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    public Halal getHalal() {"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"        return halal;"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"    public Vegetarian getVegetarian() {"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"        return vegetarian;"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":101,"author":{"gitID":"ZacZequn"},"content":"        return Objects.hash(name, phone, order, email, address, halal, vegetarian, tags);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Order: \")"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"                .append(getOrder())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Halal: \")"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"                .append(getHalal())"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Vegetarian: \")"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"                .append(getVegetarian())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":28,"-":97}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    private String customerStatsFilePath \u003d \"data/customerstats.xml\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    private String customerStatsName \u003d \"MyCustomerStats\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStatsFilePath;"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsName() {"},{"lineNumber":51,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStatsName;"},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":10,"-":78}},{"path":"src/main/java/seedu/address/model/dish/Dish.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" * Represents a Dish in the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"public class Dish {"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    private final Name name;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    private final Price price;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     * Every field must be present and not null."},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    public Dish(Name name, Price price) {"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name, price);"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"        this.name \u003d name;"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        this.price \u003d price;"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    public Name getName() {"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"        return name;"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    public Price getPrice() {"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        return price;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"        if (!(other instanceof Dish)) {"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"            return false;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"        Dish otherDish \u003d (Dish) other;"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"        return otherDish.getName().equals(this.getName())"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 otherDish.getPrice().equals(this.getPrice());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        return Objects.hash(name, price);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Price: \")"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"                .append(getPrice())"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Email: \");"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        return builder.toString();"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":44,"-":23}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"                person.getName(), person.getPhone(), person.getOrder(), person.getEmail(),"},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"                person.getAddress(), person.getHalal(), person.getVegetarian(), correctTagReferences);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"-":185}},{"path":"src/main/java/seedu/address/model/person/Order.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s order in the address book."},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrder(String)}"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"public class Order {"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_ORDER_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"            \"Invalid order\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    public final String fullOrder;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Order}."},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     * @param order A valid order."},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    public Order(String order) {"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"        checkArgument(isValidOrder(order), MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        this.fullOrder \u003d order;"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid person order."},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidOrder(String test) {"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        return test.matches(ORDER_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        return fullOrder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Order // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.fullOrder.equals(((Order) other).fullOrder)); // state check"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        return fullOrder.hashCode();"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":43,"-":16}},{"path":"src/main/java/seedu/address/model/person/Vegetarian.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s preference on food  in the address book."},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidVegetarian(String)}"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class Vegetarian {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_VEGETARIAN_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"            \"Person\u0027s preference should only be Vegeatrian or Non-vegetarian\";"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Vegetarian}."},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     * @param vegetarian A valid vegetarian."},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    public Vegetarian(String vegetarian) {"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"        if (isNull(vegetarian)) {"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d \"Non-vegetarian\";"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"        } else {"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"            checkArgument(isValidVegetarian(vegetarian), MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d vegetarian;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid halal preference."},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidVegetarian(String test) {"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(test);"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        if (test.equals(\"Vegetarian\") || (test.equals(\"Non-vegetarian\"))) {"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        return false;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Vegetarian // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Vegetarian) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":37,"-":20}},{"path":"src/main/java/seedu/address/model/person/Halal.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s preference on food  in the address book."},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHalal(String)}"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class Halal {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_HALAL_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"            \"Person\u0027s preference should only be Halal or Non-halal\";"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Halal}."},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     * @param halal A valid halal."},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    public Halal(String halal) {"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"        if (isNull(halal)) {"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d \"Non-halal\";"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"        } else {"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"            checkArgument(isValidHalal(halal), MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d halal;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid halal preference."},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidHalal(String test) {"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(test);"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        if (test.equals(\"Halal\") || (test.equals(\"Non-halal\"))) {"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        return false;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Halal // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Halal) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":37,"-":20}},{"path":"src/main/java/seedu/address/model/CustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":" * Wraps all data at the customer-stats level"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"public class CustomerStats implements ReadOnlyCustomerStats {"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"    private HashMap\u003cString, Integer\u003e ordersCount;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"        ordersCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStats() {}"},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"    public void setOrdersCount(HashMap\u003cString, Integer\u003e ordersCountHashMap) {"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"        ordersCount \u003d ordersCountHashMap;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"     * Update the count of a given phone number in the customers\u0027 stats."},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"     * If the phone does not exist in the key set, put it to the key set with corresponding value 1"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"     * Otherwise add 1 to the corresponding value"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"    public void addCount(String phone) {"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"        if (!ordersCount.containsKey(phone)) {"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"            ordersCount.put(phone, 1);"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"            ordersCount.put(phone, ordersCount.get(phone) + 1);"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"    public HashMap\u003cString, Integer\u003e getOrdersCount() {"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"        return new HashMap\u003c\u003e(ordersCount);"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":39,"-":9}}]
