var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"CollegeZone was developed by the https://github.com/orgs/CS2103JAN2018-T09-B2/teams/developers[CS2103JAN2018-T09-B2] team. +"},{"lineNumber":7,"author":{"gitID":"deborahlow97"},"content":" +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Deborah Low Shi Lei"},{"lineNumber":13,"author":{"gitID":"deborahlow97"},"content":"image::deborahlow97.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/deborahlow97[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Goh Zu Wei"},{"lineNumber":22,"author":{"gitID":"deborahlow97"},"content":"image::zuweitrack.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/zuweitrack[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Responsibilities: Data"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Fuad B Sahmawi"},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":"image::fuadsahmawi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/fuadsahmawi[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Responsibilities: Dev Ops + Threading"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Shamsheer Ahamed"},{"lineNumber":40,"author":{"gitID":"deborahlow97"},"content":"image::a0158738x.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"{empty}[https://github.com/A0158738X[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"-":32,"deborahlow97":14}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B2/main[image:https://travis-ci.org/CS2103JAN2018-T09-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"deborahlow97"},"content":"image::docs/images/CollegeZone.jpg[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"image::images/CollegeZone.jpg[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"deborahlow97"},"content":"* CollegeZone is a desktop application for *NUS Residential College 4 (RC4) students*. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"deborahlow97"},"content":"* It\u0027s created for a RC4 resident to manage their contacts with other RC4 residents and to manage their tasks."},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* The main reasons NUS freshmen chooses to stay in RC4 is to *forge new friendships* and to *perform well in their studies*. CollegeZone aims to aid in RC4 residents tasks management and maintaining the friendships forged in RC4."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":36,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":37,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"-":31,"deborahlow97":8}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"deborahlow97"},"content":"By: `Team T09-B2`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"CollegeZone is for NUS students living in Residential College 4 (RC4) who *prefers to use a desktop app for managing their RC4 friends contacts and their tasks*. More importantly, CollegeZone is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CollegeZone can get your contact management and tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"deborahlow97"},"content":".  Download the latest `collegezone.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"deborahlow97"},"content":".  Copy the file to the folder you want to use as the home folder for CollegeZone."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"deborahlow97"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the CollegeZone."},{"lineNumber":42,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":54,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":55,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Adding a Friend: `add`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"Adds a person to CollegeZone +"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"Format: `add n/NAME p/PHONE_NUMBER */LEVEL_OF_FRIENDSHIP b/BIRTHDAY u/UNIT_NUMBER [cca/CCA]... [t/TAG]...`"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"* `LEVEL_OF_FRIENDSHIP` must be a positive integer ranging from 1 to 10."},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"****"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"A person can have any number of tags (including 0) +"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"A person can have any number of CCAs (including 0)"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"* `add n/John Doe p/98765432 */9 b/21 May 1997 u/#10-12 cca/Badminton cca/Volleyball t/workout buddy`"},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"* `add n/Betsy Crowe t/friend b/21 12 1994 u/01-10 p/1234567 */1 t/OwesMoney`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Listing all friends : `list`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"Shows a list of all persons in CollegeZone. +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Editing a Friend : `edit`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"Edits an existing person in CollegeZone. +"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [u/UNIT_NUMBER] [*/LEVEL_OF_FRIENDSHIP] [b/BIRTHDAY] [cca/CCA]... [t/TAG]...`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"* When editing tags or CCAs, the existing tags or CCAs of the person will be removed i.e adding of tags or CCAs is not cumulative."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":97,"author":{"gitID":"-"},"content":"****"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"deborahlow97"},"content":"* `edit 1 p/91234567 */10` +"},{"lineNumber":102,"author":{"gitID":"deborahlow97"},"content":"Edits the phone number and level of friendship of the 1st person to be `91234567` and `10` respectively."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Locating persons by name: `find` `[since v1.1]`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"Format: `find [n/KEYWORDS] [t/]` or `find [n/] [t/KEYWORDS]`"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"****"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":114,"author":{"gitID":"fuadsahmawi"},"content":"* Only the name or tag is searched at a single time"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":116,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":117,"author":{"gitID":"fuadsahmawi"},"content":"* Searching both name and tag at the same time is not possible"},{"lineNumber":118,"author":{"gitID":"-"},"content":"****"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"fuadsahmawi"},"content":"* `find n/John t/` +"},{"lineNumber":123,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":124,"author":{"gitID":"fuadsahmawi"},"content":"* `find n/Betsy Tim John t/` +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":126,"author":{"gitID":"fuadsahmawi"},"content":"*  `find n/ t/friends` +"},{"lineNumber":127,"author":{"gitID":"fuadsahmawi"},"content":"Returns any person having tags `friends`"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"zuweitrack"},"content":"\u003d\u003d\u003d Seeking the Resident Assistant of a person : `seek` `[coming in v2.0]`"},{"lineNumber":130,"author":{"gitID":"zuweitrack"},"content":"Seek the Resident Assistant (RA) of the person whose name contains any of the given keywords. +"},{"lineNumber":131,"author":{"gitID":"zuweitrack"},"content":"Format: `seek NAME`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"****"},{"lineNumber":134,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":135,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":136,"author":{"gitID":"zuweitrack"},"content":"* Only the name is searched at a single time"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":138,"author":{"gitID":"zuweitrack"},"content":"* Resident Assistant (RA) of the person\u0027s name matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber\u0027s RA`, `Bo Yang\u0027s RA`"},{"lineNumber":139,"author":{"gitID":"zuweitrack"},"content":"****"},{"lineNumber":140,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":141,"author":{"gitID":"zuweitrack"},"content":"Examples:"},{"lineNumber":142,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":143,"author":{"gitID":"zuweitrack"},"content":"* `find John` +"},{"lineNumber":144,"author":{"gitID":"zuweitrack"},"content":"Returns `John\u0027s RA`"},{"lineNumber":145,"author":{"gitID":"zuweitrack"},"content":"* `find Betsy` +"},{"lineNumber":146,"author":{"gitID":"zuweitrack"},"content":"Returns `Betsy\u0027s RA`"},{"lineNumber":147,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"deborahlow97"},"content":"Deletes the specified person from CollegeZone. +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":156,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":157,"author":{"gitID":"-"},"content":"****"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":163,"author":{"gitID":"deborahlow97"},"content":"Deletes the 2nd person in CollegeZone."},{"lineNumber":164,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":166,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"****"},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":177,"author":{"gitID":"-"},"content":"****"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":182,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":183,"author":{"gitID":"deborahlow97"},"content":"Selects the 2nd person in CollegeZone."},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":185,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"deborahlow97"},"content":"Restores CollegeZone to the state before the previous _undoable_ command was executed. +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":206,"author":{"gitID":"deborahlow97"},"content":"Undoable commands: those commands that modify CollegeZone\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":245,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"deborahlow97"},"content":"Clears all entries from CollegeZone. +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"deborahlow97"},"content":"CollegeZone data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":261,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":267,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":272,"author":{"gitID":"deborahlow97"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CollegeZone folder."},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"deborahlow97"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER */LEVEL_OF_FRIENDSHIP b/BIRTHDAY u/UNIT_NUMBER [cca/CCA]... [t/TAG]...` +"},{"lineNumber":277,"author":{"gitID":"deborahlow97"},"content":"e.g. `add n/James Ho p/22224444 */3 b/14th 3 1995 u/01-111 cca/Choir t/friend t/colleague`"},{"lineNumber":278,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":281,"author":{"gitID":"deborahlow97"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [*/LEVEL_OF_FRIENDSHIP] [b/BIRTHDAY] [u/UNIT_NUMBER] [cca/CCA]... [t/TAG]...` +"},{"lineNumber":282,"author":{"gitID":"deborahlow97"},"content":"e.g. `edit 2 n/James Lee cca/waterpolo`"},{"lineNumber":283,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":285,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":286,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":287,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":290,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":291,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"}],"authorContributionMap":{"zuweitrack":14,"fuadsahmawi":8,"-":232,"deborahlow97":37}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"fuadsahmawi"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/ \" + keyword + \" t/ \");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":292}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deborahlow97"},"content":"\u003d CollegeZone - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"deborahlow97"},"content":"By: `Team T09-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"deborahlow97"},"content":"* **Alternative 1 (current choice):** Saves the entire CollegeZone."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"deborahlow97"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the CollegeZone (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"deborahlow97"},"content":"// tag::logging[]"},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":375,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":380,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"deborahlow97"},"content":"// end::logging[]"},{"lineNumber":385,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"fuadsahmawi"},"content":"[d]"},{"lineNumber":392,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Since v1.1"},{"lineNumber":393,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":394,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Enhanced Find Command"},{"lineNumber":395,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":396,"author":{"gitID":"fuadsahmawi"},"content":"The old find command feature only allows searching by name. To make CollegeZone more useful for RC4 students, we have enhanced the find"},{"lineNumber":397,"author":{"gitID":"fuadsahmawi"},"content":"command feature to be able to find persons by tags."},{"lineNumber":398,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":399,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Logic: Command Aliases"},{"lineNumber":400,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":401,"author":{"gitID":"fuadsahmawi"},"content":"CollegeZone users may now use shortcuts to perform desired tasks. These shortcuts are shown in figure 3.6.1."},{"lineNumber":402,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":403,"author":{"gitID":"fuadsahmawi"},"content":"*Figure 3.6.1*:"},{"lineNumber":404,"author":{"gitID":"-"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":405,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":406,"author":{"gitID":"fuadsahmawi"},"content":"|Command | Original| Alias"},{"lineNumber":407,"author":{"gitID":"fuadsahmawi"},"content":"|Add"},{"lineNumber":408,"author":{"gitID":"fuadsahmawi"},"content":"|add"},{"lineNumber":409,"author":{"gitID":"fuadsahmawi"},"content":"|a"},{"lineNumber":410,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":411,"author":{"gitID":"fuadsahmawi"},"content":"|Clear"},{"lineNumber":412,"author":{"gitID":"fuadsahmawi"},"content":"|clear"},{"lineNumber":413,"author":{"gitID":"fuadsahmawi"},"content":"|c"},{"lineNumber":414,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":415,"author":{"gitID":"fuadsahmawi"},"content":"|Delete"},{"lineNumber":416,"author":{"gitID":"fuadsahmawi"},"content":"|delete"},{"lineNumber":417,"author":{"gitID":"fuadsahmawi"},"content":"|d"},{"lineNumber":418,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":419,"author":{"gitID":"fuadsahmawi"},"content":"|Edit"},{"lineNumber":420,"author":{"gitID":"fuadsahmawi"},"content":"|edit"},{"lineNumber":421,"author":{"gitID":"fuadsahmawi"},"content":"|e"},{"lineNumber":422,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":423,"author":{"gitID":"fuadsahmawi"},"content":"|Find"},{"lineNumber":424,"author":{"gitID":"fuadsahmawi"},"content":"|find"},{"lineNumber":425,"author":{"gitID":"fuadsahmawi"},"content":"|f"},{"lineNumber":426,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":427,"author":{"gitID":"fuadsahmawi"},"content":"|History"},{"lineNumber":428,"author":{"gitID":"fuadsahmawi"},"content":"|history"},{"lineNumber":429,"author":{"gitID":"fuadsahmawi"},"content":"|h"},{"lineNumber":430,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":431,"author":{"gitID":"fuadsahmawi"},"content":"|List"},{"lineNumber":432,"author":{"gitID":"fuadsahmawi"},"content":"|list"},{"lineNumber":433,"author":{"gitID":"fuadsahmawi"},"content":"|l"},{"lineNumber":434,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":435,"author":{"gitID":"fuadsahmawi"},"content":"|Redo"},{"lineNumber":436,"author":{"gitID":"fuadsahmawi"},"content":"|redo"},{"lineNumber":437,"author":{"gitID":"fuadsahmawi"},"content":"|r"},{"lineNumber":438,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":439,"author":{"gitID":"fuadsahmawi"},"content":"|Select"},{"lineNumber":440,"author":{"gitID":"fuadsahmawi"},"content":"|select"},{"lineNumber":441,"author":{"gitID":"fuadsahmawi"},"content":"|s"},{"lineNumber":442,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":443,"author":{"gitID":"fuadsahmawi"},"content":"|Undo"},{"lineNumber":444,"author":{"gitID":"fuadsahmawi"},"content":"|undo"},{"lineNumber":445,"author":{"gitID":"fuadsahmawi"},"content":"|u"},{"lineNumber":446,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":447,"author":{"gitID":"fuadsahmawi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":448,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":449,"author":{"gitID":"fuadsahmawi"},"content":"//end::find[]"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"// tag::tagcolours[]"},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Enhanced tag colours"},{"lineNumber":453,"author":{"gitID":"-"},"content":"Tags are now colour-coded which allows improved differentiation between many different tags."},{"lineNumber":454,"author":{"gitID":"-"},"content":"// end::tagcolours[]"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"[d]"},{"lineNumber":457,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Since v1.2"},{"lineNumber":458,"author":{"gitID":"deborahlow97"},"content":"// tag::addandedit[]"},{"lineNumber":459,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Targeted add and edit command"},{"lineNumber":460,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":461,"author":{"gitID":"deborahlow97"},"content":"The old add and edit feature holds a broad information about a Person."},{"lineNumber":462,"author":{"gitID":"deborahlow97"},"content":"As CollegeZone is catered toward NUS RC4 Residents, we have changed the attributes of a Person to hold: +"},{"lineNumber":463,"author":{"gitID":"deborahlow97"},"content":"*Name, Mobile Number, Birthday, Level of Friendship, RC4 Unit Number, RC4 CCAs and Tags*. +"},{"lineNumber":464,"author":{"gitID":"deborahlow97"},"content":"This is done by removing unwanted attributes of a person and adding new attributes of a person."},{"lineNumber":465,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"image::RCPersonClass.JPG[width\u003d\"450\"]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"    Figure 3.7.1: Person Class diagram with added attributes"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Nature of new Attributes"},{"lineNumber":470,"author":{"gitID":"deborahlow97"},"content":"* Birthday: Must be a valid date."},{"lineNumber":471,"author":{"gitID":"deborahlow97"},"content":"* Level Of Friendship: Level of friendship is an integer from 1 to 10. The level is indicated by the number of hearts via the UI."},{"lineNumber":472,"author":{"gitID":"deborahlow97"},"content":"* Unit Number: Must be a valid unit number in RC4."},{"lineNumber":473,"author":{"gitID":"deborahlow97"},"content":"* A RC4 resident is able to have multiple CCAs."},{"lineNumber":474,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: displaying Level Of Friendship"},{"lineNumber":476,"author":{"gitID":"-"},"content":"* Level of Friendship is displayed as a string of heart symbols. It is represented this way as it more intuitive for users to understand what the symbols mean."},{"lineNumber":477,"author":{"gitID":"deborahlow97"},"content":"// end::addandedit[]"},{"lineNumber":478,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Suggested: Set Reminders"},{"lineNumber":480,"author":{"gitID":"-"},"content":"As RC4 residents have events, classes and meetings to go to at a certain date and time, we decided on implementing a reminder feature to allow users to add reminders in CollegeZone. +"},{"lineNumber":481,"author":{"gitID":"-"},"content":"Reminder commands are undoable and redoable for the benefit users to redo and undo a command they did or did not intend to change."},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"*Reminder features:* +"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"* Adding a reminder to the Calendar"},{"lineNumber":486,"author":{"gitID":"-"},"content":"* Editing a reminder on the Calendar"},{"lineNumber":487,"author":{"gitID":"-"},"content":"* Deleting a reminder on the Calendar"},{"lineNumber":488,"author":{"gitID":"-"},"content":"* Acknowledging a reminder on the Calendar"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"*Reminder objects will consist of 3 attributes :* +"},{"lineNumber":491,"author":{"gitID":"-"},"content":"1. the date, time and recurrence of reminder +"},{"lineNumber":492,"author":{"gitID":"-"},"content":"2. the level of urgency of reminder +"},{"lineNumber":493,"author":{"gitID":"-"},"content":"3. the reminder text content"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"The reminders will be stored in an ArrayList of all the reminder objects. Each reminder will have specific positive integer index number. +"},{"lineNumber":496,"author":{"gitID":"-"},"content":"A reminder will be *green* until it is due. +"},{"lineNumber":497,"author":{"gitID":"-"},"content":"A reminder will turn and remain orange for 24 hours if it\u0027s due. +"},{"lineNumber":498,"author":{"gitID":"-"},"content":"This is when user can start acknowledging a reminder on the Calendar.  +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"After acknowledging it, it is removed from calendar. +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"If it\u0027s overdue and not acknowledged, it will turn Grey. +"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"Bottom Panel: Number of orange reminders +"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":510,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":515,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":528,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":529,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":530,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":533,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":543,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":548,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":555,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":568,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":569,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":570,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":571,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":572,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":573,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":574,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":575,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":576,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":580,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":583,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":600,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":607,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":608,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":609,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"deborahlow97"},"content":"A project often depends on third-party libraries. For example, CollegeZone depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":615,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":638,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":641,"author":{"gitID":"-"},"content":"+"},{"lineNumber":642,"author":{"gitID":"-"},"content":"****"},{"lineNumber":643,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":645,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":646,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":649,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":650,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":651,"author":{"gitID":"-"},"content":"****"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"deborahlow97"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the CollegeZone, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":659,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":662,"author":{"gitID":"-"},"content":"+"},{"lineNumber":663,"author":{"gitID":"-"},"content":"****"},{"lineNumber":664,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":665,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":666,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":667,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":668,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":669,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":670,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":671,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":672,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":673,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":674,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":675,"author":{"gitID":"-"},"content":"****"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":686,"author":{"gitID":"-"},"content":"+"},{"lineNumber":687,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":688,"author":{"gitID":"-"},"content":"+"},{"lineNumber":689,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":691,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":692,"author":{"gitID":"-"},"content":"+"},{"lineNumber":693,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"+"},{"lineNumber":695,"author":{"gitID":"-"},"content":"****"},{"lineNumber":696,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":697,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":698,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":699,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":700,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":701,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":702,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":703,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":704,"author":{"gitID":"-"},"content":"****"},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":707,"author":{"gitID":"-"},"content":"+"},{"lineNumber":708,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":710,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":712,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":714,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":716,"author":{"gitID":"-"},"content":"****"},{"lineNumber":717,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":718,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":719,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":720,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":723,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":724,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":725,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":727,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":729,"author":{"gitID":"-"},"content":""},{"lineNumber":730,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":731,"author":{"gitID":"-"},"content":"+"},{"lineNumber":732,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":733,"author":{"gitID":"-"},"content":"+"},{"lineNumber":734,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":736,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":737,"author":{"gitID":"-"},"content":"+"},{"lineNumber":738,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":740,"author":{"gitID":"-"},"content":"****"},{"lineNumber":741,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":742,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":743,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":744,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":745,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":746,"author":{"gitID":"deborahlow97"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the CollegeZone."},{"lineNumber":747,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":748,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":749,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":750,"author":{"gitID":"-"},"content":"****"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":758,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":761,"author":{"gitID":"-"},"content":"+"},{"lineNumber":762,"author":{"gitID":"-"},"content":"****"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":764,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":765,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":766,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":767,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":768,"author":{"gitID":"-"},"content":"****"},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"deborahlow97"},"content":"*Scenario:* You are a software maintainer for `collegezone`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":778,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":785,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":786,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":791,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"deborahlow97"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/collegezone/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":796,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/main/java/seedu/collegezone/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":801,"author":{"gitID":"deborahlow97"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/collegezone/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":802,"author":{"gitID":"-"},"content":""},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":804,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":809,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":810,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/main/java/seedu/collegezone/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":815,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":816,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":817,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/test/java/seedu/collegezone/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":818,"author":{"gitID":"-"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":820,"author":{"gitID":"deborahlow97"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/collegezone/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":825,"author":{"gitID":"deborahlow97"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/collegezone/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":832,"author":{"gitID":"deborahlow97"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/collegezone/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"deborahlow97"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/collegezone/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":837,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":844,"author":{"gitID":"deborahlow97"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/collegezone/model/person/Person.java[`Person`]."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"deborahlow97"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/collegezone/model/person/Person.java[`Person`]."},{"lineNumber":849,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":850,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/main/java/seedu/collegezone/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":853,"author":{"gitID":"deborahlow97"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/collegezone/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":864,"author":{"gitID":"deborahlow97"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/collegezone/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/collegezone/model/person/Person.java[`Person`]."},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"deborahlow97"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/collegezone/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":869,"author":{"gitID":"deborahlow97"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/collegezone/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":872,"author":{"gitID":"deborahlow97"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/collegezone/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/main/java/seedu/collegezone/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"deborahlow97"},"content":". Modify link:{repoURL}/src/test/java/seedu/collegezone/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":883,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":898,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"* Current NUS Student living in Residential College 4 (RC4)"},{"lineNumber":903,"author":{"gitID":"deborahlow97"},"content":"* has a need to manage a significant number of contacts (friends) and tasks to do"},{"lineNumber":904,"author":{"gitID":"-"},"content":"* needs to be reminded of things to do"},{"lineNumber":905,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":906,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":907,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":908,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"deborahlow97"},"content":"*Value proposition*: manage contacts and tasks faster than a typical mouse/GUI driven app"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"*Feature Contribution*:"},{"lineNumber":913,"author":{"gitID":"-"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c25%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":914,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":915,"author":{"gitID":"-"},"content":"|Assignee |Major |Minor"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"|Deborah Low"},{"lineNumber":918,"author":{"gitID":"-"},"content":"|Scheduler (Reminder) : This app allows user to set/edit/delete reminders reflected on a Calendar"},{"lineNumber":919,"author":{"gitID":"-"},"content":"|Add and Edit : Change add and edit command to suit our target audience ( RC4 Residents ) +"},{"lineNumber":920,"author":{"gitID":"-"},"content":" GUI : Change the look and feel of the GUI to make it more user friendly."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"fuadsahmawi"},"content":"|Fuad B Sahmawi"},{"lineNumber":923,"author":{"gitID":"fuadsahmawi"},"content":"|Scheduler (Tasks) : This feature allows user to set/edit/delete tasks/events reflected on a Calendar +"},{"lineNumber":924,"author":{"gitID":"fuadsahmawi"},"content":" Scheduler (Notes) : This feature will allow user to add notes for a certain task/event"},{"lineNumber":925,"author":{"gitID":"fuadsahmawi"},"content":"|Find : Change find command to be able to find persons in contact list according to tags +"},{"lineNumber":926,"author":{"gitID":"fuadsahmawi"},"content":" Logic : Added command aliases to allow users to be able to perform commands by typing shortcuts"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"A0158738X"},"content":"|Shamsheer Ahamed"},{"lineNumber":929,"author":{"gitID":"A0158738X"},"content":"|Meetup (Tasks) : This feature allows user to set up a meet up date which will be reflected on a Calendar +"},{"lineNumber":930,"author":{"gitID":"A0158738X"},"content":"|Meetup : Added a new Command called meet to allow user to set up a meet up date with RC4 residents +"},{"lineNumber":931,"author":{"gitID":"A0158738X"},"content":" Ui : Added a placeholder in PersonCard\u0027s to display the date of meet up for each person later +"},{"lineNumber":932,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":933,"author":{"gitID":"zuweitrack"},"content":"|Goh Zu Wei"},{"lineNumber":934,"author":{"gitID":"zuweitrack"},"content":"|Form Groups : This feature allows user to organize students to form study groups or recreational sport groups +"},{"lineNumber":935,"author":{"gitID":"zuweitrack"},"content":" Set event: Add events and dates for the group meeting and gathering."},{"lineNumber":936,"author":{"gitID":"zuweitrack"},"content":"|Seek: Add seek command to be able to seek the Resident Assistant (RA) of any particular the student living in RC4"},{"lineNumber":937,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":947,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":948,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |add a new person |"},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |delete a person |remove entries that I no longer need"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |find a person by tags |locate a particular group of people without having to go through the entire list"},{"lineNumber":957,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":958,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |RC student |edit a detail I added |"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |set a level of friendship with a specific person |maintain my friendships depending on a priority system set by myself"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |edit details of my contacts |stay updated with the current information about my contacts"},{"lineNumber":963,"author":{"gitID":"-"},"content":""},{"lineNumber":964,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |forgetful RC student |add persistent reminders |periodically remind myself to do something."},{"lineNumber":965,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":966,"author":{"gitID":"deborahlow97"},"content":"|`* * *` |forgetful RC student |add other RC friends name, birthday, hall CCAs and tags into CollegeZone |"},{"lineNumber":967,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":968,"author":{"gitID":"zuweitrack"},"content":"|`* * *` |forgetful RC student |add a reminder of meet up with another RC4 student |shows who you are meeting up with on what date"},{"lineNumber":969,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":970,"author":{"gitID":"fuadsahmawi"},"content":"|`* * *` |RC student |note down tasks, events or training sessions in a calendar |make my schedule schedule more organised"},{"lineNumber":971,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":972,"author":{"gitID":"zuweitrack"},"content":"|`* * *` |RC student |Set down a date for group events |do necessary group preparation prior to a group event"},{"lineNumber":973,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":974,"author":{"gitID":"deborahlow97"},"content":"|`* *` |careless RC student |undo a command I entered |undo a wrong command that I entered"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"deborahlow97"},"content":"|`* *` |careless RC student |redo a command I entered |redo when I want to undo my \"undo\" command"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"fuadsahmawi"},"content":"|`* *` |RC student |write down a short reflection of how an event/training session went |remember precious moments easier in the future"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"fuadsahmawi"},"content":"|`* *` |RC student |list down all past appointments with a particular friend |reminisce past memories with a particular friend"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"|`* *` |RC student |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"deborahlow97"},"content":"|`* *` |RC student | be reminded on when my campus fees are due | pay it on time"},{"lineNumber":985,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":986,"author":{"gitID":"zuweitrack"},"content":"|`* *` |RC student |know who the Resident Assistant (RA) is of a fellow resident |find the RA of the resident and convey floor issues to the RA"},{"lineNumber":987,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":988,"author":{"gitID":"deborahlow97"},"content":"|`*` |user with many persons in CollegeZone |sort persons by name |locate a person easily"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"deborahlow97"},"content":"|`*` |user with many persons with the same in CollegeZone |set a display picture of each contact |differentiate persons with the same name"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"deborahlow97"},"content":"(For all use cases below, the *System* is the `CollegeZone` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1007,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone shows a list of persons"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1009,"author":{"gitID":"deborahlow97"},"content":"4.  CollegeZone deletes the person"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1017,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1021,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1023,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message."},{"lineNumber":1024,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"deborahlow97"},"content":"[discrete]"},{"lineNumber":1028,"author":{"gitID":"deborahlow97"},"content":"\u003d\u003d\u003d Use case: Edit person"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1030,"author":{"gitID":"deborahlow97"},"content":"2.  CollegeZone shows a list of persons"},{"lineNumber":1031,"author":{"gitID":"deborahlow97"},"content":"3.  User requests to edit a detail or multiple details of a person in the list"},{"lineNumber":1032,"author":{"gitID":"deborahlow97"},"content":"4. CollegeZone edits the detail or details of the person"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1040,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1044,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1046,"author":{"gitID":"deborahlow97"},"content":"** 3a1. CollegeZone shows an error message."},{"lineNumber":1047,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1048,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1049,"author":{"gitID":"deborahlow97"},"content":"* 3b. The given detail format is invalid."},{"lineNumber":1050,"author":{"gitID":"deborahlow97"},"content":"+"},{"lineNumber":1051,"author":{"gitID":"deborahlow97"},"content":"[none]"},{"lineNumber":1052,"author":{"gitID":"deborahlow97"},"content":"** 3b1. CollegeZone shows an error message."},{"lineNumber":1053,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"fuadsahmawi"},"content":"[discrete]"},{"lineNumber":1057,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Use case: Find person"},{"lineNumber":1058,"author":{"gitID":"fuadsahmawi"},"content":"1. User requests to find person by tag or name using keywords"},{"lineNumber":1059,"author":{"gitID":"deborahlow97"},"content":"2. CollegeZone shows a list of persons"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1066,"author":{"gitID":"fuadsahmawi"},"content":"* 1a. The given detail format is invalid."},{"lineNumber":1067,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1068,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1069,"author":{"gitID":"fuadsahmawi"},"content":"** 1a1. CollegeZone shows an error message"},{"lineNumber":1070,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1071,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1072,"author":{"gitID":"fuadsahmawi"},"content":"* 2a. The list has all persons with name or tag that matches keywords"},{"lineNumber":1073,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1074,"author":{"gitID":"fuadsahmawi"},"content":"Use case ends."},{"lineNumber":1075,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1076,"author":{"gitID":"fuadsahmawi"},"content":"[none]"},{"lineNumber":1077,"author":{"gitID":"fuadsahmawi"},"content":"* 2b. The list is empty"},{"lineNumber":1078,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1079,"author":{"gitID":"fuadsahmawi"},"content":"Use case ends."},{"lineNumber":1080,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Reminder add\u003creminder\u003e"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"1.  User requests to add a reminder on a certain date"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"2.  CollegeZone adds the reminder in the calendar and changes is reflected on the calendar"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"* 1a. The given date detail in invalid."},{"lineNumber":1095,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1097,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1098,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"fuadsahmawi"},"content":"[discrete]"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Reminder delete\u003creminder\u003e"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"1.  User requests to delete a certain reminder on a certain date"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"2.  CollegeZone delete the reminder from the calendar and changes is reflected on the calendar"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"* 1a. The given reminder to delete does not exist."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1115,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1117,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"* 1b. The given details to delete reminder is invalid."},{"lineNumber":1121,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":1124,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"fuadsahmawi"},"content":"[discrete]"},{"lineNumber":1128,"author":{"gitID":"fuadsahmawi"},"content":"\u003d\u003d\u003d Use case: Task add\u003ctask, notes\u003e"},{"lineNumber":1129,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1130,"author":{"gitID":"fuadsahmawi"},"content":"1. User requests to add a task on a certain date with a note attached"},{"lineNumber":1131,"author":{"gitID":"fuadsahmawi"},"content":"2. CollegeZone adds the task in the calendar and changes is reflected in the calendar"},{"lineNumber":1132,"author":{"gitID":"fuadsahmawi"},"content":"+"},{"lineNumber":1133,"author":{"gitID":"fuadsahmawi"},"content":"Use case ends."},{"lineNumber":1134,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":1135,"author":{"gitID":"A0158738X"},"content":"[discrete]"},{"lineNumber":1136,"author":{"gitID":"A0158738X"},"content":"\u003d\u003d\u003d Use case: Meet person"},{"lineNumber":1137,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":1138,"author":{"gitID":"A0158738X"},"content":"1. User requests to add a meet up date on a certain date with a person using his index"},{"lineNumber":1139,"author":{"gitID":"A0158738X"},"content":"2. CollegeZone adds the meet up in the calendar and changes are reflected in the calendar"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1146,"author":{"gitID":"A0158738X"},"content":"*1a. The given date is invalid."},{"lineNumber":1147,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":1148,"author":{"gitID":"A0158738X"},"content":"[note]"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"** 1a1. CollegeZone shows an error message."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"A0158738X"},"content":"*1b. The given person\u0027s index is invalid."},{"lineNumber":1154,"author":{"gitID":"A0158738X"},"content":"+"},{"lineNumber":1155,"author":{"gitID":"A0158738X"},"content":"[note]"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"** 1b1. CollegeZone shows an error message."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1166,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1167,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1168,"author":{"gitID":"-"},"content":".  Should be able to deal with invalid command inputs."},{"lineNumber":1169,"author":{"gitID":"-"},"content":".  Should be intuitive to use for users who are not tech-savvy."},{"lineNumber":1170,"author":{"gitID":"-"},"content":".  The system should respond within 2 seconds."},{"lineNumber":1171,"author":{"gitID":"-"},"content":".  Should work on 32-bit and 64-bit environment."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"deborahlow97"},"content":"[[CCA]] Co-Curricular Activities::"},{"lineNumber":1185,"author":{"gitID":"deborahlow97"},"content":"Co-Curricular Activities offered within Residential College 4 (RC4)"},{"lineNumber":1186,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1187,"author":{"gitID":"deborahlow97"},"content":"[[RC4]] Residential College 4::"},{"lineNumber":1188,"author":{"gitID":"deborahlow97"},"content":"A campus living area at NUS U-Town for NUS undergraduate students"},{"lineNumber":1189,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1200,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1205,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1220,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1226,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1236,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1238,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1240,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"A0158738X":18,"zuweitrack":9,"fuadsahmawi":96,"-":1041,"deborahlow97":87}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":35,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":36,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER + \"  t/\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":44,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":45,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER + \" t/ \";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/Carl t/ \";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Benson Daniel t/ \";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":63,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson t/ \";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson Daniel t/ \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel Benson NonMatchingKeyWord t/ \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER + \" t/ \";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":99,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ MeIeR t/ \";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Mei t/ \";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Meiers t/ \";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Mark t/ \";"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getPhone().value + \" t/ \";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find birthday of person in address book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + DANIEL.getBirthday().value + \" t/ \";"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find level of friendship of person in address book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + DANIEL.getLevelOfFriendship().value + \" t/ \";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: find unit number of person in address book -\u003e 0 persons found */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + DANIEL.getUnitNumber().value + \" t/ \";"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: find ccas of person in address book -\u003e 0 persons found */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        List\u003cCca\u003e ccas \u003d new ArrayList\u003c\u003e(DANIEL.getCcas());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/\" + ccas.get(0).ccaName + \" t/ \";"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"fuadsahmawi"},"content":"        /* Case: find tags of person in address book -\u003e 1 persons found */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":148,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + tags.get(0).tagName + \" t/ \";"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"fuadsahmawi"},"content":"        /* Case: find tags of person in address book -\u003e 1 persons found */"},{"lineNumber":153,"author":{"gitID":"fuadsahmawi"},"content":"        tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":154,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ t/ \" + tags.get(0).tagName;"},{"lineNumber":155,"author":{"gitID":"fuadsahmawi"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":163,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ Daniel t/ \";"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":170,"author":{"gitID":"fuadsahmawi"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" n/ \" + KEYWORD_MATCHING_MEIER + \" t/ \";"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":193,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":23,"-":196}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"deborahlow97"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deborahlow97"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"deborahlow97"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getBirthday(), actualCard.getBirthday());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getUnitNumber(), actualCard.getUnitNumber());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getLevelOfFriendship(), actualCard.getLevelOfFriendship());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getCcas(), actualCard.getCcas());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":33,"author":{"gitID":"deborahlow97"},"content":"        expectedCard.getTags().forEach(tag -\u003e assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":34,"author":{"gitID":"deborahlow97"},"content":"                actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getBirthday().value, actualCard.getBirthday());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertLevelOfFriendshipEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getUnitNumber().value, actualCard.getUnitNumber());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        List\u003cString\u003e ccaInArrayList \u003d expectedPerson.getCcas().stream().map(cca -\u003e cca.ccaName)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(getCcasInString(ccaInArrayList), actualCard.getCcas());"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedPerson.getMeetDate().value, actualCard.getMeetDate());"},{"lineNumber":50,"author":{"gitID":"deborahlow97"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":51,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":53,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"deborahlow97"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":55,"author":{"gitID":"deborahlow97"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":56,"author":{"gitID":"deborahlow97"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"deborahlow97"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":58,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"deborahlow97"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":60,"author":{"gitID":"deborahlow97"},"content":"        switch (tagName) {"},{"lineNumber":61,"author":{"gitID":"deborahlow97"},"content":"        case \"classmates\":"},{"lineNumber":62,"author":{"gitID":"deborahlow97"},"content":"        case \"owesMoney\":"},{"lineNumber":63,"author":{"gitID":"deborahlow97"},"content":"            return \"teal\";"},{"lineNumber":64,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        case \"colleagues\":"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"        case \"neighbours\":"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":"            return \"yellow\";"},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"        case \"family\":"},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"        case \"friend\":"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"            return \"orange\";"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":73,"author":{"gitID":"deborahlow97"},"content":"        case \"friends\":"},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"            return \"brown\";"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":"        case \"husband\":"},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"            return \"grey\";"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"        default:"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"            return \"\";"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"deborahlow97"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":87,"author":{"gitID":"deborahlow97"},"content":"     * color."},{"lineNumber":88,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"deborahlow97"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":90,"author":{"gitID":"deborahlow97"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":91,"author":{"gitID":"deborahlow97"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitID":"deborahlow97"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":93,"author":{"gitID":"deborahlow97"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":94,"author":{"gitID":"deborahlow97"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":95,"author":{"gitID":"deborahlow97"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Asserts that the level of friendship in {@code actualCard} matches all the tags in {@code expectedPerson} with"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * the correct symbol."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private static void assertLevelOfFriendshipEqual(Person expectedPerson,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                                                PersonCardHandle actualCard) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedLevelOfFriendship \u003d expectedPerson.getLevelOfFriendship().value;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        int levelOfFriendshipInIntegerForm \u003d Integer.parseInt((expectedLevelOfFriendship));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String levelOfFriendshipSymbol \u003d \"\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c levelOfFriendshipInIntegerForm; i++) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            levelOfFriendshipSymbol \u003d levelOfFriendshipSymbol + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(levelOfFriendshipSymbol, actualCard.getLevelOfFriendship());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Changing @param ccaInArrayList into a CCA string in desired format"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * @return ccaInString"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static String getCcasInString(List\u003cString\u003e ccaInArrayList) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        String ccaInString \u003d \"\";"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        for (String temp : ccaInArrayList) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            temp \u003d \"[\" + temp + \"] \";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            ccaInString \u003d ccaInString + temp;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return ccaInString.trim();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":106,"deborahlow97":52}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"fuadsahmawi"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand("},{"lineNumber":59,"author":{"gitID":"fuadsahmawi"},"content":"                AddCommand.COMMAND_ALIAS + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":77,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":93,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"A0158738X"},"content":"    public void parseCommand_meet() throws Exception {"},{"lineNumber":99,"author":{"gitID":"A0158738X"},"content":"        final String date \u003d \"14/10/2018\";"},{"lineNumber":100,"author":{"gitID":"A0158738X"},"content":"        MeetCommand command  \u003d (MeetCommand) parser.parseCommand(MeetCommand.COMMAND_WORD + \" \""},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_DATE + date);"},{"lineNumber":102,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new MeetCommand(INDEX_FIRST_PERSON, new Meet(date)), command);"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":105,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":124,"author":{"gitID":"fuadsahmawi"},"content":"            FindCommand.COMMAND_ALIAS + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")) + \" t/ \");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":132,"author":{"gitID":"fuadsahmawi"},"content":"            FindCommand.COMMAND_ALIAS + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")) + \" t/ \");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":157,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":158,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":176,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":177,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":178,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":183,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":190,"author":{"gitID":"fuadsahmawi"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":202,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"fuadsahmawi"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":208,"author":{"gitID":"fuadsahmawi"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":12,"fuadsahmawi":37,"-":176}},{"path":"src/test/java/seedu/address/logic/parser/MeetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"    private MeetCommandParser parser \u003d new MeetCommandParser();"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"    private final String nonEmptyDate \u003d \"15/03/2018\";"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"    private final String emptyDate \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"    public void parse_indexSpecified_success() throws Exception {"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"        //have a date"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DATE.toString() + nonEmptyDate;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"        MeetCommand expectedCommand \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(nonEmptyDate));"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"        //no date"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DATE.toString() + emptyDate;"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"        expectedCommand \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(emptyDate));"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    public void parse_missingCompulsoryField_failure() throws Exception {"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE);"},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"        // no parameters"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"        assertParseFailure(parser, MeetCommand.COMMAND_WORD, expectedMessage);"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"        // no index"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"        assertParseFailure(parser, MeetCommand.COMMAND_WORD + \" \" + nonEmptyDate, expectedMessage);"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":43,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseSuccess(parser, \" n/ Alice Bob t/\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        assertParseSuccess(parser, \" \\n n/ Alice \\n \\t Bob t/ \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"10-10-2000\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"03/04/1997\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_LEVEL_OF_FRIENDSHIP_AMY \u003d \"1\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_LEVEL_OF_FRIENDSHIP_BOB \u003d \"10\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_UNIT_NUMBER_AMY \u003d \"#10-10\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_UNIT_NUMBER_BOB \u003d \"#05-45\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_CCA_DANCE \u003d \"dance\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_CCA_BADMINTON \u003d \"badminton\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String LEVEL_OF_FRIENDSHIP_DESC_AMY \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + VALID_LEVEL_OF_FRIENDSHIP_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String LEVEL_OF_FRIENDSHIP_DESC_BOB \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + VALID_LEVEL_OF_FRIENDSHIP_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String UNIT_NUMBER_DESC_AMY \u003d \" \" + PREFIX_UNIT_NUMBER + VALID_UNIT_NUMBER_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String UNIT_NUMBER_DESC_BOB \u003d \" \" + PREFIX_UNIT_NUMBER + VALID_UNIT_NUMBER_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String CCA_DESC_DANCE \u003d \" \" + PREFIX_CCA + VALID_CCA_DANCE;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String CCA_DESC_BADMINTON \u003d \" \" + PREFIX_CCA + VALID_CCA_BADMINTON;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            + \"24/15/1997\"; // month is invalid"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_LEVEL_OF_FRIENDSHIP_DESC \u003d \" \" + PREFIX_LEVEL_OF_FRIENDSHIP"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            + \"1Oa\"; // alphabets are not allowed in levelOfFriendships"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_UNIT_NUMBER_DESC \u003d \" \""},{"lineNumber":74,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER; // empty string not allowed for unit number"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_CCA_DESC \u003d \" \" + PREFIX_CCA + \"hubby*\"; // \u0027*\u0027 not allowed in ccas"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withBirthday(VALID_BIRTHDAY_AMY)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_AMY).withUnitNumber(VALID_UNIT_NUMBER_AMY)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withCcas(VALID_CCA_DANCE).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withLevelOfFriendship(VALID_LEVEL_OF_FRIENDSHIP_BOB).withUnitNumber(VALID_UNIT_NUMBER_BOB)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withCcas(VALID_CCA_BADMINTON, VALID_CCA_DANCE).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":175}},{"path":"src/test/java/seedu/address/logic/commands/MeetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.MeetCommand.MESSAGE_ARGUMENTS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":" * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandTest {"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"    public void execute() throws Exception {"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"        final String date \u003d \"14/03/2018\";"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"        assertCommandFailure(prepareCommand(INDEX_FIRST_PERSON, date), model,"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"                String.format(MESSAGE_ARGUMENTS, INDEX_FIRST_PERSON.getOneBased(), date));"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"        String testDate \u003d \"15/03/2018\";"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"        String testDateTwo \u003d \"16/03/2018\";"},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"        final MeetCommand standardCommand \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDate));"},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"        MeetCommand commandWithSameValues \u003d new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDate));"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":56,"author":{"gitID":"A0158738X"},"content":"        // different index -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new MeetCommand(INDEX_SECOND_PERSON, new Meet(testDate))));"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"        // different remark -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"        assertFalse(standardCommand.equals(new MeetCommand(INDEX_FIRST_PERSON, new Meet(testDateTwo))));"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}."},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"A0158738X"},"content":"    private MeetCommand prepareCommand(Index index, String date) {"},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":"        MeetCommand meetCommand \u003d new MeetCommand(index, new Meet(date));"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"        meetCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":"        return meetCommand;"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"}"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":""}],"authorContributionMap":{"A0158738X":69,"-":3}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":99,"author":{"gitID":"zuweitrack"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"zuweitrack"},"content":"        public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":3,"-":103}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        TagContainsKeywordsPredicate thirdPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"third\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand findThirdCommand \u003d new FindCommand(thirdPredicate);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"fuadsahmawi"},"content":"        // null -\u003e returns false"},{"lineNumber":65,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(findThirdCommand.equals(null));"},{"lineNumber":66,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":69,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":70,"author":{"gitID":"fuadsahmawi"},"content":"        // different predicate -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"fuadsahmawi"},"content":"        assertFalse(findFirstCommand.equals(findThirdCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":77,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareNameCommand(\" \");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":84,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareNameCommand(\"Kurz Elle Kunz\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"fuadsahmawi"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"fuadsahmawi"},"content":"    public void execute_multipleTagKeywords_multiplePersonsFound() {"},{"lineNumber":90,"author":{"gitID":"fuadsahmawi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":91,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d prepareTagCommand(\"friends owesMoney\");"},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"    private FindCommand prepareNameCommand(String userInput) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"fuadsahmawi"},"content":"    private FindCommand prepareTagCommand(String userInput) {"},{"lineNumber":109,"author":{"gitID":"fuadsahmawi"},"content":"        FindCommand command \u003d"},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"                new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":28,"-":101}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"zuweitrack"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":127,"author":{"gitID":"zuweitrack"},"content":"        backupAddressBook(null, \"SomeFile.xml.backup\");"},{"lineNumber":128,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":130,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"zuweitrack"},"content":"     * Backup {@code addressBook} at the specified {@code filePath.backup}."},{"lineNumber":132,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"zuweitrack"},"content":"    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":144,"author":{"gitID":"zuweitrack"},"content":"        backupAddressBook(new AddressBook(), null);"},{"lineNumber":145,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":146,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":13,"-":135}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":5,"-":172}},{"path":"src/test/java/seedu/address/model/person/MeetTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"public class MeetTest {"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"        Meet meet \u003d new Meet(\"14/01/2018\");"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"        // same object -\u003e return true"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"        assertTrue(meet.equals(meet));"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"        Meet meetDuplicate \u003d new Meet(meet.value);"},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"        assertTrue(meet.equals(meetDuplicate));"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"        // different types -\u003e returns false"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(\"14/01/2018\"));"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(null));"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"        // different meet -\u003e returns false;"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"        Meet differentMeet \u003d new Meet(\"15/01/2018\");"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"        assertFalse(meet.equals(differentMeet));"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":25,"-":7}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":56,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":28,"-":73}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"01-01-1991\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_LEVEL_OF_FRIENDSHIP \u003d \"1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_UNIT_NUMBER \u003d \"#12-21\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CCAS \u003d \"hockey\";"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    public static final String DEFAULT_DATE \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Birthday birthday;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private LevelOfFriendship levelOfFriendship;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private UnitNumber unitNumber;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cCca\u003e ccas;"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"    private Meet meetDate;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d new LevelOfFriendship(DEFAULT_LEVEL_OF_FRIENDSHIP);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        unitNumber \u003d new UnitNumber(DEFAULT_UNIT_NUMBER);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ccas \u003d SampleDataUtil.getCcaSet(DEFAULT_CCAS);"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d new Meet(DEFAULT_DATE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        birthday \u003d personToCopy.getBirthday();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d personToCopy.getLevelOfFriendship();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        unitNumber \u003d personToCopy.getUnitNumber();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ccas \u003d new HashSet\u003c\u003e(personToCopy.getCcas());"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d personToCopy.getMeetDate();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses the {@code ccas} into a {@code Set\u003cCca\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonBuilder withCcas(String ... ccas) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.ccas \u003d SampleDataUtil.getCcaSet(ccas);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.birthday \u003d new Birthday(birthday);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Sets the {@code LevelOfFriendship} of the {@code Person} that we are building."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public PersonBuilder withLevelOfFriendship(String levelOfFriendship) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d new LevelOfFriendship(levelOfFriendship);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Sets the {@code UnitNumber} of the {@code Person} that we are building."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public PersonBuilder withUnitNumber(String unitNumber) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d new UnitNumber(unitNumber);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":"    public PersonBuilder withMeetDate(String meetDate) {"},{"lineNumber":125,"author":{"gitID":"A0158738X"},"content":"        this.meetDate \u003d new Meet(meetDate);"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":"        return this;"},{"lineNumber":127,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccas, meetDate, tags);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":10,"-":123}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"            .withPerson(AMY).build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getCcaList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cCca\u003e newCcas \u003d new ArrayList\u003c\u003e(ALICE.getCcas());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newCcas, newTags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getCcaList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.getCcaList().remove(0);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"A0158738X"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":91,"author":{"gitID":"A0158738X"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":92,"author":{"gitID":"A0158738X"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":97,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":99,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"A0158738X"},"content":"    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":101,"author":{"gitID":"A0158738X"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":102,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":103,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":104,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":105,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":106,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":108,"author":{"gitID":"A0158738X"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"A0158738X"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":110,"author":{"gitID":"A0158738X"},"content":"        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":111,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":112,"author":{"gitID":"A0158738X"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":113,"author":{"gitID":"A0158738X"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":114,"author":{"gitID":"A0158738X"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":115,"author":{"gitID":"A0158738X"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":116,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":117,"author":{"gitID":"A0158738X"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":118,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cCca\u003e ccas \u003d FXCollections.observableArrayList();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Cca\u003e ccas, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            this.ccas.setAll(ccas);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCca\u003e getCcaList() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return ccas;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":39,"-":111}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String LEVEL_OF_FRIENDSHIP_FIELD_ID \u003d \"#levelOfFriendship\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String UNIT_NUMBER_FIELD_ID \u003d \"#unitNumber\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String CCAS_FIELD_ID \u003d \"#ccas\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"    private static final String MEET_FIELD_ID \u003d \"#meetDate\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label birthdayLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label levelOfFriendshipLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label unitNumberLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Label ccaLabel;"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"    private final Label meetLabel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.levelOfFriendshipLabel \u003d getChildNode(LEVEL_OF_FRIENDSHIP_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.unitNumberLabel \u003d getChildNode(UNIT_NUMBER_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.ccaLabel \u003d getChildNode(CCAS_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":"        this.meetLabel \u003d getChildNode(MEET_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String getBirthday() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return birthdayLabel.getText();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String getLevelOfFriendship() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return levelOfFriendshipLabel.getText();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public String getUnitNumber() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return unitNumberLabel.getText();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String getCcas() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return ccaLabel.getText().trim();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Takes in @param value representing the level of friendship value"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @return a number of hearts string."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public String changeLevelOfFriendshipToHeart(String value) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        int intValue \u003d Integer.parseInt(value);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String heartString \u003d \"\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c intValue; i++) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            heartString \u003d heartString + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return heartString;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"A0158738X"},"content":"    public String getMeetDate() {"},{"lineNumber":94,"author":{"gitID":"A0158738X"},"content":"        return meetLabel.getText();"},{"lineNumber":95,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":104,"author":{"gitID":"deborahlow97"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":107,"author":{"gitID":"deborahlow97"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":108,"author":{"gitID":"deborahlow97"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":109,"author":{"gitID":"deborahlow97"},"content":"                .findFirst()"},{"lineNumber":110,"author":{"gitID":"deborahlow97"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":111,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":7,"-":98,"deborahlow97":7}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"deborahlow97"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d new String[]{\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":21,"author":{"gitID":"deborahlow97"},"content":"                                                                  \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label birthday;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label levelOfFriendship;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label unitNumber;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Label ccas;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"    private Label meetDate;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        birthday.setText(person.getBirthday().value);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        levelOfFriendship.setText(changeLevelOfFriendshipToHeart(person.getLevelOfFriendship().value));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        unitNumber.setText(person.getUnitNumber().value);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ccas.setText(getCcasInString(person.getCcas()));"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"        meetDate.setText(person.getMeetDate().value);"},{"lineNumber":65,"author":{"gitID":"deborahlow97"},"content":"        initTags(person);"},{"lineNumber":66,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":68,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"deborahlow97"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":70,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"deborahlow97"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":72,"author":{"gitID":"deborahlow97"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":"        // between diffe 11rent runs of the program while still making it random enough between tags."},{"lineNumber":74,"author":{"gitID":"deborahlow97"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":75,"author":{"gitID":"deborahlow97"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"deborahlow97"},"content":""},{"lineNumber":77,"author":{"gitID":"deborahlow97"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"deborahlow97"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":79,"author":{"gitID":"deborahlow97"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"deborahlow97"},"content":"    private void initTags(Person person) {"},{"lineNumber":81,"author":{"gitID":"deborahlow97"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":82,"author":{"gitID":"deborahlow97"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":83,"author":{"gitID":"deborahlow97"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":84,"author":{"gitID":"deborahlow97"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":85,"author":{"gitID":"deborahlow97"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private String getCcasInString(Set\u003cCca\u003e ccas) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String ccasValue \u003d \"\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Iterator iterator \u003d ccas.iterator();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            ccasValue \u003d ccasValue + iterator.next().toString() + \" \";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return ccasValue;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Takes in @param value representing the level of friendship value"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @return a number of hearts string."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static String changeLevelOfFriendshipToHeart(String value) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        int intValue \u003d Integer.parseInt(value);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String heartString \u003d \"\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c intValue; i++) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            heartString \u003d heartString + \u0027\\u2665\u0027 + \" \";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return heartString;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":3,"-":101,"deborahlow97":22}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_BIRTHDAY,"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                        PREFIX_LEVEL_OF_FRIENDSHIP, PREFIX_UNIT_NUMBER, PREFIX_CCA, PREFIX_TAG);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_BIRTHDAY, PREFIX_PHONE, PREFIX_UNIT_NUMBER,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                PREFIX_LEVEL_OF_FRIENDSHIP, PREFIX_UNIT_NUMBER)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            UnitNumber unitNumber \u003d ParserUtil.parseUnitNumber(argMultimap.getValue(PREFIX_UNIT_NUMBER)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            LevelOfFriendship levelOfFriendship \u003d ParserUtil.parseLevelOfFriendship(argMultimap"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    .getValue(PREFIX_LEVEL_OF_FRIENDSHIP)).get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            Set\u003cCca\u003e ccaList \u003d ParserUtil.parseCcas(argMultimap.getAllValues(PREFIX_CCA));"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":"            Meet meetDate \u003d new Meet(\"\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccaList, meetDate,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    tagList);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":2,"-":74}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"fuadsahmawi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        Optional\u003cString\u003e name;"},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        Optional\u003cString\u003e tag;"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TAG)"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"        name \u003d argMultimap.getValue(PREFIX_NAME);"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"        tag \u003d argMultimap.getValue(PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"        String[] nameKeywords \u003d name.get().split(\"\\\\s+\");"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        String[] tagKeywords \u003d tag.get().split(\"\\\\s+\");"},{"lineNumber":45,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":46,"author":{"gitID":"fuadsahmawi"},"content":"        if (tag.get().equals(\"\")) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"fuadsahmawi"},"content":"            return new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"fuadsahmawi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"fuadsahmawi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":31,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"@SuppressWarnings(\"CheckStyle\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"fuadsahmawi"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"fuadsahmawi"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"fuadsahmawi"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"fuadsahmawi"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"fuadsahmawi"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"fuadsahmawi"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"fuadsahmawi"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"fuadsahmawi"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"fuadsahmawi"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"fuadsahmawi"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"A0158738X"},"content":"        case MeetCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"A0158738X"},"content":"            return new MeetCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":5,"fuadsahmawi":10,"-":112}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_LEVEL_OF_FRIENDSHIP \u003d new Prefix(\"*/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_UNIT_NUMBER \u003d new Prefix(\"u/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_CCA \u003d new Prefix(\"cca/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/MeetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.MeetCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":" * Parses input arguments and creates a new {@code RemarkCommand} object"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"public class MeetCommandParser implements Parser {"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":"     * and returns a {@code RemarkCommand} object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"    public MeetCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(args);"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);"},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":"        Index index;"},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MeetCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":"        String date \u003d argMultimap.getValue(PREFIX_DATE).orElse(\"\");"},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"        return new MeetCommand(index, new Meet(date));"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":33,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/MeetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":" * Adds a meeting to the address book."},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"public class MeetCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_WORD \u003d \"meet\";"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"    public static final String COMMAND_ALIAS \u003d \"m\";"},{"lineNumber":18,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the date of meetup for the person identified \""},{"lineNumber":20,"author":{"gitID":"A0158738X"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":21,"author":{"gitID":"A0158738X"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":22,"author":{"gitID":"A0158738X"},"content":"            + PREFIX_DATE + \"[REMARK]\\n\""},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"            + PREFIX_DATE + \"01/April/2018\";"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":26,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Person added for meet up on this date. \";"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DUPLICATE_MEETUP \u003d \"This meeting already exists in the calendar\";"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_DATE_BOOKED \u003d \"This date has already been booked for another meeting\";"},{"lineNumber":30,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":31,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"You are meeting person %1$d, Date of meeting: %2$s\";"},{"lineNumber":32,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":33,"author":{"gitID":"A0158738X"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"A0158738X"},"content":"    private final Meet date;"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"     * @param targetIndex of the person in the filtered person list you want to meet"},{"lineNumber":38,"author":{"gitID":"A0158738X"},"content":"     * @param date you want to meet the person"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":41,"author":{"gitID":"A0158738X"},"content":"    public MeetCommand(Index targetIndex, Meet date) {"},{"lineNumber":42,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":43,"author":{"gitID":"A0158738X"},"content":"        requireNonNull(date);"},{"lineNumber":44,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":45,"author":{"gitID":"A0158738X"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":46,"author":{"gitID":"A0158738X"},"content":"        this.date \u003d date;"},{"lineNumber":47,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":49,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"A0158738X"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, targetIndex.getOneBased(), date));"},{"lineNumber":52,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":55,"author":{"gitID":"A0158738X"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"A0158738X"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"A0158738X"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"A0158738X"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"A0158738X"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":62,"author":{"gitID":"A0158738X"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"A0158738X"},"content":"        if (!(other instanceof MeetCommand)) {"},{"lineNumber":64,"author":{"gitID":"A0158738X"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"A0158738X"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":67,"author":{"gitID":"A0158738X"},"content":"        // state check"},{"lineNumber":68,"author":{"gitID":"A0158738X"},"content":"        MeetCommand e \u003d (MeetCommand) other;"},{"lineNumber":69,"author":{"gitID":"A0158738X"},"content":"        return targetIndex.equals(e.targetIndex)"},{"lineNumber":70,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 date.equals(e.date);"},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":73,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":74,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":75,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":76,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":77,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":77}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"LEVEL OF FRIENDSHIP \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"UNIT NUMBER \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"CCA \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"24/05/1997 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_LEVEL_OF_FRIENDSHIP + \"9 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_UNIT_NUMBER + \"#02-25 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"Badminton \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_CCA + \"tennis \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":74}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":2,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"fuadsahmawi"},"content":"    private TagContainsKeywordsPredicate predicateT \u003d null;"},{"lineNumber":22,"author":{"gitID":"fuadsahmawi"},"content":"    private NameContainsKeywordsPredicate predicateN \u003d null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        this.predicateN \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"    public FindCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":"        this.predicateT \u003d predicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"fuadsahmawi"},"content":"        if (predicateT \u003d\u003d null) {"},{"lineNumber":35,"author":{"gitID":"fuadsahmawi"},"content":"            model.updateFilteredPersonList(predicateN);"},{"lineNumber":36,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":37,"author":{"gitID":"fuadsahmawi"},"content":"            model.updateFilteredPersonList(predicateT);"},{"lineNumber":38,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":"        if (this.predicateT \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"fuadsahmawi"},"content":"                    \u0026\u0026 this.predicateN.equals(((FindCommand) other).predicateN)); // state check"},{"lineNumber":48,"author":{"gitID":"fuadsahmawi"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"fuadsahmawi"},"content":"                    \u0026\u0026 this.predicateT.equals(((FindCommand) other).predicateT)); // state check"},{"lineNumber":52,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":20,"-":34}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"zuweitrack"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"zuweitrack"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to a temporary local backup file."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"zuweitrack"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":4,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":36}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"zuweitrack"},"content":"        logger.fine(\"Attempting to write to backup local data file\");"},{"lineNumber":83,"author":{"gitID":"zuweitrack"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":6,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String birthday;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String levelOfFriendship;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String unitNumber;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"A0158738X"},"content":"    private String meetDate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedCca\u003e ccas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String birthday, String levelOfFriendship, String unitNumber,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedCca\u003e ccas, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d unitNumber;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (ccas !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            this.ccas \u003d new ArrayList\u003c\u003e(ccas);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        birthday \u003d source.getBirthday().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        levelOfFriendship \u003d source.getLevelOfFriendship().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        unitNumber \u003d source.getUnitNumber().value;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ccas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        for (Cca cca : source.getCcas()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            ccas.add(new XmlAdaptedCca(cca));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"A0158738X"},"content":"        meetDate \u003d source.getMeetDate().value;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final List\u003cCca\u003e personCcas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        for (XmlAdaptedCca cca : ccas) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            personCcas.add(cca.toModelType());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.birthday \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                    Birthday.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Birthday.isValidBirthday(this.birthday)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Birthday birthday \u003d new Birthday(this.birthday);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (this.levelOfFriendship \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LevelOfFriendship"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    .class.getSimpleName()));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!LevelOfFriendship.isValidLevelOfFriendship(this.levelOfFriendship)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(LevelOfFriendship.MESSAGE_LEVEL_OF_FRIENDSHIP_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final LevelOfFriendship levelOfFriendship \u003d new LevelOfFriendship(this.levelOfFriendship);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"A0158738X"},"content":"        final Meet meetDate \u003d new Meet(this.meetDate);"},{"lineNumber":143,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (this.unitNumber \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                    UnitNumber.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        if (!UnitNumber.isValidUnitNumber(this.unitNumber)) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(UnitNumber.MESSAGE_UNIT_NUMBER_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final UnitNumber unitNumber \u003d new UnitNumber(this.unitNumber);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final Set\u003cCca\u003e ccas \u003d new HashSet\u003c\u003e(personCcas);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        //final Meet meetDate \u003d new Meet(\"\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // TODO: To be fixed in later commit"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return new Person(name, phone, birthday, levelOfFriendship, unitNumber, ccas, meetDate, tags);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(birthday, otherPerson.birthday)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(levelOfFriendship, otherPerson.levelOfFriendship)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(unitNumber, otherPerson.unitNumber)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 ccas.equals(otherPerson.ccas)"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":5,"-":173}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL_OF_FRIENDSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_UNIT_NUMBER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":27,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":44,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_LEVEL_OF_FRIENDSHIP + \"LEVEL OF FRIENDSHIP] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_UNIT_NUMBER + \"UNIT NUMBER] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CCA + \"CCA]... \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + PREFIX_BIRTHDAY + \"21/3/1990 \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        LevelOfFriendship updatedLevelOfFriendship \u003d editPersonDescriptor.getLevelOfFriendship()"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .orElse(personToEdit.getLevelOfFriendship());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        UnitNumber updatedUnitNumber \u003d editPersonDescriptor.getUnitNumber().orElse(personToEdit.getUnitNumber());"},{"lineNumber":120,"author":{"gitID":"A0158738X"},"content":"        Meet updatedMeetDate \u003d personToEdit.getMeetDate();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Set\u003cCca\u003e updatedCcas \u003d editPersonDescriptor.getCcas().orElse(personToEdit.getCcas());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedBirthday, updatedLevelOfFriendship, updatedUnitNumber,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                updatedCcas, updatedMeetDate, updatedTags);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Birthday birthday;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private LevelOfFriendship levelOfFriendship;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private UnitNumber unitNumber;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Set\u003cCca\u003e ccas;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setBirthday(toCopy.birthday);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setLevelOfFriendship(toCopy.levelOfFriendship);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setUnitNumber(toCopy.unitNumber);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setCcas(toCopy.ccas);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":178,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.birthday,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                    this.levelOfFriendship, this.unitNumber, this.ccas, this.tags);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setLevelOfFriendship(LevelOfFriendship levelOfFriendship) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cLevelOfFriendship\u003e getLevelOfFriendship() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(levelOfFriendship);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void setUnitNumber(UnitNumber unitNumber) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            this.unitNumber \u003d unitNumber;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public Optional\u003cUnitNumber\u003e getUnitNumber() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(unitNumber);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"         * Sets {@code ccas} to this object\u0027s {@code ccas}."},{"lineNumber":227,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code ccas} is used internally."},{"lineNumber":228,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public void setCcas(Set\u003cCca\u003e ccas) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            this.ccas \u003d (ccas !\u003d null) ? new HashSet\u003c\u003e(ccas) : null;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable cca set, which throws {@code UnsupportedOperationException}"},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code ccas} is null."},{"lineNumber":237,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cCca\u003e\u003e getCcas() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            return (ccas !\u003d null) ? Optional.of(Collections.unmodifiableSet(ccas)) : Optional.empty();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":252,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":253,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":254,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getLevelOfFriendship().equals(e.getLevelOfFriendship())"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getUnitNumber().equals(e.getUnitNumber())"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getCcas().equals(e.getCcas())"},{"lineNumber":280,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":2,"fuadsahmawi":2,"-":279}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":84,"author":{"gitID":"zuweitrack"},"content":"     * @param addressBook addressBook. Cannot be null"},{"lineNumber":85,"author":{"gitID":"zuweitrack"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"zuweitrack"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"zuweitrack"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":89,"author":{"gitID":"zuweitrack"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":90,"author":{"gitID":"zuweitrack"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"zuweitrack"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"zuweitrack":7,"-":85}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.LevelOfFriendship;"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"import seedu.address.model.person.Meet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UnitNumber;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code CollegeZone} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":24,"author":{"gitID":"A0158738X"},"content":"    public static final Meet EMPTY_MEET_DATE \u003d new Meet(\"\");"},{"lineNumber":25,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Birthday(\"1-01-1997\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"5\"), new UnitNumber(\"#06-40\"), getCcaSet(\"Basketball\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"friends\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Birthday(\"21-2-1990\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"9\"), new UnitNumber(\"#07-18\"), getCcaSet(),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Birthday(\"5/9/1980\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"1\"), new UnitNumber(\"#11-04\"), getCcaSet(\"Swimming\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"neighbours\")),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Birthday(\"20-2-1995\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"6\"), new UnitNumber(\"#16-43\"), getCcaSet(),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"family\")),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Birthday(\"01-01-1999\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"7\"), new UnitNumber(\"#16-41\"), getCcaSet(),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"classmates\")),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Birthday(\"2/04/1995\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new LevelOfFriendship(\"10\"), new UnitNumber(\"#6-43\"), getCcaSet(\"Computing club\", \"Anime Club\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                EMPTY_MEET_DATE, getTagSet(\"colleagues\"))"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns a cca set containing the list of strings given."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static Set\u003cCca\u003e getCcaSet(String... strings) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        HashSet\u003cCca\u003e ccas \u003d new HashSet\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            ccas.add(new Cca(s));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return ccas;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":4,"-":81}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"fuadsahmawi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":3,"author":{"gitID":"fuadsahmawi"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"fuadsahmawi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":10,"author":{"gitID":"fuadsahmawi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"fuadsahmawi"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"fuadsahmawi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":14,"author":{"gitID":"fuadsahmawi"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":15,"author":{"gitID":"fuadsahmawi"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":17,"author":{"gitID":"fuadsahmawi"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"fuadsahmawi"},"content":"        Iterator\u003cTag\u003e ir \u003d person.getTags().iterator();"},{"lineNumber":24,"author":{"gitID":"fuadsahmawi"},"content":"        StringBuilder tag \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitID":"fuadsahmawi"},"content":"        while (ir.hasNext()) {"},{"lineNumber":26,"author":{"gitID":"fuadsahmawi"},"content":"            tag.append(ir.next().tagName);"},{"lineNumber":27,"author":{"gitID":"fuadsahmawi"},"content":"            tag.append(\" \");"},{"lineNumber":28,"author":{"gitID":"fuadsahmawi"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":30,"author":{"gitID":"fuadsahmawi"},"content":"        String tagS \u003d tag.toString();"},{"lineNumber":31,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":32,"author":{"gitID":"fuadsahmawi"},"content":"        return keywords.stream()"},{"lineNumber":33,"author":{"gitID":"fuadsahmawi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tagS, keyword));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"fuadsahmawi"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"fuadsahmawi"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":41,"author":{"gitID":"fuadsahmawi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":43,"author":{"gitID":"fuadsahmawi"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":30,"-":13}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Birthday birthday;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final LevelOfFriendship levelOfFriendship;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final UnitNumber unitNumber;"},{"lineNumber":23,"author":{"gitID":"A0158738X"},"content":"    private final Meet meetDate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueCcaList ccas;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Birthday birthday, LevelOfFriendship levelOfFriendship,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                  UnitNumber unitNumber, Set\u003cCca\u003e ccas, Meet meetDate, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, birthday, levelOfFriendship, unitNumber, ccas, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.levelOfFriendship \u003d levelOfFriendship;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.unitNumber \u003d unitNumber;"},{"lineNumber":39,"author":{"gitID":"A0158738X"},"content":"        this.meetDate \u003d meetDate;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // protect internal tags and ccas from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.ccas \u003d new UniqueCcaList(ccas);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Birthday getBirthday() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return birthday;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public LevelOfFriendship getLevelOfFriendship() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return levelOfFriendship;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public UnitNumber getUnitNumber() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return unitNumber;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns an immutable cca set, which throws {@code UnsupportedOperationException}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public Set\u003cCca\u003e getCcas() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(ccas.toSet());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":72,"author":{"gitID":"A0158738X"},"content":"    public Meet getMeetDate() { return meetDate; }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getLevelOfFriendship().equals(this.getLevelOfFriendship())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getUnitNumber().equals(this.getUnitNumber());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, birthday, levelOfFriendship, unitNumber, ccas, tags);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(\" Birthday: \")"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(getBirthday())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(\" Level Of Friendship: \")"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(getLevelOfFriendship())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(\" Unit Number: \")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(getUnitNumber())"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(\" Ccas: \");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        getCcas().forEach(builder::append);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        builder.append(\" Tags: \");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":4,"-":120}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniqueCcaList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniqueCcaList ccas;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ccas \u003d new UniqueCcaList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates a CollegeZone using the Persons, Ccas and Tags in the {@code toBeCopied}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setCcas(Set\u003cCca\u003e ccas) { this.ccas.setCcas(ccas); }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setCcas(new HashSet\u003c\u003e(newData.getCcaList()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterCcaList)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"CollegeZone should not have duplicate persons\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Adds a person to CollegeZone."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s ccas and tags, and updates {@link #ccas #tags} with any new cca and tags found,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and updates the Cca and Tag objects in the person to point to those in {@link #ccas #tags}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterCcaList(p);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        person \u003d syncWithMasterTagList(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code CollegeZone}\u0027s cca and tag list will be updated with the ccas and tags of {@code editedPerson}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterCcaList(Person)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterCcaList(editedPerson);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        syncedEditedPerson \u003d syncWithMasterTagList(syncedEditedPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        removeUnusedCcas();"},{"lineNumber":126,"author":{"gitID":"A0158738X"},"content":"        removeUnusedTags();"},{"lineNumber":127,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Removes all {@code Ccas}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void removeUnusedCcas() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Set\u003cCca\u003e ccasInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .map(Person::getCcas)"},{"lineNumber":135,"author":{"gitID":"A0158738X"},"content":"                .flatMap(Set::stream)"},{"lineNumber":136,"author":{"gitID":"A0158738X"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ccas.setCcas(ccasInPersons);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"A0158738X"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":141,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"A0158738X"},"content":"    private void removeUnusedTags() {"},{"lineNumber":143,"author":{"gitID":"A0158738X"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":144,"author":{"gitID":"A0158738X"},"content":"                .map(Person::getTags)"},{"lineNumber":145,"author":{"gitID":"A0158738X"},"content":"                .flatMap(Set::stream)"},{"lineNumber":146,"author":{"gitID":"A0158738X"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":147,"author":{"gitID":"A0158738X"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":148,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *  Updates the master cca list to include ccas in {@code person} that are not in the list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every cca in this person points to a Cca object in the master"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private Person syncWithMasterCcaList(Person person) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final UniqueCcaList personCcas \u003d new UniqueCcaList(person.getCcas());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        ccas.mergeFrom(personCcas);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // Create map with values \u003d cca object references in the master list"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // used for checking person cca references"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final Map\u003cCca, Cca\u003e masterCcaObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        ccas.forEach(cca -\u003e masterCcaObjects.put(cca, cca));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"        final Set\u003cCca\u003e correctCcaReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        personCcas.forEach(cca -\u003e correctCcaReferences.add(masterCcaObjects.get(cca)));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":168,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getBirthday(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                person.getLevelOfFriendship(),  person.getUnitNumber(), correctCcaReferences, person.getMeetDate(),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                person.getTags());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":188,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":191,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getBirthday(),"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                person.getLevelOfFriendship(),  person.getUnitNumber(), person.getCcas(), person.getMeetDate(),"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                correctTagReferences);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    //// cca-level operations"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void addCca(Cca cca) throws UniqueCcaList.DuplicateCcaException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        ccas.add(cca);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"A0158738X"},"content":"     * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":221,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"A0158738X"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":223,"author":{"gitID":"A0158738X"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":225,"author":{"gitID":"A0158738X"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":226,"author":{"gitID":"A0158738X"},"content":"            }"},{"lineNumber":227,"author":{"gitID":"A0158738X"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":228,"author":{"gitID":"A0158738X"},"content":"            throw new AssertionError(\"Impossible: original person is obtained from the address book.\");"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"A0158738X"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"A0158738X"},"content":"     * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":234,"author":{"gitID":"A0158738X"},"content":"     * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":235,"author":{"gitID":"A0158738X"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"A0158738X"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"A0158738X"},"content":"        Person newPerson \u003d"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getBirthday(), person.getLevelOfFriendship(),"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                        person.getUnitNumber(), person.getCcas(), person.getMeetDate(), newTags);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":249,"author":{"gitID":"A0158738X"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":250,"author":{"gitID":"A0158738X"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + ccas.asObservableList().size()"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                + \"ccas, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCca\u003e getCcaList() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        return ccas.asObservableList();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":281,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":282,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.ccas.equalsOrderInsensitive(((AddressBook) other).ccas)"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, ccas, tags);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":32,"-":260}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"fuadsahmawi"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"fuadsahmawi":1,"-":54}},{"path":"src/main/java/seedu/address/model/person/Meet.java","lines":[{"lineNumber":1,"author":{"gitID":"A0158738X"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":5,"author":{"gitID":"A0158738X"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"A0158738X"},"content":" * Represents a Person\u0027s date of meeting in the address book."},{"lineNumber":7,"author":{"gitID":"A0158738X"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":8,"author":{"gitID":"A0158738X"},"content":" */"},{"lineNumber":9,"author":{"gitID":"A0158738X"},"content":"public class Meet {"},{"lineNumber":10,"author":{"gitID":"A0158738X"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitID":"A0158738X"},"content":"            \"Make sure date is in this format: DD/MM/YYYY\";"},{"lineNumber":12,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0158738X"},"content":"    public final String value;"},{"lineNumber":14,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":15,"author":{"gitID":"A0158738X"},"content":"    public Meet(String meet) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        //requireNonNull(meet);"},{"lineNumber":17,"author":{"gitID":"A0158738X"},"content":"        this.value \u003d meet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"A0158738X"},"content":"                || (other instanceof Meet // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"A0158738X"},"content":"                \u0026\u0026 this.value.equals(((Meet) other).value)); // state check"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":35,"author":{"gitID":"A0158738X"},"content":""},{"lineNumber":36,"author":{"gitID":"A0158738X"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"A0158738X"},"content":"}"}],"authorContributionMap":{"A0158738X":20,"-":17}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"A0158738X"},"content":"    /** Removes the given {@code tag} from all {@code Person}s. */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"A0158738X":1,"-":52}}]
